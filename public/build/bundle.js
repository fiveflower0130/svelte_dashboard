
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35731/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(window.document);
var app = (function () {
    'use strict';

    function noop() { }
    const identity = x => x;
    function assign(tar, src) {
        // @ts-ignore
        for (const k in src)
            tar[k] = src[k];
        return tar;
    }
    function add_location(element, file, line, column, char) {
        element.__svelte_meta = {
            loc: { file, line, column, char }
        };
    }
    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }
    let src_url_equal_anchor;
    function src_url_equal(element_src, url) {
        if (!src_url_equal_anchor) {
            src_url_equal_anchor = document.createElement('a');
        }
        src_url_equal_anchor.href = url;
        return element_src === src_url_equal_anchor.href;
    }
    function is_empty(obj) {
        return Object.keys(obj).length === 0;
    }
    function validate_store(store, name) {
        if (store != null && typeof store.subscribe !== 'function') {
            throw new Error(`'${name}' is not a store with a 'subscribe' method`);
        }
    }
    function subscribe$1(store, ...callbacks) {
        if (store == null) {
            return noop;
        }
        const unsub = store.subscribe(...callbacks);
        return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
    }
    function component_subscribe(component, store, callback) {
        component.$$.on_destroy.push(subscribe$1(store, callback));
    }
    function create_slot(definition, ctx, $$scope, fn) {
        if (definition) {
            const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);
            return definition[0](slot_ctx);
        }
    }
    function get_slot_context(definition, ctx, $$scope, fn) {
        return definition[1] && fn
            ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))
            : $$scope.ctx;
    }
    function get_slot_changes(definition, $$scope, dirty, fn) {
        if (definition[2] && fn) {
            const lets = definition[2](fn(dirty));
            if ($$scope.dirty === undefined) {
                return lets;
            }
            if (typeof lets === 'object') {
                const merged = [];
                const len = Math.max($$scope.dirty.length, lets.length);
                for (let i = 0; i < len; i += 1) {
                    merged[i] = $$scope.dirty[i] | lets[i];
                }
                return merged;
            }
            return $$scope.dirty | lets;
        }
        return $$scope.dirty;
    }
    function update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {
        if (slot_changes) {
            const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
            slot.p(slot_context, slot_changes);
        }
    }
    function get_all_dirty_from_scope($$scope) {
        if ($$scope.ctx.length > 32) {
            const dirty = [];
            const length = $$scope.ctx.length / 32;
            for (let i = 0; i < length; i++) {
                dirty[i] = -1;
            }
            return dirty;
        }
        return -1;
    }
    function exclude_internal_props(props) {
        const result = {};
        for (const k in props)
            if (k[0] !== '$')
                result[k] = props[k];
        return result;
    }
    function action_destroyer(action_result) {
        return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;
    }
    function split_css_unit(value) {
        const split = typeof value === 'string' && value.match(/^\s*(-?[\d.]+)([^\s]*)\s*$/);
        return split ? [parseFloat(split[1]), split[2] || 'px'] : [value, 'px'];
    }

    const is_client = typeof window !== 'undefined';
    let now = is_client
        ? () => window.performance.now()
        : () => Date.now();
    let raf = is_client ? cb => requestAnimationFrame(cb) : noop;

    const tasks = new Set();
    function run_tasks(now) {
        tasks.forEach(task => {
            if (!task.c(now)) {
                tasks.delete(task);
                task.f();
            }
        });
        if (tasks.size !== 0)
            raf(run_tasks);
    }
    /**
     * Creates a new task that runs on each raf frame
     * until it returns a falsy value or is aborted
     */
    function loop(callback) {
        let task;
        if (tasks.size === 0)
            raf(run_tasks);
        return {
            promise: new Promise(fulfill => {
                tasks.add(task = { c: callback, f: fulfill });
            }),
            abort() {
                tasks.delete(task);
            }
        };
    }

    const globals = (typeof window !== 'undefined'
        ? window
        : typeof globalThis !== 'undefined'
            ? globalThis
            : global);
    function append(target, node) {
        target.appendChild(node);
    }
    function get_root_for_style(node) {
        if (!node)
            return document;
        const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;
        if (root && root.host) {
            return root;
        }
        return node.ownerDocument;
    }
    function append_empty_stylesheet(node) {
        const style_element = element('style');
        append_stylesheet(get_root_for_style(node), style_element);
        return style_element.sheet;
    }
    function append_stylesheet(node, style) {
        append(node.head || node, style);
        return style.sheet;
    }
    function insert(target, node, anchor) {
        target.insertBefore(node, anchor || null);
    }
    function detach(node) {
        if (node.parentNode) {
            node.parentNode.removeChild(node);
        }
    }
    function destroy_each(iterations, detaching) {
        for (let i = 0; i < iterations.length; i += 1) {
            if (iterations[i])
                iterations[i].d(detaching);
        }
    }
    function element(name) {
        return document.createElement(name);
    }
    function svg_element(name) {
        return document.createElementNS('http://www.w3.org/2000/svg', name);
    }
    function text(data) {
        return document.createTextNode(data);
    }
    function space() {
        return text(' ');
    }
    function empty() {
        return text('');
    }
    function listen(node, event, handler, options) {
        node.addEventListener(event, handler, options);
        return () => node.removeEventListener(event, handler, options);
    }
    function attr(node, attribute, value) {
        if (value == null)
            node.removeAttribute(attribute);
        else if (node.getAttribute(attribute) !== value)
            node.setAttribute(attribute, value);
    }
    /**
     * List of attributes that should always be set through the attr method,
     * because updating them through the property setter doesn't work reliably.
     * In the example of `width`/`height`, the problem is that the setter only
     * accepts numeric values, but the attribute can also be set to a string like `50%`.
     * If this list becomes too big, rethink this approach.
     */
    const always_set_through_set_attribute = ['width', 'height'];
    function set_attributes(node, attributes) {
        // @ts-ignore
        const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);
        for (const key in attributes) {
            if (attributes[key] == null) {
                node.removeAttribute(key);
            }
            else if (key === 'style') {
                node.style.cssText = attributes[key];
            }
            else if (key === '__value') {
                node.value = node[key] = attributes[key];
            }
            else if (descriptors[key] && descriptors[key].set && always_set_through_set_attribute.indexOf(key) === -1) {
                node[key] = attributes[key];
            }
            else {
                attr(node, key, attributes[key]);
            }
        }
    }
    function children(element) {
        return Array.from(element.childNodes);
    }
    function set_input_value(input, value) {
        input.value = value == null ? '' : value;
    }
    function set_style(node, key, value, important) {
        if (value == null) {
            node.style.removeProperty(key);
        }
        else {
            node.style.setProperty(key, value, important ? 'important' : '');
        }
    }
    function select_option(select, value, mounting) {
        for (let i = 0; i < select.options.length; i += 1) {
            const option = select.options[i];
            if (option.__value === value) {
                option.selected = true;
                return;
            }
        }
        if (!mounting || value !== undefined) {
            select.selectedIndex = -1; // no option should be selected
        }
    }
    function select_options(select, value) {
        for (let i = 0; i < select.options.length; i += 1) {
            const option = select.options[i];
            option.selected = ~value.indexOf(option.__value);
        }
    }
    function select_value(select) {
        const selected_option = select.querySelector(':checked');
        return selected_option && selected_option.__value;
    }
    function select_multiple_value(select) {
        return [].map.call(select.querySelectorAll(':checked'), option => option.__value);
    }
    function toggle_class(element, name, toggle) {
        element.classList[toggle ? 'add' : 'remove'](name);
    }
    function custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {
        const e = document.createEvent('CustomEvent');
        e.initCustomEvent(type, bubbles, cancelable, detail);
        return e;
    }
    class HtmlTag {
        constructor(is_svg = false) {
            this.is_svg = false;
            this.is_svg = is_svg;
            this.e = this.n = null;
        }
        c(html) {
            this.h(html);
        }
        m(html, target, anchor = null) {
            if (!this.e) {
                if (this.is_svg)
                    this.e = svg_element(target.nodeName);
                /** #7364  target for <template> may be provided as #document-fragment(11) */
                else
                    this.e = element((target.nodeType === 11 ? 'TEMPLATE' : target.nodeName));
                this.t = target.tagName !== 'TEMPLATE' ? target : target.content;
                this.c(html);
            }
            this.i(anchor);
        }
        h(html) {
            this.e.innerHTML = html;
            this.n = Array.from(this.e.nodeName === 'TEMPLATE' ? this.e.content.childNodes : this.e.childNodes);
        }
        i(anchor) {
            for (let i = 0; i < this.n.length; i += 1) {
                insert(this.t, this.n[i], anchor);
            }
        }
        p(html) {
            this.d();
            this.h(html);
            this.i(this.a);
        }
        d() {
            this.n.forEach(detach);
        }
    }

    // we need to store the information for multiple documents because a Svelte application could also contain iframes
    // https://github.com/sveltejs/svelte/issues/3624
    const managed_styles = new Map();
    let active = 0;
    // https://github.com/darkskyapp/string-hash/blob/master/index.js
    function hash(str) {
        let hash = 5381;
        let i = str.length;
        while (i--)
            hash = ((hash << 5) - hash) ^ str.charCodeAt(i);
        return hash >>> 0;
    }
    function create_style_information(doc, node) {
        const info = { stylesheet: append_empty_stylesheet(node), rules: {} };
        managed_styles.set(doc, info);
        return info;
    }
    function create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {
        const step = 16.666 / duration;
        let keyframes = '{\n';
        for (let p = 0; p <= 1; p += step) {
            const t = a + (b - a) * ease(p);
            keyframes += p * 100 + `%{${fn(t, 1 - t)}}\n`;
        }
        const rule = keyframes + `100% {${fn(b, 1 - b)}}\n}`;
        const name = `__svelte_${hash(rule)}_${uid}`;
        const doc = get_root_for_style(node);
        const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);
        if (!rules[name]) {
            rules[name] = true;
            stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);
        }
        const animation = node.style.animation || '';
        node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;
        active += 1;
        return name;
    }
    function delete_rule(node, name) {
        const previous = (node.style.animation || '').split(', ');
        const next = previous.filter(name
            ? anim => anim.indexOf(name) < 0 // remove specific animation
            : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations
        );
        const deleted = previous.length - next.length;
        if (deleted) {
            node.style.animation = next.join(', ');
            active -= deleted;
            if (!active)
                clear_rules();
        }
    }
    function clear_rules() {
        raf(() => {
            if (active)
                return;
            managed_styles.forEach(info => {
                const { ownerNode } = info.stylesheet;
                // there is no ownerNode if it runs on jsdom.
                if (ownerNode)
                    detach(ownerNode);
            });
            managed_styles.clear();
        });
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }
    function get_current_component() {
        if (!current_component)
            throw new Error('Function called outside component initialization');
        return current_component;
    }
    /**
     * The `onMount` function schedules a callback to run as soon as the component has been mounted to the DOM.
     * It must be called during the component's initialisation (but doesn't need to live *inside* the component;
     * it can be called from an external module).
     *
     * `onMount` does not run inside a [server-side component](/docs#run-time-server-side-component-api).
     *
     * https://svelte.dev/docs#run-time-svelte-onmount
     */
    function onMount(fn) {
        get_current_component().$$.on_mount.push(fn);
    }
    /**
     * Schedules a callback to run immediately after the component has been updated.
     *
     * The first time the callback runs will be after the initial `onMount`
     */
    function afterUpdate(fn) {
        get_current_component().$$.after_update.push(fn);
    }
    /**
     * Schedules a callback to run immediately before the component is unmounted.
     *
     * Out of `onMount`, `beforeUpdate`, `afterUpdate` and `onDestroy`, this is the
     * only one that runs inside a server-side component.
     *
     * https://svelte.dev/docs#run-time-svelte-ondestroy
     */
    function onDestroy(fn) {
        get_current_component().$$.on_destroy.push(fn);
    }
    /**
     * Creates an event dispatcher that can be used to dispatch [component events](/docs#template-syntax-component-directives-on-eventname).
     * Event dispatchers are functions that can take two arguments: `name` and `detail`.
     *
     * Component events created with `createEventDispatcher` create a
     * [CustomEvent](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent).
     * These events do not [bubble](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture).
     * The `detail` argument corresponds to the [CustomEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/detail)
     * property and can contain any type of data.
     *
     * https://svelte.dev/docs#run-time-svelte-createeventdispatcher
     */
    function createEventDispatcher() {
        const component = get_current_component();
        return (type, detail, { cancelable = false } = {}) => {
            const callbacks = component.$$.callbacks[type];
            if (callbacks) {
                // TODO are there situations where events could be dispatched
                // in a server (non-DOM) environment?
                const event = custom_event(type, detail, { cancelable });
                callbacks.slice().forEach(fn => {
                    fn.call(component, event);
                });
                return !event.defaultPrevented;
            }
            return true;
        };
    }
    // TODO figure out if we still want to support
    // shorthand events, or if we want to implement
    // a real bubbling mechanism
    function bubble(component, event) {
        const callbacks = component.$$.callbacks[event.type];
        if (callbacks) {
            // @ts-ignore
            callbacks.slice().forEach(fn => fn.call(this, event));
        }
    }

    const dirty_components = [];
    const binding_callbacks = [];
    let render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = /* @__PURE__ */ Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    function add_flush_callback(fn) {
        flush_callbacks.push(fn);
    }
    // flush() calls callbacks in this order:
    // 1. All beforeUpdate callbacks, in order: parents before children
    // 2. All bind:this callbacks, in reverse order: children before parents.
    // 3. All afterUpdate callbacks, in order: parents before children. EXCEPT
    //    for afterUpdates called during the initial onMount, which are called in
    //    reverse order: children before parents.
    // Since callbacks might update component values, which could trigger another
    // call to flush(), the following steps guard against this:
    // 1. During beforeUpdate, any updated components will be added to the
    //    dirty_components array and will cause a reentrant call to flush(). Because
    //    the flush index is kept outside the function, the reentrant call will pick
    //    up where the earlier call left off and go through all dirty components. The
    //    current_component value is saved and restored so that the reentrant call will
    //    not interfere with the "parent" flush() call.
    // 2. bind:this callbacks cannot trigger new flush() calls.
    // 3. During afterUpdate, any updated components will NOT have their afterUpdate
    //    callback called a second time; the seen_callbacks set, outside the flush()
    //    function, guarantees this behavior.
    const seen_callbacks = new Set();
    let flushidx = 0; // Do *not* move this inside the flush() function
    function flush() {
        // Do not reenter flush while dirty components are updated, as this can
        // result in an infinite loop. Instead, let the inner flush handle it.
        // Reentrancy is ok afterwards for bindings etc.
        if (flushidx !== 0) {
            return;
        }
        const saved_component = current_component;
        do {
            // first, call beforeUpdate functions
            // and update components
            try {
                while (flushidx < dirty_components.length) {
                    const component = dirty_components[flushidx];
                    flushidx++;
                    set_current_component(component);
                    update(component.$$);
                }
            }
            catch (e) {
                // reset dirty state to not end up in a deadlocked state and then rethrow
                dirty_components.length = 0;
                flushidx = 0;
                throw e;
            }
            set_current_component(null);
            dirty_components.length = 0;
            flushidx = 0;
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        seen_callbacks.clear();
        set_current_component(saved_component);
    }
    function update($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }
    /**
     * Useful for example to execute remaining `afterUpdate` callbacks before executing `destroy`.
     */
    function flush_render_callbacks(fns) {
        const filtered = [];
        const targets = [];
        render_callbacks.forEach((c) => fns.indexOf(c) === -1 ? filtered.push(c) : targets.push(c));
        targets.forEach((c) => c());
        render_callbacks = filtered;
    }

    let promise;
    function wait() {
        if (!promise) {
            promise = Promise.resolve();
            promise.then(() => {
                promise = null;
            });
        }
        return promise;
    }
    function dispatch(node, direction, kind) {
        node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));
    }
    const outroing = new Set();
    let outros;
    function group_outros() {
        outros = {
            r: 0,
            c: [],
            p: outros // parent group
        };
    }
    function check_outros() {
        if (!outros.r) {
            run_all(outros.c);
        }
        outros = outros.p;
    }
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function transition_out(block, local, detach, callback) {
        if (block && block.o) {
            if (outroing.has(block))
                return;
            outroing.add(block);
            outros.c.push(() => {
                outroing.delete(block);
                if (callback) {
                    if (detach)
                        block.d(1);
                    callback();
                }
            });
            block.o(local);
        }
        else if (callback) {
            callback();
        }
    }
    const null_transition = { duration: 0 };
    function create_bidirectional_transition(node, fn, params, intro) {
        const options = { direction: 'both' };
        let config = fn(node, params, options);
        let t = intro ? 0 : 1;
        let running_program = null;
        let pending_program = null;
        let animation_name = null;
        function clear_animation() {
            if (animation_name)
                delete_rule(node, animation_name);
        }
        function init(program, duration) {
            const d = (program.b - t);
            duration *= Math.abs(d);
            return {
                a: t,
                b: program.b,
                d,
                duration,
                start: program.start,
                end: program.start + duration,
                group: program.group
            };
        }
        function go(b) {
            const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;
            const program = {
                start: now() + delay,
                b
            };
            if (!b) {
                // @ts-ignore todo: improve typings
                program.group = outros;
                outros.r += 1;
            }
            if (running_program || pending_program) {
                pending_program = program;
            }
            else {
                // if this is an intro, and there's a delay, we need to do
                // an initial tick and/or apply CSS animation immediately
                if (css) {
                    clear_animation();
                    animation_name = create_rule(node, t, b, duration, delay, easing, css);
                }
                if (b)
                    tick(0, 1);
                running_program = init(program, duration);
                add_render_callback(() => dispatch(node, b, 'start'));
                loop(now => {
                    if (pending_program && now > pending_program.start) {
                        running_program = init(pending_program, duration);
                        pending_program = null;
                        dispatch(node, running_program.b, 'start');
                        if (css) {
                            clear_animation();
                            animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);
                        }
                    }
                    if (running_program) {
                        if (now >= running_program.end) {
                            tick(t = running_program.b, 1 - t);
                            dispatch(node, running_program.b, 'end');
                            if (!pending_program) {
                                // we're done
                                if (running_program.b) {
                                    // intro — we can tidy up immediately
                                    clear_animation();
                                }
                                else {
                                    // outro — needs to be coordinated
                                    if (!--running_program.group.r)
                                        run_all(running_program.group.c);
                                }
                            }
                            running_program = null;
                        }
                        else if (now >= running_program.start) {
                            const p = now - running_program.start;
                            t = running_program.a + running_program.d * easing(p / running_program.duration);
                            tick(t, 1 - t);
                        }
                    }
                    return !!(running_program || pending_program);
                });
            }
        }
        return {
            run(b) {
                if (is_function(config)) {
                    wait().then(() => {
                        // @ts-ignore
                        config = config(options);
                        go(b);
                    });
                }
                else {
                    go(b);
                }
            },
            end() {
                clear_animation();
                running_program = pending_program = null;
            }
        };
    }

    function get_spread_update(levels, updates) {
        const update = {};
        const to_null_out = {};
        const accounted_for = { $$scope: 1 };
        let i = levels.length;
        while (i--) {
            const o = levels[i];
            const n = updates[i];
            if (n) {
                for (const key in o) {
                    if (!(key in n))
                        to_null_out[key] = 1;
                }
                for (const key in n) {
                    if (!accounted_for[key]) {
                        update[key] = n[key];
                        accounted_for[key] = 1;
                    }
                }
                levels[i] = n;
            }
            else {
                for (const key in o) {
                    accounted_for[key] = 1;
                }
            }
        }
        for (const key in to_null_out) {
            if (!(key in update))
                update[key] = undefined;
        }
        return update;
    }
    function get_spread_object(spread_props) {
        return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};
    }

    function bind(component, name, callback) {
        const index = component.$$.props[name];
        if (index !== undefined) {
            component.$$.bound[index] = callback;
            callback(component.$$.ctx[index]);
        }
    }
    function create_component(block) {
        block && block.c();
    }
    function mount_component(component, target, anchor, customElement) {
        const { fragment, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        if (!customElement) {
            // onMount happens before the initial afterUpdate
            add_render_callback(() => {
                const new_on_destroy = component.$$.on_mount.map(run).filter(is_function);
                // if the component was destroyed immediately
                // it will update the `$$.on_destroy` reference to `null`.
                // the destructured on_destroy may still reference to the old array
                if (component.$$.on_destroy) {
                    component.$$.on_destroy.push(...new_on_destroy);
                }
                else {
                    // Edge case - component was destroyed immediately,
                    // most likely as a result of a binding initialising
                    run_all(new_on_destroy);
                }
                component.$$.on_mount = [];
            });
        }
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            flush_render_callbacks($$.after_update);
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const $$ = component.$$ = {
            fragment: null,
            ctx: [],
            // state
            props,
            update: noop,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            on_disconnect: [],
            before_update: [],
            after_update: [],
            context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
            // everything else
            callbacks: blank_object(),
            dirty,
            skip_bound: false,
            root: options.target || parent_component.$$.root
        };
        append_styles && append_styles($$.root);
        let ready = false;
        $$.ctx = instance
            ? instance(component, options.props || {}, (i, ret, ...rest) => {
                const value = rest.length ? rest[0] : ret;
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if (!$$.skip_bound && $$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                const nodes = children(options.target);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(nodes);
                nodes.forEach(detach);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor, options.customElement);
            flush();
        }
        set_current_component(parent_component);
    }
    /**
     * Base class for Svelte components. Used when dev=false.
     */
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop;
        }
        $on(type, callback) {
            if (!is_function(callback)) {
                return noop;
            }
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set($$props) {
            if (this.$$set && !is_empty($$props)) {
                this.$$.skip_bound = true;
                this.$$set($$props);
                this.$$.skip_bound = false;
            }
        }
    }

    function dispatch_dev(type, detail) {
        document.dispatchEvent(custom_event(type, Object.assign({ version: '3.59.2' }, detail), { bubbles: true }));
    }
    function append_dev(target, node) {
        dispatch_dev('SvelteDOMInsert', { target, node });
        append(target, node);
    }
    function insert_dev(target, node, anchor) {
        dispatch_dev('SvelteDOMInsert', { target, node, anchor });
        insert(target, node, anchor);
    }
    function detach_dev(node) {
        dispatch_dev('SvelteDOMRemove', { node });
        detach(node);
    }
    function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation, has_stop_immediate_propagation) {
        const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];
        if (has_prevent_default)
            modifiers.push('preventDefault');
        if (has_stop_propagation)
            modifiers.push('stopPropagation');
        if (has_stop_immediate_propagation)
            modifiers.push('stopImmediatePropagation');
        dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });
        const dispose = listen(node, event, handler, options);
        return () => {
            dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });
            dispose();
        };
    }
    function attr_dev(node, attribute, value) {
        attr(node, attribute, value);
        if (value == null)
            dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });
        else
            dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });
    }
    function prop_dev(node, property, value) {
        node[property] = value;
        dispatch_dev('SvelteDOMSetProperty', { node, property, value });
    }
    function set_data_dev(text, data) {
        data = '' + data;
        if (text.data === data)
            return;
        dispatch_dev('SvelteDOMSetData', { node: text, data });
        text.data = data;
    }
    function validate_each_argument(arg) {
        if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {
            let msg = '{#each} only iterates over array-like objects.';
            if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {
                msg += ' You can use a spread to convert this iterable into an array.';
            }
            throw new Error(msg);
        }
    }
    function validate_slots(name, slot, keys) {
        for (const slot_key of Object.keys(slot)) {
            if (!~keys.indexOf(slot_key)) {
                console.warn(`<${name}> received an unexpected slot "${slot_key}".`);
            }
        }
    }
    function construct_svelte_component_dev(component, props) {
        const error_message = 'this={...} of <svelte:component> should specify a Svelte component.';
        try {
            const instance = new component(props);
            if (!instance.$$ || !instance.$set || !instance.$on || !instance.$destroy) {
                throw new Error(error_message);
            }
            return instance;
        }
        catch (err) {
            const { message } = err;
            if (typeof message === 'string' && message.indexOf('is not a constructor') !== -1) {
                throw new Error(error_message);
            }
            else {
                throw err;
            }
        }
    }
    /**
     * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.
     */
    class SvelteComponentDev extends SvelteComponent {
        constructor(options) {
            if (!options || (!options.target && !options.$$inline)) {
                throw new Error("'target' is a required option");
            }
            super();
        }
        $destroy() {
            super.$destroy();
            this.$destroy = () => {
                console.warn('Component was already destroyed'); // eslint-disable-line no-console
            };
        }
        $capture_state() { }
        $inject_state() { }
    }

    const subscriber_queue = [];
    /**
     * Create a `Writable` store that allows both updating and reading by subscription.
     * @param {*=}value initial value
     * @param {StartStopNotifier=} start
     */
    function writable(value, start = noop) {
        let stop;
        const subscribers = new Set();
        function set(new_value) {
            if (safe_not_equal(value, new_value)) {
                value = new_value;
                if (stop) { // store is ready
                    const run_queue = !subscriber_queue.length;
                    for (const subscriber of subscribers) {
                        subscriber[1]();
                        subscriber_queue.push(subscriber, value);
                    }
                    if (run_queue) {
                        for (let i = 0; i < subscriber_queue.length; i += 2) {
                            subscriber_queue[i][0](subscriber_queue[i + 1]);
                        }
                        subscriber_queue.length = 0;
                    }
                }
            }
        }
        function update(fn) {
            set(fn(value));
        }
        function subscribe(run, invalidate = noop) {
            const subscriber = [run, invalidate];
            subscribers.add(subscriber);
            if (subscribers.size === 1) {
                stop = start(set) || noop;
            }
            run(value);
            return () => {
                subscribers.delete(subscriber);
                if (subscribers.size === 0 && stop) {
                    stop();
                    stop = null;
                }
            };
        }
        return { set, update, subscribe };
    }

    const { set: set$1, subscribe } = writable({});

    const remove = () => {
      set$1({});
    };

    const activeRoute = {
      subscribe,
      set: set$1,
      remove,
    };

    const UrlParser = (urlString, namedUrl = '') => {
      const urlBase = new URL(urlString);

      /**
       * Wrapper for URL.hash
       *
       **/
      function hash() {
        return urlBase.hash;
      }

      /**
       * Wrapper for URL.host
       *
       **/
      function host() {
        return urlBase.host;
      }

      /**
       * Wrapper for URL.hostname
       *
       **/
      function hostname() {
        return urlBase.hostname;
      }

      /**
       * Returns an object with all the named params and their values
       *
       **/
      function namedParams() {
        const allPathName = pathNames();
        const allNamedParamsKeys = namedParamsWithIndex();

        return allNamedParamsKeys.reduce((values, paramKey) => {
          values[paramKey.value] = allPathName[paramKey.index];
          return values;
        }, {});
      }

      /**
       * Returns an array with all the named param keys
       *
       **/
      function namedParamsKeys() {
        const allNamedParamsKeys = namedParamsWithIndex();

        return allNamedParamsKeys.reduce((values, paramKey) => {
          values.push(paramKey.value);
          return values;
        }, []);
      }

      /**
       * Returns an array with all the named param values
       *
       **/
      function namedParamsValues() {
        const allPathName = pathNames();
        const allNamedParamsKeys = namedParamsWithIndex();

        return allNamedParamsKeys.reduce((values, paramKey) => {
          values.push(allPathName[paramKey.index]);
          return values;
        }, []);
      }

      /**
       * Returns an array with all named param ids and their position in the path
       * Private
       **/
      function namedParamsWithIndex() {
        const namedUrlParams = getPathNames(namedUrl);

        return namedUrlParams.reduce((validParams, param, index) => {
          if (param[0] === ':') {
            validParams.push({ value: param.slice(1), index });
          }
          return validParams;
        }, []);
      }

      /**
       * Wrapper for URL.port
       *
       **/
      function port() {
        return urlBase.port;
      }

      /**
       * Wrapper for URL.pathname
       *
       **/
      function pathname() {
        return urlBase.pathname;
      }

      /**
       * Wrapper for URL.protocol
       *
       **/
      function protocol() {
        return urlBase.protocol;
      }

      /**
       * Wrapper for URL.search
       *
       **/
      function search() {
        return urlBase.search;
      }

      /**
       * Returns an object with all query params and their values
       *
       **/
      function queryParams() {
        const params = {};
        urlBase.searchParams.forEach((value, key) => {
          params[key] = value;
        });

        return params;
      }

      /**
       * Returns an array with all the query param keys
       *
       **/
      function queryParamsKeys() {
        const params = [];
        urlBase.searchParams.forEach((_value, key) => {
          params.push(key);
        });

        return params;
      }

      /**
       * Returns an array with all the query param values
       *
       **/
      function queryParamsValues() {
        const params = [];
        urlBase.searchParams.forEach((value) => {
          params.push(value);
        });

        return params;
      }

      /**
       * Returns an array with all the elements of a pathname
       *
       **/
      function pathNames() {
        return getPathNames(urlBase.pathname);
      }

      /**
       * Returns an array with all the parts of a pathname
       * Private method
       **/
      function getPathNames(pathName) {
        if (pathName === '/' || pathName.trim().length === 0) return [pathName];
        if (pathName.slice(-1) === '/') {
          pathName = pathName.slice(0, -1);
        }
        if (pathName[0] === '/') {
          pathName = pathName.slice(1);
        }

        return pathName.split('/');
      }

      return Object.freeze({
        hash: hash(),
        host: host(),
        hostname: hostname(),
        namedParams: namedParams(),
        namedParamsKeys: namedParamsKeys(),
        namedParamsValues: namedParamsValues(),
        pathNames: pathNames(),
        port: port(),
        pathname: pathname(),
        protocol: protocol(),
        search: search(),
        queryParams: queryParams(),
        queryParamsKeys: queryParamsKeys(),
        queryParamsValues: queryParamsValues(),
      });
    };

    /**
     * Returns true if object has any nested routes empty
     * @param routeObject
     **/
    const anyEmptyNestedRoutes = (routeObject) => {
      let result = false;
      if (Object.keys(routeObject).length === 0) {
        return true;
      }

      if (routeObject.childRoute && Object.keys(routeObject.childRoute).length === 0) {
        result = true;
      } else if (routeObject.childRoute) {
        result = anyEmptyNestedRoutes(routeObject.childRoute);
      }

      return result;
    };

    /**
     * Compare two routes ignoring named params
     * @param pathName string
     * @param routeName string
     **/

    const compareRoutes = (pathName, routeName) => {
      routeName = removeSlash(routeName);

      if (routeName.includes(':')) {
        return routeName.includes(pathName);
      } else {
        return routeName.startsWith(pathName);
      }
    };

    /**
     * Returns a boolean indicating if the name of path exists in the route based on the language parameter
     * @param pathName string
     * @param route object
     * @param language string
     **/

    const findLocalisedRoute = (pathName, route, language) => {
      let exists = false;

      if (language) {
        return { exists: route.lang && route.lang[language] && route.lang[language].includes(pathName), language };
      }

      exists = compareRoutes(pathName, route.name);

      if (!exists && route.lang && typeof route.lang === 'object') {
        for (const [key, value] of Object.entries(route.lang)) {
          if (compareRoutes(pathName, value)) {
            exists = true;
            language = key;
          }
        }
      }

      return { exists, language };
    };

    /**
     * Return all the consecutive named param (placeholders) of a pathname
     * @param pathname
     **/
    const getNamedParams = (pathName = '') => {
      if (pathName.trim().length === 0) return [];
      const namedUrlParams = getPathNames(pathName);
      return namedUrlParams.reduce((validParams, param) => {
        if (param[0] === ':') {
          validParams.push(param.slice(1));
        }

        return validParams;
      }, []);
    };

    /**
     * Split a pathname based on /
     * @param pathName
     * Private method
     **/
    const getPathNames = (pathName) => {
      if (pathName === '/' || pathName.trim().length === 0) return [pathName];

      pathName = removeSlash(pathName, 'both');

      return pathName.split('/');
    };

    /**
     * Return the first part of a pathname until the first named param is found
     * @param name
     **/
    const nameToPath = (name = '') => {
      let routeName;
      if (name === '/' || name.trim().length === 0) return name;
      name = removeSlash(name, 'lead');
      routeName = name.split(':')[0];
      routeName = removeSlash(routeName, 'trail');

      return routeName.toLowerCase();
    };

    /**
     * Return the path name excluding query params
     * @param name
     **/
    const pathWithoutQueryParams = (currentRoute) => {
      const path = currentRoute.path.split('?');
      return path[0];
    };

    /**
     * Return the path name including query params
     * @param name
     **/
    const pathWithQueryParams = (currentRoute) => {
      let queryParams = [];
      if (currentRoute.queryParams) {
        for (let [key, value] of Object.entries(currentRoute.queryParams)) {
          queryParams.push(`${key}=${value}`);
        }
      }

      const hash = currentRoute.hash ? currentRoute.hash : '';

      if (queryParams.length > 0) {
        return `${currentRoute.path}?${queryParams.join('&')}${hash}`;
      } else {
        return currentRoute.path + hash;
      }
    };

    /**
     * Returns a string with trailing or leading slash character removed
     * @param pathName string
     * @param position string - lead, trail, both
     **/
    const removeExtraPaths = (pathNames, basePathNames) => {
      const names = basePathNames.split('/');
      if (names.length > 1) {
        names.forEach(function (name, index) {
          if (name.length > 0 && index > 0) {
            pathNames.shift();
          }
        });
      }

      return pathNames;
    };

    /**
     * Returns a string with trailing or leading slash character removed
     * @param pathName string
     * @param position string - lead, trail, both
     **/

    const removeSlash = (pathName, position = 'lead') => {
      if (position === 'trail' || position === 'both') {
        pathName = pathName.replace(/\/$/, '');
      }

      if (position === 'lead' || position === 'both') {
        pathName = pathName.replace(/^\//, '');
      }

      return pathName;
    };

    /**
     * Returns the name of the route based on the language parameter
     * @param route object
     * @param language string
     **/

    const routeNameLocalised = (route, language = null) => {
      if (!language || !route.lang || !route.lang[language]) {
        return route.name;
      } else {
        return route.lang[language];
      }
    };

    /**
     * Return the path name excluding query params
     * @param name
     **/
    const startsWithNamedParam = (currentRoute) => {
      const routeName = removeSlash(currentRoute);

      return routeName.startsWith(':');
    };

    /**
     * Updates the base route path.
     * Route objects can have nested routes (childRoutes) or just a long name like "admin/employees/show/:id"
     *
     * @param basePath string
     * @param pathNames array
     * @param route object
     * @param language string
     **/

    const updateRoutePath = (basePath, pathNames, route, language, convert = false) => {
      if (basePath === '/' || basePath.trim().length === 0) return { result: basePath, language: null };

      let basePathResult = basePath;
      let routeName = route.name;
      let currentLanguage = language;

      if (convert) {
        currentLanguage = '';
      }

      routeName = removeSlash(routeName);
      basePathResult = removeSlash(basePathResult);

      if (!route.childRoute) {
        let localisedRoute = findLocalisedRoute(basePathResult, route, currentLanguage);

        if (localisedRoute.exists && convert) {
          basePathResult = routeNameLocalised(route, language);
        }

        let routeNames = routeName.split(':')[0];
        routeNames = removeSlash(routeNames, 'trail');
        routeNames = routeNames.split('/');
        routeNames.shift();
        routeNames.forEach(() => {
          const currentPathName = pathNames[0];
          localisedRoute = findLocalisedRoute(`${basePathResult}/${currentPathName}`, route, currentLanguage);

          if (currentPathName && localisedRoute.exists) {
            if (convert) {
              basePathResult = routeNameLocalised(route, language);
            } else {
              basePathResult = `${basePathResult}/${currentPathName}`;
            }
            pathNames.shift();
          } else {
            return { result: basePathResult, language: localisedRoute.language };
          }
        });
        return { result: basePathResult, language: localisedRoute.language };
      } else {
        return { result: basePath, language: currentLanguage };
      }
    };

    const RouterCurrent = (trackPage) => {
      const trackPageview = trackPage || false;
      let activeRoute = '';

      const setActive = (newRoute, updateBrowserHistory) => {
        activeRoute = newRoute.path;
        pushActiveRoute(newRoute, updateBrowserHistory);
      };

      const active = () => {
        return activeRoute;
      };

      /**
       * Returns true if pathName is current active route
       * @param pathName String The path name to check against the current route.
       * @param includePath Boolean if true checks that pathName is included in current route. If false should match it.
       **/
      const isActive = (queryPath, includePath = false) => {
        if (queryPath[0] !== '/') {
          queryPath = '/' + queryPath;
        }

        // remove query params for comparison
        let pathName = UrlParser(`http://fake.com${queryPath}`).pathname;
        let activeRoutePath = UrlParser(`http://fake.com${activeRoute}`).pathname;

        pathName = removeSlash(pathName, 'trail');

        activeRoutePath = removeSlash(activeRoutePath, 'trail');

        if (includePath) {
          return activeRoutePath.includes(pathName);
        } else {
          return activeRoutePath === pathName;
        }
      };

      const pushActiveRoute = (newRoute, updateBrowserHistory) => {
        if (typeof window !== 'undefined') {
          const pathAndSearch = pathWithQueryParams(newRoute);

          if (updateBrowserHistory) {
            window.history.pushState({ page: pathAndSearch }, '', pathAndSearch);
          }
          // Moving back in history does not update browser history but does update tracking.
          if (trackPageview) {
            gaTracking(pathAndSearch);
          }
        }
      };

      const gaTracking = (newPage) => {
        if (typeof ga !== 'undefined') {
          ga('set', 'page', newPage);
          ga('send', 'pageview');
        }
      };

      return Object.freeze({ active, isActive, setActive });
    };

    const RouterGuard = (onlyIf) => {
      const guardInfo = onlyIf;

      const valid = () => {
        return guardInfo && guardInfo.guard && typeof guardInfo.guard === 'function';
      };

      const redirect = () => {
        return !guardInfo.guard();
      };

      const redirectPath = () => {
        let destinationUrl = '/';
        if (guardInfo.redirect && guardInfo.redirect.length > 0) {
          destinationUrl = guardInfo.redirect;
        }

        return destinationUrl;
      };

      return Object.freeze({ valid, redirect, redirectPath });
    };

    const RouterRedirect = (route, currentPath) => {
      const guard = RouterGuard(route.onlyIf);

      const path = () => {
        let redirectTo = currentPath;
        if (route.redirectTo && route.redirectTo.length > 0) {
          redirectTo = route.redirectTo;
        }

        if (guard.valid() && guard.redirect()) {
          redirectTo = guard.redirectPath();
        }

        return redirectTo;
      };

      return Object.freeze({ path });
    };

    function RouterRoute({ routeInfo, path, routeNamedParams, urlParser, namedPath, language }) {
      const namedParams = () => {
        const parsedParams = UrlParser(`https://fake.com${urlParser.pathname}`, namedPath).namedParams;

        return { ...routeNamedParams, ...parsedParams };
      };

      const get = () => {
        return {
          name: path,
          component: routeInfo.component,
          hash: urlParser.hash,
          layout: routeInfo.layout,
          queryParams: urlParser.queryParams,
          namedParams: namedParams(),
          path,
          language,
        };
      };

      return Object.freeze({ get, namedParams });
    }

    function RouterPath({ basePath, basePathName, pathNames, convert, currentLanguage }) {
      let updatedPathRoute;
      let route;
      let routePathLanguage = currentLanguage;

      function updatedPath(currentRoute) {
        route = currentRoute;
        updatedPathRoute = updateRoutePath(basePathName, pathNames, route, routePathLanguage, convert);
        routePathLanguage = convert ? currentLanguage : updatedPathRoute.language;

        return updatedPathRoute;
      }

      function localisedPathName() {
        return routeNameLocalised(route, routePathLanguage);
      }

      function localisedRouteWithoutNamedParams() {
        return nameToPath(localisedPathName());
      }

      function basePathNameWithoutNamedParams() {
        return nameToPath(updatedPathRoute.result);
      }

      function namedPath() {
        const localisedPath = localisedPathName();

        return basePath ? `${basePath}/${localisedPath}` : localisedPath;
      }

      function routePath() {
        let routePathValue = `${basePath}/${basePathNameWithoutNamedParams()}`;
        if (routePathValue === '//') {
          routePathValue = '/';
        }

        if (routePathLanguage) {
          pathNames = removeExtraPaths(pathNames, localisedRouteWithoutNamedParams());
        }

        const namedParams = getNamedParams(localisedPathName());
        if (namedParams && namedParams.length > 0) {
          namedParams.forEach(function () {
            if (pathNames.length > 0) {
              routePathValue += `/${pathNames.shift()}`;
            }
          });
        }

        return routePathValue;
      }

      function routeLanguage() {
        return routePathLanguage;
      }

      function basePathSameAsLocalised() {
        return basePathNameWithoutNamedParams() === localisedRouteWithoutNamedParams();
      }

      return Object.freeze({
        basePathSameAsLocalised,
        updatedPath,
        basePathNameWithoutNamedParams,
        localisedPathName,
        localisedRouteWithoutNamedParams,
        namedPath,
        pathNames,
        routeLanguage,
        routePath,
      });
    }

    const NotFoundPage$1 = '/404.html';

    function RouterFinder({ routes, currentUrl, routerOptions, convert }) {
      const defaultLanguage = routerOptions.defaultLanguage;
      const sitePrefix = routerOptions.prefix ? routerOptions.prefix.toLowerCase() : '';
      const urlParser = parseCurrentUrl(currentUrl, sitePrefix);
      let redirectTo = '';
      let routeNamedParams = {};
      let staticParamMatch = false;

      function findActiveRoute() {
        let searchActiveRoute = searchActiveRoutes(routes, '', urlParser.pathNames, routerOptions.lang, convert);

        if (!searchActiveRoute || !Object.keys(searchActiveRoute).length || anyEmptyNestedRoutes(searchActiveRoute)) {
          if (typeof window !== 'undefined') {
            searchActiveRoute = routeNotFound(routerOptions.lang);
          }
        } else {
          searchActiveRoute.path = pathWithoutQueryParams(searchActiveRoute);
          if (sitePrefix) {
            searchActiveRoute.path = `/${sitePrefix}${searchActiveRoute.path}`;
          }
        }

        return searchActiveRoute;
      }

      /**
       * Gets an array of routes and the browser pathname and return the active route
       * @param routes
       * @param basePath
       * @param pathNames
       **/
      function searchActiveRoutes(routes, basePath, pathNames, currentLanguage, convert) {
        let currentRoute = {};
        let basePathName = pathNames.shift().toLowerCase();
        const routerPath = RouterPath({ basePath, basePathName, pathNames, convert, currentLanguage });
        staticParamMatch = false;

        routes.forEach(function (route) {
          routerPath.updatedPath(route);
          if (route.name !== '/') {
            route.name = removeSlash(route.name);
          }
          if (matchRoute(routerPath, route.name)) {
            let routePath = routerPath.routePath();
            redirectTo = RouterRedirect(route, redirectTo).path();

            if (currentRoute.name !== routePath) {
              currentRoute = setCurrentRoute({
                route,
                routePath,
                routeLanguage: routerPath.routeLanguage(),
                urlParser,
                namedPath: routerPath.namedPath(),
              });
            }

            if (route.nestedRoutes && route.nestedRoutes.length > 0 && routerPath.pathNames.length > 0) {
              currentRoute.childRoute = searchActiveRoutes(
                route.nestedRoutes,
                routePath,
                routerPath.pathNames,
                routerPath.routeLanguage(),
                convert
              );
              currentRoute.path = currentRoute.childRoute.path;
              currentRoute.language = currentRoute.childRoute.language;
            } else if (nestedRoutesAndNoPath(route, routerPath.pathNames)) {
              const indexRoute = searchActiveRoutes(
                route.nestedRoutes,
                routePath,
                ['index'],
                routerPath.routeLanguage(),
                convert
              );
              if (indexRoute && Object.keys(indexRoute).length > 0) {
                currentRoute.childRoute = indexRoute;
                currentRoute.language = currentRoute.childRoute.language;
              }
            }
          }
        });

        if (redirectTo) {
          currentRoute.redirectTo = redirectTo;
        }

        return currentRoute;
      }

      function matchRoute(routerPath, routeName) {
        const basePathSameAsLocalised = routerPath.basePathSameAsLocalised();
        if (basePathSameAsLocalised) {
          staticParamMatch = true;
        }

        return basePathSameAsLocalised || (!staticParamMatch && startsWithNamedParam(routeName));
      }

      function nestedRoutesAndNoPath(route, pathNames) {
        return route.nestedRoutes && route.nestedRoutes.length > 0 && pathNames.length === 0;
      }

      function parseCurrentUrl(currentUrl, sitePrefix) {
        if (sitePrefix && sitePrefix.trim().length > 0) {
          const noPrefixUrl = currentUrl.replace(sitePrefix + '/', '');
          return UrlParser(noPrefixUrl);
        } else {
          return UrlParser(currentUrl);
        }
      }

      function setCurrentRoute({ route, routePath, routeLanguage, urlParser, namedPath }) {
        const routerRoute = RouterRoute({
          routeInfo: route,
          urlParser,
          path: routePath,
          routeNamedParams,
          namedPath,
          language: routeLanguage || defaultLanguage,
        });
        routeNamedParams = routerRoute.namedParams();

        return routerRoute.get();
      }

      const routeNotFound = (customLanguage) => {
        const custom404Page = routes.find((route) => route.name == '404');
        const language = customLanguage || defaultLanguage || '';
        if (custom404Page) {
          return { ...custom404Page, language, path: '404' };
        } else {
          return { name: '404', component: '', path: '404', redirectTo: NotFoundPage$1 };
        }
      };

      return Object.freeze({ findActiveRoute });
    }

    const NotFoundPage = '/404.html';

    let userDefinedRoutes = [];
    let routerOptions = {};
    let routerCurrent;

    /**
     * Object exposes one single property: activeRoute
     * @param routes  Array of routes
     * @param currentUrl current url
     * @param options configuration options
     **/
    const SpaRouter = (routes, currentUrl, options = {}) => {
      routerOptions = { ...options };
      if (typeof currentUrl === 'undefined' || currentUrl === '') {
        currentUrl = document.location.href;
      }

      routerCurrent = RouterCurrent(routerOptions.gaPageviews);

      currentUrl = removeSlash(currentUrl, 'trail');
      userDefinedRoutes = routes;

      const findActiveRoute = () => {
        let convert = false;

        if (routerOptions.langConvertTo) {
          routerOptions.lang = routerOptions.langConvertTo;
          convert = true;
        }

        return RouterFinder({ routes, currentUrl, routerOptions, convert }).findActiveRoute();
      };

      /**
       * Redirect current route to another
       * @param destinationUrl
       **/
      const navigateNow = (destinationUrl, updateBrowserHistory) => {
        if (typeof window !== 'undefined') {
          if (destinationUrl === NotFoundPage) {
            routerCurrent.setActive({ path: NotFoundPage }, updateBrowserHistory);
          } else {
            navigateTo(destinationUrl);
          }
        }

        return destinationUrl;
      };

      const setActiveRoute = (updateBrowserHistory = true) => {
        const currentRoute = findActiveRoute();
        if (currentRoute.redirectTo) {
          return navigateNow(currentRoute.redirectTo, updateBrowserHistory);
        }

        routerCurrent.setActive(currentRoute, updateBrowserHistory);
        activeRoute.set(currentRoute);

        return currentRoute;
      };

      return Object.freeze({
        setActiveRoute,
        findActiveRoute,
      });
    };

    /**
     * Converts a route to its localised version
     * @param pathName
     **/
    const localisedRoute = (pathName, language) => {
      pathName = removeSlash(pathName, 'lead');
      routerOptions.langConvertTo = language;

      return SpaRouter(userDefinedRoutes, 'http://fake.com/' + pathName, routerOptions).findActiveRoute();
    };

    /**
     * Updates the current active route and updates the browser pathname
     * @param pathName String
     * @param language String
     * @param updateBrowserHistory Boolean
     **/
    const navigateTo = (pathName, language = null, updateBrowserHistory = true) => {
      pathName = removeSlash(pathName, 'lead');

      if (language) {
        routerOptions.langConvertTo = language;
      }

      return SpaRouter(userDefinedRoutes, 'http://fake.com/' + pathName, routerOptions).setActiveRoute(
        updateBrowserHistory
      );
    };

    /**
     * Returns true if pathName is current active route
     * @param pathName String The path name to check against the current route.
     * @param includePath Boolean if true checks that pathName is included in current route. If false should match it.
     **/
    const routeIsActive = (queryPath, includePath = false) => {
      return routerCurrent.isActive(queryPath, includePath);
    };

    if (typeof window !== 'undefined') {
      // Avoid full page reload on local routes
      window.addEventListener('click', (event) => {
        if (event.target.localName.toLowerCase() !== 'a') return;
        if (event.metaKey || event.ctrlKey || event.shiftKey) return;

        const sitePrefix = routerOptions.prefix ? `/${routerOptions.prefix.toLowerCase()}` : '';
        const targetHostNameInternal = event.target.pathname && event.target.host === window.location.host;
        const prefixMatchPath = sitePrefix.length > 1 ? event.target.pathname.startsWith(sitePrefix) : true;

        if (targetHostNameInternal && prefixMatchPath) {
          event.preventDefault();
          let navigatePathname = event.target.pathname + event.target.search;

          const destinationUrl = navigatePathname + event.target.search + event.target.hash;
          if (event.target.target === '_blank') {
            window.open(destinationUrl, 'newTab');
          } else {
            navigateTo(destinationUrl);
          }
        }
      });

      window.onpopstate = function (_event) {
        let navigatePathname = window.location.pathname + window.location.search + window.location.hash;

        navigateTo(navigatePathname, null, false);
      };
    }

    /* node_modules\svelte-router-spa\src\components\route.svelte generated by Svelte v3.59.2 */

    // (10:34) 
    function create_if_block_2$4(ctx) {
    	let route;
    	let current;

    	route = new Route({
    			props: {
    				currentRoute: /*currentRoute*/ ctx[0].childRoute,
    				params: /*params*/ ctx[1]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(route.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(route, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const route_changes = {};
    			if (dirty & /*currentRoute*/ 1) route_changes.currentRoute = /*currentRoute*/ ctx[0].childRoute;
    			if (dirty & /*params*/ 2) route_changes.params = /*params*/ ctx[1];
    			route.$set(route_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(route.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(route.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(route, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$4.name,
    		type: "if",
    		source: "(10:34) ",
    		ctx
    	});

    	return block;
    }

    // (8:33) 
    function create_if_block_1$7(ctx) {
    	let switch_instance;
    	let switch_instance_anchor;
    	let current;
    	var switch_value = /*currentRoute*/ ctx[0].component;

    	function switch_props(ctx) {
    		return {
    			props: {
    				currentRoute: {
    					.../*currentRoute*/ ctx[0],
    					component: ''
    				},
    				params: /*params*/ ctx[1]
    			},
    			$$inline: true
    		};
    	}

    	if (switch_value) {
    		switch_instance = construct_svelte_component_dev(switch_value, switch_props(ctx));
    	}

    	const block = {
    		c: function create() {
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			switch_instance_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (switch_instance) mount_component(switch_instance, target, anchor);
    			insert_dev(target, switch_instance_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const switch_instance_changes = {};

    			if (dirty & /*currentRoute*/ 1) switch_instance_changes.currentRoute = {
    				.../*currentRoute*/ ctx[0],
    				component: ''
    			};

    			if (dirty & /*params*/ 2) switch_instance_changes.params = /*params*/ ctx[1];

    			if (dirty & /*currentRoute*/ 1 && switch_value !== (switch_value = /*currentRoute*/ ctx[0].component)) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = construct_svelte_component_dev(switch_value, switch_props(ctx));
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
    				} else {
    					switch_instance = null;
    				}
    			} else if (switch_value) {
    				switch_instance.$set(switch_instance_changes);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(switch_instance_anchor);
    			if (switch_instance) destroy_component(switch_instance, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$7.name,
    		type: "if",
    		source: "(8:33) ",
    		ctx
    	});

    	return block;
    }

    // (6:0) {#if currentRoute.layout}
    function create_if_block$f(ctx) {
    	let switch_instance;
    	let switch_instance_anchor;
    	let current;
    	var switch_value = /*currentRoute*/ ctx[0].layout;

    	function switch_props(ctx) {
    		return {
    			props: {
    				currentRoute: { .../*currentRoute*/ ctx[0], layout: '' },
    				params: /*params*/ ctx[1]
    			},
    			$$inline: true
    		};
    	}

    	if (switch_value) {
    		switch_instance = construct_svelte_component_dev(switch_value, switch_props(ctx));
    	}

    	const block = {
    		c: function create() {
    			if (switch_instance) create_component(switch_instance.$$.fragment);
    			switch_instance_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (switch_instance) mount_component(switch_instance, target, anchor);
    			insert_dev(target, switch_instance_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const switch_instance_changes = {};
    			if (dirty & /*currentRoute*/ 1) switch_instance_changes.currentRoute = { .../*currentRoute*/ ctx[0], layout: '' };
    			if (dirty & /*params*/ 2) switch_instance_changes.params = /*params*/ ctx[1];

    			if (dirty & /*currentRoute*/ 1 && switch_value !== (switch_value = /*currentRoute*/ ctx[0].layout)) {
    				if (switch_instance) {
    					group_outros();
    					const old_component = switch_instance;

    					transition_out(old_component.$$.fragment, 1, 0, () => {
    						destroy_component(old_component, 1);
    					});

    					check_outros();
    				}

    				if (switch_value) {
    					switch_instance = construct_svelte_component_dev(switch_value, switch_props(ctx));
    					create_component(switch_instance.$$.fragment);
    					transition_in(switch_instance.$$.fragment, 1);
    					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
    				} else {
    					switch_instance = null;
    				}
    			} else if (switch_value) {
    				switch_instance.$set(switch_instance_changes);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(switch_instance_anchor);
    			if (switch_instance) destroy_component(switch_instance, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$f.name,
    		type: "if",
    		source: "(6:0) {#if currentRoute.layout}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$13(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block$f, create_if_block_1$7, create_if_block_2$4];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*currentRoute*/ ctx[0].layout) return 0;
    		if (/*currentRoute*/ ctx[0].component) return 1;
    		if (/*currentRoute*/ ctx[0].childRoute) return 2;
    		return -1;
    	}

    	if (~(current_block_type_index = select_block_type(ctx))) {
    		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	}

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].m(target, anchor);
    			}

    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if (~current_block_type_index) {
    					if_blocks[current_block_type_index].p(ctx, dirty);
    				}
    			} else {
    				if (if_block) {
    					group_outros();

    					transition_out(if_blocks[previous_block_index], 1, 1, () => {
    						if_blocks[previous_block_index] = null;
    					});

    					check_outros();
    				}

    				if (~current_block_type_index) {
    					if_block = if_blocks[current_block_type_index];

    					if (!if_block) {
    						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    						if_block.c();
    					} else {
    						if_block.p(ctx, dirty);
    					}

    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				} else {
    					if_block = null;
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].d(detaching);
    			}

    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$13.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$13($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Route', slots, []);
    	let { currentRoute = {} } = $$props;
    	let { params = {} } = $$props;
    	const writable_props = ['currentRoute', 'params'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Route> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('currentRoute' in $$props) $$invalidate(0, currentRoute = $$props.currentRoute);
    		if ('params' in $$props) $$invalidate(1, params = $$props.params);
    	};

    	$$self.$capture_state = () => ({ currentRoute, params });

    	$$self.$inject_state = $$props => {
    		if ('currentRoute' in $$props) $$invalidate(0, currentRoute = $$props.currentRoute);
    		if ('params' in $$props) $$invalidate(1, params = $$props.params);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [currentRoute, params];
    }

    class Route extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$13, create_fragment$13, safe_not_equal, { currentRoute: 0, params: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Route",
    			options,
    			id: create_fragment$13.name
    		});
    	}

    	get currentRoute() {
    		throw new Error("<Route>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set currentRoute(value) {
    		throw new Error("<Route>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get params() {
    		throw new Error("<Route>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set params(value) {
    		throw new Error("<Route>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\svelte-router-spa\src\components\router.svelte generated by Svelte v3.59.2 */

    function create_fragment$12(ctx) {
    	let route;
    	let current;

    	route = new Route({
    			props: { currentRoute: /*$activeRoute*/ ctx[0] },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(route.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(route, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const route_changes = {};
    			if (dirty & /*$activeRoute*/ 1) route_changes.currentRoute = /*$activeRoute*/ ctx[0];
    			route.$set(route_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(route.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(route.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(route, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$12.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$12($$self, $$props, $$invalidate) {
    	let $activeRoute;
    	validate_store(activeRoute, 'activeRoute');
    	component_subscribe($$self, activeRoute, $$value => $$invalidate(0, $activeRoute = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Router', slots, []);
    	let { routes = [] } = $$props;
    	let { options = {} } = $$props;

    	onMount(() => {
    		SpaRouter(routes, document.location.href, options).setActiveRoute();
    	});

    	const writable_props = ['routes', 'options'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Router> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('routes' in $$props) $$invalidate(1, routes = $$props.routes);
    		if ('options' in $$props) $$invalidate(2, options = $$props.options);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		SpaRouter,
    		Route,
    		activeRoute,
    		routes,
    		options,
    		$activeRoute
    	});

    	$$self.$inject_state = $$props => {
    		if ('routes' in $$props) $$invalidate(1, routes = $$props.routes);
    		if ('options' in $$props) $$invalidate(2, options = $$props.options);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [$activeRoute, routes, options];
    }

    class Router extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$12, create_fragment$12, safe_not_equal, { routes: 1, options: 2 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Router",
    			options,
    			id: create_fragment$12.name
    		});
    	}

    	get routes() {
    		throw new Error("<Router>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set routes(value) {
    		throw new Error("<Router>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get options() {
    		throw new Error("<Router>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set options(value) {
    		throw new Error("<Router>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\svelte-router-spa\src\components\navigate.svelte generated by Svelte v3.59.2 */
    const file$U = "node_modules\\svelte-router-spa\\src\\components\\navigate.svelte";

    function create_fragment$11(ctx) {
    	let a;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[6].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);

    	const block = {
    		c: function create() {
    			a = element("a");
    			if (default_slot) default_slot.c();
    			attr_dev(a, "href", /*to*/ ctx[0]);
    			attr_dev(a, "title", /*title*/ ctx[1]);
    			attr_dev(a, "class", /*styles*/ ctx[2]);
    			toggle_class(a, "active", routeIsActive(/*to*/ ctx[0]));
    			add_location(a, file$U, 26, 0, 560);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);

    			if (default_slot) {
    				default_slot.m(a, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(a, "click", /*navigate*/ ctx[3], false, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 32)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[5],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[5])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[5], dirty, null),
    						null
    					);
    				}
    			}

    			if (!current || dirty & /*to*/ 1) {
    				attr_dev(a, "href", /*to*/ ctx[0]);
    			}

    			if (!current || dirty & /*title*/ 2) {
    				attr_dev(a, "title", /*title*/ ctx[1]);
    			}

    			if (!current || dirty & /*styles*/ 4) {
    				attr_dev(a, "class", /*styles*/ ctx[2]);
    			}

    			if (!current || dirty & /*styles, routeIsActive, to*/ 5) {
    				toggle_class(a, "active", routeIsActive(/*to*/ ctx[0]));
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    			if (default_slot) default_slot.d(detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$11.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$11($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Navigate', slots, ['default']);
    	let { to = '/' } = $$props;
    	let { title = '' } = $$props;
    	let { styles = '' } = $$props;
    	let { lang = null } = $$props;

    	onMount(() => {
    		if (lang) {
    			const route = localisedRoute(to, lang);

    			if (route) {
    				$$invalidate(0, to = route.path);
    			}
    		}
    	});

    	const navigate = event => {
    		if (event.metaKey || event.ctrlKey || event.shiftKey) return;
    		event.preventDefault();
    		event.stopPropagation();
    		navigateTo(to);
    	};

    	const writable_props = ['to', 'title', 'styles', 'lang'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Navigate> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('to' in $$props) $$invalidate(0, to = $$props.to);
    		if ('title' in $$props) $$invalidate(1, title = $$props.title);
    		if ('styles' in $$props) $$invalidate(2, styles = $$props.styles);
    		if ('lang' in $$props) $$invalidate(4, lang = $$props.lang);
    		if ('$$scope' in $$props) $$invalidate(5, $$scope = $$props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		localisedRoute,
    		navigateTo,
    		routeIsActive,
    		to,
    		title,
    		styles,
    		lang,
    		navigate
    	});

    	$$self.$inject_state = $$props => {
    		if ('to' in $$props) $$invalidate(0, to = $$props.to);
    		if ('title' in $$props) $$invalidate(1, title = $$props.title);
    		if ('styles' in $$props) $$invalidate(2, styles = $$props.styles);
    		if ('lang' in $$props) $$invalidate(4, lang = $$props.lang);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [to, title, styles, navigate, lang, $$scope, slots];
    }

    class Navigate extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$11, create_fragment$11, safe_not_equal, { to: 0, title: 1, styles: 2, lang: 4 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Navigate",
    			options,
    			id: create_fragment$11.name
    		});
    	}

    	get to() {
    		throw new Error("<Navigate>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set to(value) {
    		throw new Error("<Navigate>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get title() {
    		throw new Error("<Navigate>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set title(value) {
    		throw new Error("<Navigate>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get styles() {
    		throw new Error("<Navigate>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set styles(value) {
    		throw new Error("<Navigate>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get lang() {
    		throw new Error("<Navigate>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set lang(value) {
    		throw new Error("<Navigate>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    function clean$1($$props, extra_keys) {
      let keys = ["children", "$$scope", "$$slots"].concat(extra_keys);
      const rest = {};
      for (const key of Object.keys($$props)) {
        if (!(keys.includes(key))) {
          rest[key] = $$props[key];
        }
      }
      return rest;
    }

    function getOriginalBodyPadding() {
      const style = window ? window.getComputedStyle(document.body, null) : {};

      return parseInt((style && style.getPropertyValue('padding-right')) || 0, 10);
    }

    function getScrollbarWidth() {
      let scrollDiv = document.createElement('div');
      // .modal-scrollbar-measure styles // https://github.com/twbs/bootstrap/blob/v4.0.0-alpha.4/scss/_modal.scss#L106-L113
      scrollDiv.style.position = 'absolute';
      scrollDiv.style.top = '-9999px';
      scrollDiv.style.width = '50px';
      scrollDiv.style.height = '50px';
      scrollDiv.style.overflow = 'scroll';
      document.body.appendChild(scrollDiv);
      const scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
      document.body.removeChild(scrollDiv);
      return scrollbarWidth;
    }

    function setScrollbarWidth(padding) {
      document.body.style.paddingRight = padding > 0 ? `${padding}px` : null;
    }

    function isBodyOverflowing() {
      return window ? document.body.clientWidth < window.innerWidth : false;
    }

    function isObject$1(value) {
      const type = typeof value;
      return value != null && (type == 'object' || type == 'function');
    }

    function conditionallyUpdateScrollbar() {
      const scrollbarWidth = getScrollbarWidth();
      // https://github.com/twbs/bootstrap/blob/v4.0.0-alpha.6/js/src/modal.js#L433
      const fixedContent = document.querySelectorAll(
        '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top'
      )[0];
      const bodyPadding = fixedContent
        ? parseInt(fixedContent.style.paddingRight || 0, 10)
        : 0;

      if (isBodyOverflowing()) {
        setScrollbarWidth(bodyPadding + scrollbarWidth);
      }
    }

    function getColumnSizeClass(isXs, colWidth, colSize) {
      if (colSize === true || colSize === '') {
        return isXs ? 'col' : `col-${colWidth}`;
      } else if (colSize === 'auto') {
        return isXs ? 'col-auto' : `col-${colWidth}-auto`;
      }

      return isXs ? `col-${colSize}` : `col-${colWidth}-${colSize}`;
    }

    function browserEvent(target, ...args) {
      target.addEventListener(...args);

      return () => target.removeEventListener(...args);
    }

    function toVal(mix) {
      var k, y, str = '';
      if (mix) {
        if (typeof mix === 'object') {
          if (Array.isArray(mix)) {
            for (k = 0; k < mix.length; k++) {
              if (mix[k] && (y = toVal(mix[k]))) {
                str && (str += ' ');
                str += y;
              }
            }
          } else {
            for (k in mix) {
              if (mix[k] && (y = toVal(k))) {
                str && (str += ' ');
                str += y;
              }
            }
          }
        } else if (typeof mix !== 'boolean' && !mix.call) {
          str && (str += ' ');
          str += mix;
        }
      }
      return str;
    }

    function clsx() {
      let i = 0, x, str = '';
      while (i < arguments.length) {
        if (x = toVal(arguments[i++])) {
          str && (str += ' ');
          str += x;
        }
      }
      return str;
    }

    function forwardEventsBuilder(component, additionalEvents = []) {
      const events = [
        'focus', 'blur', 'change', 'input', 'update','submit',
        'fullscreenchange', 'fullscreenerror', 'scroll',
        'cut', 'copy', 'paste',
        'keydown', 'keypress', 'keyup',
        'auxclick', 'click', 'contextmenu', 'dblclick', 'mousedown', 'mouseenter', 'mouseleave', 'mousemove', 'mouseover', 'mouseout', 'mouseup', 'pointerlockchange', 'pointerlockerror', 'select', 'wheel',
        'drag', 'dragend', 'dragenter', 'dragstart', 'dragleave', 'dragover', 'drop',
        'touchcancel', 'touchend', 'touchmove', 'touchstart',
        'pointerover', 'pointerenter', 'pointerdown', 'pointermove', 'pointerup', 'pointercancel', 'pointerout', 'pointerleave', 'gotpointercapture', 'lostpointercapture',
        ...additionalEvents
      ];

      function forward(e) {
        bubble(component, e);
      }

      return node => {
        const destructors = [];

        for (let i = 0; i < events.length; i++) {
          destructors.push(listen(node, events[i], forward));
        }

        return {
          destroy: () => {
            for (let i = 0; i < destructors.length; i++) {
              destructors[i]();
            }
          }
        }
      };
    }

    const getColorClass = color => {
      const colorArray = color.split(' ');
      const specialColors = [
        'danger',
        'warning',
        'success',
        'info',
        'default',
        'primary',
        'secondary',
        'elegant',
        'stylish',
        'unique',
        'special'
      ];
      let colorClasses = '';

      colorArray.forEach(color => {
        if (specialColors.includes(color)) {
          if (color.includes('dark')) {
            color.replace('-', '-color-');
            colorClasses += `${color} `;
          } else {
            colorClasses += `${color}-color`;
          }
        } else {
          colorClasses += `${color} `;
        }
      });

      return colorClasses;
    };

    /* node_modules\mdbsvelte\src\MDBListGroup.svelte generated by Svelte v3.59.2 */
    const file$T = "node_modules\\mdbsvelte\\src\\MDBListGroup.svelte";

    function create_fragment$10(ctx) {
    	let ul;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[6].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);
    	let ul_levels = [/*props*/ ctx[2], { class: /*classes*/ ctx[0] }];
    	let ul_data = {};

    	for (let i = 0; i < ul_levels.length; i += 1) {
    		ul_data = assign(ul_data, ul_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			ul = element("ul");
    			if (default_slot) default_slot.c();
    			set_attributes(ul, ul_data);
    			add_location(ul, file$T, 18, 0, 411);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, ul, anchor);

    			if (default_slot) {
    				default_slot.m(ul, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = action_destroyer(/*forwardEvents*/ ctx[1].call(null, ul));
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 32)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[5],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[5])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[5], dirty, null),
    						null
    					);
    				}
    			}

    			set_attributes(ul, ul_data = get_spread_update(ul_levels, [
    				/*props*/ ctx[2],
    				(!current || dirty & /*classes*/ 1) && { class: /*classes*/ ctx[0] }
    			]));
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(ul);
    			if (default_slot) default_slot.d(detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$10.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$10($$self, $$props, $$invalidate) {
    	let classes;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('MDBListGroup', slots, ['default']);
    	const forwardEvents = forwardEventsBuilder(current_component);
    	let { class: className = '' } = $$props;
    	let { flush = false } = $$props;
    	const props = clean$1($$props);

    	$$self.$$set = $$new_props => {
    		$$invalidate(7, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ('class' in $$new_props) $$invalidate(3, className = $$new_props.class);
    		if ('flush' in $$new_props) $$invalidate(4, flush = $$new_props.flush);
    		if ('$$scope' in $$new_props) $$invalidate(5, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		clean: clean$1,
    		clsx,
    		forwardEventsBuilder,
    		current_component,
    		forwardEvents,
    		className,
    		flush,
    		props,
    		classes
    	});

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(7, $$props = assign(assign({}, $$props), $$new_props));
    		if ('className' in $$props) $$invalidate(3, className = $$new_props.className);
    		if ('flush' in $$props) $$invalidate(4, flush = $$new_props.flush);
    		if ('classes' in $$props) $$invalidate(0, classes = $$new_props.classes);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*className, flush*/ 24) {
    			$$invalidate(0, classes = clsx(className, 'list-group', flush ? 'list-group-flush' : false));
    		}
    	};

    	$$props = exclude_internal_props($$props);
    	return [classes, forwardEvents, props, className, flush, $$scope, slots];
    }

    class MDBListGroup extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$10, create_fragment$10, safe_not_equal, { class: 3, flush: 4 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "MDBListGroup",
    			options,
    			id: create_fragment$10.name
    		});
    	}

    	get class() {
    		throw new Error("<MDBListGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<MDBListGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get flush() {
    		throw new Error("<MDBListGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set flush(value) {
    		throw new Error("<MDBListGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\mdbsvelte\src\MDBListGroupItem.svelte generated by Svelte v3.59.2 */
    const file$S = "node_modules\\mdbsvelte\\src\\MDBListGroupItem.svelte";

    // (35:0) {:else}
    function create_else_block$a(ctx) {
    	let li;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[11].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);

    	let li_levels = [
    		/*props*/ ctx[6],
    		{ class: /*classes*/ ctx[4] },
    		{ disabled: /*disabled*/ ctx[1] },
    		{ active: /*active*/ ctx[0] }
    	];

    	let li_data = {};

    	for (let i = 0; i < li_levels.length; i += 1) {
    		li_data = assign(li_data, li_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			li = element("li");
    			if (default_slot) default_slot.c();
    			set_attributes(li, li_data);
    			add_location(li, file$S, 35, 2, 934);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);

    			if (default_slot) {
    				default_slot.m(li, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = action_destroyer(/*forwardEvents*/ ctx[5].call(null, li));
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 1024)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[10],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[10])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[10], dirty, null),
    						null
    					);
    				}
    			}

    			set_attributes(li, li_data = get_spread_update(li_levels, [
    				/*props*/ ctx[6],
    				(!current || dirty & /*classes*/ 16) && { class: /*classes*/ ctx[4] },
    				(!current || dirty & /*disabled*/ 2) && { disabled: /*disabled*/ ctx[1] },
    				(!current || dirty & /*active*/ 1) && { active: /*active*/ ctx[0] }
    			]));
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    			if (default_slot) default_slot.d(detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$a.name,
    		type: "else",
    		source: "(35:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (31:27) 
    function create_if_block_1$6(ctx) {
    	let button;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[11].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);

    	let button_levels = [
    		/*props*/ ctx[6],
    		{ class: /*classes*/ ctx[4] },
    		{ type: "button" },
    		{ disabled: /*disabled*/ ctx[1] },
    		{ active: /*active*/ ctx[0] }
    	];

    	let button_data = {};

    	for (let i = 0; i < button_levels.length; i += 1) {
    		button_data = assign(button_data, button_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			button = element("button");
    			if (default_slot) default_slot.c();
    			set_attributes(button, button_data);
    			add_location(button, file$S, 31, 2, 812);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);

    			if (default_slot) {
    				default_slot.m(button, null);
    			}

    			if (button.autofocus) button.focus();
    			current = true;

    			if (!mounted) {
    				dispose = action_destroyer(/*forwardEvents*/ ctx[5].call(null, button));
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 1024)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[10],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[10])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[10], dirty, null),
    						null
    					);
    				}
    			}

    			set_attributes(button, button_data = get_spread_update(button_levels, [
    				/*props*/ ctx[6],
    				(!current || dirty & /*classes*/ 16) && { class: /*classes*/ ctx[4] },
    				{ type: "button" },
    				(!current || dirty & /*disabled*/ 2) && { disabled: /*disabled*/ ctx[1] },
    				(!current || dirty & /*active*/ 1) && { active: /*active*/ ctx[0] }
    			]));
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			if (default_slot) default_slot.d(detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$6.name,
    		type: "if",
    		source: "(31:27) ",
    		ctx
    	});

    	return block;
    }

    // (27:0) {#if href}
    function create_if_block$e(ctx) {
    	let a;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[11].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);

    	let a_levels = [
    		/*props*/ ctx[6],
    		{ class: /*classes*/ ctx[4] },
    		{ href: /*href*/ ctx[2] },
    		{ disabled: /*disabled*/ ctx[1] },
    		{ active: /*active*/ ctx[0] }
    	];

    	let a_data = {};

    	for (let i = 0; i < a_levels.length; i += 1) {
    		a_data = assign(a_data, a_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			a = element("a");
    			if (default_slot) default_slot.c();
    			set_attributes(a, a_data);
    			add_location(a, file$S, 27, 2, 687);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);

    			if (default_slot) {
    				default_slot.m(a, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = action_destroyer(/*forwardEvents*/ ctx[5].call(null, a));
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 1024)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[10],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[10])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[10], dirty, null),
    						null
    					);
    				}
    			}

    			set_attributes(a, a_data = get_spread_update(a_levels, [
    				/*props*/ ctx[6],
    				(!current || dirty & /*classes*/ 16) && { class: /*classes*/ ctx[4] },
    				(!current || dirty & /*href*/ 4) && { href: /*href*/ ctx[2] },
    				(!current || dirty & /*disabled*/ 2) && { disabled: /*disabled*/ ctx[1] },
    				(!current || dirty & /*active*/ 1) && { active: /*active*/ ctx[0] }
    			]));
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    			if (default_slot) default_slot.d(detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$e.name,
    		type: "if",
    		source: "(27:0) {#if href}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$$(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block$e, create_if_block_1$6, create_else_block$a];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*href*/ ctx[2]) return 0;
    		if (/*tag*/ ctx[3] === 'button') return 1;
    		return 2;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$$.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$$($$self, $$props, $$invalidate) {
    	let classes;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('MDBListGroupItem', slots, ['default']);
    	const forwardEvents = forwardEventsBuilder(current_component);
    	let { class: className = '' } = $$props;
    	let { active = false } = $$props;
    	let { disabled = false } = $$props;
    	let { color = '' } = $$props;
    	let { action = false } = $$props;
    	let { href = null } = $$props;
    	let { tag = null } = $$props;
    	const props = clean$1($$props);

    	$$self.$$set = $$new_props => {
    		$$invalidate(12, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ('class' in $$new_props) $$invalidate(7, className = $$new_props.class);
    		if ('active' in $$new_props) $$invalidate(0, active = $$new_props.active);
    		if ('disabled' in $$new_props) $$invalidate(1, disabled = $$new_props.disabled);
    		if ('color' in $$new_props) $$invalidate(8, color = $$new_props.color);
    		if ('action' in $$new_props) $$invalidate(9, action = $$new_props.action);
    		if ('href' in $$new_props) $$invalidate(2, href = $$new_props.href);
    		if ('tag' in $$new_props) $$invalidate(3, tag = $$new_props.tag);
    		if ('$$scope' in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		clean: clean$1,
    		clsx,
    		forwardEventsBuilder,
    		current_component,
    		forwardEvents,
    		className,
    		active,
    		disabled,
    		color,
    		action,
    		href,
    		tag,
    		props,
    		classes
    	});

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(12, $$props = assign(assign({}, $$props), $$new_props));
    		if ('className' in $$props) $$invalidate(7, className = $$new_props.className);
    		if ('active' in $$props) $$invalidate(0, active = $$new_props.active);
    		if ('disabled' in $$props) $$invalidate(1, disabled = $$new_props.disabled);
    		if ('color' in $$props) $$invalidate(8, color = $$new_props.color);
    		if ('action' in $$props) $$invalidate(9, action = $$new_props.action);
    		if ('href' in $$props) $$invalidate(2, href = $$new_props.href);
    		if ('tag' in $$props) $$invalidate(3, tag = $$new_props.tag);
    		if ('classes' in $$props) $$invalidate(4, classes = $$new_props.classes);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*className, active, disabled, action, color*/ 899) {
    			$$invalidate(4, classes = clsx(className, active ? 'active' : false, disabled ? 'disabled' : false, action ? 'list-group-item-action' : false, color ? `list-group-item-${color}` : false, 'list-group-item'));
    		}
    	};

    	$$props = exclude_internal_props($$props);

    	return [
    		active,
    		disabled,
    		href,
    		tag,
    		classes,
    		forwardEvents,
    		props,
    		className,
    		color,
    		action,
    		$$scope,
    		slots
    	];
    }

    class MDBListGroupItem extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$$, create_fragment$$, safe_not_equal, {
    			class: 7,
    			active: 0,
    			disabled: 1,
    			color: 8,
    			action: 9,
    			href: 2,
    			tag: 3
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "MDBListGroupItem",
    			options,
    			id: create_fragment$$.name
    		});
    	}

    	get class() {
    		throw new Error("<MDBListGroupItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<MDBListGroupItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get active() {
    		throw new Error("<MDBListGroupItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set active(value) {
    		throw new Error("<MDBListGroupItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get disabled() {
    		throw new Error("<MDBListGroupItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set disabled(value) {
    		throw new Error("<MDBListGroupItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get color() {
    		throw new Error("<MDBListGroupItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set color(value) {
    		throw new Error("<MDBListGroupItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get action() {
    		throw new Error("<MDBListGroupItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set action(value) {
    		throw new Error("<MDBListGroupItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get href() {
    		throw new Error("<MDBListGroupItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set href(value) {
    		throw new Error("<MDBListGroupItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get tag() {
    		throw new Error("<MDBListGroupItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set tag(value) {
    		throw new Error("<MDBListGroupItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\mdbsvelte\src\MDBIcon.svelte generated by Svelte v3.59.2 */
    const file$R = "node_modules\\mdbsvelte\\src\\MDBIcon.svelte";

    function create_fragment$_(ctx) {
    	let i;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[11].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
    	let i_levels = [/*props*/ ctx[2], { class: /*classes*/ ctx[0] }];
    	let i_data = {};

    	for (let i = 0; i < i_levels.length; i += 1) {
    		i_data = assign(i_data, i_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			i = element("i");
    			if (default_slot) default_slot.c();
    			set_attributes(i, i_data);
    			add_location(i, file$R, 26, 0, 634);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, i, anchor);

    			if (default_slot) {
    				default_slot.m(i, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = action_destroyer(/*forwardEvents*/ ctx[1].call(null, i));
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 1024)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[10],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[10])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[10], dirty, null),
    						null
    					);
    				}
    			}

    			set_attributes(i, i_data = get_spread_update(i_levels, [
    				/*props*/ ctx[2],
    				(!current || dirty & /*classes*/ 1) && { class: /*classes*/ ctx[0] }
    			]));
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(i);
    			if (default_slot) default_slot.d(detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$_.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$_($$self, $$props, $$invalidate) {
    	let classes;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('MDBIcon', slots, ['default']);
    	const forwardEvents = forwardEventsBuilder(current_component);
    	let { class: className = '' } = $$props;
    	let { icon } = $$props;
    	let { size } = $$props;
    	const props = clean$1($$props, ["size"]);
    	let { type } = $$props;
    	let { far } = $$props;
    	let { fas } = $$props;
    	let { fab } = $$props;

    	$$self.$$.on_mount.push(function () {
    		if (icon === undefined && !('icon' in $$props || $$self.$$.bound[$$self.$$.props['icon']])) {
    			console.warn("<MDBIcon> was created without expected prop 'icon'");
    		}

    		if (size === undefined && !('size' in $$props || $$self.$$.bound[$$self.$$.props['size']])) {
    			console.warn("<MDBIcon> was created without expected prop 'size'");
    		}

    		if (type === undefined && !('type' in $$props || $$self.$$.bound[$$self.$$.props['type']])) {
    			console.warn("<MDBIcon> was created without expected prop 'type'");
    		}

    		if (far === undefined && !('far' in $$props || $$self.$$.bound[$$self.$$.props['far']])) {
    			console.warn("<MDBIcon> was created without expected prop 'far'");
    		}

    		if (fas === undefined && !('fas' in $$props || $$self.$$.bound[$$self.$$.props['fas']])) {
    			console.warn("<MDBIcon> was created without expected prop 'fas'");
    		}

    		if (fab === undefined && !('fab' in $$props || $$self.$$.bound[$$self.$$.props['fab']])) {
    			console.warn("<MDBIcon> was created without expected prop 'fab'");
    		}
    	});

    	$$self.$$set = $$new_props => {
    		$$invalidate(12, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ('class' in $$new_props) $$invalidate(3, className = $$new_props.class);
    		if ('icon' in $$new_props) $$invalidate(4, icon = $$new_props.icon);
    		if ('size' in $$new_props) $$invalidate(5, size = $$new_props.size);
    		if ('type' in $$new_props) $$invalidate(6, type = $$new_props.type);
    		if ('far' in $$new_props) $$invalidate(7, far = $$new_props.far);
    		if ('fas' in $$new_props) $$invalidate(8, fas = $$new_props.fas);
    		if ('fab' in $$new_props) $$invalidate(9, fab = $$new_props.fab);
    		if ('$$scope' in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		clean: clean$1,
    		clsx,
    		forwardEventsBuilder,
    		current_component,
    		forwardEvents,
    		className,
    		icon,
    		size,
    		props,
    		type,
    		far,
    		fas,
    		fab,
    		classes
    	});

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(12, $$props = assign(assign({}, $$props), $$new_props));
    		if ('className' in $$props) $$invalidate(3, className = $$new_props.className);
    		if ('icon' in $$props) $$invalidate(4, icon = $$new_props.icon);
    		if ('size' in $$props) $$invalidate(5, size = $$new_props.size);
    		if ('type' in $$props) $$invalidate(6, type = $$new_props.type);
    		if ('far' in $$props) $$invalidate(7, far = $$new_props.far);
    		if ('fas' in $$props) $$invalidate(8, fas = $$new_props.fas);
    		if ('fab' in $$props) $$invalidate(9, fab = $$new_props.fab);
    		if ('classes' in $$props) $$invalidate(0, classes = $$new_props.classes);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*className, fas, type, fab, far, icon, size*/ 1016) {
    			$$invalidate(0, classes = clsx(
    				className,
    				{
    					'fas': fas | !type & !fab & !far | type === "fas",
    					'fab': fab | type === "fab",
    					'far': far | type === "far"
    				},
    				icon ? `fa-${icon}` : null,
    				size ? `fa-${size}` : null
    			));
    		}
    	};

    	$$props = exclude_internal_props($$props);

    	return [
    		classes,
    		forwardEvents,
    		props,
    		className,
    		icon,
    		size,
    		type,
    		far,
    		fas,
    		fab,
    		$$scope,
    		slots
    	];
    }

    class MDBIcon extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$_, create_fragment$_, safe_not_equal, {
    			class: 3,
    			icon: 4,
    			size: 5,
    			type: 6,
    			far: 7,
    			fas: 8,
    			fab: 9
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "MDBIcon",
    			options,
    			id: create_fragment$_.name
    		});
    	}

    	get class() {
    		throw new Error("<MDBIcon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<MDBIcon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get icon() {
    		throw new Error("<MDBIcon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set icon(value) {
    		throw new Error("<MDBIcon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get size() {
    		throw new Error("<MDBIcon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set size(value) {
    		throw new Error("<MDBIcon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get type() {
    		throw new Error("<MDBIcon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set type(value) {
    		throw new Error("<MDBIcon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get far() {
    		throw new Error("<MDBIcon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set far(value) {
    		throw new Error("<MDBIcon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get fas() {
    		throw new Error("<MDBIcon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set fas(value) {
    		throw new Error("<MDBIcon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get fab() {
    		throw new Error("<MDBIcon>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set fab(value) {
    		throw new Error("<MDBIcon>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\mdbsvelte\src\MDBNavLink.svelte generated by Svelte v3.59.2 */
    const file$Q = "node_modules\\mdbsvelte\\src\\MDBNavLink.svelte";

    function create_fragment$Z(ctx) {
    	let a;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[10].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], null);
    	let a_levels = [/*props*/ ctx[3], { href: /*href*/ ctx[0] }, { class: /*classes*/ ctx[1] }];
    	let a_data = {};

    	for (let i = 0; i < a_levels.length; i += 1) {
    		a_data = assign(a_data, a_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			a = element("a");
    			if (default_slot) default_slot.c();
    			set_attributes(a, a_data);
    			add_location(a, file$Q, 29, 0, 695);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);

    			if (default_slot) {
    				default_slot.m(a, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(/*forwardEvents*/ ctx[2].call(null, a)),
    					listen_dev(a, "click", /*handleClick*/ ctx[4], false, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 512)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[9],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[9])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[9], dirty, null),
    						null
    					);
    				}
    			}

    			set_attributes(a, a_data = get_spread_update(a_levels, [
    				/*props*/ ctx[3],
    				(!current || dirty & /*href*/ 1) && { href: /*href*/ ctx[0] },
    				(!current || dirty & /*classes*/ 2) && { class: /*classes*/ ctx[1] }
    			]));
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    			if (default_slot) default_slot.d(detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$Z.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$Z($$self, $$props, $$invalidate) {
    	let classes;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('MDBNavLink', slots, ['default']);
    	const forwardEvents = forwardEventsBuilder(current_component);
    	let { class: className = '' } = $$props;
    	let { disabled = false } = $$props;
    	let { active = false } = $$props;
    	let { href = '#' } = $$props;
    	let { activeClassName = "active" } = $$props;
    	const props = clean$1($$props);

    	function handleClick(e) {
    		if (disabled) {
    			e.preventDefault();
    			e.stopImmediatePropagation();
    			return;
    		}

    		if (href === '#') {
    			e.preventDefault();
    		}
    	}

    	$$self.$$set = $$new_props => {
    		$$invalidate(11, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ('class' in $$new_props) $$invalidate(5, className = $$new_props.class);
    		if ('disabled' in $$new_props) $$invalidate(6, disabled = $$new_props.disabled);
    		if ('active' in $$new_props) $$invalidate(7, active = $$new_props.active);
    		if ('href' in $$new_props) $$invalidate(0, href = $$new_props.href);
    		if ('activeClassName' in $$new_props) $$invalidate(8, activeClassName = $$new_props.activeClassName);
    		if ('$$scope' in $$new_props) $$invalidate(9, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		clean: clean$1,
    		clsx,
    		forwardEventsBuilder,
    		current_component,
    		forwardEvents,
    		className,
    		disabled,
    		active,
    		href,
    		activeClassName,
    		props,
    		handleClick,
    		classes
    	});

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(11, $$props = assign(assign({}, $$props), $$new_props));
    		if ('className' in $$props) $$invalidate(5, className = $$new_props.className);
    		if ('disabled' in $$props) $$invalidate(6, disabled = $$new_props.disabled);
    		if ('active' in $$props) $$invalidate(7, active = $$new_props.active);
    		if ('href' in $$props) $$invalidate(0, href = $$new_props.href);
    		if ('activeClassName' in $$props) $$invalidate(8, activeClassName = $$new_props.activeClassName);
    		if ('classes' in $$props) $$invalidate(1, classes = $$new_props.classes);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*className, disabled, active, activeClassName*/ 480) {
    			$$invalidate(1, classes = clsx(className, 'nav-link', { disabled }, active ? activeClassName : false));
    		}
    	};

    	$$props = exclude_internal_props($$props);

    	return [
    		href,
    		classes,
    		forwardEvents,
    		props,
    		handleClick,
    		className,
    		disabled,
    		active,
    		activeClassName,
    		$$scope,
    		slots
    	];
    }

    class MDBNavLink extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$Z, create_fragment$Z, safe_not_equal, {
    			class: 5,
    			disabled: 6,
    			active: 7,
    			href: 0,
    			activeClassName: 8
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "MDBNavLink",
    			options,
    			id: create_fragment$Z.name
    		});
    	}

    	get class() {
    		throw new Error("<MDBNavLink>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<MDBNavLink>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get disabled() {
    		throw new Error("<MDBNavLink>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set disabled(value) {
    		throw new Error("<MDBNavLink>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get active() {
    		throw new Error("<MDBNavLink>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set active(value) {
    		throw new Error("<MDBNavLink>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get href() {
    		throw new Error("<MDBNavLink>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set href(value) {
    		throw new Error("<MDBNavLink>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get activeClassName() {
    		throw new Error("<MDBNavLink>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set activeClassName(value) {
    		throw new Error("<MDBNavLink>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\components\_shared\SideNavigation.svelte generated by Svelte v3.59.2 */
    const file$P = "src\\components\\_shared\\SideNavigation.svelte";

    // (12:0) {#if isOpen}
    function create_if_block$d(ctx) {
    	let div;
    	let a;
    	let img;
    	let img_src_value;
    	let t;
    	let mdblistgroup;
    	let current;

    	mdblistgroup = new MDBListGroup({
    			props: {
    				class: "list-group-flush",
    				$$slots: { default: [create_default_slot$h] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div = element("div");
    			a = element("a");
    			img = element("img");
    			t = space();
    			create_component(mdblistgroup.$$.fragment);
    			attr_dev(img, "alt", "MDB React Logo");
    			attr_dev(img, "class", "img-fluid");
    			if (!src_url_equal(img.src, img_src_value = "ctrd5940.png")) attr_dev(img, "src", img_src_value);
    			add_location(img, file$P, 14, 6, 497);
    			attr_dev(a, "href", "#!");
    			attr_dev(a, "class", "logo-wrapper waves-effect");
    			add_location(a, file$P, 13, 4, 442);
    			attr_dev(div, "class", "sidebar-fixed position-fixed");
    			add_location(div, file$P, 12, 2, 394);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, a);
    			append_dev(a, img);
    			append_dev(div, t);
    			mount_component(mdblistgroup, div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdblistgroup_changes = {};

    			if (dirty & /*$$scope, segment*/ 5) {
    				mdblistgroup_changes.$$scope = { dirty, ctx };
    			}

    			mdblistgroup.$set(mdblistgroup_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdblistgroup.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdblistgroup.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(mdblistgroup);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$d.name,
    		type: "if",
    		source: "(12:0) {#if isOpen}",
    		ctx
    	});

    	return block;
    }

    // (20:10) <MDBListGroupItem>
    function create_default_slot_18$3(ctx) {
    	let mdbicon;
    	let t0;
    	let span;
    	let current;

    	mdbicon = new MDBIcon({
    			props: { icon: "chart-pie", class: "mr-3" },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbicon.$$.fragment);
    			t0 = space();
    			span = element("span");
    			span.textContent = "Process Cpk";
    			add_location(span, file$P, 21, 12, 827);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbicon, target, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, span, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbicon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbicon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbicon, detaching);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_18$3.name,
    		type: "slot",
    		source: "(20:10) <MDBListGroupItem>",
    		ctx
    	});

    	return block;
    }

    // (19:8) <Navigate to="home">
    function create_default_slot_17$3(ctx) {
    	let mdblistgroupitem;
    	let current;

    	mdblistgroupitem = new MDBListGroupItem({
    			props: {
    				$$slots: { default: [create_default_slot_18$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdblistgroupitem.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdblistgroupitem, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdblistgroupitem_changes = {};

    			if (dirty & /*$$scope*/ 4) {
    				mdblistgroupitem_changes.$$scope = { dirty, ctx };
    			}

    			mdblistgroupitem.$set(mdblistgroupitem_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdblistgroupitem.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdblistgroupitem.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdblistgroupitem, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_17$3.name,
    		type: "slot",
    		source: "(19:8) <Navigate to=\\\"home\\\">",
    		ctx
    	});

    	return block;
    }

    // (18:6) <MDBNavLink active={segment === undefined} activeClassName="activeClass">
    function create_default_slot_16$6(ctx) {
    	let navigate;
    	let current;

    	navigate = new Navigate({
    			props: {
    				to: "home",
    				$$slots: { default: [create_default_slot_17$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(navigate.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(navigate, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const navigate_changes = {};

    			if (dirty & /*$$scope*/ 4) {
    				navigate_changes.$$scope = { dirty, ctx };
    			}

    			navigate.$set(navigate_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(navigate.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(navigate.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(navigate, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_16$6.name,
    		type: "slot",
    		source: "(18:6) <MDBNavLink active={segment === undefined} activeClassName=\\\"activeClass\\\">",
    		ctx
    	});

    	return block;
    }

    // (29:10) <MDBListGroupItem>
    function create_default_slot_15$6(ctx) {
    	let mdbicon;
    	let t0;
    	let span;
    	let current;

    	mdbicon = new MDBIcon({
    			props: { icon: "table", class: "mr-3" },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbicon.$$.fragment);
    			t0 = space();
    			span = element("span");
    			span.textContent = "Eng Lot Status";
    			add_location(span, file$P, 30, 12, 1132);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbicon, target, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, span, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbicon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbicon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbicon, detaching);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_15$6.name,
    		type: "slot",
    		source: "(29:10) <MDBListGroupItem>",
    		ctx
    	});

    	return block;
    }

    // (28:8) <Navigate to="table">
    function create_default_slot_14$6(ctx) {
    	let mdblistgroupitem;
    	let current;

    	mdblistgroupitem = new MDBListGroupItem({
    			props: {
    				$$slots: { default: [create_default_slot_15$6] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdblistgroupitem.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdblistgroupitem, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdblistgroupitem_changes = {};

    			if (dirty & /*$$scope*/ 4) {
    				mdblistgroupitem_changes.$$scope = { dirty, ctx };
    			}

    			mdblistgroupitem.$set(mdblistgroupitem_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdblistgroupitem.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdblistgroupitem.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdblistgroupitem, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_14$6.name,
    		type: "slot",
    		source: "(28:8) <Navigate to=\\\"table\\\">",
    		ctx
    	});

    	return block;
    }

    // (27:6) <MDBNavLink active={segment === 'tables'} activeClassName="activeClass">
    function create_default_slot_13$6(ctx) {
    	let navigate;
    	let current;

    	navigate = new Navigate({
    			props: {
    				to: "table",
    				$$slots: { default: [create_default_slot_14$6] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(navigate.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(navigate, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const navigate_changes = {};

    			if (dirty & /*$$scope*/ 4) {
    				navigate_changes.$$scope = { dirty, ctx };
    			}

    			navigate.$set(navigate_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(navigate.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(navigate.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(navigate, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_13$6.name,
    		type: "slot",
    		source: "(27:6) <MDBNavLink active={segment === 'tables'} activeClassName=\\\"activeClass\\\">",
    		ctx
    	});

    	return block;
    }

    // (38:10) <MDBListGroupItem>
    function create_default_slot_12$7(ctx) {
    	let mdbicon;
    	let t0;
    	let span;
    	let current;

    	mdbicon = new MDBIcon({
    			props: { icon: "file", class: "mr-3" },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbicon.$$.fragment);
    			t0 = space();
    			span = element("span");
    			span.textContent = "Hold Lot Summary";
    			add_location(span, file$P, 39, 12, 1438);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbicon, target, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, span, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbicon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbicon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbicon, detaching);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_12$7.name,
    		type: "slot",
    		source: "(38:10) <MDBListGroupItem>",
    		ctx
    	});

    	return block;
    }

    // (37:8) <Navigate to="forms">
    function create_default_slot_11$8(ctx) {
    	let mdblistgroupitem;
    	let current;

    	mdblistgroupitem = new MDBListGroupItem({
    			props: {
    				$$slots: { default: [create_default_slot_12$7] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdblistgroupitem.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdblistgroupitem, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdblistgroupitem_changes = {};

    			if (dirty & /*$$scope*/ 4) {
    				mdblistgroupitem_changes.$$scope = { dirty, ctx };
    			}

    			mdblistgroupitem.$set(mdblistgroupitem_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdblistgroupitem.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdblistgroupitem.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdblistgroupitem, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_11$8.name,
    		type: "slot",
    		source: "(37:8) <Navigate to=\\\"forms\\\">",
    		ctx
    	});

    	return block;
    }

    // (36:6) <MDBNavLink active={segment === 'forms'} activeClassName="activeClass">
    function create_default_slot_10$8(ctx) {
    	let navigate;
    	let current;

    	navigate = new Navigate({
    			props: {
    				to: "forms",
    				$$slots: { default: [create_default_slot_11$8] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(navigate.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(navigate, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const navigate_changes = {};

    			if (dirty & /*$$scope*/ 4) {
    				navigate_changes.$$scope = { dirty, ctx };
    			}

    			navigate.$set(navigate_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(navigate.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(navigate.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(navigate, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_10$8.name,
    		type: "slot",
    		source: "(36:6) <MDBNavLink active={segment === 'forms'} activeClassName=\\\"activeClass\\\">",
    		ctx
    	});

    	return block;
    }

    // (46:10) <MDBListGroupItem>
    function create_default_slot_9$8(ctx) {
    	let mdbicon;
    	let t0;
    	let span;
    	let current;

    	mdbicon = new MDBIcon({
    			props: { icon: "clock", class: "mr-3" },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbicon.$$.fragment);
    			t0 = space();
    			span = element("span");
    			span.textContent = "Process Q-time";
    			add_location(span, file$P, 47, 12, 1747);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbicon, target, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, span, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbicon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbicon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbicon, detaching);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_9$8.name,
    		type: "slot",
    		source: "(46:10) <MDBListGroupItem>",
    		ctx
    	});

    	return block;
    }

    // (45:8) <Navigate to="profile">
    function create_default_slot_8$a(ctx) {
    	let mdblistgroupitem;
    	let current;

    	mdblistgroupitem = new MDBListGroupItem({
    			props: {
    				$$slots: { default: [create_default_slot_9$8] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdblistgroupitem.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdblistgroupitem, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdblistgroupitem_changes = {};

    			if (dirty & /*$$scope*/ 4) {
    				mdblistgroupitem_changes.$$scope = { dirty, ctx };
    			}

    			mdblistgroupitem.$set(mdblistgroupitem_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdblistgroupitem.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdblistgroupitem.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdblistgroupitem, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_8$a.name,
    		type: "slot",
    		source: "(45:8) <Navigate to=\\\"profile\\\">",
    		ctx
    	});

    	return block;
    }

    // (44:6) <MDBNavLink active={segment === 'forms'} activeClassName="activeClass">
    function create_default_slot_7$b(ctx) {
    	let navigate;
    	let current;

    	navigate = new Navigate({
    			props: {
    				to: "profile",
    				$$slots: { default: [create_default_slot_8$a] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(navigate.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(navigate, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const navigate_changes = {};

    			if (dirty & /*$$scope*/ 4) {
    				navigate_changes.$$scope = { dirty, ctx };
    			}

    			navigate.$set(navigate_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(navigate.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(navigate.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(navigate, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_7$b.name,
    		type: "slot",
    		source: "(44:6) <MDBNavLink active={segment === 'forms'} activeClassName=\\\"activeClass\\\">",
    		ctx
    	});

    	return block;
    }

    // (54:10) <MDBListGroupItem>
    function create_default_slot_6$c(ctx) {
    	let mdbicon;
    	let t0;
    	let span;
    	let current;

    	mdbicon = new MDBIcon({
    			props: { icon: "boxes", class: "mr-3" },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbicon.$$.fragment);
    			t0 = space();
    			span = element("span");
    			span.textContent = "Lot Yield Report";
    			add_location(span, file$P, 55, 12, 2047);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbicon, target, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, span, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbicon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbicon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbicon, detaching);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_6$c.name,
    		type: "slot",
    		source: "(54:10) <MDBListGroupItem>",
    		ctx
    	});

    	return block;
    }

    // (53:8) <Navigate to="">
    function create_default_slot_5$d(ctx) {
    	let mdblistgroupitem;
    	let current;

    	mdblistgroupitem = new MDBListGroupItem({
    			props: {
    				$$slots: { default: [create_default_slot_6$c] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdblistgroupitem.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdblistgroupitem, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdblistgroupitem_changes = {};

    			if (dirty & /*$$scope*/ 4) {
    				mdblistgroupitem_changes.$$scope = { dirty, ctx };
    			}

    			mdblistgroupitem.$set(mdblistgroupitem_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdblistgroupitem.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdblistgroupitem.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdblistgroupitem, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_5$d.name,
    		type: "slot",
    		source: "(53:8) <Navigate to=\\\"\\\">",
    		ctx
    	});

    	return block;
    }

    // (52:6) <MDBNavLink active={segment === 'forms'} activeClassName="activeClass">
    function create_default_slot_4$d(ctx) {
    	let navigate;
    	let current;

    	navigate = new Navigate({
    			props: {
    				to: "",
    				$$slots: { default: [create_default_slot_5$d] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(navigate.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(navigate, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const navigate_changes = {};

    			if (dirty & /*$$scope*/ 4) {
    				navigate_changes.$$scope = { dirty, ctx };
    			}

    			navigate.$set(navigate_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(navigate.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(navigate.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(navigate, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4$d.name,
    		type: "slot",
    		source: "(52:6) <MDBNavLink active={segment === 'forms'} activeClassName=\\\"activeClass\\\">",
    		ctx
    	});

    	return block;
    }

    // (62:10) <MDBListGroupItem>
    function create_default_slot_3$e(ctx) {
    	let mdbicon;
    	let t0;
    	let span;
    	let current;

    	mdbicon = new MDBIcon({
    			props: { icon: "user", class: "mr-3" },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbicon.$$.fragment);
    			t0 = space();
    			span = element("span");
    			span.textContent = "Coustomer Voice";
    			add_location(span, file$P, 63, 12, 2355);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbicon, target, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, span, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbicon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbicon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbicon, detaching);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$e.name,
    		type: "slot",
    		source: "(62:10) <MDBListGroupItem>",
    		ctx
    	});

    	return block;
    }

    // (61:8) <Navigate to="profile">
    function create_default_slot_2$e(ctx) {
    	let mdblistgroupitem;
    	let current;

    	mdblistgroupitem = new MDBListGroupItem({
    			props: {
    				$$slots: { default: [create_default_slot_3$e] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdblistgroupitem.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdblistgroupitem, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdblistgroupitem_changes = {};

    			if (dirty & /*$$scope*/ 4) {
    				mdblistgroupitem_changes.$$scope = { dirty, ctx };
    			}

    			mdblistgroupitem.$set(mdblistgroupitem_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdblistgroupitem.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdblistgroupitem.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdblistgroupitem, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$e.name,
    		type: "slot",
    		source: "(61:8) <Navigate to=\\\"profile\\\">",
    		ctx
    	});

    	return block;
    }

    // (60:6) <MDBNavLink active={segment === 'forms'} activeClassName="activeClass">
    function create_default_slot_1$e(ctx) {
    	let navigate;
    	let current;

    	navigate = new Navigate({
    			props: {
    				to: "profile",
    				$$slots: { default: [create_default_slot_2$e] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(navigate.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(navigate, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const navigate_changes = {};

    			if (dirty & /*$$scope*/ 4) {
    				navigate_changes.$$scope = { dirty, ctx };
    			}

    			navigate.$set(navigate_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(navigate.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(navigate.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(navigate, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$e.name,
    		type: "slot",
    		source: "(60:6) <MDBNavLink active={segment === 'forms'} activeClassName=\\\"activeClass\\\">",
    		ctx
    	});

    	return block;
    }

    // (17:4) <MDBListGroup class="list-group-flush">
    function create_default_slot$h(ctx) {
    	let mdbnavlink0;
    	let t0;
    	let mdbnavlink1;
    	let t1;
    	let mdbnavlink2;
    	let t2;
    	let mdbnavlink3;
    	let t3;
    	let mdbnavlink4;
    	let t4;
    	let mdbnavlink5;
    	let current;

    	mdbnavlink0 = new MDBNavLink({
    			props: {
    				active: /*segment*/ ctx[0] === undefined,
    				activeClassName: "activeClass",
    				$$slots: { default: [create_default_slot_16$6] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbnavlink1 = new MDBNavLink({
    			props: {
    				active: /*segment*/ ctx[0] === 'tables',
    				activeClassName: "activeClass",
    				$$slots: { default: [create_default_slot_13$6] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbnavlink2 = new MDBNavLink({
    			props: {
    				active: /*segment*/ ctx[0] === 'forms',
    				activeClassName: "activeClass",
    				$$slots: { default: [create_default_slot_10$8] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbnavlink3 = new MDBNavLink({
    			props: {
    				active: /*segment*/ ctx[0] === 'forms',
    				activeClassName: "activeClass",
    				$$slots: { default: [create_default_slot_7$b] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbnavlink4 = new MDBNavLink({
    			props: {
    				active: /*segment*/ ctx[0] === 'forms',
    				activeClassName: "activeClass",
    				$$slots: { default: [create_default_slot_4$d] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbnavlink5 = new MDBNavLink({
    			props: {
    				active: /*segment*/ ctx[0] === 'forms',
    				activeClassName: "activeClass",
    				$$slots: { default: [create_default_slot_1$e] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbnavlink0.$$.fragment);
    			t0 = space();
    			create_component(mdbnavlink1.$$.fragment);
    			t1 = space();
    			create_component(mdbnavlink2.$$.fragment);
    			t2 = space();
    			create_component(mdbnavlink3.$$.fragment);
    			t3 = space();
    			create_component(mdbnavlink4.$$.fragment);
    			t4 = space();
    			create_component(mdbnavlink5.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbnavlink0, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(mdbnavlink1, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(mdbnavlink2, target, anchor);
    			insert_dev(target, t2, anchor);
    			mount_component(mdbnavlink3, target, anchor);
    			insert_dev(target, t3, anchor);
    			mount_component(mdbnavlink4, target, anchor);
    			insert_dev(target, t4, anchor);
    			mount_component(mdbnavlink5, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbnavlink0_changes = {};
    			if (dirty & /*segment*/ 1) mdbnavlink0_changes.active = /*segment*/ ctx[0] === undefined;

    			if (dirty & /*$$scope*/ 4) {
    				mdbnavlink0_changes.$$scope = { dirty, ctx };
    			}

    			mdbnavlink0.$set(mdbnavlink0_changes);
    			const mdbnavlink1_changes = {};
    			if (dirty & /*segment*/ 1) mdbnavlink1_changes.active = /*segment*/ ctx[0] === 'tables';

    			if (dirty & /*$$scope*/ 4) {
    				mdbnavlink1_changes.$$scope = { dirty, ctx };
    			}

    			mdbnavlink1.$set(mdbnavlink1_changes);
    			const mdbnavlink2_changes = {};
    			if (dirty & /*segment*/ 1) mdbnavlink2_changes.active = /*segment*/ ctx[0] === 'forms';

    			if (dirty & /*$$scope*/ 4) {
    				mdbnavlink2_changes.$$scope = { dirty, ctx };
    			}

    			mdbnavlink2.$set(mdbnavlink2_changes);
    			const mdbnavlink3_changes = {};
    			if (dirty & /*segment*/ 1) mdbnavlink3_changes.active = /*segment*/ ctx[0] === 'forms';

    			if (dirty & /*$$scope*/ 4) {
    				mdbnavlink3_changes.$$scope = { dirty, ctx };
    			}

    			mdbnavlink3.$set(mdbnavlink3_changes);
    			const mdbnavlink4_changes = {};
    			if (dirty & /*segment*/ 1) mdbnavlink4_changes.active = /*segment*/ ctx[0] === 'forms';

    			if (dirty & /*$$scope*/ 4) {
    				mdbnavlink4_changes.$$scope = { dirty, ctx };
    			}

    			mdbnavlink4.$set(mdbnavlink4_changes);
    			const mdbnavlink5_changes = {};
    			if (dirty & /*segment*/ 1) mdbnavlink5_changes.active = /*segment*/ ctx[0] === 'forms';

    			if (dirty & /*$$scope*/ 4) {
    				mdbnavlink5_changes.$$scope = { dirty, ctx };
    			}

    			mdbnavlink5.$set(mdbnavlink5_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbnavlink0.$$.fragment, local);
    			transition_in(mdbnavlink1.$$.fragment, local);
    			transition_in(mdbnavlink2.$$.fragment, local);
    			transition_in(mdbnavlink3.$$.fragment, local);
    			transition_in(mdbnavlink4.$$.fragment, local);
    			transition_in(mdbnavlink5.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbnavlink0.$$.fragment, local);
    			transition_out(mdbnavlink1.$$.fragment, local);
    			transition_out(mdbnavlink2.$$.fragment, local);
    			transition_out(mdbnavlink3.$$.fragment, local);
    			transition_out(mdbnavlink4.$$.fragment, local);
    			transition_out(mdbnavlink5.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbnavlink0, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(mdbnavlink1, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(mdbnavlink2, detaching);
    			if (detaching) detach_dev(t2);
    			destroy_component(mdbnavlink3, detaching);
    			if (detaching) detach_dev(t3);
    			destroy_component(mdbnavlink4, detaching);
    			if (detaching) detach_dev(t4);
    			destroy_component(mdbnavlink5, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$h.name,
    		type: "slot",
    		source: "(17:4) <MDBListGroup class=\\\"list-group-flush\\\">",
    		ctx
    	});

    	return block;
    }

    function create_fragment$Y(ctx) {
    	let if_block_anchor;
    	let current;
    	let if_block = /*isOpen*/ ctx[1] && create_if_block$d(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*isOpen*/ ctx[1]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*isOpen*/ 2) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$d(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$Y.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$Y($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('SideNavigation', slots, []);
    	let { segment } = $$props;
    	let { isOpen = true } = $$props;

    	$$self.$$.on_mount.push(function () {
    		if (segment === undefined && !('segment' in $$props || $$self.$$.bound[$$self.$$.props['segment']])) {
    			console.warn("<SideNavigation> was created without expected prop 'segment'");
    		}
    	});

    	const writable_props = ['segment', 'isOpen'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<SideNavigation> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('segment' in $$props) $$invalidate(0, segment = $$props.segment);
    		if ('isOpen' in $$props) $$invalidate(1, isOpen = $$props.isOpen);
    	};

    	$$self.$capture_state = () => ({
    		segment,
    		isOpen,
    		MDBListGroup,
    		MDBListGroupItem,
    		MDBIcon,
    		MDBNavLink,
    		Navigate
    	});

    	$$self.$inject_state = $$props => {
    		if ('segment' in $$props) $$invalidate(0, segment = $$props.segment);
    		if ('isOpen' in $$props) $$invalidate(1, isOpen = $$props.isOpen);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [segment, isOpen];
    }

    class SideNavigation extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$Y, create_fragment$Y, safe_not_equal, { segment: 0, isOpen: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "SideNavigation",
    			options,
    			id: create_fragment$Y.name
    		});
    	}

    	get segment() {
    		throw new Error("<SideNavigation>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set segment(value) {
    		throw new Error("<SideNavigation>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get isOpen() {
    		throw new Error("<SideNavigation>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isOpen(value) {
    		throw new Error("<SideNavigation>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\mdbsvelte\src\MDBNavbar.svelte generated by Svelte v3.59.2 */
    const file$O = "node_modules\\mdbsvelte\\src\\MDBNavbar.svelte";

    function create_fragment$X(ctx) {
    	let nav;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[11].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[10], null);
    	let nav_levels = [/*props*/ ctx[2], { class: /*classes*/ ctx[0] }];
    	let nav_data = {};

    	for (let i = 0; i < nav_levels.length; i += 1) {
    		nav_data = assign(nav_data, nav_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			nav = element("nav");
    			if (default_slot) default_slot.c();
    			set_attributes(nav, nav_data);
    			add_location(nav, file$O, 36, 0, 879);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, nav, anchor);

    			if (default_slot) {
    				default_slot.m(nav, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = action_destroyer(/*forwardEvents*/ ctx[1].call(null, nav));
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 1024)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[10],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[10])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[10], dirty, null),
    						null
    					);
    				}
    			}

    			set_attributes(nav, nav_data = get_spread_update(nav_levels, [
    				/*props*/ ctx[2],
    				(!current || dirty & /*classes*/ 1) && { class: /*classes*/ ctx[0] }
    			]));
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(nav);
    			if (default_slot) default_slot.d(detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$X.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function getExpandClass(expand) {
    	if (expand === false) {
    		return false;
    	} else if (expand === true || expand === 'xs') {
    		return 'navbar-expand';
    	}

    	return `navbar-expand-${expand}`;
    }

    function instance$X($$self, $$props, $$invalidate) {
    	let classes;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('MDBNavbar', slots, ['default']);
    	const forwardEvents = forwardEventsBuilder(current_component);
    	let { class: className = '' } = $$props;
    	let { light = false } = $$props;
    	let { dark = false } = $$props;
    	let { fixed = '' } = $$props;
    	let { sticky = '' } = $$props;
    	let { color = '' } = $$props;
    	let { expand = false } = $$props;
    	const props = clean$1($$props);

    	$$self.$$set = $$new_props => {
    		$$invalidate(12, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ('class' in $$new_props) $$invalidate(3, className = $$new_props.class);
    		if ('light' in $$new_props) $$invalidate(4, light = $$new_props.light);
    		if ('dark' in $$new_props) $$invalidate(5, dark = $$new_props.dark);
    		if ('fixed' in $$new_props) $$invalidate(6, fixed = $$new_props.fixed);
    		if ('sticky' in $$new_props) $$invalidate(7, sticky = $$new_props.sticky);
    		if ('color' in $$new_props) $$invalidate(8, color = $$new_props.color);
    		if ('expand' in $$new_props) $$invalidate(9, expand = $$new_props.expand);
    		if ('$$scope' in $$new_props) $$invalidate(10, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		clean: clean$1,
    		clsx,
    		forwardEventsBuilder,
    		current_component,
    		forwardEvents,
    		className,
    		light,
    		dark,
    		fixed,
    		sticky,
    		color,
    		expand,
    		props,
    		getExpandClass,
    		classes
    	});

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(12, $$props = assign(assign({}, $$props), $$new_props));
    		if ('className' in $$props) $$invalidate(3, className = $$new_props.className);
    		if ('light' in $$props) $$invalidate(4, light = $$new_props.light);
    		if ('dark' in $$props) $$invalidate(5, dark = $$new_props.dark);
    		if ('fixed' in $$props) $$invalidate(6, fixed = $$new_props.fixed);
    		if ('sticky' in $$props) $$invalidate(7, sticky = $$new_props.sticky);
    		if ('color' in $$props) $$invalidate(8, color = $$new_props.color);
    		if ('expand' in $$props) $$invalidate(9, expand = $$new_props.expand);
    		if ('classes' in $$props) $$invalidate(0, classes = $$new_props.classes);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*className, expand, light, dark, color, fixed, sticky*/ 1016) {
    			$$invalidate(0, classes = clsx(className, 'navbar', getExpandClass(expand), {
    				'navbar-light': light,
    				'navbar-dark': dark,
    				[`${color}`]: color,
    				[`fixed-${fixed}`]: fixed,
    				[`sticky-${sticky}`]: sticky
    			}));
    		}
    	};

    	$$props = exclude_internal_props($$props);

    	return [
    		classes,
    		forwardEvents,
    		props,
    		className,
    		light,
    		dark,
    		fixed,
    		sticky,
    		color,
    		expand,
    		$$scope,
    		slots
    	];
    }

    class MDBNavbar extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$X, create_fragment$X, safe_not_equal, {
    			class: 3,
    			light: 4,
    			dark: 5,
    			fixed: 6,
    			sticky: 7,
    			color: 8,
    			expand: 9
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "MDBNavbar",
    			options,
    			id: create_fragment$X.name
    		});
    	}

    	get class() {
    		throw new Error("<MDBNavbar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<MDBNavbar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get light() {
    		throw new Error("<MDBNavbar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set light(value) {
    		throw new Error("<MDBNavbar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get dark() {
    		throw new Error("<MDBNavbar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set dark(value) {
    		throw new Error("<MDBNavbar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get fixed() {
    		throw new Error("<MDBNavbar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set fixed(value) {
    		throw new Error("<MDBNavbar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get sticky() {
    		throw new Error("<MDBNavbar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set sticky(value) {
    		throw new Error("<MDBNavbar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get color() {
    		throw new Error("<MDBNavbar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set color(value) {
    		throw new Error("<MDBNavbar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get expand() {
    		throw new Error("<MDBNavbar>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set expand(value) {
    		throw new Error("<MDBNavbar>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\mdbsvelte\src\MDBNavbarBrand.svelte generated by Svelte v3.59.2 */
    const file$N = "node_modules\\mdbsvelte\\src\\MDBNavbarBrand.svelte";

    function create_fragment$W(ctx) {
    	let a;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[6].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);
    	let a_levels = [/*props*/ ctx[3], { class: /*classes*/ ctx[1] }, { href: /*href*/ ctx[0] }];
    	let a_data = {};

    	for (let i = 0; i < a_levels.length; i += 1) {
    		a_data = assign(a_data, a_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			a = element("a");
    			if (default_slot) default_slot.c();
    			set_attributes(a, a_data);
    			add_location(a, file$N, 14, 0, 358);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);

    			if (default_slot) {
    				default_slot.m(a, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = action_destroyer(/*forwardEvents*/ ctx[2].call(null, a));
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 32)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[5],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[5])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[5], dirty, null),
    						null
    					);
    				}
    			}

    			set_attributes(a, a_data = get_spread_update(a_levels, [
    				/*props*/ ctx[3],
    				(!current || dirty & /*classes*/ 2) && { class: /*classes*/ ctx[1] },
    				(!current || dirty & /*href*/ 1) && { href: /*href*/ ctx[0] }
    			]));
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    			if (default_slot) default_slot.d(detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$W.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$W($$self, $$props, $$invalidate) {
    	let classes;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('MDBNavbarBrand', slots, ['default']);
    	const forwardEvents = forwardEventsBuilder(current_component);
    	let { class: className = '' } = $$props;
    	let { href = '/' } = $$props;
    	const props = clean$1($$props);

    	$$self.$$set = $$new_props => {
    		$$invalidate(7, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ('class' in $$new_props) $$invalidate(4, className = $$new_props.class);
    		if ('href' in $$new_props) $$invalidate(0, href = $$new_props.href);
    		if ('$$scope' in $$new_props) $$invalidate(5, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		clean: clean$1,
    		clsx,
    		forwardEventsBuilder,
    		current_component,
    		forwardEvents,
    		className,
    		href,
    		props,
    		classes
    	});

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(7, $$props = assign(assign({}, $$props), $$new_props));
    		if ('className' in $$props) $$invalidate(4, className = $$new_props.className);
    		if ('href' in $$props) $$invalidate(0, href = $$new_props.href);
    		if ('classes' in $$props) $$invalidate(1, classes = $$new_props.classes);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*className*/ 16) {
    			$$invalidate(1, classes = clsx(className, 'navbar-brand'));
    		}
    	};

    	$$props = exclude_internal_props($$props);
    	return [href, classes, forwardEvents, props, className, $$scope, slots];
    }

    class MDBNavbarBrand extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$W, create_fragment$W, safe_not_equal, { class: 4, href: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "MDBNavbarBrand",
    			options,
    			id: create_fragment$W.name
    		});
    	}

    	get class() {
    		throw new Error("<MDBNavbarBrand>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<MDBNavbarBrand>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get href() {
    		throw new Error("<MDBNavbarBrand>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set href(value) {
    		throw new Error("<MDBNavbarBrand>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\mdbsvelte\src\MDBNavbarNav.svelte generated by Svelte v3.59.2 */
    const file$M = "node_modules\\mdbsvelte\\src\\MDBNavbarNav.svelte";

    function create_fragment$V(ctx) {
    	let ul;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[7].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[6], null);
    	let ul_levels = [/*props*/ ctx[2], { class: /*elementClasses*/ ctx[0] }];
    	let ul_data = {};

    	for (let i = 0; i < ul_levels.length; i += 1) {
    		ul_data = assign(ul_data, ul_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			ul = element("ul");
    			if (default_slot) default_slot.c();
    			set_attributes(ul, ul_data);
    			add_location(ul, file$M, 15, 0, 453);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, ul, anchor);

    			if (default_slot) {
    				default_slot.m(ul, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = action_destroyer(/*forwardEvents*/ ctx[1].call(null, ul));
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 64)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[6],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[6])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[6], dirty, null),
    						null
    					);
    				}
    			}

    			set_attributes(ul, ul_data = get_spread_update(ul_levels, [
    				/*props*/ ctx[2],
    				(!current || dirty & /*elementClasses*/ 1) && { class: /*elementClasses*/ ctx[0] }
    			]));
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(ul);
    			if (default_slot) default_slot.d(detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$V.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$V($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('MDBNavbarNav', slots, ['default']);
    	const forwardEvents = forwardEventsBuilder(current_component);
    	let { class: className = '' } = $$props;
    	let { right } = $$props;
    	let { left } = $$props;
    	const props = clean$1($$props, ["right", "left"]);
    	let elementClasses;

    	$$self.$$.on_mount.push(function () {
    		if (right === undefined && !('right' in $$props || $$self.$$.bound[$$self.$$.props['right']])) {
    			console.warn("<MDBNavbarNav> was created without expected prop 'right'");
    		}

    		if (left === undefined && !('left' in $$props || $$self.$$.bound[$$self.$$.props['left']])) {
    			console.warn("<MDBNavbarNav> was created without expected prop 'left'");
    		}
    	});

    	$$self.$$set = $$new_props => {
    		$$invalidate(8, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ('class' in $$new_props) $$invalidate(3, className = $$new_props.class);
    		if ('right' in $$new_props) $$invalidate(4, right = $$new_props.right);
    		if ('left' in $$new_props) $$invalidate(5, left = $$new_props.left);
    		if ('$$scope' in $$new_props) $$invalidate(6, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		clean: clean$1,
    		clsx,
    		forwardEventsBuilder,
    		current_component,
    		forwardEvents,
    		className,
    		right,
    		left,
    		props,
    		elementClasses
    	});

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(8, $$props = assign(assign({}, $$props), $$new_props));
    		if ('className' in $$props) $$invalidate(3, className = $$new_props.className);
    		if ('right' in $$props) $$invalidate(4, right = $$new_props.right);
    		if ('left' in $$props) $$invalidate(5, left = $$new_props.left);
    		if ('elementClasses' in $$props) $$invalidate(0, elementClasses = $$new_props.elementClasses);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*className, right, left*/ 56) {
    			$$invalidate(0, elementClasses = clsx(className, 'navbar-nav', { 'ml-auto': right, 'mr-auto': left }));
    		}
    	};

    	$$props = exclude_internal_props($$props);
    	return [elementClasses, forwardEvents, props, className, right, left, $$scope, slots];
    }

    class MDBNavbarNav extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$V, create_fragment$V, safe_not_equal, { class: 3, right: 4, left: 5 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "MDBNavbarNav",
    			options,
    			id: create_fragment$V.name
    		});
    	}

    	get class() {
    		throw new Error("<MDBNavbarNav>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<MDBNavbarNav>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get right() {
    		throw new Error("<MDBNavbarNav>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set right(value) {
    		throw new Error("<MDBNavbarNav>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get left() {
    		throw new Error("<MDBNavbarNav>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set left(value) {
    		throw new Error("<MDBNavbarNav>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\mdbsvelte\src\MDBNavbarToggler.svelte generated by Svelte v3.59.2 */
    const file$L = "node_modules\\mdbsvelte\\src\\MDBNavbarToggler.svelte";

    // (26:8)      
    function fallback_block$2(ctx) {
    	let span;

    	const block = {
    		c: function create() {
    			span = element("span");
    			attr_dev(span, "class", "navbar-toggler-icon");
    			add_location(span, file$L, 26, 4, 563);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: fallback_block$2.name,
    		type: "fallback",
    		source: "(26:8)      ",
    		ctx
    	});

    	return block;
    }

    function create_fragment$U(ctx) {
    	let button;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[6].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);
    	const default_slot_or_fallback = default_slot || fallback_block$2(ctx);
    	let button_levels = [/*props*/ ctx[1], { class: /*classes*/ ctx[0] }];
    	let button_data = {};

    	for (let i = 0; i < button_levels.length; i += 1) {
    		button_data = assign(button_data, button_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			button = element("button");
    			if (default_slot_or_fallback) default_slot_or_fallback.c();
    			set_attributes(button, button_data);
    			add_location(button, file$L, 24, 0, 505);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);

    			if (default_slot_or_fallback) {
    				default_slot_or_fallback.m(button, null);
    			}

    			if (button.autofocus) button.focus();
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*click_handler*/ ctx[7], false, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 32)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[5],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[5])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[5], dirty, null),
    						null
    					);
    				}
    			}

    			set_attributes(button, button_data = get_spread_update(button_levels, [
    				/*props*/ ctx[1],
    				(!current || dirty & /*classes*/ 1) && { class: /*classes*/ ctx[0] }
    			]));
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot_or_fallback, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot_or_fallback, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$U.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$U($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('MDBNavbarToggler', slots, ['default']);
    	const forwardEvents = forwardEventsBuilder(current_component);
    	let { class: className = '' } = $$props;
    	let { left } = $$props;
    	let { right } = $$props;
    	const props = clean$1($$props, "left");
    	let classes;

    	$$self.$$.on_mount.push(function () {
    		if (left === undefined && !('left' in $$props || $$self.$$.bound[$$self.$$.props['left']])) {
    			console.warn("<MDBNavbarToggler> was created without expected prop 'left'");
    		}

    		if (right === undefined && !('right' in $$props || $$self.$$.bound[$$self.$$.props['right']])) {
    			console.warn("<MDBNavbarToggler> was created without expected prop 'right'");
    		}
    	});

    	function click_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	$$self.$$set = $$new_props => {
    		$$invalidate(9, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ('class' in $$new_props) $$invalidate(2, className = $$new_props.class);
    		if ('left' in $$new_props) $$invalidate(3, left = $$new_props.left);
    		if ('right' in $$new_props) $$invalidate(4, right = $$new_props.right);
    		if ('$$scope' in $$new_props) $$invalidate(5, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		clean: clean$1,
    		clsx,
    		forwardEventsBuilder,
    		current_component,
    		forwardEvents,
    		className,
    		left,
    		right,
    		props,
    		classes
    	});

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(9, $$props = assign(assign({}, $$props), $$new_props));
    		if ('className' in $$props) $$invalidate(2, className = $$new_props.className);
    		if ('left' in $$props) $$invalidate(3, left = $$new_props.left);
    		if ('right' in $$props) $$invalidate(4, right = $$new_props.right);
    		if ('classes' in $$props) $$invalidate(0, classes = $$new_props.classes);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*right, left, className*/ 28) {
    			$$invalidate(0, classes = clsx(
    				{
    					'navbar-toggler-right': right,
    					'navbar-toggler-left': left
    				},
    				'navbar-toggler',
    				className
    			));
    		}
    	};

    	$$props = exclude_internal_props($$props);
    	return [classes, props, className, left, right, $$scope, slots, click_handler];
    }

    class MDBNavbarToggler extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$U, create_fragment$U, safe_not_equal, { class: 2, left: 3, right: 4 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "MDBNavbarToggler",
    			options,
    			id: create_fragment$U.name
    		});
    	}

    	get class() {
    		throw new Error("<MDBNavbarToggler>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<MDBNavbarToggler>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get left() {
    		throw new Error("<MDBNavbarToggler>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set left(value) {
    		throw new Error("<MDBNavbarToggler>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get right() {
    		throw new Error("<MDBNavbarToggler>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set right(value) {
    		throw new Error("<MDBNavbarToggler>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    function cubicOut(t) {
        const f = t - 1.0;
        return f * f * f + 1.0;
    }

    function fade(node, { delay = 0, duration = 400, easing = identity } = {}) {
        const o = +getComputedStyle(node).opacity;
        return {
            delay,
            duration,
            easing,
            css: t => `opacity: ${t * o}`
        };
    }
    function fly(node, { delay = 0, duration = 400, easing = cubicOut, x = 0, y = 0, opacity = 0 } = {}) {
        const style = getComputedStyle(node);
        const target_opacity = +style.opacity;
        const transform = style.transform === 'none' ? '' : style.transform;
        const od = target_opacity * (1 - opacity);
        const [xValue, xUnit] = split_css_unit(x);
        const [yValue, yUnit] = split_css_unit(y);
        return {
            delay,
            duration,
            easing,
            css: (t, u) => `
			transform: ${transform} translate(${(1 - t) * xValue}${xUnit}, ${(1 - t) * yValue}${yUnit});
			opacity: ${target_opacity - (od * u)}`
        };
    }
    function slide(node, { delay = 0, duration = 400, easing = cubicOut, axis = 'y' } = {}) {
        const style = getComputedStyle(node);
        const opacity = +style.opacity;
        const primary_property = axis === 'y' ? 'height' : 'width';
        const primary_property_value = parseFloat(style[primary_property]);
        const secondary_properties = axis === 'y' ? ['top', 'bottom'] : ['left', 'right'];
        const capitalized_secondary_properties = secondary_properties.map((e) => `${e[0].toUpperCase()}${e.slice(1)}`);
        const padding_start_value = parseFloat(style[`padding${capitalized_secondary_properties[0]}`]);
        const padding_end_value = parseFloat(style[`padding${capitalized_secondary_properties[1]}`]);
        const margin_start_value = parseFloat(style[`margin${capitalized_secondary_properties[0]}`]);
        const margin_end_value = parseFloat(style[`margin${capitalized_secondary_properties[1]}`]);
        const border_width_start_value = parseFloat(style[`border${capitalized_secondary_properties[0]}Width`]);
        const border_width_end_value = parseFloat(style[`border${capitalized_secondary_properties[1]}Width`]);
        return {
            delay,
            duration,
            easing,
            css: t => 'overflow: hidden;' +
                `opacity: ${Math.min(t * 20, 1) * opacity};` +
                `${primary_property}: ${t * primary_property_value}px;` +
                `padding-${secondary_properties[0]}: ${t * padding_start_value}px;` +
                `padding-${secondary_properties[1]}: ${t * padding_end_value}px;` +
                `margin-${secondary_properties[0]}: ${t * margin_start_value}px;` +
                `margin-${secondary_properties[1]}: ${t * margin_end_value}px;` +
                `border-${secondary_properties[0]}-width: ${t * border_width_start_value}px;` +
                `border-${secondary_properties[1]}-width: ${t * border_width_end_value}px;`
        };
    }

    /* node_modules\mdbsvelte\src\MDBCollapse.svelte generated by Svelte v3.59.2 */
    const file$K = "node_modules\\mdbsvelte\\src\\MDBCollapse.svelte";

    // (62:0) {#if isOpen}
    function create_if_block$c(ctx) {
    	let div;
    	let div_transition;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[15].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[14], null);
    	let div_levels = [{ class: /*classes*/ ctx[6] }, /*props*/ ctx[8]];
    	let div_data = {};

    	for (let i = 0; i < div_levels.length; i += 1) {
    		div_data = assign(div_data, div_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			set_attributes(div, div_data);
    			add_location(div, file$K, 62, 2, 1395);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(
    						div,
    						"introstart",
    						function () {
    							if (is_function(/*onEntering*/ ctx[1])) /*onEntering*/ ctx[1].apply(this, arguments);
    						},
    						false,
    						false,
    						false,
    						false
    					),
    					listen_dev(
    						div,
    						"introend",
    						function () {
    							if (is_function(/*onEntered*/ ctx[2])) /*onEntered*/ ctx[2].apply(this, arguments);
    						},
    						false,
    						false,
    						false,
    						false
    					),
    					listen_dev(
    						div,
    						"outrostart",
    						function () {
    							if (is_function(/*onExiting*/ ctx[3])) /*onExiting*/ ctx[3].apply(this, arguments);
    						},
    						false,
    						false,
    						false,
    						false
    					),
    					listen_dev(
    						div,
    						"outroend",
    						function () {
    							if (is_function(/*onExited*/ ctx[4])) /*onExited*/ ctx[4].apply(this, arguments);
    						},
    						false,
    						false,
    						false,
    						false
    					),
    					action_destroyer(/*forwardEvents*/ ctx[7].call(null, div))
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 16384)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[14],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[14])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[14], dirty, null),
    						null
    					);
    				}
    			}

    			set_attributes(div, div_data = get_spread_update(div_levels, [
    				(!current || dirty & /*classes*/ 64) && { class: /*classes*/ ctx[6] },
    				/*props*/ ctx[8]
    			]));
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);

    			add_render_callback(() => {
    				if (!current) return;
    				if (!div_transition) div_transition = create_bidirectional_transition(div, slide, {}, true);
    				div_transition.run(1);
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			if (!div_transition) div_transition = create_bidirectional_transition(div, slide, {}, false);
    			div_transition.run(0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    			if (detaching && div_transition) div_transition.end();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$c.name,
    		type: "if",
    		source: "(62:0) {#if isOpen}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$T(ctx) {
    	let if_block_anchor;
    	let current;
    	let mounted;
    	let dispose;
    	add_render_callback(/*onwindowresize*/ ctx[16]);
    	let if_block = /*isOpen*/ ctx[0] && create_if_block$c(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(window, "resize", /*onwindowresize*/ ctx[16]);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*isOpen*/ ctx[0]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*isOpen*/ 1) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$c(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$T.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$T($$self, $$props, $$invalidate) {
    	let classes;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('MDBCollapse', slots, ['default']);
    	const forwardEvents = forwardEventsBuilder(current_component);
    	const noop = () => undefined;
    	let { isOpen = false } = $$props;
    	let { class: className = '' } = $$props;
    	let { navbar = false } = $$props;
    	let { onEntering = noop } = $$props;
    	let { onEntered = noop } = $$props;
    	let { onExiting = noop } = $$props;
    	let { onExited = noop } = $$props;
    	let { expand = false } = $$props;
    	const props = clean$1($$props);
    	let windowWidth = 0;
    	let _wasMaximazed = false;
    	const minWidth = {};
    	minWidth['xs'] = 0;
    	minWidth['sm'] = 576;
    	minWidth['md'] = 768;
    	minWidth['lg'] = 992;
    	minWidth['xl'] = 1200;
    	const dispatch = createEventDispatcher();

    	function notify() {
    		dispatch('update', { isOpen });
    	}

    	function onwindowresize() {
    		$$invalidate(5, windowWidth = window.innerWidth);
    	}

    	$$self.$$set = $$new_props => {
    		$$invalidate(20, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ('isOpen' in $$new_props) $$invalidate(0, isOpen = $$new_props.isOpen);
    		if ('class' in $$new_props) $$invalidate(9, className = $$new_props.class);
    		if ('navbar' in $$new_props) $$invalidate(10, navbar = $$new_props.navbar);
    		if ('onEntering' in $$new_props) $$invalidate(1, onEntering = $$new_props.onEntering);
    		if ('onEntered' in $$new_props) $$invalidate(2, onEntered = $$new_props.onEntered);
    		if ('onExiting' in $$new_props) $$invalidate(3, onExiting = $$new_props.onExiting);
    		if ('onExited' in $$new_props) $$invalidate(4, onExited = $$new_props.onExited);
    		if ('expand' in $$new_props) $$invalidate(11, expand = $$new_props.expand);
    		if ('$$scope' in $$new_props) $$invalidate(14, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		clean: clean$1,
    		clsx,
    		forwardEventsBuilder,
    		current_component,
    		forwardEvents,
    		createEventDispatcher,
    		slide,
    		noop,
    		isOpen,
    		className,
    		navbar,
    		onEntering,
    		onEntered,
    		onExiting,
    		onExited,
    		expand,
    		props,
    		windowWidth,
    		_wasMaximazed,
    		minWidth,
    		dispatch,
    		notify,
    		classes
    	});

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(20, $$props = assign(assign({}, $$props), $$new_props));
    		if ('isOpen' in $$props) $$invalidate(0, isOpen = $$new_props.isOpen);
    		if ('className' in $$props) $$invalidate(9, className = $$new_props.className);
    		if ('navbar' in $$props) $$invalidate(10, navbar = $$new_props.navbar);
    		if ('onEntering' in $$props) $$invalidate(1, onEntering = $$new_props.onEntering);
    		if ('onEntered' in $$props) $$invalidate(2, onEntered = $$new_props.onEntered);
    		if ('onExiting' in $$props) $$invalidate(3, onExiting = $$new_props.onExiting);
    		if ('onExited' in $$props) $$invalidate(4, onExited = $$new_props.onExited);
    		if ('expand' in $$props) $$invalidate(11, expand = $$new_props.expand);
    		if ('windowWidth' in $$props) $$invalidate(5, windowWidth = $$new_props.windowWidth);
    		if ('_wasMaximazed' in $$props) $$invalidate(12, _wasMaximazed = $$new_props._wasMaximazed);
    		if ('classes' in $$props) $$invalidate(6, classes = $$new_props.classes);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*className, navbar*/ 1536) {
    			$$invalidate(6, classes = clsx(className, // collapseClass,
    			navbar && 'navbar-collapse'));
    		}

    		if ($$self.$$.dirty & /*navbar, expand, windowWidth, minWidth, isOpen, _wasMaximazed*/ 15393) {
    			if (navbar && expand) {
    				if (windowWidth >= minWidth[expand] && !isOpen) {
    					$$invalidate(0, isOpen = true);
    					$$invalidate(12, _wasMaximazed = true);
    					notify();
    				} else if (windowWidth < minWidth[expand] && _wasMaximazed) {
    					$$invalidate(0, isOpen = false);
    					$$invalidate(12, _wasMaximazed = false);
    					notify();
    				}
    			}
    		}
    	};

    	$$props = exclude_internal_props($$props);

    	return [
    		isOpen,
    		onEntering,
    		onEntered,
    		onExiting,
    		onExited,
    		windowWidth,
    		classes,
    		forwardEvents,
    		props,
    		className,
    		navbar,
    		expand,
    		_wasMaximazed,
    		minWidth,
    		$$scope,
    		slots,
    		onwindowresize
    	];
    }

    class MDBCollapse extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$T, create_fragment$T, safe_not_equal, {
    			isOpen: 0,
    			class: 9,
    			navbar: 10,
    			onEntering: 1,
    			onEntered: 2,
    			onExiting: 3,
    			onExited: 4,
    			expand: 11
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "MDBCollapse",
    			options,
    			id: create_fragment$T.name
    		});
    	}

    	get isOpen() {
    		throw new Error("<MDBCollapse>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isOpen(value) {
    		throw new Error("<MDBCollapse>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get class() {
    		throw new Error("<MDBCollapse>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<MDBCollapse>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get navbar() {
    		throw new Error("<MDBCollapse>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set navbar(value) {
    		throw new Error("<MDBCollapse>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onEntering() {
    		throw new Error("<MDBCollapse>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onEntering(value) {
    		throw new Error("<MDBCollapse>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onEntered() {
    		throw new Error("<MDBCollapse>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onEntered(value) {
    		throw new Error("<MDBCollapse>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onExiting() {
    		throw new Error("<MDBCollapse>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onExiting(value) {
    		throw new Error("<MDBCollapse>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onExited() {
    		throw new Error("<MDBCollapse>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onExited(value) {
    		throw new Error("<MDBCollapse>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get expand() {
    		throw new Error("<MDBCollapse>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set expand(value) {
    		throw new Error("<MDBCollapse>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\mdbsvelte\src\MDBNavItem.svelte generated by Svelte v3.59.2 */
    const file$J = "node_modules\\mdbsvelte\\src\\MDBNavItem.svelte";

    function create_fragment$S(ctx) {
    	let li;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[7].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[6], null);
    	let li_levels = [/*props*/ ctx[2], { class: /*classes*/ ctx[0] }];
    	let li_data = {};

    	for (let i = 0; i < li_levels.length; i += 1) {
    		li_data = assign(li_data, li_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			li = element("li");
    			if (default_slot) default_slot.c();
    			set_attributes(li, li_data);
    			add_location(li, file$J, 16, 0, 435);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);

    			if (default_slot) {
    				default_slot.m(li, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = action_destroyer(/*forwardEvents*/ ctx[1].call(null, li));
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 64)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[6],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[6])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[6], dirty, null),
    						null
    					);
    				}
    			}

    			set_attributes(li, li_data = get_spread_update(li_levels, [
    				/*props*/ ctx[2],
    				(!current || dirty & /*classes*/ 1) && { class: /*classes*/ ctx[0] }
    			]));
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    			if (default_slot) default_slot.d(detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$S.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$S($$self, $$props, $$invalidate) {
    	let classes;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('MDBNavItem', slots, ['default']);
    	const forwardEvents = forwardEventsBuilder(current_component);
    	let { class: className = '' } = $$props;
    	let { active = false } = $$props;
    	let { activeClassName = 'active' } = $$props;
    	const props = clean$1($$props);

    	$$self.$$set = $$new_props => {
    		$$invalidate(8, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ('class' in $$new_props) $$invalidate(3, className = $$new_props.class);
    		if ('active' in $$new_props) $$invalidate(4, active = $$new_props.active);
    		if ('activeClassName' in $$new_props) $$invalidate(5, activeClassName = $$new_props.activeClassName);
    		if ('$$scope' in $$new_props) $$invalidate(6, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		clean: clean$1,
    		clsx,
    		forwardEventsBuilder,
    		current_component,
    		forwardEvents,
    		className,
    		active,
    		activeClassName,
    		props,
    		classes
    	});

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(8, $$props = assign(assign({}, $$props), $$new_props));
    		if ('className' in $$props) $$invalidate(3, className = $$new_props.className);
    		if ('active' in $$props) $$invalidate(4, active = $$new_props.active);
    		if ('activeClassName' in $$props) $$invalidate(5, activeClassName = $$new_props.activeClassName);
    		if ('classes' in $$props) $$invalidate(0, classes = $$new_props.classes);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*className, active, activeClassName*/ 56) {
    			$$invalidate(0, classes = clsx(className, 'nav-item', active ? activeClassName : false));
    		}
    	};

    	$$props = exclude_internal_props($$props);

    	return [
    		classes,
    		forwardEvents,
    		props,
    		className,
    		active,
    		activeClassName,
    		$$scope,
    		slots
    	];
    }

    class MDBNavItem extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$S, create_fragment$S, safe_not_equal, { class: 3, active: 4, activeClassName: 5 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "MDBNavItem",
    			options,
    			id: create_fragment$S.name
    		});
    	}

    	get class() {
    		throw new Error("<MDBNavItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<MDBNavItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get active() {
    		throw new Error("<MDBNavItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set active(value) {
    		throw new Error("<MDBNavItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get activeClassName() {
    		throw new Error("<MDBNavItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set activeClassName(value) {
    		throw new Error("<MDBNavItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\components\_shared\TopNavigation.svelte generated by Svelte v3.59.2 */
    const file$I = "src\\components\\_shared\\TopNavigation.svelte";

    // (22:2) <MDBNavbarBrand href="/">
    function create_default_slot_8$9(ctx) {
    	let strong;

    	const block = {
    		c: function create() {
    			strong = element("strong");
    			strong.textContent = "CTRD";
    			add_location(strong, file$I, 22, 4, 777);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, strong, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(strong);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_8$9.name,
    		type: "slot",
    		source: "(22:2) <MDBNavbarBrand href=\\\"/\\\">",
    		ctx
    	});

    	return block;
    }

    // (29:8) <MDBNavLink to="#">
    function create_default_slot_7$a(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Home");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_7$a.name,
    		type: "slot",
    		source: "(29:8) <MDBNavLink to=\\\"#\\\">",
    		ctx
    	});

    	return block;
    }

    // (28:6) <MDBNavItem>
    function create_default_slot_6$b(ctx) {
    	let mdbnavlink;
    	let current;

    	mdbnavlink = new MDBNavLink({
    			props: {
    				to: "#",
    				$$slots: { default: [create_default_slot_7$a] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbnavlink.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbnavlink, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbnavlink_changes = {};

    			if (dirty & /*$$scope*/ 8) {
    				mdbnavlink_changes.$$scope = { dirty, ctx };
    			}

    			mdbnavlink.$set(mdbnavlink_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbnavlink.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbnavlink.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbnavlink, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_6$b.name,
    		type: "slot",
    		source: "(28:6) <MDBNavItem>",
    		ctx
    	});

    	return block;
    }

    // (27:4) <MDBNavbarNav left>
    function create_default_slot_5$c(ctx) {
    	let mdbnavitem;
    	let current;

    	mdbnavitem = new MDBNavItem({
    			props: {
    				$$slots: { default: [create_default_slot_6$b] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbnavitem.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbnavitem, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbnavitem_changes = {};

    			if (dirty & /*$$scope*/ 8) {
    				mdbnavitem_changes.$$scope = { dirty, ctx };
    			}

    			mdbnavitem.$set(mdbnavitem_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbnavitem.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbnavitem.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbnavitem, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_5$c.name,
    		type: "slot",
    		source: "(27:4) <MDBNavbarNav left>",
    		ctx
    	});

    	return block;
    }

    // (51:6) <MDBNavItem>
    function create_default_slot_4$c(ctx) {
    	let a;
    	let mdbicon;
    	let t;
    	let current;

    	mdbicon = new MDBIcon({
    			props: { fab: true, icon: "github", class: "mr-2" },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			a = element("a");
    			create_component(mdbicon.$$.fragment);
    			t = text("K09857");
    			attr_dev(a, "class", "border border-light rounded mr-1 nav-link Ripple-parent");
    			attr_dev(a, "rel", "noopener noreferrer");
    			attr_dev(a, "href", "https://github.com/SauravKanchan/mdbsvelte-dashboard");
    			attr_dev(a, "target", "_blank");
    			add_location(a, file$I, 51, 8, 1675);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);
    			mount_component(mdbicon, a, null);
    			append_dev(a, t);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbicon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbicon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    			destroy_component(mdbicon);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4$c.name,
    		type: "slot",
    		source: "(51:6) <MDBNavItem>",
    		ctx
    	});

    	return block;
    }

    // (59:6) <MDBNavItem>
    function create_default_slot_3$d(ctx) {
    	let a;
    	let mdbicon;
    	let t;
    	let current;

    	mdbicon = new MDBIcon({
    			props: {
    				fas: true,
    				icon: "door-open",
    				class: "mr-2"
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			a = element("a");
    			create_component(mdbicon.$$.fragment);
    			t = text("LOGOUT");
    			attr_dev(a, "class", "border border-light rounded mr-1 nav-link Ripple-parent");
    			attr_dev(a, "rel", "noopener noreferrer");
    			attr_dev(a, "href", "https://github.com/SauravKanchan/mdbsvelte");
    			attr_dev(a, "target", "_blank");
    			add_location(a, file$I, 59, 8, 2001);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);
    			mount_component(mdbicon, a, null);
    			append_dev(a, t);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbicon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbicon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    			destroy_component(mdbicon);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$d.name,
    		type: "slot",
    		source: "(59:6) <MDBNavItem>",
    		ctx
    	});

    	return block;
    }

    // (32:4) <MDBNavbarNav right>
    function create_default_slot_2$d(ctx) {
    	let mdbnavitem0;
    	let t;
    	let mdbnavitem1;
    	let current;

    	mdbnavitem0 = new MDBNavItem({
    			props: {
    				$$slots: { default: [create_default_slot_4$c] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbnavitem1 = new MDBNavItem({
    			props: {
    				$$slots: { default: [create_default_slot_3$d] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbnavitem0.$$.fragment);
    			t = space();
    			create_component(mdbnavitem1.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbnavitem0, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(mdbnavitem1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbnavitem0_changes = {};

    			if (dirty & /*$$scope*/ 8) {
    				mdbnavitem0_changes.$$scope = { dirty, ctx };
    			}

    			mdbnavitem0.$set(mdbnavitem0_changes);
    			const mdbnavitem1_changes = {};

    			if (dirty & /*$$scope*/ 8) {
    				mdbnavitem1_changes.$$scope = { dirty, ctx };
    			}

    			mdbnavitem1.$set(mdbnavitem1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbnavitem0.$$.fragment, local);
    			transition_in(mdbnavitem1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbnavitem0.$$.fragment, local);
    			transition_out(mdbnavitem1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbnavitem0, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(mdbnavitem1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$d.name,
    		type: "slot",
    		source: "(32:4) <MDBNavbarNav right>",
    		ctx
    	});

    	return block;
    }

    // (26:2) <MDBCollapse isOpen={collapse} navbar expand="md" on:update={handleUpdate}>
    function create_default_slot_1$d(ctx) {
    	let mdbnavbarnav0;
    	let t;
    	let mdbnavbarnav1;
    	let current;

    	mdbnavbarnav0 = new MDBNavbarNav({
    			props: {
    				left: true,
    				$$slots: { default: [create_default_slot_5$c] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbnavbarnav1 = new MDBNavbarNav({
    			props: {
    				right: true,
    				$$slots: { default: [create_default_slot_2$d] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbnavbarnav0.$$.fragment);
    			t = space();
    			create_component(mdbnavbarnav1.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbnavbarnav0, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(mdbnavbarnav1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbnavbarnav0_changes = {};

    			if (dirty & /*$$scope*/ 8) {
    				mdbnavbarnav0_changes.$$scope = { dirty, ctx };
    			}

    			mdbnavbarnav0.$set(mdbnavbarnav0_changes);
    			const mdbnavbarnav1_changes = {};

    			if (dirty & /*$$scope*/ 8) {
    				mdbnavbarnav1_changes.$$scope = { dirty, ctx };
    			}

    			mdbnavbarnav1.$set(mdbnavbarnav1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbnavbarnav0.$$.fragment, local);
    			transition_in(mdbnavbarnav1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbnavbarnav0.$$.fragment, local);
    			transition_out(mdbnavbarnav1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbnavbarnav0, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(mdbnavbarnav1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$d.name,
    		type: "slot",
    		source: "(26:2) <MDBCollapse isOpen={collapse} navbar expand=\\\"md\\\" on:update={handleUpdate}>",
    		ctx
    	});

    	return block;
    }

    // (21:0) <MDBNavbar class="flexible-navbar" light expand="md">
    function create_default_slot$g(ctx) {
    	let mdbnavbarbrand;
    	let t0;
    	let mdbnavbartoggler;
    	let t1;
    	let mdbcollapse;
    	let current;

    	mdbnavbarbrand = new MDBNavbarBrand({
    			props: {
    				href: "/",
    				$$slots: { default: [create_default_slot_8$9] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbnavbartoggler = new MDBNavbarToggler({ $$inline: true });
    	mdbnavbartoggler.$on("click", /*toggle*/ ctx[1]);

    	mdbcollapse = new MDBCollapse({
    			props: {
    				isOpen: /*collapse*/ ctx[0],
    				navbar: true,
    				expand: "md",
    				$$slots: { default: [create_default_slot_1$d] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbcollapse.$on("update", /*handleUpdate*/ ctx[2]);

    	const block = {
    		c: function create() {
    			create_component(mdbnavbarbrand.$$.fragment);
    			t0 = space();
    			create_component(mdbnavbartoggler.$$.fragment);
    			t1 = space();
    			create_component(mdbcollapse.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbnavbarbrand, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(mdbnavbartoggler, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(mdbcollapse, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbnavbarbrand_changes = {};

    			if (dirty & /*$$scope*/ 8) {
    				mdbnavbarbrand_changes.$$scope = { dirty, ctx };
    			}

    			mdbnavbarbrand.$set(mdbnavbarbrand_changes);
    			const mdbcollapse_changes = {};
    			if (dirty & /*collapse*/ 1) mdbcollapse_changes.isOpen = /*collapse*/ ctx[0];

    			if (dirty & /*$$scope*/ 8) {
    				mdbcollapse_changes.$$scope = { dirty, ctx };
    			}

    			mdbcollapse.$set(mdbcollapse_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbnavbarbrand.$$.fragment, local);
    			transition_in(mdbnavbartoggler.$$.fragment, local);
    			transition_in(mdbcollapse.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbnavbarbrand.$$.fragment, local);
    			transition_out(mdbnavbartoggler.$$.fragment, local);
    			transition_out(mdbcollapse.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbnavbarbrand, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(mdbnavbartoggler, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(mdbcollapse, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$g.name,
    		type: "slot",
    		source: "(21:0) <MDBNavbar class=\\\"flexible-navbar\\\" light expand=\\\"md\\\">",
    		ctx
    	});

    	return block;
    }

    function create_fragment$R(ctx) {
    	let mdbnavbar;
    	let current;

    	mdbnavbar = new MDBNavbar({
    			props: {
    				class: "flexible-navbar",
    				light: true,
    				expand: "md",
    				$$slots: { default: [create_default_slot$g] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbnavbar.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbnavbar, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const mdbnavbar_changes = {};

    			if (dirty & /*$$scope, collapse*/ 9) {
    				mdbnavbar_changes.$$scope = { dirty, ctx };
    			}

    			mdbnavbar.$set(mdbnavbar_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbnavbar.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbnavbar.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbnavbar, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$R.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$R($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('TopNavigation', slots, []);
    	let collapse = false;

    	function toggle() {
    		$$invalidate(0, collapse = !collapse);
    	}

    	function handleUpdate(event) {
    		$$invalidate(0, collapse = event.detail.isOpen);
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<TopNavigation> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		MDBNavbar,
    		MDBNavbarBrand,
    		MDBNavbarNav,
    		MDBNavbarToggler,
    		MDBCollapse,
    		MDBNavItem,
    		MDBNavLink,
    		MDBIcon,
    		collapse,
    		toggle,
    		handleUpdate
    	});

    	$$self.$inject_state = $$props => {
    		if ('collapse' in $$props) $$invalidate(0, collapse = $$props.collapse);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [collapse, toggle, handleUpdate];
    }

    class TopNavigation extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$R, create_fragment$R, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "TopNavigation",
    			options,
    			id: create_fragment$R.name
    		});
    	}
    }

    /* node_modules\mdbsvelte\src\MDBFooter.svelte generated by Svelte v3.59.2 */
    const file$H = "node_modules\\mdbsvelte\\src\\MDBFooter.svelte";

    function create_fragment$Q(ctx) {
    	let footer;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[6].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);
    	let footer_levels = [/*props*/ ctx[2], { class: /*elementClasses*/ ctx[0] }];
    	let footer_data = {};

    	for (let i = 0; i < footer_levels.length; i += 1) {
    		footer_data = assign(footer_data, footer_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			footer = element("footer");
    			if (default_slot) default_slot.c();
    			set_attributes(footer, footer_data);
    			add_location(footer, file$H, 16, 0, 422);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, footer, anchor);

    			if (default_slot) {
    				default_slot.m(footer, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = action_destroyer(/*forwardEvents*/ ctx[1].call(null, footer));
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 32)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[5],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[5])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[5], dirty, null),
    						null
    					);
    				}
    			}

    			set_attributes(footer, footer_data = get_spread_update(footer_levels, [
    				/*props*/ ctx[2],
    				(!current || dirty & /*elementClasses*/ 1) && { class: /*elementClasses*/ ctx[0] }
    			]));
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(footer);
    			if (default_slot) default_slot.d(detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$Q.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$Q($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('MDBFooter', slots, ['default']);
    	const forwardEvents = forwardEventsBuilder(current_component);
    	let { class: className = '' } = $$props;
    	let { color } = $$props;
    	const props = clean$1($$props, []);
    	let elementClasses;

    	$$self.$$.on_mount.push(function () {
    		if (color === undefined && !('color' in $$props || $$self.$$.bound[$$self.$$.props['color']])) {
    			console.warn("<MDBFooter> was created without expected prop 'color'");
    		}
    	});

    	$$self.$$set = $$new_props => {
    		$$invalidate(7, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ('class' in $$new_props) $$invalidate(3, className = $$new_props.class);
    		if ('color' in $$new_props) $$invalidate(4, color = $$new_props.color);
    		if ('$$scope' in $$new_props) $$invalidate(5, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		clean: clean$1,
    		clsx,
    		forwardEventsBuilder,
    		getColorClass,
    		current_component,
    		forwardEvents,
    		className,
    		color,
    		props,
    		elementClasses
    	});

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(7, $$props = assign(assign({}, $$props), $$new_props));
    		if ('className' in $$props) $$invalidate(3, className = $$new_props.className);
    		if ('color' in $$props) $$invalidate(4, color = $$new_props.color);
    		if ('elementClasses' in $$props) $$invalidate(0, elementClasses = $$new_props.elementClasses);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*className, color*/ 24) {
    			$$invalidate(0, elementClasses = clsx(className, 'page-footer', getColorClass(color)));
    		}
    	};

    	$$props = exclude_internal_props($$props);
    	return [elementClasses, forwardEvents, props, className, color, $$scope, slots];
    }

    class MDBFooter extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$Q, create_fragment$Q, safe_not_equal, { class: 3, color: 4 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "MDBFooter",
    			options,
    			id: create_fragment$Q.name
    		});
    	}

    	get class() {
    		throw new Error("<MDBFooter>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<MDBFooter>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get color() {
    		throw new Error("<MDBFooter>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set color(value) {
    		throw new Error("<MDBFooter>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\mdbsvelte\src\MDBBtn.svelte generated by Svelte v3.59.2 */
    const file$G = "node_modules\\mdbsvelte\\src\\MDBBtn.svelte";

    // (64:0) {:else}
    function create_else_block_1$1(ctx) {
    	let button;
    	let button_aria_label_value;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[22].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[21], null);
    	const default_slot_or_fallback = default_slot || fallback_block$1(ctx);

    	let button_levels = [
    		/*props*/ ctx[12],
    		{ type: /*type*/ ctx[4] },
    		{ class: /*classes*/ ctx[9] },
    		{ disabled: /*disabled*/ ctx[3] },
    		{ value: /*value*/ ctx[6] },
    		{
    			"aria-label": button_aria_label_value = /*ariaLabel*/ ctx[10] || /*defaultAriaLabel*/ ctx[8]
    		},
    		{ style: /*style*/ ctx[0] }
    	];

    	let button_data = {};

    	for (let i = 0; i < button_levels.length; i += 1) {
    		button_data = assign(button_data, button_levels[i]);
    	}

    	const block_1 = {
    		c: function create() {
    			button = element("button");
    			if (default_slot_or_fallback) default_slot_or_fallback.c();
    			set_attributes(button, button_data);
    			add_location(button, file$G, 64, 2, 1463);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);

    			if (default_slot_or_fallback) {
    				default_slot_or_fallback.m(button, null);
    			}

    			if (button.autofocus) button.focus();
    			/*button_binding*/ ctx[23](button);
    			current = true;

    			if (!mounted) {
    				dispose = action_destroyer(/*forwardEvents*/ ctx[11].call(null, button));
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 2097152)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[21],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[21])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[21], dirty, null),
    						null
    					);
    				}
    			} else {
    				if (default_slot_or_fallback && default_slot_or_fallback.p && (!current || dirty & /*close, children, $$scope*/ 2097158)) {
    					default_slot_or_fallback.p(ctx, !current ? -1 : dirty);
    				}
    			}

    			set_attributes(button, button_data = get_spread_update(button_levels, [
    				/*props*/ ctx[12],
    				(!current || dirty & /*type*/ 16) && { type: /*type*/ ctx[4] },
    				(!current || dirty & /*classes*/ 512) && { class: /*classes*/ ctx[9] },
    				(!current || dirty & /*disabled*/ 8) && { disabled: /*disabled*/ ctx[3] },
    				(!current || dirty & /*value*/ 64) && { value: /*value*/ ctx[6] },
    				(!current || dirty & /*ariaLabel, defaultAriaLabel*/ 1280 && button_aria_label_value !== (button_aria_label_value = /*ariaLabel*/ ctx[10] || /*defaultAriaLabel*/ ctx[8])) && { "aria-label": button_aria_label_value },
    				(!current || dirty & /*style*/ 1) && { style: /*style*/ ctx[0] }
    			]));
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot_or_fallback, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot_or_fallback, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			if (default_slot_or_fallback) default_slot_or_fallback.d(detaching);
    			/*button_binding*/ ctx[23](null);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block: block_1,
    		id: create_else_block_1$1.name,
    		type: "else",
    		source: "(64:0) {:else}",
    		ctx
    	});

    	return block_1;
    }

    // (50:0) {#if href}
    function create_if_block$b(ctx) {
    	let a;
    	let current_block_type_index;
    	let if_block;
    	let a_aria_label_value;
    	let current;
    	let mounted;
    	let dispose;
    	const if_block_creators = [create_if_block_1$5, create_else_block$9];
    	const if_blocks = [];

    	function select_block_type_1(ctx, dirty) {
    		if (/*children*/ ctx[1]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type_1(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	let a_levels = [
    		/*props*/ ctx[12],
    		{ class: /*classes*/ ctx[9] },
    		{ disabled: /*disabled*/ ctx[3] },
    		{ href: /*href*/ ctx[5] },
    		{
    			"aria-label": a_aria_label_value = /*ariaLabel*/ ctx[10] || /*defaultAriaLabel*/ ctx[8]
    		},
    		{ style: /*style*/ ctx[0] }
    	];

    	let a_data = {};

    	for (let i = 0; i < a_levels.length; i += 1) {
    		a_data = assign(a_data, a_levels[i]);
    	}

    	const block_1 = {
    		c: function create() {
    			a = element("a");
    			if_block.c();
    			set_attributes(a, a_data);
    			add_location(a, file$G, 50, 2, 1232);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);
    			if_blocks[current_block_type_index].m(a, null);
    			current = true;

    			if (!mounted) {
    				dispose = action_destroyer(/*forwardEvents*/ ctx[11].call(null, a));
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_1(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(a, null);
    			}

    			set_attributes(a, a_data = get_spread_update(a_levels, [
    				/*props*/ ctx[12],
    				(!current || dirty & /*classes*/ 512) && { class: /*classes*/ ctx[9] },
    				(!current || dirty & /*disabled*/ 8) && { disabled: /*disabled*/ ctx[3] },
    				(!current || dirty & /*href*/ 32) && { href: /*href*/ ctx[5] },
    				(!current || dirty & /*ariaLabel, defaultAriaLabel*/ 1280 && a_aria_label_value !== (a_aria_label_value = /*ariaLabel*/ ctx[10] || /*defaultAriaLabel*/ ctx[8])) && { "aria-label": a_aria_label_value },
    				(!current || dirty & /*style*/ 1) && { style: /*style*/ ctx[0] }
    			]));
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    			if_blocks[current_block_type_index].d();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block: block_1,
    		id: create_if_block$b.name,
    		type: "if",
    		source: "(50:0) {#if href}",
    		ctx
    	});

    	return block_1;
    }

    // (80:6) {:else}
    function create_else_block_2$1(ctx) {
    	let current;
    	const default_slot_template = /*#slots*/ ctx[22].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[21], null);

    	const block_1 = {
    		c: function create() {
    			if (default_slot) default_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 2097152)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[21],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[21])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[21], dirty, null),
    						null
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block: block_1,
    		id: create_else_block_2$1.name,
    		type: "else",
    		source: "(80:6) {:else}",
    		ctx
    	});

    	return block_1;
    }

    // (78:25) 
    function create_if_block_3$2(ctx) {
    	let t;

    	const block_1 = {
    		c: function create() {
    			t = text(/*children*/ ctx[1]);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*children*/ 2) set_data_dev(t, /*children*/ ctx[1]);
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block: block_1,
    		id: create_if_block_3$2.name,
    		type: "if",
    		source: "(78:25) ",
    		ctx
    	});

    	return block_1;
    }

    // (76:6) {#if close}
    function create_if_block_2$3(ctx) {
    	let span;

    	const block_1 = {
    		c: function create() {
    			span = element("span");
    			span.textContent = "×";
    			attr_dev(span, "aria-hidden", "true");
    			add_location(span, file$G, 76, 8, 1694);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block: block_1,
    		id: create_if_block_2$3.name,
    		type: "if",
    		source: "(76:6) {#if close}",
    		ctx
    	});

    	return block_1;
    }

    // (75:10)        
    function fallback_block$1(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block_2$3, create_if_block_3$2, create_else_block_2$1];
    	const if_blocks = [];

    	function select_block_type_2(ctx, dirty) {
    		if (/*close*/ ctx[2]) return 0;
    		if (/*children*/ ctx[1]) return 1;
    		return 2;
    	}

    	current_block_type_index = select_block_type_2(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block_1 = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_2(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block: block_1,
    		id: fallback_block$1.name,
    		type: "fallback",
    		source: "(75:10)        ",
    		ctx
    	});

    	return block_1;
    }

    // (60:4) {:else}
    function create_else_block$9(ctx) {
    	let current;
    	const default_slot_template = /*#slots*/ ctx[22].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[21], null);

    	const block_1 = {
    		c: function create() {
    			if (default_slot) default_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 2097152)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[21],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[21])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[21], dirty, null),
    						null
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block: block_1,
    		id: create_else_block$9.name,
    		type: "else",
    		source: "(60:4) {:else}",
    		ctx
    	});

    	return block_1;
    }

    // (58:4) {#if children}
    function create_if_block_1$5(ctx) {
    	let t;

    	const block_1 = {
    		c: function create() {
    			t = text(/*children*/ ctx[1]);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*children*/ 2) set_data_dev(t, /*children*/ ctx[1]);
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block: block_1,
    		id: create_if_block_1$5.name,
    		type: "if",
    		source: "(58:4) {#if children}",
    		ctx
    	});

    	return block_1;
    }

    function create_fragment$P(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block$b, create_else_block_1$1];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*href*/ ctx[5]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block_1 = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block: block_1,
    		id: create_fragment$P.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block_1;
    }

    function instance$P($$self, $$props, $$invalidate) {
    	let ariaLabel;
    	let classes;
    	let defaultAriaLabel;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('MDBBtn', slots, ['default']);
    	const forwardEvents = forwardEventsBuilder(current_component);
    	let { class: className = '' } = $$props;
    	let { active = false } = $$props;
    	let { block = false } = $$props;
    	let { children = undefined } = $$props;
    	let { close = false } = $$props;
    	let { color } = $$props;
    	let { disabled = false } = $$props;
    	let { type = "button" } = $$props;
    	let { href = '' } = $$props;
    	let { outline = false } = $$props;
    	let { size = '' } = $$props;
    	let { style = '' } = $$props;
    	let { value = '' } = $$props;
    	let { gradient } = $$props;
    	let domElement;
    	let { rounded } = $$props;

    	if (rounded) {
    		style = "border-radius: 10em" + style;
    	}

    	if (!color) {
    		href ? color = "primary" : color = 'default';
    	}

    	const props = clean$1($$props, ["color", "gradient", "value", "style", "size"]);

    	$$self.$$.on_mount.push(function () {
    		if (color === undefined && !('color' in $$props || $$self.$$.bound[$$self.$$.props['color']])) {
    			console.warn("<MDBBtn> was created without expected prop 'color'");
    		}

    		if (gradient === undefined && !('gradient' in $$props || $$self.$$.bound[$$self.$$.props['gradient']])) {
    			console.warn("<MDBBtn> was created without expected prop 'gradient'");
    		}

    		if (rounded === undefined && !('rounded' in $$props || $$self.$$.bound[$$self.$$.props['rounded']])) {
    			console.warn("<MDBBtn> was created without expected prop 'rounded'");
    		}
    	});

    	function button_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			domElement = $$value;
    			$$invalidate(7, domElement);
    		});
    	}

    	$$self.$$set = $$new_props => {
    		$$invalidate(24, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ('class' in $$new_props) $$invalidate(14, className = $$new_props.class);
    		if ('active' in $$new_props) $$invalidate(15, active = $$new_props.active);
    		if ('block' in $$new_props) $$invalidate(16, block = $$new_props.block);
    		if ('children' in $$new_props) $$invalidate(1, children = $$new_props.children);
    		if ('close' in $$new_props) $$invalidate(2, close = $$new_props.close);
    		if ('color' in $$new_props) $$invalidate(13, color = $$new_props.color);
    		if ('disabled' in $$new_props) $$invalidate(3, disabled = $$new_props.disabled);
    		if ('type' in $$new_props) $$invalidate(4, type = $$new_props.type);
    		if ('href' in $$new_props) $$invalidate(5, href = $$new_props.href);
    		if ('outline' in $$new_props) $$invalidate(17, outline = $$new_props.outline);
    		if ('size' in $$new_props) $$invalidate(18, size = $$new_props.size);
    		if ('style' in $$new_props) $$invalidate(0, style = $$new_props.style);
    		if ('value' in $$new_props) $$invalidate(6, value = $$new_props.value);
    		if ('gradient' in $$new_props) $$invalidate(19, gradient = $$new_props.gradient);
    		if ('rounded' in $$new_props) $$invalidate(20, rounded = $$new_props.rounded);
    		if ('$$scope' in $$new_props) $$invalidate(21, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		clean: clean$1,
    		clsx,
    		forwardEventsBuilder,
    		current_component,
    		forwardEvents,
    		className,
    		active,
    		block,
    		children,
    		close,
    		color,
    		disabled,
    		type,
    		href,
    		outline,
    		size,
    		style,
    		value,
    		gradient,
    		domElement,
    		rounded,
    		props,
    		defaultAriaLabel,
    		classes,
    		ariaLabel
    	});

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(24, $$props = assign(assign({}, $$props), $$new_props));
    		if ('className' in $$props) $$invalidate(14, className = $$new_props.className);
    		if ('active' in $$props) $$invalidate(15, active = $$new_props.active);
    		if ('block' in $$props) $$invalidate(16, block = $$new_props.block);
    		if ('children' in $$props) $$invalidate(1, children = $$new_props.children);
    		if ('close' in $$props) $$invalidate(2, close = $$new_props.close);
    		if ('color' in $$props) $$invalidate(13, color = $$new_props.color);
    		if ('disabled' in $$props) $$invalidate(3, disabled = $$new_props.disabled);
    		if ('type' in $$props) $$invalidate(4, type = $$new_props.type);
    		if ('href' in $$props) $$invalidate(5, href = $$new_props.href);
    		if ('outline' in $$props) $$invalidate(17, outline = $$new_props.outline);
    		if ('size' in $$props) $$invalidate(18, size = $$new_props.size);
    		if ('style' in $$props) $$invalidate(0, style = $$new_props.style);
    		if ('value' in $$props) $$invalidate(6, value = $$new_props.value);
    		if ('gradient' in $$props) $$invalidate(19, gradient = $$new_props.gradient);
    		if ('domElement' in $$props) $$invalidate(7, domElement = $$new_props.domElement);
    		if ('rounded' in $$props) $$invalidate(20, rounded = $$new_props.rounded);
    		if ('defaultAriaLabel' in $$props) $$invalidate(8, defaultAriaLabel = $$new_props.defaultAriaLabel);
    		if ('classes' in $$props) $$invalidate(9, classes = $$new_props.classes);
    		if ('ariaLabel' in $$props) $$invalidate(10, ariaLabel = $$new_props.ariaLabel);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		$$invalidate(10, ariaLabel = $$props['aria-label']);

    		if ($$self.$$.dirty & /*className, close, gradient, outline, color, size, block, active*/ 1040388) {
    			$$invalidate(9, classes = clsx(
    				className,
    				{ close },
    				close || 'btn waves-effect waves-light',
    				gradient
    				? `${gradient}-gradient`
    				: close || `btn${outline ? '-outline' : ''}-${color}`,
    				size ? `btn-${size}` : false,
    				block ? 'btn-block' : false,
    				{ active }
    			));
    		}

    		if ($$self.$$.dirty & /*close*/ 4) {
    			$$invalidate(8, defaultAriaLabel = close ? 'Close' : null);
    		}
    	};

    	$$props = exclude_internal_props($$props);

    	return [
    		style,
    		children,
    		close,
    		disabled,
    		type,
    		href,
    		value,
    		domElement,
    		defaultAriaLabel,
    		classes,
    		ariaLabel,
    		forwardEvents,
    		props,
    		color,
    		className,
    		active,
    		block,
    		outline,
    		size,
    		gradient,
    		rounded,
    		$$scope,
    		slots,
    		button_binding
    	];
    }

    class MDBBtn extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$P, create_fragment$P, safe_not_equal, {
    			class: 14,
    			active: 15,
    			block: 16,
    			children: 1,
    			close: 2,
    			color: 13,
    			disabled: 3,
    			type: 4,
    			href: 5,
    			outline: 17,
    			size: 18,
    			style: 0,
    			value: 6,
    			gradient: 19,
    			rounded: 20
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "MDBBtn",
    			options,
    			id: create_fragment$P.name
    		});
    	}

    	get class() {
    		throw new Error("<MDBBtn>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<MDBBtn>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get active() {
    		throw new Error("<MDBBtn>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set active(value) {
    		throw new Error("<MDBBtn>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get block() {
    		throw new Error("<MDBBtn>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set block(value) {
    		throw new Error("<MDBBtn>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get children() {
    		throw new Error("<MDBBtn>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set children(value) {
    		throw new Error("<MDBBtn>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get close() {
    		throw new Error("<MDBBtn>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set close(value) {
    		throw new Error("<MDBBtn>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get color() {
    		throw new Error("<MDBBtn>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set color(value) {
    		throw new Error("<MDBBtn>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get disabled() {
    		throw new Error("<MDBBtn>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set disabled(value) {
    		throw new Error("<MDBBtn>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get type() {
    		throw new Error("<MDBBtn>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set type(value) {
    		throw new Error("<MDBBtn>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get href() {
    		throw new Error("<MDBBtn>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set href(value) {
    		throw new Error("<MDBBtn>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get outline() {
    		throw new Error("<MDBBtn>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set outline(value) {
    		throw new Error("<MDBBtn>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get size() {
    		throw new Error("<MDBBtn>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set size(value) {
    		throw new Error("<MDBBtn>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get style() {
    		throw new Error("<MDBBtn>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set style(value) {
    		throw new Error("<MDBBtn>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get value() {
    		throw new Error("<MDBBtn>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<MDBBtn>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get gradient() {
    		throw new Error("<MDBBtn>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set gradient(value) {
    		throw new Error("<MDBBtn>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get rounded() {
    		throw new Error("<MDBBtn>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set rounded(value) {
    		throw new Error("<MDBBtn>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\components\_shared\Footer.svelte generated by Svelte v3.59.2 */
    const file$F = "src\\components\\_shared\\Footer.svelte";

    // (7:0) <MDBFooter color="blue" class="text-center font-small darken-2 footer">
    function create_default_slot$f(ctx) {
    	let p;
    	let t0;
    	let t1_value = new Date().getFullYear() + "";
    	let t1;
    	let t2;
    	let a;

    	const block = {
    		c: function create() {
    			p = element("p");
    			t0 = text("© ");
    			t1 = text(t1_value);
    			t2 = text(" Copyright:\r\n    ");
    			a = element("a");
    			a.textContent = "CTRD5940 Dante Chen";
    			attr_dev(a, "href", " ");
    			add_location(a, file$F, 30, 4, 1177);
    			attr_dev(p, "class", "footer-copyright mb-0 py-3 text-center");
    			add_location(p, file$F, 28, 2, 1071);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, t0);
    			append_dev(p, t1);
    			append_dev(p, t2);
    			append_dev(p, a);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$f.name,
    		type: "slot",
    		source: "(7:0) <MDBFooter color=\\\"blue\\\" class=\\\"text-center font-small darken-2 footer\\\">",
    		ctx
    	});

    	return block;
    }

    function create_fragment$O(ctx) {
    	let mdbfooter;
    	let current;

    	mdbfooter = new MDBFooter({
    			props: {
    				color: "blue",
    				class: "text-center font-small darken-2 footer",
    				$$slots: { default: [create_default_slot$f] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbfooter.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbfooter, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const mdbfooter_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbfooter_changes.$$scope = { dirty, ctx };
    			}

    			mdbfooter.$set(mdbfooter_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbfooter.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbfooter.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbfooter, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$O.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$O($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Footer', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Footer> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ MDBFooter, MDBBtn, MDBIcon });
    	return [];
    }

    class Footer extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$O, create_fragment$O, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Footer",
    			options,
    			id: create_fragment$O.name
    		});
    	}
    }

    /* src\components\_layout.svelte generated by Svelte v3.59.2 */
    const file$E = "src\\components\\_layout.svelte";

    function create_fragment$N(ctx) {
    	let div1;
    	let topnavigation;
    	let t0;
    	let sidenavigation;
    	let t1;
    	let div0;
    	let route;
    	let t2;
    	let footer;
    	let current;
    	topnavigation = new TopNavigation({ $$inline: true });

    	sidenavigation = new SideNavigation({
    			props: {
    				segment: /*segment*/ ctx[1],
    				isOpen: /*isOpen*/ ctx[2]
    			},
    			$$inline: true
    		});

    	route = new Route({
    			props: {
    				currentRoute: /*currentRoute*/ ctx[0],
    				params: /*params*/ ctx[3]
    			},
    			$$inline: true
    		});

    	footer = new Footer({ $$inline: true });

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			create_component(topnavigation.$$.fragment);
    			t0 = space();
    			create_component(sidenavigation.$$.fragment);
    			t1 = space();
    			div0 = element("div");
    			create_component(route.$$.fragment);
    			t2 = space();
    			create_component(footer.$$.fragment);
    			attr_dev(div0, "class", "px-2 pt-4 p-md-5");
    			attr_dev(div0, "id", "content");
    			add_location(div0, file$E, 17, 2, 479);
    			attr_dev(div1, "class", "flexible-content");
    			add_location(div1, file$E, 14, 0, 383);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			mount_component(topnavigation, div1, null);
    			append_dev(div1, t0);
    			mount_component(sidenavigation, div1, null);
    			append_dev(div1, t1);
    			append_dev(div1, div0);
    			mount_component(route, div0, null);
    			append_dev(div1, t2);
    			mount_component(footer, div1, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const sidenavigation_changes = {};
    			if (dirty & /*segment*/ 2) sidenavigation_changes.segment = /*segment*/ ctx[1];
    			sidenavigation.$set(sidenavigation_changes);
    			const route_changes = {};
    			if (dirty & /*currentRoute*/ 1) route_changes.currentRoute = /*currentRoute*/ ctx[0];
    			route.$set(route_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(topnavigation.$$.fragment, local);
    			transition_in(sidenavigation.$$.fragment, local);
    			transition_in(route.$$.fragment, local);
    			transition_in(footer.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(topnavigation.$$.fragment, local);
    			transition_out(sidenavigation.$$.fragment, local);
    			transition_out(route.$$.fragment, local);
    			transition_out(footer.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			destroy_component(topnavigation);
    			destroy_component(sidenavigation);
    			destroy_component(route);
    			destroy_component(footer);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$N.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$N($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Layout', slots, []);
    	let { currentRoute } = $$props;
    	let { segment } = $$props;
    	let isOpen = true;
    	const params = {};

    	$$self.$$.on_mount.push(function () {
    		if (currentRoute === undefined && !('currentRoute' in $$props || $$self.$$.bound[$$self.$$.props['currentRoute']])) {
    			console.warn("<Layout> was created without expected prop 'currentRoute'");
    		}

    		if (segment === undefined && !('segment' in $$props || $$self.$$.bound[$$self.$$.props['segment']])) {
    			console.warn("<Layout> was created without expected prop 'segment'");
    		}
    	});

    	const writable_props = ['currentRoute', 'segment'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Layout> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('currentRoute' in $$props) $$invalidate(0, currentRoute = $$props.currentRoute);
    		if ('segment' in $$props) $$invalidate(1, segment = $$props.segment);
    	};

    	$$self.$capture_state = () => ({
    		Route,
    		SideNavigation,
    		TopNavigation,
    		Footer,
    		currentRoute,
    		segment,
    		isOpen,
    		params
    	});

    	$$self.$inject_state = $$props => {
    		if ('currentRoute' in $$props) $$invalidate(0, currentRoute = $$props.currentRoute);
    		if ('segment' in $$props) $$invalidate(1, segment = $$props.segment);
    		if ('isOpen' in $$props) $$invalidate(2, isOpen = $$props.isOpen);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [currentRoute, segment, isOpen, params];
    }

    class Layout extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$N, create_fragment$N, safe_not_equal, { currentRoute: 0, segment: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Layout",
    			options,
    			id: create_fragment$N.name
    		});
    	}

    	get currentRoute() {
    		throw new Error("<Layout>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set currentRoute(value) {
    		throw new Error("<Layout>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get segment() {
    		throw new Error("<Layout>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set segment(value) {
    		throw new Error("<Layout>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\mdbsvelte\src\MDBRow.svelte generated by Svelte v3.59.2 */
    const file$D = "node_modules\\mdbsvelte\\src\\MDBRow.svelte";

    function create_fragment$M(ctx) {
    	let div;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[7].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[6], null);

    	let div_levels = [
    		/*props*/ ctx[1],
    		{
    			class: /*rowClasses*/ ctx[2].join(' ')
    		}
    	];

    	let div_data = {};

    	for (let i = 0; i < div_levels.length; i += 1) {
    		div_data = assign(div_data, div_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			set_attributes(div, div_data);
    			add_location(div, file$D, 34, 0, 768);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = action_destroyer(/*forwardEvents*/ ctx[0].call(null, div));
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 64)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[6],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[6])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[6], dirty, null),
    						null
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$M.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$M($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('MDBRow', slots, ['default']);
    	const forwardEvents = forwardEventsBuilder(current_component);
    	let { class: className = '' } = $$props;
    	let { noGutters = false } = $$props;
    	let { form = false } = $$props;
    	const props = clean$1($$props, []);
    	let rowClasses = [];
    	let position = ["start", "center", "end", "around", "between"];

    	for (let pos in position) {
    		if (props[position[pos]]) {
    			rowClasses.push(`justify-content-${position[pos]}`);
    		}
    	}

    	if (className) {
    		rowClasses.push(className);
    	}

    	if (form) {
    		rowClasses.push('form-row');
    	} else {
    		rowClasses.push('row');
    	}

    	if (noGutters) {
    		rowClasses.push('no-gutters');
    	}

    	$$self.$$set = $$new_props => {
    		$$invalidate(9, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ('class' in $$new_props) $$invalidate(3, className = $$new_props.class);
    		if ('noGutters' in $$new_props) $$invalidate(4, noGutters = $$new_props.noGutters);
    		if ('form' in $$new_props) $$invalidate(5, form = $$new_props.form);
    		if ('$$scope' in $$new_props) $$invalidate(6, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		clean: clean$1,
    		clsx,
    		forwardEventsBuilder,
    		current_component,
    		forwardEvents,
    		className,
    		noGutters,
    		form,
    		props,
    		rowClasses,
    		position
    	});

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(9, $$props = assign(assign({}, $$props), $$new_props));
    		if ('className' in $$props) $$invalidate(3, className = $$new_props.className);
    		if ('noGutters' in $$props) $$invalidate(4, noGutters = $$new_props.noGutters);
    		if ('form' in $$props) $$invalidate(5, form = $$new_props.form);
    		if ('rowClasses' in $$props) $$invalidate(2, rowClasses = $$new_props.rowClasses);
    		if ('position' in $$props) position = $$new_props.position;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [forwardEvents, props, rowClasses, className, noGutters, form, $$scope, slots];
    }

    class MDBRow extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$M, create_fragment$M, safe_not_equal, { class: 3, noGutters: 4, form: 5 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "MDBRow",
    			options,
    			id: create_fragment$M.name
    		});
    	}

    	get class() {
    		throw new Error("<MDBRow>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<MDBRow>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get noGutters() {
    		throw new Error("<MDBRow>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set noGutters(value) {
    		throw new Error("<MDBRow>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get form() {
    		throw new Error("<MDBRow>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set form(value) {
    		throw new Error("<MDBRow>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\mdbsvelte\src\MDBCol.svelte generated by Svelte v3.59.2 */
    const file$C = "node_modules\\mdbsvelte\\src\\MDBCol.svelte";

    function create_fragment$L(ctx) {
    	let div;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[6].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);

    	let div_levels = [
    		/*props*/ ctx[2],
    		{
    			class: /*colClasses*/ ctx[1].join(' ')
    		}
    	];

    	let div_data = {};

    	for (let i = 0; i < div_levels.length; i += 1) {
    		div_data = assign(div_data, div_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			set_attributes(div, div_data);
    			add_location(div, file$C, 56, 0, 1525);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = action_destroyer(/*forwardEvents*/ ctx[0].call(null, div));
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 32)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[5],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[5])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[5], dirty, null),
    						null
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$L.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$L($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('MDBCol', slots, ['default']);
    	const forwardEvents = forwardEventsBuilder(current_component);
    	let { class: className = '' } = $$props;
    	let { size } = $$props;
    	const colClasses = [];
    	const widths = ['xs', 'sm', 'md', 'lg', 'xl'];
    	const props = clean$1($$props, [...widths].concat(["size"]));

    	widths.forEach(colWidth => {
    		const columnProp = $$props[colWidth];

    		if (!columnProp && columnProp !== '') {
    			return; //no value for this width
    		}

    		const isXs = colWidth === 'xs';

    		if (isObject$1(columnProp)) {
    			const colSizeInterfix = isXs ? '-' : `-${colWidth}-`;
    			const colClass = getColumnSizeClass(isXs, colWidth, columnProp.size);

    			if (columnProp.size || columnProp.size === '') {
    				colClasses.push(colClass);
    			}

    			if (columnProp.push) {
    				colClasses.push(`push${colSizeInterfix}${columnProp.push}`);
    			}

    			if (columnProp.pull) {
    				colClasses.push(`pull${colSizeInterfix}${columnProp.pull}`);
    			}

    			if (columnProp.offset) {
    				colClasses.push(`offset${colSizeInterfix}${columnProp.offset}`);
    			}
    		} else {
    			colClasses.push(getColumnSizeClass(isXs, colWidth, columnProp));
    		}
    	});

    	if (size) {
    		colClasses.push(`col-${size}`);
    	}

    	if (!colClasses.length) {
    		colClasses.push('col');
    	}

    	if (className) {
    		colClasses.push(className);
    	}

    	$$self.$$.on_mount.push(function () {
    		if (size === undefined && !('size' in $$props || $$self.$$.bound[$$self.$$.props['size']])) {
    			console.warn("<MDBCol> was created without expected prop 'size'");
    		}
    	});

    	$$self.$$set = $$new_props => {
    		$$invalidate(8, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ('class' in $$new_props) $$invalidate(3, className = $$new_props.class);
    		if ('size' in $$new_props) $$invalidate(4, size = $$new_props.size);
    		if ('$$scope' in $$new_props) $$invalidate(5, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		clean: clean$1,
    		clsx,
    		forwardEventsBuilder,
    		current_component,
    		forwardEvents,
    		getColumnSizeClass,
    		isObject: isObject$1,
    		className,
    		size,
    		colClasses,
    		widths,
    		props
    	});

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(8, $$props = assign(assign({}, $$props), $$new_props));
    		if ('className' in $$props) $$invalidate(3, className = $$new_props.className);
    		if ('size' in $$props) $$invalidate(4, size = $$new_props.size);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [forwardEvents, colClasses, props, className, size, $$scope, slots];
    }

    class MDBCol extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$L, create_fragment$L, safe_not_equal, { class: 3, size: 4 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "MDBCol",
    			options,
    			id: create_fragment$L.name
    		});
    	}

    	get class() {
    		throw new Error("<MDBCol>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<MDBCol>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get size() {
    		throw new Error("<MDBCol>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set size(value) {
    		throw new Error("<MDBCol>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\mdbsvelte\src\MDBCard.svelte generated by Svelte v3.59.2 */
    const file$B = "node_modules\\mdbsvelte\\src\\MDBCard.svelte";

    function create_fragment$K(ctx) {
    	let div;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[10].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], null);
    	let div_levels = [/*props*/ ctx[3], { class: /*classes*/ ctx[1] }, { style: /*style*/ ctx[0] }];
    	let div_data = {};

    	for (let i = 0; i < div_levels.length; i += 1) {
    		div_data = assign(div_data, div_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			set_attributes(div, div_data);
    			add_location(div, file$B, 27, 0, 673);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = action_destroyer(/*forwardEvents*/ ctx[2].call(null, div));
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 512)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[9],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[9])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[9], dirty, null),
    						null
    					);
    				}
    			}

    			set_attributes(div, div_data = get_spread_update(div_levels, [
    				/*props*/ ctx[3],
    				(!current || dirty & /*classes*/ 2) && { class: /*classes*/ ctx[1] },
    				(!current || dirty & /*style*/ 1) && { style: /*style*/ ctx[0] }
    			]));
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$K.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$K($$self, $$props, $$invalidate) {
    	let classes;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('MDBCard', slots, ['default']);
    	const forwardEvents = forwardEventsBuilder(current_component);
    	let { class: className = '' } = $$props;
    	let { body = false } = $$props;
    	let { color = '' } = $$props;
    	let { inverse = false } = $$props;
    	let { outline = false } = $$props;
    	let { style = '' } = $$props;
    	const props = clean$1($$props);

    	$$self.$$set = $$new_props => {
    		$$invalidate(11, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ('class' in $$new_props) $$invalidate(4, className = $$new_props.class);
    		if ('body' in $$new_props) $$invalidate(5, body = $$new_props.body);
    		if ('color' in $$new_props) $$invalidate(6, color = $$new_props.color);
    		if ('inverse' in $$new_props) $$invalidate(7, inverse = $$new_props.inverse);
    		if ('outline' in $$new_props) $$invalidate(8, outline = $$new_props.outline);
    		if ('style' in $$new_props) $$invalidate(0, style = $$new_props.style);
    		if ('$$scope' in $$new_props) $$invalidate(9, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		clean: clean$1,
    		clsx,
    		forwardEventsBuilder,
    		getColorClass,
    		current_component,
    		forwardEvents,
    		className,
    		body,
    		color,
    		inverse,
    		outline,
    		style,
    		props,
    		classes
    	});

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(11, $$props = assign(assign({}, $$props), $$new_props));
    		if ('className' in $$props) $$invalidate(4, className = $$new_props.className);
    		if ('body' in $$props) $$invalidate(5, body = $$new_props.body);
    		if ('color' in $$props) $$invalidate(6, color = $$new_props.color);
    		if ('inverse' in $$props) $$invalidate(7, inverse = $$new_props.inverse);
    		if ('outline' in $$props) $$invalidate(8, outline = $$new_props.outline);
    		if ('style' in $$props) $$invalidate(0, style = $$new_props.style);
    		if ('classes' in $$props) $$invalidate(1, classes = $$new_props.classes);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*className, inverse, body, color, outline*/ 496) {
    			$$invalidate(1, classes = clsx(className, 'card', inverse ? 'text-white' : false, body ? 'card-body' : false, color & outline ? `border-${color}` : false, color && !outline ? `${getColorClass(color)}` : false));
    		}
    	};

    	$$props = exclude_internal_props($$props);

    	return [
    		style,
    		classes,
    		forwardEvents,
    		props,
    		className,
    		body,
    		color,
    		inverse,
    		outline,
    		$$scope,
    		slots
    	];
    }

    class MDBCard extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$K, create_fragment$K, safe_not_equal, {
    			class: 4,
    			body: 5,
    			color: 6,
    			inverse: 7,
    			outline: 8,
    			style: 0
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "MDBCard",
    			options,
    			id: create_fragment$K.name
    		});
    	}

    	get class() {
    		throw new Error("<MDBCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<MDBCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get body() {
    		throw new Error("<MDBCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set body(value) {
    		throw new Error("<MDBCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get color() {
    		throw new Error("<MDBCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set color(value) {
    		throw new Error("<MDBCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get inverse() {
    		throw new Error("<MDBCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set inverse(value) {
    		throw new Error("<MDBCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get outline() {
    		throw new Error("<MDBCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set outline(value) {
    		throw new Error("<MDBCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get style() {
    		throw new Error("<MDBCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set style(value) {
    		throw new Error("<MDBCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\mdbsvelte\src\MDBCardBody.svelte generated by Svelte v3.59.2 */
    const file$A = "node_modules\\mdbsvelte\\src\\MDBCardBody.svelte";

    function create_fragment$J(ctx) {
    	let div;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[5].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);
    	let div_levels = [/*props*/ ctx[2], { class: /*classes*/ ctx[0] }];
    	let div_data = {};

    	for (let i = 0; i < div_levels.length; i += 1) {
    		div_data = assign(div_data, div_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			set_attributes(div, div_data);
    			add_location(div, file$A, 14, 0, 331);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = action_destroyer(/*forwardEvents*/ ctx[1].call(null, div));
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 16)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[4],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[4])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[4], dirty, null),
    						null
    					);
    				}
    			}

    			set_attributes(div, div_data = get_spread_update(div_levels, [
    				/*props*/ ctx[2],
    				(!current || dirty & /*classes*/ 1) && { class: /*classes*/ ctx[0] }
    			]));
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$J.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$J($$self, $$props, $$invalidate) {
    	let classes;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('MDBCardBody', slots, ['default']);
    	const forwardEvents = forwardEventsBuilder(current_component);
    	let { class: className = '' } = $$props;
    	const props = clean$1($$props);

    	$$self.$$set = $$new_props => {
    		$$invalidate(6, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ('class' in $$new_props) $$invalidate(3, className = $$new_props.class);
    		if ('$$scope' in $$new_props) $$invalidate(4, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		clean: clean$1,
    		clsx,
    		forwardEventsBuilder,
    		current_component,
    		forwardEvents,
    		className,
    		props,
    		classes
    	});

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(6, $$props = assign(assign({}, $$props), $$new_props));
    		if ('className' in $$props) $$invalidate(3, className = $$new_props.className);
    		if ('classes' in $$props) $$invalidate(0, classes = $$new_props.classes);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*className*/ 8) {
    			$$invalidate(0, classes = clsx(className, 'card-body'));
    		}
    	};

    	$$props = exclude_internal_props($$props);
    	return [classes, forwardEvents, props, className, $$scope, slots];
    }

    class MDBCardBody extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$J, create_fragment$J, safe_not_equal, { class: 3 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "MDBCardBody",
    			options,
    			id: create_fragment$J.name
    		});
    	}

    	get class() {
    		throw new Error("<MDBCardBody>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<MDBCardBody>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\mdbsvelte\src\MDBCardText.svelte generated by Svelte v3.59.2 */
    const file$z = "node_modules\\mdbsvelte\\src\\MDBCardText.svelte";

    function create_fragment$I(ctx) {
    	let p;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[5].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);
    	let p_levels = [/*props*/ ctx[2], { class: /*classes*/ ctx[0] }];
    	let p_data = {};

    	for (let i = 0; i < p_levels.length; i += 1) {
    		p_data = assign(p_data, p_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			p = element("p");
    			if (default_slot) default_slot.c();
    			set_attributes(p, p_data);
    			add_location(p, file$z, 13, 0, 330);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);

    			if (default_slot) {
    				default_slot.m(p, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = action_destroyer(/*forwardEvents*/ ctx[1].call(null, p));
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 16)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[4],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[4])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[4], dirty, null),
    						null
    					);
    				}
    			}

    			set_attributes(p, p_data = get_spread_update(p_levels, [
    				/*props*/ ctx[2],
    				(!current || dirty & /*classes*/ 1) && { class: /*classes*/ ctx[0] }
    			]));
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    			if (default_slot) default_slot.d(detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$I.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$I($$self, $$props, $$invalidate) {
    	let classes;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('MDBCardText', slots, ['default']);
    	const forwardEvents = forwardEventsBuilder(current_component);
    	let { class: className = '' } = $$props;
    	const props = clean$1($$props);

    	$$self.$$set = $$new_props => {
    		$$invalidate(6, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ('class' in $$new_props) $$invalidate(3, className = $$new_props.class);
    		if ('$$scope' in $$new_props) $$invalidate(4, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		clean: clean$1,
    		clsx,
    		forwardEventsBuilder,
    		current_component,
    		forwardEvents,
    		className,
    		props,
    		classes
    	});

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(6, $$props = assign(assign({}, $$props), $$new_props));
    		if ('className' in $$props) $$invalidate(3, className = $$new_props.className);
    		if ('classes' in $$props) $$invalidate(0, classes = $$new_props.classes);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*className*/ 8) {
    			$$invalidate(0, classes = clsx(className, 'card-text'));
    		}
    	};

    	$$props = exclude_internal_props($$props);
    	return [classes, forwardEvents, props, className, $$scope, slots];
    }

    class MDBCardText extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$I, create_fragment$I, safe_not_equal, { class: 3 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "MDBCardText",
    			options,
    			id: create_fragment$I.name
    		});
    	}

    	get class() {
    		throw new Error("<MDBCardText>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<MDBCardText>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\components\pages\sections\AdminCardSection1.svelte generated by Svelte v3.59.2 */
    const file$y = "src\\components\\pages\\sections\\AdminCardSection1.svelte";

    // (33:8) <MDBCardText>
    function create_default_slot_16$5(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Better than last week (25%)");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_16$5.name,
    		type: "slot",
    		source: "(33:8) <MDBCardText>",
    		ctx
    	});

    	return block;
    }

    // (22:6) <MDBCardBody>
    function create_default_slot_15$5(ctx) {
    	let div1;
    	let div0;
    	let t;
    	let mdbcardtext;
    	let current;

    	mdbcardtext = new MDBCardText({
    			props: {
    				$$slots: { default: [create_default_slot_16$5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			t = space();
    			create_component(mdbcardtext.$$.fragment);
    			attr_dev(div0, "aria-valuemax", "100");
    			attr_dev(div0, "aria-valuemin", "0");
    			attr_dev(div0, "aria-valuenow", "25");
    			attr_dev(div0, "class", "progress-bar bg-primary");
    			attr_dev(div0, "role", "progressbar");
    			set_style(div0, "width", "25%");
    			add_location(div0, file$y, 23, 10, 783);
    			attr_dev(div1, "class", "progress");
    			add_location(div1, file$y, 22, 8, 749);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			insert_dev(target, t, anchor);
    			mount_component(mdbcardtext, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbcardtext_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbcardtext_changes.$$scope = { dirty, ctx };
    			}

    			mdbcardtext.$set(mdbcardtext_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbcardtext.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbcardtext.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (detaching) detach_dev(t);
    			destroy_component(mdbcardtext, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_15$5.name,
    		type: "slot",
    		source: "(22:6) <MDBCardBody>",
    		ctx
    	});

    	return block;
    }

    // (12:4) <MDBCard class="cascading-admin-card">
    function create_default_slot_14$5(ctx) {
    	let div1;
    	let mdbicon;
    	let t0;
    	let div0;
    	let p;
    	let t2;
    	let h4;
    	let strong;
    	let t4;
    	let mdbcardbody;
    	let current;

    	mdbicon = new MDBIcon({
    			props: {
    				fas: true,
    				icon: "money-bill-alt",
    				class: "primary-color"
    			},
    			$$inline: true
    		});

    	mdbcardbody = new MDBCardBody({
    			props: {
    				$$slots: { default: [create_default_slot_15$5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			create_component(mdbicon.$$.fragment);
    			t0 = space();
    			div0 = element("div");
    			p = element("p");
    			p.textContent = "平均交易";
    			t2 = space();
    			h4 = element("h4");
    			strong = element("strong");
    			strong.textContent = "$2000";
    			t4 = space();
    			create_component(mdbcardbody.$$.fragment);
    			add_location(p, file$y, 15, 10, 608);
    			add_location(strong, file$y, 17, 12, 649);
    			add_location(h4, file$y, 16, 10, 631);
    			attr_dev(div0, "class", "data");
    			add_location(div0, file$y, 14, 8, 578);
    			attr_dev(div1, "class", "admin-up");
    			add_location(div1, file$y, 12, 6, 477);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			mount_component(mdbicon, div1, null);
    			append_dev(div1, t0);
    			append_dev(div1, div0);
    			append_dev(div0, p);
    			append_dev(div0, t2);
    			append_dev(div0, h4);
    			append_dev(h4, strong);
    			insert_dev(target, t4, anchor);
    			mount_component(mdbcardbody, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbcardbody_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbcardbody_changes.$$scope = { dirty, ctx };
    			}

    			mdbcardbody.$set(mdbcardbody_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbicon.$$.fragment, local);
    			transition_in(mdbcardbody.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbicon.$$.fragment, local);
    			transition_out(mdbcardbody.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			destroy_component(mdbicon);
    			if (detaching) detach_dev(t4);
    			destroy_component(mdbcardbody, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_14$5.name,
    		type: "slot",
    		source: "(12:4) <MDBCard class=\\\"cascading-admin-card\\\">",
    		ctx
    	});

    	return block;
    }

    // (11:2) <MDBCol xl="3" md="6" class="mb-r">
    function create_default_slot_13$5(ctx) {
    	let mdbcard;
    	let current;

    	mdbcard = new MDBCard({
    			props: {
    				class: "cascading-admin-card",
    				$$slots: { default: [create_default_slot_14$5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbcard.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbcard, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbcard_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbcard_changes.$$scope = { dirty, ctx };
    			}

    			mdbcard.$set(mdbcard_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbcard.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbcard.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbcard, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_13$5.name,
    		type: "slot",
    		source: "(11:2) <MDBCol xl=\\\"3\\\" md=\\\"6\\\" class=\\\"mb-r\\\">",
    		ctx
    	});

    	return block;
    }

    // (59:8) <MDBCardText>
    function create_default_slot_12$6(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Worse than last week (25%)");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_12$6.name,
    		type: "slot",
    		source: "(59:8) <MDBCardText>",
    		ctx
    	});

    	return block;
    }

    // (48:6) <MDBCardBody>
    function create_default_slot_11$7(ctx) {
    	let div1;
    	let div0;
    	let t;
    	let mdbcardtext;
    	let current;

    	mdbcardtext = new MDBCardText({
    			props: {
    				$$slots: { default: [create_default_slot_12$6] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			t = space();
    			create_component(mdbcardtext.$$.fragment);
    			attr_dev(div0, "aria-valuemax", "100");
    			attr_dev(div0, "aria-valuemin", "0");
    			attr_dev(div0, "aria-valuenow", "25");
    			attr_dev(div0, "class", "progress-bar bg grey");
    			attr_dev(div0, "role", "progressbar");
    			set_style(div0, "width", "25%");
    			add_location(div0, file$y, 49, 10, 1528);
    			attr_dev(div1, "class", "progress");
    			add_location(div1, file$y, 48, 8, 1494);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			insert_dev(target, t, anchor);
    			mount_component(mdbcardtext, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbcardtext_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbcardtext_changes.$$scope = { dirty, ctx };
    			}

    			mdbcardtext.$set(mdbcardtext_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbcardtext.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbcardtext.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (detaching) detach_dev(t);
    			destroy_component(mdbcardtext, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_11$7.name,
    		type: "slot",
    		source: "(48:6) <MDBCardBody>",
    		ctx
    	});

    	return block;
    }

    // (38:4) <MDBCard class="cascading-admin-card">
    function create_default_slot_10$7(ctx) {
    	let div1;
    	let mdbicon;
    	let t0;
    	let div0;
    	let p;
    	let t2;
    	let h4;
    	let strong;
    	let t4;
    	let mdbcardbody;
    	let current;

    	mdbicon = new MDBIcon({
    			props: {
    				fas: true,
    				icon: "chart-line",
    				class: "warning-color"
    			},
    			$$inline: true
    		});

    	mdbcardbody = new MDBCardBody({
    			props: {
    				$$slots: { default: [create_default_slot_11$7] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			create_component(mdbicon.$$.fragment);
    			t0 = space();
    			div0 = element("div");
    			p = element("p");
    			p.textContent = "平均批數";
    			t2 = space();
    			h4 = element("h4");
    			strong = element("strong");
    			strong.textContent = "200";
    			t4 = space();
    			create_component(mdbcardbody.$$.fragment);
    			add_location(p, file$y, 41, 10, 1355);
    			add_location(strong, file$y, 43, 12, 1396);
    			add_location(h4, file$y, 42, 10, 1378);
    			attr_dev(div0, "class", "data");
    			add_location(div0, file$y, 40, 8, 1325);
    			attr_dev(div1, "class", "admin-up");
    			add_location(div1, file$y, 38, 6, 1228);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			mount_component(mdbicon, div1, null);
    			append_dev(div1, t0);
    			append_dev(div1, div0);
    			append_dev(div0, p);
    			append_dev(div0, t2);
    			append_dev(div0, h4);
    			append_dev(h4, strong);
    			insert_dev(target, t4, anchor);
    			mount_component(mdbcardbody, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbcardbody_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbcardbody_changes.$$scope = { dirty, ctx };
    			}

    			mdbcardbody.$set(mdbcardbody_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbicon.$$.fragment, local);
    			transition_in(mdbcardbody.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbicon.$$.fragment, local);
    			transition_out(mdbcardbody.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			destroy_component(mdbicon);
    			if (detaching) detach_dev(t4);
    			destroy_component(mdbcardbody, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_10$7.name,
    		type: "slot",
    		source: "(38:4) <MDBCard class=\\\"cascading-admin-card\\\">",
    		ctx
    	});

    	return block;
    }

    // (37:2) <MDBCol xl="3" md="6" class="mb-r">
    function create_default_slot_9$7(ctx) {
    	let mdbcard;
    	let current;

    	mdbcard = new MDBCard({
    			props: {
    				class: "cascading-admin-card",
    				$$slots: { default: [create_default_slot_10$7] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbcard.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbcard, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbcard_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbcard_changes.$$scope = { dirty, ctx };
    			}

    			mdbcard.$set(mdbcard_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbcard.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbcard.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbcard, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_9$7.name,
    		type: "slot",
    		source: "(37:2) <MDBCol xl=\\\"3\\\" md=\\\"6\\\" class=\\\"mb-r\\\">",
    		ctx
    	});

    	return block;
    }

    // (85:8) <MDBCardText>
    function create_default_slot_8$8(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Worse than last week (75%)");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_8$8.name,
    		type: "slot",
    		source: "(85:8) <MDBCardText>",
    		ctx
    	});

    	return block;
    }

    // (74:6) <MDBCardBody>
    function create_default_slot_7$9(ctx) {
    	let div1;
    	let div0;
    	let t;
    	let mdbcardtext;
    	let current;

    	mdbcardtext = new MDBCardText({
    			props: {
    				$$slots: { default: [create_default_slot_8$8] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			t = space();
    			create_component(mdbcardtext.$$.fragment);
    			attr_dev(div0, "aria-valuemax", "100");
    			attr_dev(div0, "aria-valuemin", "0");
    			attr_dev(div0, "aria-valuenow", "25");
    			attr_dev(div0, "class", "progress-bar grey darken-2");
    			attr_dev(div0, "role", "progressbar");
    			set_style(div0, "width", "75%");
    			add_location(div0, file$y, 75, 10, 2280);
    			attr_dev(div1, "class", "progress");
    			add_location(div1, file$y, 74, 8, 2246);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			insert_dev(target, t, anchor);
    			mount_component(mdbcardtext, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbcardtext_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbcardtext_changes.$$scope = { dirty, ctx };
    			}

    			mdbcardtext.$set(mdbcardtext_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbcardtext.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbcardtext.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (detaching) detach_dev(t);
    			destroy_component(mdbcardtext, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_7$9.name,
    		type: "slot",
    		source: "(74:6) <MDBCardBody>",
    		ctx
    	});

    	return block;
    }

    // (64:4) <MDBCard class="cascading-admin-card">
    function create_default_slot_6$a(ctx) {
    	let div1;
    	let mdbicon;
    	let t0;
    	let div0;
    	let p;
    	let t2;
    	let h4;
    	let strong;
    	let t4;
    	let mdbcardbody;
    	let current;

    	mdbicon = new MDBIcon({
    			props: {
    				fas: true,
    				icon: "chart-pie",
    				class: "light-blue lighten-1"
    			},
    			$$inline: true
    		});

    	mdbcardbody = new MDBCardBody({
    			props: {
    				$$slots: { default: [create_default_slot_7$9] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			create_component(mdbicon.$$.fragment);
    			t0 = space();
    			div0 = element("div");
    			p = element("p");
    			p.textContent = "平均單日過站數";
    			t2 = space();
    			h4 = element("h4");
    			strong = element("strong");
    			strong.textContent = "20000";
    			t4 = space();
    			create_component(mdbcardbody.$$.fragment);
    			add_location(p, file$y, 67, 10, 2102);
    			add_location(strong, file$y, 69, 12, 2146);
    			add_location(h4, file$y, 68, 10, 2128);
    			attr_dev(div0, "class", "data");
    			add_location(div0, file$y, 66, 8, 2072);
    			attr_dev(div1, "class", "admin-up");
    			add_location(div1, file$y, 64, 6, 1969);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			mount_component(mdbicon, div1, null);
    			append_dev(div1, t0);
    			append_dev(div1, div0);
    			append_dev(div0, p);
    			append_dev(div0, t2);
    			append_dev(div0, h4);
    			append_dev(h4, strong);
    			insert_dev(target, t4, anchor);
    			mount_component(mdbcardbody, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbcardbody_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbcardbody_changes.$$scope = { dirty, ctx };
    			}

    			mdbcardbody.$set(mdbcardbody_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbicon.$$.fragment, local);
    			transition_in(mdbcardbody.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbicon.$$.fragment, local);
    			transition_out(mdbcardbody.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			destroy_component(mdbicon);
    			if (detaching) detach_dev(t4);
    			destroy_component(mdbcardbody, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_6$a.name,
    		type: "slot",
    		source: "(64:4) <MDBCard class=\\\"cascading-admin-card\\\">",
    		ctx
    	});

    	return block;
    }

    // (63:2) <MDBCol xl="3" md="6" class="mb-r">
    function create_default_slot_5$b(ctx) {
    	let mdbcard;
    	let current;

    	mdbcard = new MDBCard({
    			props: {
    				class: "cascading-admin-card",
    				$$slots: { default: [create_default_slot_6$a] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbcard.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbcard, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbcard_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbcard_changes.$$scope = { dirty, ctx };
    			}

    			mdbcard.$set(mdbcard_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbcard.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbcard.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbcard, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_5$b.name,
    		type: "slot",
    		source: "(63:2) <MDBCol xl=\\\"3\\\" md=\\\"6\\\" class=\\\"mb-r\\\">",
    		ctx
    	});

    	return block;
    }

    // (111:8) <MDBCardText>
    function create_default_slot_4$b(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Better than last week (25%)");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4$b.name,
    		type: "slot",
    		source: "(111:8) <MDBCardText>",
    		ctx
    	});

    	return block;
    }

    // (100:6) <MDBCardBody>
    function create_default_slot_3$c(ctx) {
    	let div1;
    	let div0;
    	let t;
    	let mdbcardtext;
    	let current;

    	mdbcardtext = new MDBCardText({
    			props: {
    				$$slots: { default: [create_default_slot_4$b] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			t = space();
    			create_component(mdbcardtext.$$.fragment);
    			attr_dev(div0, "aria-valuemax", "100");
    			attr_dev(div0, "aria-valuemin", "0");
    			attr_dev(div0, "aria-valuenow", "25");
    			attr_dev(div0, "class", "progress-bar bg-primary");
    			attr_dev(div0, "role", "progressbar");
    			set_style(div0, "width", "25%");
    			add_location(div0, file$y, 101, 10, 3026);
    			attr_dev(div1, "class", "progress");
    			add_location(div1, file$y, 100, 8, 2992);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			insert_dev(target, t, anchor);
    			mount_component(mdbcardtext, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbcardtext_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbcardtext_changes.$$scope = { dirty, ctx };
    			}

    			mdbcardtext.$set(mdbcardtext_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbcardtext.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbcardtext.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (detaching) detach_dev(t);
    			destroy_component(mdbcardtext, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$c.name,
    		type: "slot",
    		source: "(100:6) <MDBCardBody>",
    		ctx
    	});

    	return block;
    }

    // (90:4) <MDBCard class="cascading-admin-card">
    function create_default_slot_2$c(ctx) {
    	let div1;
    	let mdbicon;
    	let t0;
    	let div0;
    	let p;
    	let t2;
    	let h4;
    	let strong;
    	let t4;
    	let mdbcardbody;
    	let current;

    	mdbicon = new MDBIcon({
    			props: {
    				fas: true,
    				icon: "chart-bar",
    				class: "red accent-2"
    			},
    			$$inline: true
    		});

    	mdbcardbody = new MDBCardBody({
    			props: {
    				$$slots: { default: [create_default_slot_3$c] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			create_component(mdbicon.$$.fragment);
    			t0 = space();
    			div0 = element("div");
    			p = element("p");
    			p.textContent = "平均站點";
    			t2 = space();
    			h4 = element("h4");
    			strong = element("strong");
    			strong.textContent = "2000";
    			t4 = space();
    			create_component(mdbcardbody.$$.fragment);
    			add_location(p, file$y, 93, 10, 2852);
    			add_location(strong, file$y, 95, 12, 2893);
    			add_location(h4, file$y, 94, 10, 2875);
    			attr_dev(div0, "class", "data");
    			add_location(div0, file$y, 92, 8, 2822);
    			attr_dev(div1, "class", "admin-up");
    			add_location(div1, file$y, 90, 6, 2727);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			mount_component(mdbicon, div1, null);
    			append_dev(div1, t0);
    			append_dev(div1, div0);
    			append_dev(div0, p);
    			append_dev(div0, t2);
    			append_dev(div0, h4);
    			append_dev(h4, strong);
    			insert_dev(target, t4, anchor);
    			mount_component(mdbcardbody, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbcardbody_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbcardbody_changes.$$scope = { dirty, ctx };
    			}

    			mdbcardbody.$set(mdbcardbody_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbicon.$$.fragment, local);
    			transition_in(mdbcardbody.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbicon.$$.fragment, local);
    			transition_out(mdbcardbody.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			destroy_component(mdbicon);
    			if (detaching) detach_dev(t4);
    			destroy_component(mdbcardbody, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$c.name,
    		type: "slot",
    		source: "(90:4) <MDBCard class=\\\"cascading-admin-card\\\">",
    		ctx
    	});

    	return block;
    }

    // (89:2) <MDBCol xl="3" md="6" class="mb-r">
    function create_default_slot_1$c(ctx) {
    	let mdbcard;
    	let current;

    	mdbcard = new MDBCard({
    			props: {
    				class: "cascading-admin-card",
    				$$slots: { default: [create_default_slot_2$c] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbcard.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbcard, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbcard_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbcard_changes.$$scope = { dirty, ctx };
    			}

    			mdbcard.$set(mdbcard_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbcard.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbcard.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbcard, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$c.name,
    		type: "slot",
    		source: "(89:2) <MDBCol xl=\\\"3\\\" md=\\\"6\\\" class=\\\"mb-r\\\">",
    		ctx
    	});

    	return block;
    }

    // (10:0) <MDBRow class="mb-4">
    function create_default_slot$e(ctx) {
    	let mdbcol0;
    	let t0;
    	let mdbcol1;
    	let t1;
    	let mdbcol2;
    	let t2;
    	let mdbcol3;
    	let current;

    	mdbcol0 = new MDBCol({
    			props: {
    				xl: "3",
    				md: "6",
    				class: "mb-r",
    				$$slots: { default: [create_default_slot_13$5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbcol1 = new MDBCol({
    			props: {
    				xl: "3",
    				md: "6",
    				class: "mb-r",
    				$$slots: { default: [create_default_slot_9$7] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbcol2 = new MDBCol({
    			props: {
    				xl: "3",
    				md: "6",
    				class: "mb-r",
    				$$slots: { default: [create_default_slot_5$b] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbcol3 = new MDBCol({
    			props: {
    				xl: "3",
    				md: "6",
    				class: "mb-r",
    				$$slots: { default: [create_default_slot_1$c] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbcol0.$$.fragment);
    			t0 = space();
    			create_component(mdbcol1.$$.fragment);
    			t1 = space();
    			create_component(mdbcol2.$$.fragment);
    			t2 = space();
    			create_component(mdbcol3.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbcol0, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(mdbcol1, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(mdbcol2, target, anchor);
    			insert_dev(target, t2, anchor);
    			mount_component(mdbcol3, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbcol0_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbcol0_changes.$$scope = { dirty, ctx };
    			}

    			mdbcol0.$set(mdbcol0_changes);
    			const mdbcol1_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbcol1_changes.$$scope = { dirty, ctx };
    			}

    			mdbcol1.$set(mdbcol1_changes);
    			const mdbcol2_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbcol2_changes.$$scope = { dirty, ctx };
    			}

    			mdbcol2.$set(mdbcol2_changes);
    			const mdbcol3_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbcol3_changes.$$scope = { dirty, ctx };
    			}

    			mdbcol3.$set(mdbcol3_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbcol0.$$.fragment, local);
    			transition_in(mdbcol1.$$.fragment, local);
    			transition_in(mdbcol2.$$.fragment, local);
    			transition_in(mdbcol3.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbcol0.$$.fragment, local);
    			transition_out(mdbcol1.$$.fragment, local);
    			transition_out(mdbcol2.$$.fragment, local);
    			transition_out(mdbcol3.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbcol0, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(mdbcol1, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(mdbcol2, detaching);
    			if (detaching) detach_dev(t2);
    			destroy_component(mdbcol3, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$e.name,
    		type: "slot",
    		source: "(10:0) <MDBRow class=\\\"mb-4\\\">",
    		ctx
    	});

    	return block;
    }

    function create_fragment$H(ctx) {
    	let mdbrow;
    	let current;

    	mdbrow = new MDBRow({
    			props: {
    				class: "mb-4",
    				$$slots: { default: [create_default_slot$e] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbrow.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbrow, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const mdbrow_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbrow_changes.$$scope = { dirty, ctx };
    			}

    			mdbrow.$set(mdbrow_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbrow.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbrow.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbrow, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$H.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$H($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('AdminCardSection1', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<AdminCardSection1> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		MDBRow,
    		MDBCol,
    		MDBCard,
    		MDBIcon,
    		MDBCardBody,
    		MDBCardText
    	});

    	return [];
    }

    class AdminCardSection1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$H, create_fragment$H, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "AdminCardSection1",
    			options,
    			id: create_fragment$H.name
    		});
    	}
    }

    /* src\components\pages\sections\AdminCardSection2.svelte generated by Svelte v3.59.2 */
    const file$x = "src\\components\\pages\\sections\\AdminCardSection2.svelte";

    // (12:6) <MDBCardBody>
    function create_default_slot_16$4(ctx) {
    	let div;
    	let mdbicon;
    	let t0;
    	let p;
    	let t2;
    	let h4;
    	let strong;
    	let current;

    	mdbicon = new MDBIcon({
    			props: { far: true, icon: "money-bill-alt" },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(mdbicon.$$.fragment);
    			t0 = space();
    			p = element("p");
    			p.textContent = "SALES";
    			t2 = space();
    			h4 = element("h4");
    			strong = element("strong");
    			strong.textContent = "$2000";
    			attr_dev(div, "class", "float-right");
    			add_location(div, file$x, 12, 8, 457);
    			attr_dev(p, "class", "white-text");
    			add_location(p, file$x, 15, 8, 557);
    			add_location(strong, file$x, 16, 12, 602);
    			add_location(h4, file$x, 16, 8, 598);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(mdbicon, div, null);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, p, anchor);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, h4, anchor);
    			append_dev(h4, strong);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbicon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbicon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(mdbicon);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(p);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(h4);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_16$4.name,
    		type: "slot",
    		source: "(12:6) <MDBCardBody>",
    		ctx
    	});

    	return block;
    }

    // (29:6) <MDBCardBody>
    function create_default_slot_15$4(ctx) {
    	let p;

    	const block = {
    		c: function create() {
    			p = element("p");
    			p.textContent = "Better than last week (25%)";
    			add_location(p, file$x, 29, 8, 955);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_15$4.name,
    		type: "slot",
    		source: "(29:6) <MDBCardBody>",
    		ctx
    	});

    	return block;
    }

    // (11:4) <MDBCard color="primary-color" class="classic-admin-card">
    function create_default_slot_14$4(ctx) {
    	let mdbcardbody0;
    	let t0;
    	let div1;
    	let div0;
    	let t1;
    	let mdbcardbody1;
    	let current;

    	mdbcardbody0 = new MDBCardBody({
    			props: {
    				$$slots: { default: [create_default_slot_16$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbcardbody1 = new MDBCardBody({
    			props: {
    				$$slots: { default: [create_default_slot_15$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbcardbody0.$$.fragment);
    			t0 = space();
    			div1 = element("div");
    			div0 = element("div");
    			t1 = space();
    			create_component(mdbcardbody1.$$.fragment);
    			attr_dev(div0, "aria-valuemax", "100");
    			attr_dev(div0, "aria-valuemin", "0");
    			attr_dev(div0, "aria-valuenow", "25");
    			attr_dev(div0, "class", "progress-bar bg grey darken-3");
    			attr_dev(div0, "role", "progressbar");
    			attr_dev(div0, "style", { width: '25%' });
    			add_location(div0, file$x, 19, 8, 691);
    			attr_dev(div1, "class", "progress");
    			add_location(div1, file$x, 18, 6, 659);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbcardbody0, target, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			insert_dev(target, t1, anchor);
    			mount_component(mdbcardbody1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbcardbody0_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbcardbody0_changes.$$scope = { dirty, ctx };
    			}

    			mdbcardbody0.$set(mdbcardbody0_changes);
    			const mdbcardbody1_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbcardbody1_changes.$$scope = { dirty, ctx };
    			}

    			mdbcardbody1.$set(mdbcardbody1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbcardbody0.$$.fragment, local);
    			transition_in(mdbcardbody1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbcardbody0.$$.fragment, local);
    			transition_out(mdbcardbody1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbcardbody0, detaching);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div1);
    			if (detaching) detach_dev(t1);
    			destroy_component(mdbcardbody1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_14$4.name,
    		type: "slot",
    		source: "(11:4) <MDBCard color=\\\"primary-color\\\" class=\\\"classic-admin-card\\\">",
    		ctx
    	});

    	return block;
    }

    // (10:2) <MDBCol xl="3" md="6" class="mb-3">
    function create_default_slot_13$4(ctx) {
    	let mdbcard;
    	let current;

    	mdbcard = new MDBCard({
    			props: {
    				color: "primary-color",
    				class: "classic-admin-card",
    				$$slots: { default: [create_default_slot_14$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbcard.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbcard, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbcard_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbcard_changes.$$scope = { dirty, ctx };
    			}

    			mdbcard.$set(mdbcard_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbcard.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbcard.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbcard, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_13$4.name,
    		type: "slot",
    		source: "(10:2) <MDBCol xl=\\\"3\\\" md=\\\"6\\\" class=\\\"mb-3\\\">",
    		ctx
    	});

    	return block;
    }

    // (36:6) <MDBCardBody>
    function create_default_slot_12$5(ctx) {
    	let div;
    	let mdbicon;
    	let t0;
    	let p;
    	let t2;
    	let h4;
    	let strong;
    	let current;

    	mdbicon = new MDBIcon({
    			props: { icon: "chart-line" },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(mdbicon.$$.fragment);
    			t0 = space();
    			p = element("p");
    			p.textContent = "SUBSCRIPTIONS";
    			t2 = space();
    			h4 = element("h4");
    			strong = element("strong");
    			strong.textContent = "200";
    			attr_dev(div, "class", "float-right");
    			add_location(div, file$x, 36, 8, 1174);
    			attr_dev(p, "class", "white-text");
    			add_location(p, file$x, 39, 8, 1266);
    			add_location(strong, file$x, 40, 12, 1319);
    			add_location(h4, file$x, 40, 8, 1315);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(mdbicon, div, null);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, p, anchor);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, h4, anchor);
    			append_dev(h4, strong);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbicon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbicon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(mdbicon);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(p);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(h4);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_12$5.name,
    		type: "slot",
    		source: "(36:6) <MDBCardBody>",
    		ctx
    	});

    	return block;
    }

    // (53:6) <MDBCardBody>
    function create_default_slot_11$6(ctx) {
    	let p;

    	const block = {
    		c: function create() {
    			p = element("p");
    			p.textContent = "Worse than last week (25%)";
    			add_location(p, file$x, 53, 8, 1670);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_11$6.name,
    		type: "slot",
    		source: "(53:6) <MDBCardBody>",
    		ctx
    	});

    	return block;
    }

    // (35:4) <MDBCard color="warning-color" class="classic-admin-card">
    function create_default_slot_10$6(ctx) {
    	let mdbcardbody0;
    	let t0;
    	let div1;
    	let div0;
    	let t1;
    	let mdbcardbody1;
    	let current;

    	mdbcardbody0 = new MDBCardBody({
    			props: {
    				$$slots: { default: [create_default_slot_12$5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbcardbody1 = new MDBCardBody({
    			props: {
    				$$slots: { default: [create_default_slot_11$6] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbcardbody0.$$.fragment);
    			t0 = space();
    			div1 = element("div");
    			div0 = element("div");
    			t1 = space();
    			create_component(mdbcardbody1.$$.fragment);
    			attr_dev(div0, "aria-valuemax", "100");
    			attr_dev(div0, "aria-valuemin", "0");
    			attr_dev(div0, "aria-valuenow", "25");
    			attr_dev(div0, "class", "progress-bar bg grey darken-3");
    			attr_dev(div0, "role", "progressbar");
    			attr_dev(div0, "style", { width: '25%' });
    			add_location(div0, file$x, 43, 8, 1406);
    			attr_dev(div1, "class", "progress");
    			add_location(div1, file$x, 42, 6, 1374);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbcardbody0, target, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			insert_dev(target, t1, anchor);
    			mount_component(mdbcardbody1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbcardbody0_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbcardbody0_changes.$$scope = { dirty, ctx };
    			}

    			mdbcardbody0.$set(mdbcardbody0_changes);
    			const mdbcardbody1_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbcardbody1_changes.$$scope = { dirty, ctx };
    			}

    			mdbcardbody1.$set(mdbcardbody1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbcardbody0.$$.fragment, local);
    			transition_in(mdbcardbody1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbcardbody0.$$.fragment, local);
    			transition_out(mdbcardbody1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbcardbody0, detaching);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div1);
    			if (detaching) detach_dev(t1);
    			destroy_component(mdbcardbody1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_10$6.name,
    		type: "slot",
    		source: "(35:4) <MDBCard color=\\\"warning-color\\\" class=\\\"classic-admin-card\\\">",
    		ctx
    	});

    	return block;
    }

    // (34:2) <MDBCol xl="3" md="6" class="mb-3">
    function create_default_slot_9$6(ctx) {
    	let mdbcard;
    	let current;

    	mdbcard = new MDBCard({
    			props: {
    				color: "warning-color",
    				class: "classic-admin-card",
    				$$slots: { default: [create_default_slot_10$6] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbcard.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbcard, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbcard_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbcard_changes.$$scope = { dirty, ctx };
    			}

    			mdbcard.$set(mdbcard_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbcard.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbcard.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbcard, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_9$6.name,
    		type: "slot",
    		source: "(34:2) <MDBCol xl=\\\"3\\\" md=\\\"6\\\" class=\\\"mb-3\\\">",
    		ctx
    	});

    	return block;
    }

    // (60:6) <MDBCardBody>
    function create_default_slot_8$7(ctx) {
    	let div;
    	let mdbicon;
    	let t0;
    	let p;
    	let t2;
    	let h4;
    	let strong;
    	let current;

    	mdbicon = new MDBIcon({
    			props: { icon: "chart-pie" },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(mdbicon.$$.fragment);
    			t0 = space();
    			p = element("p");
    			p.textContent = "TRAFFIC";
    			t2 = space();
    			h4 = element("h4");
    			strong = element("strong");
    			strong.textContent = "20000";
    			attr_dev(div, "class", "float-right");
    			add_location(div, file$x, 60, 8, 1888);
    			attr_dev(p, "class", "white-text");
    			add_location(p, file$x, 63, 8, 1979);
    			add_location(strong, file$x, 64, 12, 2026);
    			add_location(h4, file$x, 64, 8, 2022);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(mdbicon, div, null);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, p, anchor);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, h4, anchor);
    			append_dev(h4, strong);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbicon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbicon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(mdbicon);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(p);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(h4);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_8$7.name,
    		type: "slot",
    		source: "(60:6) <MDBCardBody>",
    		ctx
    	});

    	return block;
    }

    // (77:6) <MDBCardBody>
    function create_default_slot_7$8(ctx) {
    	let p;

    	const block = {
    		c: function create() {
    			p = element("p");
    			p.textContent = "Better than last week (75%)";
    			add_location(p, file$x, 77, 8, 2379);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_7$8.name,
    		type: "slot",
    		source: "(77:6) <MDBCardBody>",
    		ctx
    	});

    	return block;
    }

    // (59:4) <MDBCard color="primary-color" class="classic-admin-card">
    function create_default_slot_6$9(ctx) {
    	let mdbcardbody0;
    	let t0;
    	let div1;
    	let div0;
    	let t1;
    	let mdbcardbody1;
    	let current;

    	mdbcardbody0 = new MDBCardBody({
    			props: {
    				$$slots: { default: [create_default_slot_8$7] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbcardbody1 = new MDBCardBody({
    			props: {
    				$$slots: { default: [create_default_slot_7$8] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbcardbody0.$$.fragment);
    			t0 = space();
    			div1 = element("div");
    			div0 = element("div");
    			t1 = space();
    			create_component(mdbcardbody1.$$.fragment);
    			attr_dev(div0, "aria-valuemax", "100");
    			attr_dev(div0, "aria-valuemin", "0");
    			attr_dev(div0, "aria-valuenow", "75");
    			attr_dev(div0, "class", "progress-bar bg grey darken-3");
    			attr_dev(div0, "role", "progressbar");
    			attr_dev(div0, "style", { width: '75%' });
    			add_location(div0, file$x, 67, 8, 2115);
    			attr_dev(div1, "class", "progress");
    			add_location(div1, file$x, 66, 6, 2083);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbcardbody0, target, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			insert_dev(target, t1, anchor);
    			mount_component(mdbcardbody1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbcardbody0_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbcardbody0_changes.$$scope = { dirty, ctx };
    			}

    			mdbcardbody0.$set(mdbcardbody0_changes);
    			const mdbcardbody1_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbcardbody1_changes.$$scope = { dirty, ctx };
    			}

    			mdbcardbody1.$set(mdbcardbody1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbcardbody0.$$.fragment, local);
    			transition_in(mdbcardbody1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbcardbody0.$$.fragment, local);
    			transition_out(mdbcardbody1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbcardbody0, detaching);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div1);
    			if (detaching) detach_dev(t1);
    			destroy_component(mdbcardbody1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_6$9.name,
    		type: "slot",
    		source: "(59:4) <MDBCard color=\\\"primary-color\\\" class=\\\"classic-admin-card\\\">",
    		ctx
    	});

    	return block;
    }

    // (58:2) <MDBCol xl="3" md="6" class="mb-3">
    function create_default_slot_5$a(ctx) {
    	let mdbcard;
    	let current;

    	mdbcard = new MDBCard({
    			props: {
    				color: "primary-color",
    				class: "classic-admin-card",
    				$$slots: { default: [create_default_slot_6$9] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbcard.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbcard, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbcard_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbcard_changes.$$scope = { dirty, ctx };
    			}

    			mdbcard.$set(mdbcard_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbcard.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbcard.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbcard, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_5$a.name,
    		type: "slot",
    		source: "(58:2) <MDBCol xl=\\\"3\\\" md=\\\"6\\\" class=\\\"mb-3\\\">",
    		ctx
    	});

    	return block;
    }

    // (84:6) <MDBCardBody>
    function create_default_slot_4$a(ctx) {
    	let div;
    	let mdbicon;
    	let t0;
    	let p;
    	let t2;
    	let h4;
    	let strong;
    	let current;

    	mdbicon = new MDBIcon({
    			props: { icon: "chart-bar" },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(mdbicon.$$.fragment);
    			t0 = space();
    			p = element("p");
    			p.textContent = "ORGANIC TRAFFIC";
    			t2 = space();
    			h4 = element("h4");
    			strong = element("strong");
    			strong.textContent = "1000";
    			attr_dev(div, "class", "float-right");
    			add_location(div, file$x, 84, 8, 2597);
    			attr_dev(p, "class", "white-text");
    			add_location(p, file$x, 87, 8, 2688);
    			add_location(strong, file$x, 88, 12, 2743);
    			add_location(h4, file$x, 88, 8, 2739);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(mdbicon, div, null);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, p, anchor);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, h4, anchor);
    			append_dev(h4, strong);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbicon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbicon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(mdbicon);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(p);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(h4);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4$a.name,
    		type: "slot",
    		source: "(84:6) <MDBCardBody>",
    		ctx
    	});

    	return block;
    }

    // (101:6) <MDBCardBody>
    function create_default_slot_3$b(ctx) {
    	let p;

    	const block = {
    		c: function create() {
    			p = element("p");
    			p.textContent = "Better than last week (75%)";
    			add_location(p, file$x, 101, 8, 3095);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$b.name,
    		type: "slot",
    		source: "(101:6) <MDBCardBody>",
    		ctx
    	});

    	return block;
    }

    // (83:4) <MDBCard color="red accent-2" class="classic-admin-card">
    function create_default_slot_2$b(ctx) {
    	let mdbcardbody0;
    	let t0;
    	let div1;
    	let div0;
    	let t1;
    	let mdbcardbody1;
    	let current;

    	mdbcardbody0 = new MDBCardBody({
    			props: {
    				$$slots: { default: [create_default_slot_4$a] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbcardbody1 = new MDBCardBody({
    			props: {
    				$$slots: { default: [create_default_slot_3$b] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbcardbody0.$$.fragment);
    			t0 = space();
    			div1 = element("div");
    			div0 = element("div");
    			t1 = space();
    			create_component(mdbcardbody1.$$.fragment);
    			attr_dev(div0, "aria-valuemax", "100");
    			attr_dev(div0, "aria-valuemin", "0");
    			attr_dev(div0, "aria-valuenow", "25");
    			attr_dev(div0, "class", "progress-bar bg grey darken-3");
    			attr_dev(div0, "role", "progressbar");
    			attr_dev(div0, "style", { width: '25%' });
    			add_location(div0, file$x, 91, 8, 2831);
    			attr_dev(div1, "class", "progress");
    			add_location(div1, file$x, 90, 6, 2799);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbcardbody0, target, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			insert_dev(target, t1, anchor);
    			mount_component(mdbcardbody1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbcardbody0_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbcardbody0_changes.$$scope = { dirty, ctx };
    			}

    			mdbcardbody0.$set(mdbcardbody0_changes);
    			const mdbcardbody1_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbcardbody1_changes.$$scope = { dirty, ctx };
    			}

    			mdbcardbody1.$set(mdbcardbody1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbcardbody0.$$.fragment, local);
    			transition_in(mdbcardbody1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbcardbody0.$$.fragment, local);
    			transition_out(mdbcardbody1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbcardbody0, detaching);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div1);
    			if (detaching) detach_dev(t1);
    			destroy_component(mdbcardbody1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$b.name,
    		type: "slot",
    		source: "(83:4) <MDBCard color=\\\"red accent-2\\\" class=\\\"classic-admin-card\\\">",
    		ctx
    	});

    	return block;
    }

    // (82:2) <MDBCol xl="3" md="6" class="mb-3">
    function create_default_slot_1$b(ctx) {
    	let mdbcard;
    	let current;

    	mdbcard = new MDBCard({
    			props: {
    				color: "red accent-2",
    				class: "classic-admin-card",
    				$$slots: { default: [create_default_slot_2$b] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbcard.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbcard, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbcard_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbcard_changes.$$scope = { dirty, ctx };
    			}

    			mdbcard.$set(mdbcard_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbcard.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbcard.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbcard, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$b.name,
    		type: "slot",
    		source: "(82:2) <MDBCol xl=\\\"3\\\" md=\\\"6\\\" class=\\\"mb-3\\\">",
    		ctx
    	});

    	return block;
    }

    // (9:0) <MDBRow class="mb-4">
    function create_default_slot$d(ctx) {
    	let mdbcol0;
    	let t0;
    	let mdbcol1;
    	let t1;
    	let mdbcol2;
    	let t2;
    	let mdbcol3;
    	let current;

    	mdbcol0 = new MDBCol({
    			props: {
    				xl: "3",
    				md: "6",
    				class: "mb-3",
    				$$slots: { default: [create_default_slot_13$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbcol1 = new MDBCol({
    			props: {
    				xl: "3",
    				md: "6",
    				class: "mb-3",
    				$$slots: { default: [create_default_slot_9$6] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbcol2 = new MDBCol({
    			props: {
    				xl: "3",
    				md: "6",
    				class: "mb-3",
    				$$slots: { default: [create_default_slot_5$a] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbcol3 = new MDBCol({
    			props: {
    				xl: "3",
    				md: "6",
    				class: "mb-3",
    				$$slots: { default: [create_default_slot_1$b] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbcol0.$$.fragment);
    			t0 = space();
    			create_component(mdbcol1.$$.fragment);
    			t1 = space();
    			create_component(mdbcol2.$$.fragment);
    			t2 = space();
    			create_component(mdbcol3.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbcol0, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(mdbcol1, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(mdbcol2, target, anchor);
    			insert_dev(target, t2, anchor);
    			mount_component(mdbcol3, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbcol0_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbcol0_changes.$$scope = { dirty, ctx };
    			}

    			mdbcol0.$set(mdbcol0_changes);
    			const mdbcol1_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbcol1_changes.$$scope = { dirty, ctx };
    			}

    			mdbcol1.$set(mdbcol1_changes);
    			const mdbcol2_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbcol2_changes.$$scope = { dirty, ctx };
    			}

    			mdbcol2.$set(mdbcol2_changes);
    			const mdbcol3_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbcol3_changes.$$scope = { dirty, ctx };
    			}

    			mdbcol3.$set(mdbcol3_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbcol0.$$.fragment, local);
    			transition_in(mdbcol1.$$.fragment, local);
    			transition_in(mdbcol2.$$.fragment, local);
    			transition_in(mdbcol3.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbcol0.$$.fragment, local);
    			transition_out(mdbcol1.$$.fragment, local);
    			transition_out(mdbcol2.$$.fragment, local);
    			transition_out(mdbcol3.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbcol0, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(mdbcol1, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(mdbcol2, detaching);
    			if (detaching) detach_dev(t2);
    			destroy_component(mdbcol3, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$d.name,
    		type: "slot",
    		source: "(9:0) <MDBRow class=\\\"mb-4\\\">",
    		ctx
    	});

    	return block;
    }

    function create_fragment$G(ctx) {
    	let mdbrow;
    	let current;

    	mdbrow = new MDBRow({
    			props: {
    				class: "mb-4",
    				$$slots: { default: [create_default_slot$d] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbrow.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbrow, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const mdbrow_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbrow_changes.$$scope = { dirty, ctx };
    			}

    			mdbrow.$set(mdbrow_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbrow.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbrow.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbrow, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$G.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$G($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('AdminCardSection2', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<AdminCardSection2> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		MDBRow,
    		MDBCol,
    		MDBCard,
    		MDBIcon,
    		MDBCardBody
    	});

    	return [];
    }

    class AdminCardSection2 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$G, create_fragment$G, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "AdminCardSection2",
    			options,
    			id: create_fragment$G.name
    		});
    	}
    }

    /* node_modules\mdbsvelte\src\MDBBreadcrumb.svelte generated by Svelte v3.59.2 */
    const file$w = "node_modules\\mdbsvelte\\src\\MDBBreadcrumb.svelte";

    function create_fragment$F(ctx) {
    	let nav;
    	let ol;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[10].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], null);

    	let nav_levels = [
    		/*props*/ ctx[4],
    		{ "aria-label": /*ariaLabel*/ ctx[1] },
    		{ class: /*elementClasses*/ ctx[2] }
    	];

    	let nav_data = {};

    	for (let i = 0; i < nav_levels.length; i += 1) {
    		nav_data = assign(nav_data, nav_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			nav = element("nav");
    			ol = element("ol");
    			if (default_slot) default_slot.c();
    			attr_dev(ol, "class", /*listClasses*/ ctx[0]);
    			add_location(ol, file$w, 24, 2, 747);
    			set_attributes(nav, nav_data);
    			add_location(nav, file$w, 23, 0, 664);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, nav, anchor);
    			append_dev(nav, ol);

    			if (default_slot) {
    				default_slot.m(ol, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = action_destroyer(/*forwardEvents*/ ctx[3].call(null, nav));
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 512)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[9],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[9])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[9], dirty, null),
    						null
    					);
    				}
    			}

    			if (!current || dirty & /*listClasses*/ 1) {
    				attr_dev(ol, "class", /*listClasses*/ ctx[0]);
    			}

    			set_attributes(nav, nav_data = get_spread_update(nav_levels, [
    				/*props*/ ctx[4],
    				(!current || dirty & /*ariaLabel*/ 2) && { "aria-label": /*ariaLabel*/ ctx[1] },
    				(!current || dirty & /*elementClasses*/ 4) && { class: /*elementClasses*/ ctx[2] }
    			]));
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(nav);
    			if (default_slot) default_slot.d(detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$F.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$F($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('MDBBreadcrumb', slots, ['default']);
    	const forwardEvents = forwardEventsBuilder(current_component);
    	let { class: className = '' } = $$props;
    	let elementClasses;
    	let { color } = $$props;
    	let { ariaLabel = 'breadcrumb' } = $$props;
    	let { listClasses = 'breadcrumb' } = $$props;
    	let { light } = $$props;
    	let { bold } = $$props;
    	const props = clean$1($$props, ["color", "listClasses", "ariaLabel"]);
    	elementClasses = clsx(className);
    	listClasses = clsx(listClasses, color ? getColorClass(color) : false, bold && 'font-up-bold', light && 'white-text');

    	$$self.$$.on_mount.push(function () {
    		if (color === undefined && !('color' in $$props || $$self.$$.bound[$$self.$$.props['color']])) {
    			console.warn("<MDBBreadcrumb> was created without expected prop 'color'");
    		}

    		if (light === undefined && !('light' in $$props || $$self.$$.bound[$$self.$$.props['light']])) {
    			console.warn("<MDBBreadcrumb> was created without expected prop 'light'");
    		}

    		if (bold === undefined && !('bold' in $$props || $$self.$$.bound[$$self.$$.props['bold']])) {
    			console.warn("<MDBBreadcrumb> was created without expected prop 'bold'");
    		}
    	});

    	$$self.$$set = $$new_props => {
    		$$invalidate(11, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ('class' in $$new_props) $$invalidate(5, className = $$new_props.class);
    		if ('color' in $$new_props) $$invalidate(6, color = $$new_props.color);
    		if ('ariaLabel' in $$new_props) $$invalidate(1, ariaLabel = $$new_props.ariaLabel);
    		if ('listClasses' in $$new_props) $$invalidate(0, listClasses = $$new_props.listClasses);
    		if ('light' in $$new_props) $$invalidate(7, light = $$new_props.light);
    		if ('bold' in $$new_props) $$invalidate(8, bold = $$new_props.bold);
    		if ('$$scope' in $$new_props) $$invalidate(9, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		clean: clean$1,
    		clsx,
    		forwardEventsBuilder,
    		getColorClass,
    		current_component,
    		forwardEvents,
    		className,
    		elementClasses,
    		color,
    		ariaLabel,
    		listClasses,
    		light,
    		bold,
    		props
    	});

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(11, $$props = assign(assign({}, $$props), $$new_props));
    		if ('className' in $$props) $$invalidate(5, className = $$new_props.className);
    		if ('elementClasses' in $$props) $$invalidate(2, elementClasses = $$new_props.elementClasses);
    		if ('color' in $$props) $$invalidate(6, color = $$new_props.color);
    		if ('ariaLabel' in $$props) $$invalidate(1, ariaLabel = $$new_props.ariaLabel);
    		if ('listClasses' in $$props) $$invalidate(0, listClasses = $$new_props.listClasses);
    		if ('light' in $$props) $$invalidate(7, light = $$new_props.light);
    		if ('bold' in $$props) $$invalidate(8, bold = $$new_props.bold);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);

    	return [
    		listClasses,
    		ariaLabel,
    		elementClasses,
    		forwardEvents,
    		props,
    		className,
    		color,
    		light,
    		bold,
    		$$scope,
    		slots
    	];
    }

    class MDBBreadcrumb extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$F, create_fragment$F, safe_not_equal, {
    			class: 5,
    			color: 6,
    			ariaLabel: 1,
    			listClasses: 0,
    			light: 7,
    			bold: 8
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "MDBBreadcrumb",
    			options,
    			id: create_fragment$F.name
    		});
    	}

    	get class() {
    		throw new Error("<MDBBreadcrumb>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<MDBBreadcrumb>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get color() {
    		throw new Error("<MDBBreadcrumb>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set color(value) {
    		throw new Error("<MDBBreadcrumb>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get ariaLabel() {
    		throw new Error("<MDBBreadcrumb>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ariaLabel(value) {
    		throw new Error("<MDBBreadcrumb>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get listClasses() {
    		throw new Error("<MDBBreadcrumb>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set listClasses(value) {
    		throw new Error("<MDBBreadcrumb>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get light() {
    		throw new Error("<MDBBreadcrumb>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set light(value) {
    		throw new Error("<MDBBreadcrumb>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get bold() {
    		throw new Error("<MDBBreadcrumb>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set bold(value) {
    		throw new Error("<MDBBreadcrumb>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\mdbsvelte\src\MDBBreadcrumbItem.svelte generated by Svelte v3.59.2 */
    const file$v = "node_modules\\mdbsvelte\\src\\MDBBreadcrumbItem.svelte";

    // (26:2) {#if icon}
    function create_if_block_1$4(ctx) {
    	let mdbicon;
    	let current;

    	mdbicon = new MDBIcon({
    			props: { far: true, icon: /*icon*/ ctx[2] },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbicon.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbicon, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbicon_changes = {};
    			if (dirty & /*icon*/ 4) mdbicon_changes.icon = /*icon*/ ctx[2];
    			mdbicon.$set(mdbicon_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbicon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbicon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbicon, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$4.name,
    		type: "if",
    		source: "(26:2) {#if icon}",
    		ctx
    	});

    	return block;
    }

    // (31:2) {:else}
    function create_else_block$8(ctx) {
    	let a;
    	let current;
    	const default_slot_template = /*#slots*/ ctx[12].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[11], null);

    	const block = {
    		c: function create() {
    			a = element("a");
    			if (default_slot) default_slot.c();
    			attr_dev(a, "href", /*href*/ ctx[1]);
    			attr_dev(a, "class", /*childClasses*/ ctx[4]);
    			add_location(a, file$v, 31, 4, 874);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);

    			if (default_slot) {
    				default_slot.m(a, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 2048)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[11],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[11])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[11], dirty, null),
    						null
    					);
    				}
    			}

    			if (!current || dirty & /*href*/ 2) {
    				attr_dev(a, "href", /*href*/ ctx[1]);
    			}

    			if (!current || dirty & /*childClasses*/ 16) {
    				attr_dev(a, "class", /*childClasses*/ ctx[4]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$8.name,
    		type: "else",
    		source: "(31:2) {:else}",
    		ctx
    	});

    	return block;
    }

    // (29:2) {#if active}
    function create_if_block$a(ctx) {
    	let current;
    	const default_slot_template = /*#slots*/ ctx[12].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[11], null);

    	const block = {
    		c: function create() {
    			if (default_slot) default_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 2048)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[11],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[11])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[11], dirty, null),
    						null
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$a.name,
    		type: "if",
    		source: "(29:2) {#if active}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$E(ctx) {
    	let li;
    	let t;
    	let current_block_type_index;
    	let if_block1;
    	let li_aria_current_value;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block0 = /*icon*/ ctx[2] && create_if_block_1$4(ctx);
    	const if_block_creators = [create_if_block$a, create_else_block$8];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*active*/ ctx[0]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	let li_levels = [
    		/*props*/ ctx[6],
    		{ class: /*elementClasses*/ ctx[3] },
    		{
    			"aria-current": li_aria_current_value = /*active*/ ctx[0] ? 'page' : undefined
    		}
    	];

    	let li_data = {};

    	for (let i = 0; i < li_levels.length; i += 1) {
    		li_data = assign(li_data, li_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			li = element("li");
    			if (if_block0) if_block0.c();
    			t = space();
    			if_block1.c();
    			set_attributes(li, li_data);
    			add_location(li, file$v, 24, 0, 680);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);
    			if (if_block0) if_block0.m(li, null);
    			append_dev(li, t);
    			if_blocks[current_block_type_index].m(li, null);
    			current = true;

    			if (!mounted) {
    				dispose = action_destroyer(/*forwardEvents*/ ctx[5].call(null, li));
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*icon*/ ctx[2]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty & /*icon*/ 4) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_1$4(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(li, t);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block1 = if_blocks[current_block_type_index];

    				if (!if_block1) {
    					if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block1.c();
    				} else {
    					if_block1.p(ctx, dirty);
    				}

    				transition_in(if_block1, 1);
    				if_block1.m(li, null);
    			}

    			set_attributes(li, li_data = get_spread_update(li_levels, [
    				/*props*/ ctx[6],
    				(!current || dirty & /*elementClasses*/ 8) && { class: /*elementClasses*/ ctx[3] },
    				(!current || dirty & /*active*/ 1 && li_aria_current_value !== (li_aria_current_value = /*active*/ ctx[0] ? 'page' : undefined)) && { "aria-current": li_aria_current_value }
    			]));
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(if_block1);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			transition_out(if_block1);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    			if (if_block0) if_block0.d();
    			if_blocks[current_block_type_index].d();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$E.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$E($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('MDBBreadcrumbItem', slots, ['default']);
    	const forwardEvents = forwardEventsBuilder(current_component);
    	let { class: className = '' } = $$props;
    	let elementClasses;
    	let childClasses;
    	let { color } = $$props;
    	let { active } = $$props;
    	let { activeClassName = 'active' } = $$props;
    	let { href = "#" } = $$props;
    	let { light } = $$props;
    	let { icon } = $$props;
    	const props = clean$1($$props, ["color"]);
    	childClasses = clsx(light ? 'white-text' : false);

    	$$self.$$.on_mount.push(function () {
    		if (color === undefined && !('color' in $$props || $$self.$$.bound[$$self.$$.props['color']])) {
    			console.warn("<MDBBreadcrumbItem> was created without expected prop 'color'");
    		}

    		if (active === undefined && !('active' in $$props || $$self.$$.bound[$$self.$$.props['active']])) {
    			console.warn("<MDBBreadcrumbItem> was created without expected prop 'active'");
    		}

    		if (light === undefined && !('light' in $$props || $$self.$$.bound[$$self.$$.props['light']])) {
    			console.warn("<MDBBreadcrumbItem> was created without expected prop 'light'");
    		}

    		if (icon === undefined && !('icon' in $$props || $$self.$$.bound[$$self.$$.props['icon']])) {
    			console.warn("<MDBBreadcrumbItem> was created without expected prop 'icon'");
    		}
    	});

    	$$self.$$set = $$new_props => {
    		$$invalidate(13, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ('class' in $$new_props) $$invalidate(7, className = $$new_props.class);
    		if ('color' in $$new_props) $$invalidate(8, color = $$new_props.color);
    		if ('active' in $$new_props) $$invalidate(0, active = $$new_props.active);
    		if ('activeClassName' in $$new_props) $$invalidate(9, activeClassName = $$new_props.activeClassName);
    		if ('href' in $$new_props) $$invalidate(1, href = $$new_props.href);
    		if ('light' in $$new_props) $$invalidate(10, light = $$new_props.light);
    		if ('icon' in $$new_props) $$invalidate(2, icon = $$new_props.icon);
    		if ('$$scope' in $$new_props) $$invalidate(11, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		clean: clean$1,
    		clsx,
    		forwardEventsBuilder,
    		current_component,
    		MDBIcon,
    		forwardEvents,
    		className,
    		elementClasses,
    		childClasses,
    		color,
    		active,
    		activeClassName,
    		href,
    		light,
    		icon,
    		props
    	});

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(13, $$props = assign(assign({}, $$props), $$new_props));
    		if ('className' in $$props) $$invalidate(7, className = $$new_props.className);
    		if ('elementClasses' in $$props) $$invalidate(3, elementClasses = $$new_props.elementClasses);
    		if ('childClasses' in $$props) $$invalidate(4, childClasses = $$new_props.childClasses);
    		if ('color' in $$props) $$invalidate(8, color = $$new_props.color);
    		if ('active' in $$props) $$invalidate(0, active = $$new_props.active);
    		if ('activeClassName' in $$props) $$invalidate(9, activeClassName = $$new_props.activeClassName);
    		if ('href' in $$props) $$invalidate(1, href = $$new_props.href);
    		if ('light' in $$props) $$invalidate(10, light = $$new_props.light);
    		if ('icon' in $$props) $$invalidate(2, icon = $$new_props.icon);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*className, color, active, activeClassName*/ 897) {
    			$$invalidate(3, elementClasses = clsx(className, color, active ? activeClassName : false, 'breadcrumb-item'));
    		}
    	};

    	$$props = exclude_internal_props($$props);

    	return [
    		active,
    		href,
    		icon,
    		elementClasses,
    		childClasses,
    		forwardEvents,
    		props,
    		className,
    		color,
    		activeClassName,
    		light,
    		$$scope,
    		slots
    	];
    }

    class MDBBreadcrumbItem extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$E, create_fragment$E, safe_not_equal, {
    			class: 7,
    			color: 8,
    			active: 0,
    			activeClassName: 9,
    			href: 1,
    			light: 10,
    			icon: 2
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "MDBBreadcrumbItem",
    			options,
    			id: create_fragment$E.name
    		});
    	}

    	get class() {
    		throw new Error("<MDBBreadcrumbItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<MDBBreadcrumbItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get color() {
    		throw new Error("<MDBBreadcrumbItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set color(value) {
    		throw new Error("<MDBBreadcrumbItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get active() {
    		throw new Error("<MDBBreadcrumbItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set active(value) {
    		throw new Error("<MDBBreadcrumbItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get activeClassName() {
    		throw new Error("<MDBBreadcrumbItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set activeClassName(value) {
    		throw new Error("<MDBBreadcrumbItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get href() {
    		throw new Error("<MDBBreadcrumbItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set href(value) {
    		throw new Error("<MDBBreadcrumbItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get light() {
    		throw new Error("<MDBBreadcrumbItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set light(value) {
    		throw new Error("<MDBBreadcrumbItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get icon() {
    		throw new Error("<MDBBreadcrumbItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set icon(value) {
    		throw new Error("<MDBBreadcrumbItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\mdbsvelte\src\MDBFormInline.svelte generated by Svelte v3.59.2 */
    const file$u = "node_modules\\mdbsvelte\\src\\MDBFormInline.svelte";

    function create_fragment$D(ctx) {
    	let form;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[5].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);
    	let form_levels = [/*props*/ ctx[2], { class: /*elementClasses*/ ctx[0] }];
    	let form_data = {};

    	for (let i = 0; i < form_levels.length; i += 1) {
    		form_data = assign(form_data, form_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			form = element("form");
    			if (default_slot) default_slot.c();
    			set_attributes(form, form_data);
    			add_location(form, file$u, 12, 0, 362);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, form, anchor);

    			if (default_slot) {
    				default_slot.m(form, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = action_destroyer(/*forwardEvents*/ ctx[1].call(null, form));
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 16)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[4],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[4])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[4], dirty, null),
    						null
    					);
    				}
    			}

    			set_attributes(form, form_data = get_spread_update(form_levels, [
    				/*props*/ ctx[2],
    				(!current || dirty & /*elementClasses*/ 1) && { class: /*elementClasses*/ ctx[0] }
    			]));
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(form);
    			if (default_slot) default_slot.d(detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$D.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$D($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('MDBFormInline', slots, ['default']);
    	const forwardEvents = forwardEventsBuilder(current_component);
    	let { class: className = '' } = $$props;
    	const props = clean$1($$props, []);
    	let elementClasses;

    	$$self.$$set = $$new_props => {
    		$$invalidate(6, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ('class' in $$new_props) $$invalidate(3, className = $$new_props.class);
    		if ('$$scope' in $$new_props) $$invalidate(4, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		clean: clean$1,
    		clsx,
    		forwardEventsBuilder,
    		current_component,
    		forwardEvents,
    		className,
    		props,
    		elementClasses
    	});

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(6, $$props = assign(assign({}, $$props), $$new_props));
    		if ('className' in $$props) $$invalidate(3, className = $$new_props.className);
    		if ('elementClasses' in $$props) $$invalidate(0, elementClasses = $$new_props.elementClasses);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*className*/ 8) {
    			$$invalidate(0, elementClasses = clsx(className, 'form-inline'));
    		}
    	};

    	$$props = exclude_internal_props($$props);
    	return [elementClasses, forwardEvents, props, className, $$scope, slots];
    }

    class MDBFormInline extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$D, create_fragment$D, safe_not_equal, { class: 3 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "MDBFormInline",
    			options,
    			id: create_fragment$D.name
    		});
    	}

    	get class() {
    		throw new Error("<MDBFormInline>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<MDBFormInline>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\components\pages\sections\BreadcrumbSection.svelte generated by Svelte v3.59.2 */
    const file$t = "src\\components\\pages\\sections\\BreadcrumbSection.svelte";

    // (17:6) <MDBBreadcrumbItem>
    function create_default_slot_6$8(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("首頁");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_6$8.name,
    		type: "slot",
    		source: "(17:6) <MDBBreadcrumbItem>",
    		ctx
    	});

    	return block;
    }

    // (18:6) <MDBBreadcrumbItem active>
    function create_default_slot_5$9(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Dashboard");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_5$9.name,
    		type: "slot",
    		source: "(18:6) <MDBBreadcrumbItem active>",
    		ctx
    	});

    	return block;
    }

    // (16:4) <MDBBreadcrumb>
    function create_default_slot_4$9(ctx) {
    	let mdbbreadcrumbitem0;
    	let t;
    	let mdbbreadcrumbitem1;
    	let current;

    	mdbbreadcrumbitem0 = new MDBBreadcrumbItem({
    			props: {
    				$$slots: { default: [create_default_slot_6$8] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbbreadcrumbitem1 = new MDBBreadcrumbItem({
    			props: {
    				active: true,
    				$$slots: { default: [create_default_slot_5$9] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbbreadcrumbitem0.$$.fragment);
    			t = space();
    			create_component(mdbbreadcrumbitem1.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbbreadcrumbitem0, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(mdbbreadcrumbitem1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbbreadcrumbitem0_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbbreadcrumbitem0_changes.$$scope = { dirty, ctx };
    			}

    			mdbbreadcrumbitem0.$set(mdbbreadcrumbitem0_changes);
    			const mdbbreadcrumbitem1_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbbreadcrumbitem1_changes.$$scope = { dirty, ctx };
    			}

    			mdbbreadcrumbitem1.$set(mdbbreadcrumbitem1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbbreadcrumbitem0.$$.fragment, local);
    			transition_in(mdbbreadcrumbitem1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbbreadcrumbitem0.$$.fragment, local);
    			transition_out(mdbbreadcrumbitem1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbbreadcrumbitem0, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(mdbbreadcrumbitem1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4$9.name,
    		type: "slot",
    		source: "(16:4) <MDBBreadcrumb>",
    		ctx
    	});

    	return block;
    }

    // (27:6) <MDBBtn size="sm" color="primary" class="my-0" type="submit"          >
    function create_default_slot_3$a(ctx) {
    	let mdbicon;
    	let current;

    	mdbicon = new MDBIcon({
    			props: { icon: "search" },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbicon.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbicon, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbicon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbicon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbicon, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$a.name,
    		type: "slot",
    		source: "(27:6) <MDBBtn size=\\\"sm\\\" color=\\\"primary\\\" class=\\\"my-0\\\" type=\\\"submit\\\"          >",
    		ctx
    	});

    	return block;
    }

    // (20:4) <MDBFormInline class="md-form m-0">
    function create_default_slot_2$a(ctx) {
    	let input;
    	let t;
    	let mdbbtn;
    	let current;

    	mdbbtn = new MDBBtn({
    			props: {
    				size: "sm",
    				color: "primary",
    				class: "my-0",
    				type: "submit",
    				$$slots: { default: [create_default_slot_3$a] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			input = element("input");
    			t = space();
    			create_component(mdbbtn.$$.fragment);
    			attr_dev(input, "class", "form-control form-control-sm");
    			attr_dev(input, "type", "search");
    			attr_dev(input, "placeholder", "Type your query");
    			attr_dev(input, "aria-label", "Search");
    			add_location(input, file$t, 20, 6, 789);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, input, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(mdbbtn, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbbtn_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbbtn_changes.$$scope = { dirty, ctx };
    			}

    			mdbbtn.$set(mdbbtn_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbbtn.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbbtn.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(input);
    			if (detaching) detach_dev(t);
    			destroy_component(mdbbtn, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$a.name,
    		type: "slot",
    		source: "(20:4) <MDBFormInline class=\\\"md-form m-0\\\">",
    		ctx
    	});

    	return block;
    }

    // (12:2) <MDBCardBody      id="breadcrumb"      class="d-flex align-items-center justify-content-between"    >
    function create_default_slot_1$a(ctx) {
    	let mdbbreadcrumb;
    	let t;
    	let mdbforminline;
    	let current;

    	mdbbreadcrumb = new MDBBreadcrumb({
    			props: {
    				$$slots: { default: [create_default_slot_4$9] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbforminline = new MDBFormInline({
    			props: {
    				class: "md-form m-0",
    				$$slots: { default: [create_default_slot_2$a] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbbreadcrumb.$$.fragment);
    			t = space();
    			create_component(mdbforminline.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbbreadcrumb, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(mdbforminline, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbbreadcrumb_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbbreadcrumb_changes.$$scope = { dirty, ctx };
    			}

    			mdbbreadcrumb.$set(mdbbreadcrumb_changes);
    			const mdbforminline_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbforminline_changes.$$scope = { dirty, ctx };
    			}

    			mdbforminline.$set(mdbforminline_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbbreadcrumb.$$.fragment, local);
    			transition_in(mdbforminline.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbbreadcrumb.$$.fragment, local);
    			transition_out(mdbforminline.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbbreadcrumb, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(mdbforminline, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$a.name,
    		type: "slot",
    		source: "(12:2) <MDBCardBody      id=\\\"breadcrumb\\\"      class=\\\"d-flex align-items-center justify-content-between\\\"    >",
    		ctx
    	});

    	return block;
    }

    // (11:0) <MDBCard class="mb-5">
    function create_default_slot$c(ctx) {
    	let mdbcardbody;
    	let current;

    	mdbcardbody = new MDBCardBody({
    			props: {
    				id: "breadcrumb",
    				class: "d-flex align-items-center justify-content-between",
    				$$slots: { default: [create_default_slot_1$a] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbcardbody.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbcardbody, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbcardbody_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbcardbody_changes.$$scope = { dirty, ctx };
    			}

    			mdbcardbody.$set(mdbcardbody_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbcardbody.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbcardbody.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbcardbody, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$c.name,
    		type: "slot",
    		source: "(11:0) <MDBCard class=\\\"mb-5\\\">",
    		ctx
    	});

    	return block;
    }

    function create_fragment$C(ctx) {
    	let mdbcard;
    	let current;

    	mdbcard = new MDBCard({
    			props: {
    				class: "mb-5",
    				$$slots: { default: [create_default_slot$c] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbcard.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbcard, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const mdbcard_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbcard_changes.$$scope = { dirty, ctx };
    			}

    			mdbcard.$set(mdbcard_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbcard.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbcard.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbcard, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$C.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$C($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('BreadcrumbSection', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<BreadcrumbSection> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		MDBCard,
    		MDBCardBody,
    		MDBBreadcrumb,
    		MDBBreadcrumbItem,
    		MDBFormInline,
    		MDBBtn,
    		MDBIcon
    	});

    	return [];
    }

    class BreadcrumbSection extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$C, create_fragment$C, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "BreadcrumbSection",
    			options,
    			id: create_fragment$C.name
    		});
    	}
    }

    /* node_modules\mdbsvelte\src\MDBCardHeader.svelte generated by Svelte v3.59.2 */
    const file$s = "node_modules\\mdbsvelte\\src\\MDBCardHeader.svelte";

    // (20:0) {:else}
    function create_else_block$7(ctx) {
    	let div;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[6].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);
    	let div_levels = [/*props*/ ctx[3], { class: /*classes*/ ctx[1] }];
    	let div_data = {};

    	for (let i = 0; i < div_levels.length; i += 1) {
    		div_data = assign(div_data, div_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			set_attributes(div, div_data);
    			add_location(div, file$s, 20, 2, 460);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = action_destroyer(/*forwardEvents*/ ctx[2].call(null, div));
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 32)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[5],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[5])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[5], dirty, null),
    						null
    					);
    				}
    			}

    			set_attributes(div, div_data = get_spread_update(div_levels, [
    				/*props*/ ctx[3],
    				(!current || dirty & /*classes*/ 2) && { class: /*classes*/ ctx[1] }
    			]));
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$7.name,
    		type: "else",
    		source: "(20:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (16:0) {#if tag === 'h3'}
    function create_if_block$9(ctx) {
    	let h3;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[6].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);
    	let h3_levels = [/*props*/ ctx[3], { class: /*classes*/ ctx[1] }];
    	let h3_data = {};

    	for (let i = 0; i < h3_levels.length; i += 1) {
    		h3_data = assign(h3_data, h3_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			h3 = element("h3");
    			if (default_slot) default_slot.c();
    			set_attributes(h3, h3_data);
    			add_location(h3, file$s, 16, 2, 380);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h3, anchor);

    			if (default_slot) {
    				default_slot.m(h3, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = action_destroyer(/*forwardEvents*/ ctx[2].call(null, h3));
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 32)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[5],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[5])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[5], dirty, null),
    						null
    					);
    				}
    			}

    			set_attributes(h3, h3_data = get_spread_update(h3_levels, [
    				/*props*/ ctx[3],
    				(!current || dirty & /*classes*/ 2) && { class: /*classes*/ ctx[1] }
    			]));
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h3);
    			if (default_slot) default_slot.d(detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$9.name,
    		type: "if",
    		source: "(16:0) {#if tag === 'h3'}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$B(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block$9, create_else_block$7];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*tag*/ ctx[0] === 'h3') return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$B.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$B($$self, $$props, $$invalidate) {
    	let classes;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('MDBCardHeader', slots, ['default']);
    	const forwardEvents = forwardEventsBuilder(current_component);
    	let { class: className = '' } = $$props;
    	let { tag = 'div' } = $$props;
    	const props = clean$1($$props);

    	$$self.$$set = $$new_props => {
    		$$invalidate(7, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ('class' in $$new_props) $$invalidate(4, className = $$new_props.class);
    		if ('tag' in $$new_props) $$invalidate(0, tag = $$new_props.tag);
    		if ('$$scope' in $$new_props) $$invalidate(5, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		clean: clean$1,
    		clsx,
    		forwardEventsBuilder,
    		current_component,
    		forwardEvents,
    		className,
    		tag,
    		props,
    		classes
    	});

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(7, $$props = assign(assign({}, $$props), $$new_props));
    		if ('className' in $$props) $$invalidate(4, className = $$new_props.className);
    		if ('tag' in $$props) $$invalidate(0, tag = $$new_props.tag);
    		if ('classes' in $$props) $$invalidate(1, classes = $$new_props.classes);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*className*/ 16) {
    			$$invalidate(1, classes = clsx(className, 'card-header'));
    		}
    	};

    	$$props = exclude_internal_props($$props);
    	return [tag, classes, forwardEvents, props, className, $$scope, slots];
    }

    class MDBCardHeader extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$B, create_fragment$B, safe_not_equal, { class: 4, tag: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "MDBCardHeader",
    			options,
    			id: create_fragment$B.name
    		});
    	}

    	get class() {
    		throw new Error("<MDBCardHeader>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<MDBCardHeader>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get tag() {
    		throw new Error("<MDBCardHeader>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set tag(value) {
    		throw new Error("<MDBCardHeader>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\mdbsvelte\src\MDBBadge.svelte generated by Svelte v3.59.2 */
    const file$r = "node_modules\\mdbsvelte\\src\\MDBBadge.svelte";

    // (46:0) {:else}
    function create_else_block_1(ctx) {
    	let span;
    	let current_block_type_index;
    	let if_block;
    	let current;
    	let mounted;
    	let dispose;
    	const if_block_creators = [create_if_block_2$2, create_else_block_2];
    	const if_blocks = [];

    	function select_block_type_2(ctx, dirty) {
    		if (/*children*/ ctx[1]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type_2(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	let span_levels = [/*props*/ ctx[4], { class: /*classes*/ ctx[2] }];
    	let span_data = {};

    	for (let i = 0; i < span_levels.length; i += 1) {
    		span_data = assign(span_data, span_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			span = element("span");
    			if_block.c();
    			set_attributes(span, span_data);
    			add_location(span, file$r, 46, 2, 1004);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			if_blocks[current_block_type_index].m(span, null);
    			current = true;

    			if (!mounted) {
    				dispose = action_destroyer(/*forwardEvents*/ ctx[3].call(null, span));
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_2(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(span, null);
    			}

    			set_attributes(span, span_data = get_spread_update(span_levels, [
    				/*props*/ ctx[4],
    				(!current || dirty & /*classes*/ 4) && { class: /*classes*/ ctx[2] }
    			]));
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    			if_blocks[current_block_type_index].d();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1.name,
    		type: "else",
    		source: "(46:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (38:0) {#if href}
    function create_if_block$8(ctx) {
    	let a;
    	let current_block_type_index;
    	let if_block;
    	let current;
    	let mounted;
    	let dispose;
    	const if_block_creators = [create_if_block_1$3, create_else_block$6];
    	const if_blocks = [];

    	function select_block_type_1(ctx, dirty) {
    		if (/*children*/ ctx[1]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type_1(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	let a_levels = [/*props*/ ctx[4], { href: /*href*/ ctx[0] }, { class: /*classes*/ ctx[2] }];
    	let a_data = {};

    	for (let i = 0; i < a_levels.length; i += 1) {
    		a_data = assign(a_data, a_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			a = element("a");
    			if_block.c();
    			set_attributes(a, a_data);
    			add_location(a, file$r, 38, 2, 859);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);
    			if_blocks[current_block_type_index].m(a, null);
    			current = true;

    			if (!mounted) {
    				dispose = action_destroyer(/*forwardEvents*/ ctx[3].call(null, a));
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_1(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(a, null);
    			}

    			set_attributes(a, a_data = get_spread_update(a_levels, [
    				/*props*/ ctx[4],
    				(!current || dirty & /*href*/ 1) && { href: /*href*/ ctx[0] },
    				(!current || dirty & /*classes*/ 4) && { class: /*classes*/ ctx[2] }
    			]));
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    			if_blocks[current_block_type_index].d();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$8.name,
    		type: "if",
    		source: "(38:0) {#if href}",
    		ctx
    	});

    	return block;
    }

    // (50:4) {:else}
    function create_else_block_2(ctx) {
    	let current;
    	const default_slot_template = /*#slots*/ ctx[10].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], null);

    	const block = {
    		c: function create() {
    			if (default_slot) default_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 512)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[9],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[9])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[9], dirty, null),
    						null
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_2.name,
    		type: "else",
    		source: "(50:4) {:else}",
    		ctx
    	});

    	return block;
    }

    // (48:4) {#if children}
    function create_if_block_2$2(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text(/*children*/ ctx[1]);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*children*/ 2) set_data_dev(t, /*children*/ ctx[1]);
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$2.name,
    		type: "if",
    		source: "(48:4) {#if children}",
    		ctx
    	});

    	return block;
    }

    // (42:4) {:else}
    function create_else_block$6(ctx) {
    	let current;
    	const default_slot_template = /*#slots*/ ctx[10].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], null);

    	const block = {
    		c: function create() {
    			if (default_slot) default_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 512)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[9],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[9])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[9], dirty, null),
    						null
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$6.name,
    		type: "else",
    		source: "(42:4) {:else}",
    		ctx
    	});

    	return block;
    }

    // (40:4) {#if children}
    function create_if_block_1$3(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text(/*children*/ ctx[1]);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*children*/ 2) set_data_dev(t, /*children*/ ctx[1]);
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$3.name,
    		type: "if",
    		source: "(40:4) {#if children}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$A(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block$8, create_else_block_1];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*href*/ ctx[0]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$A.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$A($$self, $$props, $$invalidate) {
    	let classes;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('MDBBadge', slots, ['default']);
    	const forwardEvents = forwardEventsBuilder(current_component);
    	let { class: className = '' } = $$props;
    	let { children = undefined } = $$props;
    	let { color = 'secondary' } = $$props;
    	let { href = undefined } = $$props;
    	let { pill = false } = $$props;
    	let { tag } = $$props;

    	if (tag === "a" && !href) {
    		href = "#";
    	}

    	let badge_colors = [
    		"primary",
    		"secondary",
    		"default",
    		"success",
    		"info",
    		"warning",
    		"danger",
    		"light",
    		"dark"
    	];

    	const props = clean$1($$props, ["children", "color", "href", "pill", "tag"]);

    	$$self.$$.on_mount.push(function () {
    		if (tag === undefined && !('tag' in $$props || $$self.$$.bound[$$self.$$.props['tag']])) {
    			console.warn("<MDBBadge> was created without expected prop 'tag'");
    		}
    	});

    	$$self.$$set = $$new_props => {
    		$$invalidate(12, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ('class' in $$new_props) $$invalidate(5, className = $$new_props.class);
    		if ('children' in $$new_props) $$invalidate(1, children = $$new_props.children);
    		if ('color' in $$new_props) $$invalidate(6, color = $$new_props.color);
    		if ('href' in $$new_props) $$invalidate(0, href = $$new_props.href);
    		if ('pill' in $$new_props) $$invalidate(7, pill = $$new_props.pill);
    		if ('tag' in $$new_props) $$invalidate(8, tag = $$new_props.tag);
    		if ('$$scope' in $$new_props) $$invalidate(9, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		clean: clean$1,
    		clsx,
    		forwardEventsBuilder,
    		getColorClass,
    		current_component,
    		forwardEvents,
    		className,
    		children,
    		color,
    		href,
    		pill,
    		tag,
    		badge_colors,
    		props,
    		classes
    	});

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(12, $$props = assign(assign({}, $$props), $$new_props));
    		if ('className' in $$props) $$invalidate(5, className = $$new_props.className);
    		if ('children' in $$props) $$invalidate(1, children = $$new_props.children);
    		if ('color' in $$props) $$invalidate(6, color = $$new_props.color);
    		if ('href' in $$props) $$invalidate(0, href = $$new_props.href);
    		if ('pill' in $$props) $$invalidate(7, pill = $$new_props.pill);
    		if ('tag' in $$props) $$invalidate(8, tag = $$new_props.tag);
    		if ('badge_colors' in $$props) $$invalidate(11, badge_colors = $$new_props.badge_colors);
    		if ('classes' in $$props) $$invalidate(2, classes = $$new_props.classes);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*className, color, pill*/ 224) {
    			$$invalidate(2, classes = clsx(
    				className,
    				'badge',
    				badge_colors.includes(color)
    				? `badge-${color}`
    				: getColorClass(color),
    				pill ? 'badge-pill' : false
    			));
    		}
    	};

    	$$props = exclude_internal_props($$props);

    	return [
    		href,
    		children,
    		classes,
    		forwardEvents,
    		props,
    		className,
    		color,
    		pill,
    		tag,
    		$$scope,
    		slots
    	];
    }

    class MDBBadge extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$A, create_fragment$A, safe_not_equal, {
    			class: 5,
    			children: 1,
    			color: 6,
    			href: 0,
    			pill: 7,
    			tag: 8
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "MDBBadge",
    			options,
    			id: create_fragment$A.name
    		});
    	}

    	get class() {
    		throw new Error("<MDBBadge>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<MDBBadge>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get children() {
    		throw new Error("<MDBBadge>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set children(value) {
    		throw new Error("<MDBBadge>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get color() {
    		throw new Error("<MDBBadge>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set color(value) {
    		throw new Error("<MDBBadge>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get href() {
    		throw new Error("<MDBBadge>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set href(value) {
    		throw new Error("<MDBBadge>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get pill() {
    		throw new Error("<MDBBadge>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set pill(value) {
    		throw new Error("<MDBBadge>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get tag() {
    		throw new Error("<MDBBadge>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set tag(value) {
    		throw new Error("<MDBBadge>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    function clean($$props, extra_keys) {
      let keys = ["children", "$$scope", "$$slots"].concat(extra_keys);
      const rest = {};
      for (const key of Object.keys($$props)) {
        if (!(keys.includes(key))) {
          rest[key] = $$props[key];
        }
      }
      return rest;
    }

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function createCommonjsModule(fn) {
      var module = { exports: {} };
    	return fn(module, module.exports), module.exports;
    }

    function commonjsRequire (target) {
    	throw new Error('Could not dynamically require "' + target + '". Please configure the dynamicRequireTargets option of @rollup/plugin-commonjs appropriately for this require call to behave properly.');
    }

    var moment = createCommonjsModule(function (module, exports) {
    (function (global, factory) {
        module.exports = factory() ;
    }(commonjsGlobal, (function () {
        var hookCallback;

        function hooks() {
            return hookCallback.apply(null, arguments);
        }

        // This is done to register the method called with moment()
        // without creating circular dependencies.
        function setHookCallback(callback) {
            hookCallback = callback;
        }

        function isArray(input) {
            return (
                input instanceof Array ||
                Object.prototype.toString.call(input) === '[object Array]'
            );
        }

        function isObject(input) {
            // IE8 will treat undefined and null as object if it wasn't for
            // input != null
            return (
                input != null &&
                Object.prototype.toString.call(input) === '[object Object]'
            );
        }

        function hasOwnProp(a, b) {
            return Object.prototype.hasOwnProperty.call(a, b);
        }

        function isObjectEmpty(obj) {
            if (Object.getOwnPropertyNames) {
                return Object.getOwnPropertyNames(obj).length === 0;
            } else {
                var k;
                for (k in obj) {
                    if (hasOwnProp(obj, k)) {
                        return false;
                    }
                }
                return true;
            }
        }

        function isUndefined(input) {
            return input === void 0;
        }

        function isNumber(input) {
            return (
                typeof input === 'number' ||
                Object.prototype.toString.call(input) === '[object Number]'
            );
        }

        function isDate(input) {
            return (
                input instanceof Date ||
                Object.prototype.toString.call(input) === '[object Date]'
            );
        }

        function map(arr, fn) {
            var res = [],
                i,
                arrLen = arr.length;
            for (i = 0; i < arrLen; ++i) {
                res.push(fn(arr[i], i));
            }
            return res;
        }

        function extend(a, b) {
            for (var i in b) {
                if (hasOwnProp(b, i)) {
                    a[i] = b[i];
                }
            }

            if (hasOwnProp(b, 'toString')) {
                a.toString = b.toString;
            }

            if (hasOwnProp(b, 'valueOf')) {
                a.valueOf = b.valueOf;
            }

            return a;
        }

        function createUTC(input, format, locale, strict) {
            return createLocalOrUTC(input, format, locale, strict, true).utc();
        }

        function defaultParsingFlags() {
            // We need to deep clone this object.
            return {
                empty: false,
                unusedTokens: [],
                unusedInput: [],
                overflow: -2,
                charsLeftOver: 0,
                nullInput: false,
                invalidEra: null,
                invalidMonth: null,
                invalidFormat: false,
                userInvalidated: false,
                iso: false,
                parsedDateParts: [],
                era: null,
                meridiem: null,
                rfc2822: false,
                weekdayMismatch: false,
            };
        }

        function getParsingFlags(m) {
            if (m._pf == null) {
                m._pf = defaultParsingFlags();
            }
            return m._pf;
        }

        var some;
        if (Array.prototype.some) {
            some = Array.prototype.some;
        } else {
            some = function (fun) {
                var t = Object(this),
                    len = t.length >>> 0,
                    i;

                for (i = 0; i < len; i++) {
                    if (i in t && fun.call(this, t[i], i, t)) {
                        return true;
                    }
                }

                return false;
            };
        }

        function isValid(m) {
            var flags = null,
                parsedParts = false,
                isNowValid = m._d && !isNaN(m._d.getTime());
            if (isNowValid) {
                flags = getParsingFlags(m);
                parsedParts = some.call(flags.parsedDateParts, function (i) {
                    return i != null;
                });
                isNowValid =
                    flags.overflow < 0 &&
                    !flags.empty &&
                    !flags.invalidEra &&
                    !flags.invalidMonth &&
                    !flags.invalidWeekday &&
                    !flags.weekdayMismatch &&
                    !flags.nullInput &&
                    !flags.invalidFormat &&
                    !flags.userInvalidated &&
                    (!flags.meridiem || (flags.meridiem && parsedParts));
                if (m._strict) {
                    isNowValid =
                        isNowValid &&
                        flags.charsLeftOver === 0 &&
                        flags.unusedTokens.length === 0 &&
                        flags.bigHour === undefined;
                }
            }
            if (Object.isFrozen == null || !Object.isFrozen(m)) {
                m._isValid = isNowValid;
            } else {
                return isNowValid;
            }
            return m._isValid;
        }

        function createInvalid(flags) {
            var m = createUTC(NaN);
            if (flags != null) {
                extend(getParsingFlags(m), flags);
            } else {
                getParsingFlags(m).userInvalidated = true;
            }

            return m;
        }

        // Plugins that add properties should also add the key here (null value),
        // so we can properly clone ourselves.
        var momentProperties = (hooks.momentProperties = []),
            updateInProgress = false;

        function copyConfig(to, from) {
            var i,
                prop,
                val,
                momentPropertiesLen = momentProperties.length;

            if (!isUndefined(from._isAMomentObject)) {
                to._isAMomentObject = from._isAMomentObject;
            }
            if (!isUndefined(from._i)) {
                to._i = from._i;
            }
            if (!isUndefined(from._f)) {
                to._f = from._f;
            }
            if (!isUndefined(from._l)) {
                to._l = from._l;
            }
            if (!isUndefined(from._strict)) {
                to._strict = from._strict;
            }
            if (!isUndefined(from._tzm)) {
                to._tzm = from._tzm;
            }
            if (!isUndefined(from._isUTC)) {
                to._isUTC = from._isUTC;
            }
            if (!isUndefined(from._offset)) {
                to._offset = from._offset;
            }
            if (!isUndefined(from._pf)) {
                to._pf = getParsingFlags(from);
            }
            if (!isUndefined(from._locale)) {
                to._locale = from._locale;
            }

            if (momentPropertiesLen > 0) {
                for (i = 0; i < momentPropertiesLen; i++) {
                    prop = momentProperties[i];
                    val = from[prop];
                    if (!isUndefined(val)) {
                        to[prop] = val;
                    }
                }
            }

            return to;
        }

        // Moment prototype object
        function Moment(config) {
            copyConfig(this, config);
            this._d = new Date(config._d != null ? config._d.getTime() : NaN);
            if (!this.isValid()) {
                this._d = new Date(NaN);
            }
            // Prevent infinite loop in case updateOffset creates new moment
            // objects.
            if (updateInProgress === false) {
                updateInProgress = true;
                hooks.updateOffset(this);
                updateInProgress = false;
            }
        }

        function isMoment(obj) {
            return (
                obj instanceof Moment || (obj != null && obj._isAMomentObject != null)
            );
        }

        function warn(msg) {
            if (
                hooks.suppressDeprecationWarnings === false &&
                typeof console !== 'undefined' &&
                console.warn
            ) {
                console.warn('Deprecation warning: ' + msg);
            }
        }

        function deprecate(msg, fn) {
            var firstTime = true;

            return extend(function () {
                if (hooks.deprecationHandler != null) {
                    hooks.deprecationHandler(null, msg);
                }
                if (firstTime) {
                    var args = [],
                        arg,
                        i,
                        key,
                        argLen = arguments.length;
                    for (i = 0; i < argLen; i++) {
                        arg = '';
                        if (typeof arguments[i] === 'object') {
                            arg += '\n[' + i + '] ';
                            for (key in arguments[0]) {
                                if (hasOwnProp(arguments[0], key)) {
                                    arg += key + ': ' + arguments[0][key] + ', ';
                                }
                            }
                            arg = arg.slice(0, -2); // Remove trailing comma and space
                        } else {
                            arg = arguments[i];
                        }
                        args.push(arg);
                    }
                    warn(
                        msg +
                            '\nArguments: ' +
                            Array.prototype.slice.call(args).join('') +
                            '\n' +
                            new Error().stack
                    );
                    firstTime = false;
                }
                return fn.apply(this, arguments);
            }, fn);
        }

        var deprecations = {};

        function deprecateSimple(name, msg) {
            if (hooks.deprecationHandler != null) {
                hooks.deprecationHandler(name, msg);
            }
            if (!deprecations[name]) {
                warn(msg);
                deprecations[name] = true;
            }
        }

        hooks.suppressDeprecationWarnings = false;
        hooks.deprecationHandler = null;

        function isFunction(input) {
            return (
                (typeof Function !== 'undefined' && input instanceof Function) ||
                Object.prototype.toString.call(input) === '[object Function]'
            );
        }

        function set(config) {
            var prop, i;
            for (i in config) {
                if (hasOwnProp(config, i)) {
                    prop = config[i];
                    if (isFunction(prop)) {
                        this[i] = prop;
                    } else {
                        this['_' + i] = prop;
                    }
                }
            }
            this._config = config;
            // Lenient ordinal parsing accepts just a number in addition to
            // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
            // TODO: Remove "ordinalParse" fallback in next major release.
            this._dayOfMonthOrdinalParseLenient = new RegExp(
                (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +
                    '|' +
                    /\d{1,2}/.source
            );
        }

        function mergeConfigs(parentConfig, childConfig) {
            var res = extend({}, parentConfig),
                prop;
            for (prop in childConfig) {
                if (hasOwnProp(childConfig, prop)) {
                    if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                        res[prop] = {};
                        extend(res[prop], parentConfig[prop]);
                        extend(res[prop], childConfig[prop]);
                    } else if (childConfig[prop] != null) {
                        res[prop] = childConfig[prop];
                    } else {
                        delete res[prop];
                    }
                }
            }
            for (prop in parentConfig) {
                if (
                    hasOwnProp(parentConfig, prop) &&
                    !hasOwnProp(childConfig, prop) &&
                    isObject(parentConfig[prop])
                ) {
                    // make sure changes to properties don't modify parent config
                    res[prop] = extend({}, res[prop]);
                }
            }
            return res;
        }

        function Locale(config) {
            if (config != null) {
                this.set(config);
            }
        }

        var keys;

        if (Object.keys) {
            keys = Object.keys;
        } else {
            keys = function (obj) {
                var i,
                    res = [];
                for (i in obj) {
                    if (hasOwnProp(obj, i)) {
                        res.push(i);
                    }
                }
                return res;
            };
        }

        var defaultCalendar = {
            sameDay: '[Today at] LT',
            nextDay: '[Tomorrow at] LT',
            nextWeek: 'dddd [at] LT',
            lastDay: '[Yesterday at] LT',
            lastWeek: '[Last] dddd [at] LT',
            sameElse: 'L',
        };

        function calendar(key, mom, now) {
            var output = this._calendar[key] || this._calendar['sameElse'];
            return isFunction(output) ? output.call(mom, now) : output;
        }

        function zeroFill(number, targetLength, forceSign) {
            var absNumber = '' + Math.abs(number),
                zerosToFill = targetLength - absNumber.length,
                sign = number >= 0;
            return (
                (sign ? (forceSign ? '+' : '') : '-') +
                Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) +
                absNumber
            );
        }

        var formattingTokens =
                /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,
            localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,
            formatFunctions = {},
            formatTokenFunctions = {};

        // token:    'M'
        // padded:   ['MM', 2]
        // ordinal:  'Mo'
        // callback: function () { this.month() + 1 }
        function addFormatToken(token, padded, ordinal, callback) {
            var func = callback;
            if (typeof callback === 'string') {
                func = function () {
                    return this[callback]();
                };
            }
            if (token) {
                formatTokenFunctions[token] = func;
            }
            if (padded) {
                formatTokenFunctions[padded[0]] = function () {
                    return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
                };
            }
            if (ordinal) {
                formatTokenFunctions[ordinal] = function () {
                    return this.localeData().ordinal(
                        func.apply(this, arguments),
                        token
                    );
                };
            }
        }

        function removeFormattingTokens(input) {
            if (input.match(/\[[\s\S]/)) {
                return input.replace(/^\[|\]$/g, '');
            }
            return input.replace(/\\/g, '');
        }

        function makeFormatFunction(format) {
            var array = format.match(formattingTokens),
                i,
                length;

            for (i = 0, length = array.length; i < length; i++) {
                if (formatTokenFunctions[array[i]]) {
                    array[i] = formatTokenFunctions[array[i]];
                } else {
                    array[i] = removeFormattingTokens(array[i]);
                }
            }

            return function (mom) {
                var output = '',
                    i;
                for (i = 0; i < length; i++) {
                    output += isFunction(array[i])
                        ? array[i].call(mom, format)
                        : array[i];
                }
                return output;
            };
        }

        // format date using native date object
        function formatMoment(m, format) {
            if (!m.isValid()) {
                return m.localeData().invalidDate();
            }

            format = expandFormat(format, m.localeData());
            formatFunctions[format] =
                formatFunctions[format] || makeFormatFunction(format);

            return formatFunctions[format](m);
        }

        function expandFormat(format, locale) {
            var i = 5;

            function replaceLongDateFormatTokens(input) {
                return locale.longDateFormat(input) || input;
            }

            localFormattingTokens.lastIndex = 0;
            while (i >= 0 && localFormattingTokens.test(format)) {
                format = format.replace(
                    localFormattingTokens,
                    replaceLongDateFormatTokens
                );
                localFormattingTokens.lastIndex = 0;
                i -= 1;
            }

            return format;
        }

        var defaultLongDateFormat = {
            LTS: 'h:mm:ss A',
            LT: 'h:mm A',
            L: 'MM/DD/YYYY',
            LL: 'MMMM D, YYYY',
            LLL: 'MMMM D, YYYY h:mm A',
            LLLL: 'dddd, MMMM D, YYYY h:mm A',
        };

        function longDateFormat(key) {
            var format = this._longDateFormat[key],
                formatUpper = this._longDateFormat[key.toUpperCase()];

            if (format || !formatUpper) {
                return format;
            }

            this._longDateFormat[key] = formatUpper
                .match(formattingTokens)
                .map(function (tok) {
                    if (
                        tok === 'MMMM' ||
                        tok === 'MM' ||
                        tok === 'DD' ||
                        tok === 'dddd'
                    ) {
                        return tok.slice(1);
                    }
                    return tok;
                })
                .join('');

            return this._longDateFormat[key];
        }

        var defaultInvalidDate = 'Invalid date';

        function invalidDate() {
            return this._invalidDate;
        }

        var defaultOrdinal = '%d',
            defaultDayOfMonthOrdinalParse = /\d{1,2}/;

        function ordinal(number) {
            return this._ordinal.replace('%d', number);
        }

        var defaultRelativeTime = {
            future: 'in %s',
            past: '%s ago',
            s: 'a few seconds',
            ss: '%d seconds',
            m: 'a minute',
            mm: '%d minutes',
            h: 'an hour',
            hh: '%d hours',
            d: 'a day',
            dd: '%d days',
            w: 'a week',
            ww: '%d weeks',
            M: 'a month',
            MM: '%d months',
            y: 'a year',
            yy: '%d years',
        };

        function relativeTime(number, withoutSuffix, string, isFuture) {
            var output = this._relativeTime[string];
            return isFunction(output)
                ? output(number, withoutSuffix, string, isFuture)
                : output.replace(/%d/i, number);
        }

        function pastFuture(diff, output) {
            var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
            return isFunction(format) ? format(output) : format.replace(/%s/i, output);
        }

        var aliases = {
            D: 'date',
            dates: 'date',
            date: 'date',
            d: 'day',
            days: 'day',
            day: 'day',
            e: 'weekday',
            weekdays: 'weekday',
            weekday: 'weekday',
            E: 'isoWeekday',
            isoweekdays: 'isoWeekday',
            isoweekday: 'isoWeekday',
            DDD: 'dayOfYear',
            dayofyears: 'dayOfYear',
            dayofyear: 'dayOfYear',
            h: 'hour',
            hours: 'hour',
            hour: 'hour',
            ms: 'millisecond',
            milliseconds: 'millisecond',
            millisecond: 'millisecond',
            m: 'minute',
            minutes: 'minute',
            minute: 'minute',
            M: 'month',
            months: 'month',
            month: 'month',
            Q: 'quarter',
            quarters: 'quarter',
            quarter: 'quarter',
            s: 'second',
            seconds: 'second',
            second: 'second',
            gg: 'weekYear',
            weekyears: 'weekYear',
            weekyear: 'weekYear',
            GG: 'isoWeekYear',
            isoweekyears: 'isoWeekYear',
            isoweekyear: 'isoWeekYear',
            w: 'week',
            weeks: 'week',
            week: 'week',
            W: 'isoWeek',
            isoweeks: 'isoWeek',
            isoweek: 'isoWeek',
            y: 'year',
            years: 'year',
            year: 'year',
        };

        function normalizeUnits(units) {
            return typeof units === 'string'
                ? aliases[units] || aliases[units.toLowerCase()]
                : undefined;
        }

        function normalizeObjectUnits(inputObject) {
            var normalizedInput = {},
                normalizedProp,
                prop;

            for (prop in inputObject) {
                if (hasOwnProp(inputObject, prop)) {
                    normalizedProp = normalizeUnits(prop);
                    if (normalizedProp) {
                        normalizedInput[normalizedProp] = inputObject[prop];
                    }
                }
            }

            return normalizedInput;
        }

        var priorities = {
            date: 9,
            day: 11,
            weekday: 11,
            isoWeekday: 11,
            dayOfYear: 4,
            hour: 13,
            millisecond: 16,
            minute: 14,
            month: 8,
            quarter: 7,
            second: 15,
            weekYear: 1,
            isoWeekYear: 1,
            week: 5,
            isoWeek: 5,
            year: 1,
        };

        function getPrioritizedUnits(unitsObj) {
            var units = [],
                u;
            for (u in unitsObj) {
                if (hasOwnProp(unitsObj, u)) {
                    units.push({ unit: u, priority: priorities[u] });
                }
            }
            units.sort(function (a, b) {
                return a.priority - b.priority;
            });
            return units;
        }

        var match1 = /\d/, //       0 - 9
            match2 = /\d\d/, //      00 - 99
            match3 = /\d{3}/, //     000 - 999
            match4 = /\d{4}/, //    0000 - 9999
            match6 = /[+-]?\d{6}/, // -999999 - 999999
            match1to2 = /\d\d?/, //       0 - 99
            match3to4 = /\d\d\d\d?/, //     999 - 9999
            match5to6 = /\d\d\d\d\d\d?/, //   99999 - 999999
            match1to3 = /\d{1,3}/, //       0 - 999
            match1to4 = /\d{1,4}/, //       0 - 9999
            match1to6 = /[+-]?\d{1,6}/, // -999999 - 999999
            matchUnsigned = /\d+/, //       0 - inf
            matchSigned = /[+-]?\d+/, //    -inf - inf
            matchOffset = /Z|[+-]\d\d:?\d\d/gi, // +00:00 -00:00 +0000 -0000 or Z
            matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi, // +00 -00 +00:00 -00:00 +0000 -0000 or Z
            matchTimestamp = /[+-]?\d+(\.\d{1,3})?/, // 123456789 123456789.123
            // any word (or two) characters or numbers including two/three word month in arabic.
            // includes scottish gaelic two word and hyphenated months
            matchWord =
                /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,
            match1to2NoLeadingZero = /^[1-9]\d?/, //         1-99
            match1to2HasZero = /^([1-9]\d|\d)/, //           0-99
            regexes;

        regexes = {};

        function addRegexToken(token, regex, strictRegex) {
            regexes[token] = isFunction(regex)
                ? regex
                : function (isStrict, localeData) {
                      return isStrict && strictRegex ? strictRegex : regex;
                  };
        }

        function getParseRegexForToken(token, config) {
            if (!hasOwnProp(regexes, token)) {
                return new RegExp(unescapeFormat(token));
            }

            return regexes[token](config._strict, config._locale);
        }

        // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
        function unescapeFormat(s) {
            return regexEscape(
                s
                    .replace('\\', '')
                    .replace(
                        /\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,
                        function (matched, p1, p2, p3, p4) {
                            return p1 || p2 || p3 || p4;
                        }
                    )
            );
        }

        function regexEscape(s) {
            return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
        }

        function absFloor(number) {
            if (number < 0) {
                // -0 -> 0
                return Math.ceil(number) || 0;
            } else {
                return Math.floor(number);
            }
        }

        function toInt(argumentForCoercion) {
            var coercedNumber = +argumentForCoercion,
                value = 0;

            if (coercedNumber !== 0 && isFinite(coercedNumber)) {
                value = absFloor(coercedNumber);
            }

            return value;
        }

        var tokens = {};

        function addParseToken(token, callback) {
            var i,
                func = callback,
                tokenLen;
            if (typeof token === 'string') {
                token = [token];
            }
            if (isNumber(callback)) {
                func = function (input, array) {
                    array[callback] = toInt(input);
                };
            }
            tokenLen = token.length;
            for (i = 0; i < tokenLen; i++) {
                tokens[token[i]] = func;
            }
        }

        function addWeekParseToken(token, callback) {
            addParseToken(token, function (input, array, config, token) {
                config._w = config._w || {};
                callback(input, config._w, config, token);
            });
        }

        function addTimeToArrayFromToken(token, input, config) {
            if (input != null && hasOwnProp(tokens, token)) {
                tokens[token](input, config._a, config, token);
            }
        }

        function isLeapYear(year) {
            return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
        }

        var YEAR = 0,
            MONTH = 1,
            DATE = 2,
            HOUR = 3,
            MINUTE = 4,
            SECOND = 5,
            MILLISECOND = 6,
            WEEK = 7,
            WEEKDAY = 8;

        // FORMATTING

        addFormatToken('Y', 0, 0, function () {
            var y = this.year();
            return y <= 9999 ? zeroFill(y, 4) : '+' + y;
        });

        addFormatToken(0, ['YY', 2], 0, function () {
            return this.year() % 100;
        });

        addFormatToken(0, ['YYYY', 4], 0, 'year');
        addFormatToken(0, ['YYYYY', 5], 0, 'year');
        addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

        // PARSING

        addRegexToken('Y', matchSigned);
        addRegexToken('YY', match1to2, match2);
        addRegexToken('YYYY', match1to4, match4);
        addRegexToken('YYYYY', match1to6, match6);
        addRegexToken('YYYYYY', match1to6, match6);

        addParseToken(['YYYYY', 'YYYYYY'], YEAR);
        addParseToken('YYYY', function (input, array) {
            array[YEAR] =
                input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
        });
        addParseToken('YY', function (input, array) {
            array[YEAR] = hooks.parseTwoDigitYear(input);
        });
        addParseToken('Y', function (input, array) {
            array[YEAR] = parseInt(input, 10);
        });

        // HELPERS

        function daysInYear(year) {
            return isLeapYear(year) ? 366 : 365;
        }

        // HOOKS

        hooks.parseTwoDigitYear = function (input) {
            return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
        };

        // MOMENTS

        var getSetYear = makeGetSet('FullYear', true);

        function getIsLeapYear() {
            return isLeapYear(this.year());
        }

        function makeGetSet(unit, keepTime) {
            return function (value) {
                if (value != null) {
                    set$1(this, unit, value);
                    hooks.updateOffset(this, keepTime);
                    return this;
                } else {
                    return get(this, unit);
                }
            };
        }

        function get(mom, unit) {
            if (!mom.isValid()) {
                return NaN;
            }

            var d = mom._d,
                isUTC = mom._isUTC;

            switch (unit) {
                case 'Milliseconds':
                    return isUTC ? d.getUTCMilliseconds() : d.getMilliseconds();
                case 'Seconds':
                    return isUTC ? d.getUTCSeconds() : d.getSeconds();
                case 'Minutes':
                    return isUTC ? d.getUTCMinutes() : d.getMinutes();
                case 'Hours':
                    return isUTC ? d.getUTCHours() : d.getHours();
                case 'Date':
                    return isUTC ? d.getUTCDate() : d.getDate();
                case 'Day':
                    return isUTC ? d.getUTCDay() : d.getDay();
                case 'Month':
                    return isUTC ? d.getUTCMonth() : d.getMonth();
                case 'FullYear':
                    return isUTC ? d.getUTCFullYear() : d.getFullYear();
                default:
                    return NaN; // Just in case
            }
        }

        function set$1(mom, unit, value) {
            var d, isUTC, year, month, date;

            if (!mom.isValid() || isNaN(value)) {
                return;
            }

            d = mom._d;
            isUTC = mom._isUTC;

            switch (unit) {
                case 'Milliseconds':
                    return void (isUTC
                        ? d.setUTCMilliseconds(value)
                        : d.setMilliseconds(value));
                case 'Seconds':
                    return void (isUTC ? d.setUTCSeconds(value) : d.setSeconds(value));
                case 'Minutes':
                    return void (isUTC ? d.setUTCMinutes(value) : d.setMinutes(value));
                case 'Hours':
                    return void (isUTC ? d.setUTCHours(value) : d.setHours(value));
                case 'Date':
                    return void (isUTC ? d.setUTCDate(value) : d.setDate(value));
                // case 'Day': // Not real
                //    return void (isUTC ? d.setUTCDay(value) : d.setDay(value));
                // case 'Month': // Not used because we need to pass two variables
                //     return void (isUTC ? d.setUTCMonth(value) : d.setMonth(value));
                case 'FullYear':
                    break; // See below ...
                default:
                    return; // Just in case
            }

            year = value;
            month = mom.month();
            date = mom.date();
            date = date === 29 && month === 1 && !isLeapYear(year) ? 28 : date;
            void (isUTC
                ? d.setUTCFullYear(year, month, date)
                : d.setFullYear(year, month, date));
        }

        // MOMENTS

        function stringGet(units) {
            units = normalizeUnits(units);
            if (isFunction(this[units])) {
                return this[units]();
            }
            return this;
        }

        function stringSet(units, value) {
            if (typeof units === 'object') {
                units = normalizeObjectUnits(units);
                var prioritized = getPrioritizedUnits(units),
                    i,
                    prioritizedLen = prioritized.length;
                for (i = 0; i < prioritizedLen; i++) {
                    this[prioritized[i].unit](units[prioritized[i].unit]);
                }
            } else {
                units = normalizeUnits(units);
                if (isFunction(this[units])) {
                    return this[units](value);
                }
            }
            return this;
        }

        function mod(n, x) {
            return ((n % x) + x) % x;
        }

        var indexOf;

        if (Array.prototype.indexOf) {
            indexOf = Array.prototype.indexOf;
        } else {
            indexOf = function (o) {
                // I know
                var i;
                for (i = 0; i < this.length; ++i) {
                    if (this[i] === o) {
                        return i;
                    }
                }
                return -1;
            };
        }

        function daysInMonth(year, month) {
            if (isNaN(year) || isNaN(month)) {
                return NaN;
            }
            var modMonth = mod(month, 12);
            year += (month - modMonth) / 12;
            return modMonth === 1
                ? isLeapYear(year)
                    ? 29
                    : 28
                : 31 - ((modMonth % 7) % 2);
        }

        // FORMATTING

        addFormatToken('M', ['MM', 2], 'Mo', function () {
            return this.month() + 1;
        });

        addFormatToken('MMM', 0, 0, function (format) {
            return this.localeData().monthsShort(this, format);
        });

        addFormatToken('MMMM', 0, 0, function (format) {
            return this.localeData().months(this, format);
        });

        // PARSING

        addRegexToken('M', match1to2, match1to2NoLeadingZero);
        addRegexToken('MM', match1to2, match2);
        addRegexToken('MMM', function (isStrict, locale) {
            return locale.monthsShortRegex(isStrict);
        });
        addRegexToken('MMMM', function (isStrict, locale) {
            return locale.monthsRegex(isStrict);
        });

        addParseToken(['M', 'MM'], function (input, array) {
            array[MONTH] = toInt(input) - 1;
        });

        addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
            var month = config._locale.monthsParse(input, token, config._strict);
            // if we didn't find a month name, mark the date as invalid.
            if (month != null) {
                array[MONTH] = month;
            } else {
                getParsingFlags(config).invalidMonth = input;
            }
        });

        // LOCALES

        var defaultLocaleMonths =
                'January_February_March_April_May_June_July_August_September_October_November_December'.split(
                    '_'
                ),
            defaultLocaleMonthsShort =
                'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
            MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,
            defaultMonthsShortRegex = matchWord,
            defaultMonthsRegex = matchWord;

        function localeMonths(m, format) {
            if (!m) {
                return isArray(this._months)
                    ? this._months
                    : this._months['standalone'];
            }
            return isArray(this._months)
                ? this._months[m.month()]
                : this._months[
                      (this._months.isFormat || MONTHS_IN_FORMAT).test(format)
                          ? 'format'
                          : 'standalone'
                  ][m.month()];
        }

        function localeMonthsShort(m, format) {
            if (!m) {
                return isArray(this._monthsShort)
                    ? this._monthsShort
                    : this._monthsShort['standalone'];
            }
            return isArray(this._monthsShort)
                ? this._monthsShort[m.month()]
                : this._monthsShort[
                      MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'
                  ][m.month()];
        }

        function handleStrictParse(monthName, format, strict) {
            var i,
                ii,
                mom,
                llc = monthName.toLocaleLowerCase();
            if (!this._monthsParse) {
                // this is not used
                this._monthsParse = [];
                this._longMonthsParse = [];
                this._shortMonthsParse = [];
                for (i = 0; i < 12; ++i) {
                    mom = createUTC([2000, i]);
                    this._shortMonthsParse[i] = this.monthsShort(
                        mom,
                        ''
                    ).toLocaleLowerCase();
                    this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
                }
            }

            if (strict) {
                if (format === 'MMM') {
                    ii = indexOf.call(this._shortMonthsParse, llc);
                    return ii !== -1 ? ii : null;
                } else {
                    ii = indexOf.call(this._longMonthsParse, llc);
                    return ii !== -1 ? ii : null;
                }
            } else {
                if (format === 'MMM') {
                    ii = indexOf.call(this._shortMonthsParse, llc);
                    if (ii !== -1) {
                        return ii;
                    }
                    ii = indexOf.call(this._longMonthsParse, llc);
                    return ii !== -1 ? ii : null;
                } else {
                    ii = indexOf.call(this._longMonthsParse, llc);
                    if (ii !== -1) {
                        return ii;
                    }
                    ii = indexOf.call(this._shortMonthsParse, llc);
                    return ii !== -1 ? ii : null;
                }
            }
        }

        function localeMonthsParse(monthName, format, strict) {
            var i, mom, regex;

            if (this._monthsParseExact) {
                return handleStrictParse.call(this, monthName, format, strict);
            }

            if (!this._monthsParse) {
                this._monthsParse = [];
                this._longMonthsParse = [];
                this._shortMonthsParse = [];
            }

            // TODO: add sorting
            // Sorting makes sure if one month (or abbr) is a prefix of another
            // see sorting in computeMonthsParse
            for (i = 0; i < 12; i++) {
                // make the regex if we don't have it already
                mom = createUTC([2000, i]);
                if (strict && !this._longMonthsParse[i]) {
                    this._longMonthsParse[i] = new RegExp(
                        '^' + this.months(mom, '').replace('.', '') + '$',
                        'i'
                    );
                    this._shortMonthsParse[i] = new RegExp(
                        '^' + this.monthsShort(mom, '').replace('.', '') + '$',
                        'i'
                    );
                }
                if (!strict && !this._monthsParse[i]) {
                    regex =
                        '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                    this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
                }
                // test the regex
                if (
                    strict &&
                    format === 'MMMM' &&
                    this._longMonthsParse[i].test(monthName)
                ) {
                    return i;
                } else if (
                    strict &&
                    format === 'MMM' &&
                    this._shortMonthsParse[i].test(monthName)
                ) {
                    return i;
                } else if (!strict && this._monthsParse[i].test(monthName)) {
                    return i;
                }
            }
        }

        // MOMENTS

        function setMonth(mom, value) {
            if (!mom.isValid()) {
                // No op
                return mom;
            }

            if (typeof value === 'string') {
                if (/^\d+$/.test(value)) {
                    value = toInt(value);
                } else {
                    value = mom.localeData().monthsParse(value);
                    // TODO: Another silent failure?
                    if (!isNumber(value)) {
                        return mom;
                    }
                }
            }

            var month = value,
                date = mom.date();

            date = date < 29 ? date : Math.min(date, daysInMonth(mom.year(), month));
            void (mom._isUTC
                ? mom._d.setUTCMonth(month, date)
                : mom._d.setMonth(month, date));
            return mom;
        }

        function getSetMonth(value) {
            if (value != null) {
                setMonth(this, value);
                hooks.updateOffset(this, true);
                return this;
            } else {
                return get(this, 'Month');
            }
        }

        function getDaysInMonth() {
            return daysInMonth(this.year(), this.month());
        }

        function monthsShortRegex(isStrict) {
            if (this._monthsParseExact) {
                if (!hasOwnProp(this, '_monthsRegex')) {
                    computeMonthsParse.call(this);
                }
                if (isStrict) {
                    return this._monthsShortStrictRegex;
                } else {
                    return this._monthsShortRegex;
                }
            } else {
                if (!hasOwnProp(this, '_monthsShortRegex')) {
                    this._monthsShortRegex = defaultMonthsShortRegex;
                }
                return this._monthsShortStrictRegex && isStrict
                    ? this._monthsShortStrictRegex
                    : this._monthsShortRegex;
            }
        }

        function monthsRegex(isStrict) {
            if (this._monthsParseExact) {
                if (!hasOwnProp(this, '_monthsRegex')) {
                    computeMonthsParse.call(this);
                }
                if (isStrict) {
                    return this._monthsStrictRegex;
                } else {
                    return this._monthsRegex;
                }
            } else {
                if (!hasOwnProp(this, '_monthsRegex')) {
                    this._monthsRegex = defaultMonthsRegex;
                }
                return this._monthsStrictRegex && isStrict
                    ? this._monthsStrictRegex
                    : this._monthsRegex;
            }
        }

        function computeMonthsParse() {
            function cmpLenRev(a, b) {
                return b.length - a.length;
            }

            var shortPieces = [],
                longPieces = [],
                mixedPieces = [],
                i,
                mom,
                shortP,
                longP;
            for (i = 0; i < 12; i++) {
                // make the regex if we don't have it already
                mom = createUTC([2000, i]);
                shortP = regexEscape(this.monthsShort(mom, ''));
                longP = regexEscape(this.months(mom, ''));
                shortPieces.push(shortP);
                longPieces.push(longP);
                mixedPieces.push(longP);
                mixedPieces.push(shortP);
            }
            // Sorting makes sure if one month (or abbr) is a prefix of another it
            // will match the longer piece.
            shortPieces.sort(cmpLenRev);
            longPieces.sort(cmpLenRev);
            mixedPieces.sort(cmpLenRev);

            this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
            this._monthsShortRegex = this._monthsRegex;
            this._monthsStrictRegex = new RegExp(
                '^(' + longPieces.join('|') + ')',
                'i'
            );
            this._monthsShortStrictRegex = new RegExp(
                '^(' + shortPieces.join('|') + ')',
                'i'
            );
        }

        function createDate(y, m, d, h, M, s, ms) {
            // can't just apply() to create a date:
            // https://stackoverflow.com/q/181348
            var date;
            // the date constructor remaps years 0-99 to 1900-1999
            if (y < 100 && y >= 0) {
                // preserve leap years using a full 400 year cycle, then reset
                date = new Date(y + 400, m, d, h, M, s, ms);
                if (isFinite(date.getFullYear())) {
                    date.setFullYear(y);
                }
            } else {
                date = new Date(y, m, d, h, M, s, ms);
            }

            return date;
        }

        function createUTCDate(y) {
            var date, args;
            // the Date.UTC function remaps years 0-99 to 1900-1999
            if (y < 100 && y >= 0) {
                args = Array.prototype.slice.call(arguments);
                // preserve leap years using a full 400 year cycle, then reset
                args[0] = y + 400;
                date = new Date(Date.UTC.apply(null, args));
                if (isFinite(date.getUTCFullYear())) {
                    date.setUTCFullYear(y);
                }
            } else {
                date = new Date(Date.UTC.apply(null, arguments));
            }

            return date;
        }

        // start-of-first-week - start-of-year
        function firstWeekOffset(year, dow, doy) {
            var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
                fwd = 7 + dow - doy,
                // first-week day local weekday -- which local weekday is fwd
                fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

            return -fwdlw + fwd - 1;
        }

        // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
        function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
            var localWeekday = (7 + weekday - dow) % 7,
                weekOffset = firstWeekOffset(year, dow, doy),
                dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
                resYear,
                resDayOfYear;

            if (dayOfYear <= 0) {
                resYear = year - 1;
                resDayOfYear = daysInYear(resYear) + dayOfYear;
            } else if (dayOfYear > daysInYear(year)) {
                resYear = year + 1;
                resDayOfYear = dayOfYear - daysInYear(year);
            } else {
                resYear = year;
                resDayOfYear = dayOfYear;
            }

            return {
                year: resYear,
                dayOfYear: resDayOfYear,
            };
        }

        function weekOfYear(mom, dow, doy) {
            var weekOffset = firstWeekOffset(mom.year(), dow, doy),
                week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
                resWeek,
                resYear;

            if (week < 1) {
                resYear = mom.year() - 1;
                resWeek = week + weeksInYear(resYear, dow, doy);
            } else if (week > weeksInYear(mom.year(), dow, doy)) {
                resWeek = week - weeksInYear(mom.year(), dow, doy);
                resYear = mom.year() + 1;
            } else {
                resYear = mom.year();
                resWeek = week;
            }

            return {
                week: resWeek,
                year: resYear,
            };
        }

        function weeksInYear(year, dow, doy) {
            var weekOffset = firstWeekOffset(year, dow, doy),
                weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
            return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
        }

        // FORMATTING

        addFormatToken('w', ['ww', 2], 'wo', 'week');
        addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

        // PARSING

        addRegexToken('w', match1to2, match1to2NoLeadingZero);
        addRegexToken('ww', match1to2, match2);
        addRegexToken('W', match1to2, match1to2NoLeadingZero);
        addRegexToken('WW', match1to2, match2);

        addWeekParseToken(
            ['w', 'ww', 'W', 'WW'],
            function (input, week, config, token) {
                week[token.substr(0, 1)] = toInt(input);
            }
        );

        // HELPERS

        // LOCALES

        function localeWeek(mom) {
            return weekOfYear(mom, this._week.dow, this._week.doy).week;
        }

        var defaultLocaleWeek = {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 6th is the first week of the year.
        };

        function localeFirstDayOfWeek() {
            return this._week.dow;
        }

        function localeFirstDayOfYear() {
            return this._week.doy;
        }

        // MOMENTS

        function getSetWeek(input) {
            var week = this.localeData().week(this);
            return input == null ? week : this.add((input - week) * 7, 'd');
        }

        function getSetISOWeek(input) {
            var week = weekOfYear(this, 1, 4).week;
            return input == null ? week : this.add((input - week) * 7, 'd');
        }

        // FORMATTING

        addFormatToken('d', 0, 'do', 'day');

        addFormatToken('dd', 0, 0, function (format) {
            return this.localeData().weekdaysMin(this, format);
        });

        addFormatToken('ddd', 0, 0, function (format) {
            return this.localeData().weekdaysShort(this, format);
        });

        addFormatToken('dddd', 0, 0, function (format) {
            return this.localeData().weekdays(this, format);
        });

        addFormatToken('e', 0, 0, 'weekday');
        addFormatToken('E', 0, 0, 'isoWeekday');

        // PARSING

        addRegexToken('d', match1to2);
        addRegexToken('e', match1to2);
        addRegexToken('E', match1to2);
        addRegexToken('dd', function (isStrict, locale) {
            return locale.weekdaysMinRegex(isStrict);
        });
        addRegexToken('ddd', function (isStrict, locale) {
            return locale.weekdaysShortRegex(isStrict);
        });
        addRegexToken('dddd', function (isStrict, locale) {
            return locale.weekdaysRegex(isStrict);
        });

        addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
            var weekday = config._locale.weekdaysParse(input, token, config._strict);
            // if we didn't get a weekday name, mark the date as invalid
            if (weekday != null) {
                week.d = weekday;
            } else {
                getParsingFlags(config).invalidWeekday = input;
            }
        });

        addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
            week[token] = toInt(input);
        });

        // HELPERS

        function parseWeekday(input, locale) {
            if (typeof input !== 'string') {
                return input;
            }

            if (!isNaN(input)) {
                return parseInt(input, 10);
            }

            input = locale.weekdaysParse(input);
            if (typeof input === 'number') {
                return input;
            }

            return null;
        }

        function parseIsoWeekday(input, locale) {
            if (typeof input === 'string') {
                return locale.weekdaysParse(input) % 7 || 7;
            }
            return isNaN(input) ? null : input;
        }

        // LOCALES
        function shiftWeekdays(ws, n) {
            return ws.slice(n, 7).concat(ws.slice(0, n));
        }

        var defaultLocaleWeekdays =
                'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
            defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
            defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
            defaultWeekdaysRegex = matchWord,
            defaultWeekdaysShortRegex = matchWord,
            defaultWeekdaysMinRegex = matchWord;

        function localeWeekdays(m, format) {
            var weekdays = isArray(this._weekdays)
                ? this._weekdays
                : this._weekdays[
                      m && m !== true && this._weekdays.isFormat.test(format)
                          ? 'format'
                          : 'standalone'
                  ];
            return m === true
                ? shiftWeekdays(weekdays, this._week.dow)
                : m
                  ? weekdays[m.day()]
                  : weekdays;
        }

        function localeWeekdaysShort(m) {
            return m === true
                ? shiftWeekdays(this._weekdaysShort, this._week.dow)
                : m
                  ? this._weekdaysShort[m.day()]
                  : this._weekdaysShort;
        }

        function localeWeekdaysMin(m) {
            return m === true
                ? shiftWeekdays(this._weekdaysMin, this._week.dow)
                : m
                  ? this._weekdaysMin[m.day()]
                  : this._weekdaysMin;
        }

        function handleStrictParse$1(weekdayName, format, strict) {
            var i,
                ii,
                mom,
                llc = weekdayName.toLocaleLowerCase();
            if (!this._weekdaysParse) {
                this._weekdaysParse = [];
                this._shortWeekdaysParse = [];
                this._minWeekdaysParse = [];

                for (i = 0; i < 7; ++i) {
                    mom = createUTC([2000, 1]).day(i);
                    this._minWeekdaysParse[i] = this.weekdaysMin(
                        mom,
                        ''
                    ).toLocaleLowerCase();
                    this._shortWeekdaysParse[i] = this.weekdaysShort(
                        mom,
                        ''
                    ).toLocaleLowerCase();
                    this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
                }
            }

            if (strict) {
                if (format === 'dddd') {
                    ii = indexOf.call(this._weekdaysParse, llc);
                    return ii !== -1 ? ii : null;
                } else if (format === 'ddd') {
                    ii = indexOf.call(this._shortWeekdaysParse, llc);
                    return ii !== -1 ? ii : null;
                } else {
                    ii = indexOf.call(this._minWeekdaysParse, llc);
                    return ii !== -1 ? ii : null;
                }
            } else {
                if (format === 'dddd') {
                    ii = indexOf.call(this._weekdaysParse, llc);
                    if (ii !== -1) {
                        return ii;
                    }
                    ii = indexOf.call(this._shortWeekdaysParse, llc);
                    if (ii !== -1) {
                        return ii;
                    }
                    ii = indexOf.call(this._minWeekdaysParse, llc);
                    return ii !== -1 ? ii : null;
                } else if (format === 'ddd') {
                    ii = indexOf.call(this._shortWeekdaysParse, llc);
                    if (ii !== -1) {
                        return ii;
                    }
                    ii = indexOf.call(this._weekdaysParse, llc);
                    if (ii !== -1) {
                        return ii;
                    }
                    ii = indexOf.call(this._minWeekdaysParse, llc);
                    return ii !== -1 ? ii : null;
                } else {
                    ii = indexOf.call(this._minWeekdaysParse, llc);
                    if (ii !== -1) {
                        return ii;
                    }
                    ii = indexOf.call(this._weekdaysParse, llc);
                    if (ii !== -1) {
                        return ii;
                    }
                    ii = indexOf.call(this._shortWeekdaysParse, llc);
                    return ii !== -1 ? ii : null;
                }
            }
        }

        function localeWeekdaysParse(weekdayName, format, strict) {
            var i, mom, regex;

            if (this._weekdaysParseExact) {
                return handleStrictParse$1.call(this, weekdayName, format, strict);
            }

            if (!this._weekdaysParse) {
                this._weekdaysParse = [];
                this._minWeekdaysParse = [];
                this._shortWeekdaysParse = [];
                this._fullWeekdaysParse = [];
            }

            for (i = 0; i < 7; i++) {
                // make the regex if we don't have it already

                mom = createUTC([2000, 1]).day(i);
                if (strict && !this._fullWeekdaysParse[i]) {
                    this._fullWeekdaysParse[i] = new RegExp(
                        '^' + this.weekdays(mom, '').replace('.', '\\.?') + '$',
                        'i'
                    );
                    this._shortWeekdaysParse[i] = new RegExp(
                        '^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$',
                        'i'
                    );
                    this._minWeekdaysParse[i] = new RegExp(
                        '^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$',
                        'i'
                    );
                }
                if (!this._weekdaysParse[i]) {
                    regex =
                        '^' +
                        this.weekdays(mom, '') +
                        '|^' +
                        this.weekdaysShort(mom, '') +
                        '|^' +
                        this.weekdaysMin(mom, '');
                    this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
                }
                // test the regex
                if (
                    strict &&
                    format === 'dddd' &&
                    this._fullWeekdaysParse[i].test(weekdayName)
                ) {
                    return i;
                } else if (
                    strict &&
                    format === 'ddd' &&
                    this._shortWeekdaysParse[i].test(weekdayName)
                ) {
                    return i;
                } else if (
                    strict &&
                    format === 'dd' &&
                    this._minWeekdaysParse[i].test(weekdayName)
                ) {
                    return i;
                } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
                    return i;
                }
            }
        }

        // MOMENTS

        function getSetDayOfWeek(input) {
            if (!this.isValid()) {
                return input != null ? this : NaN;
            }

            var day = get(this, 'Day');
            if (input != null) {
                input = parseWeekday(input, this.localeData());
                return this.add(input - day, 'd');
            } else {
                return day;
            }
        }

        function getSetLocaleDayOfWeek(input) {
            if (!this.isValid()) {
                return input != null ? this : NaN;
            }
            var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
            return input == null ? weekday : this.add(input - weekday, 'd');
        }

        function getSetISODayOfWeek(input) {
            if (!this.isValid()) {
                return input != null ? this : NaN;
            }

            // behaves the same as moment#day except
            // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
            // as a setter, sunday should belong to the previous week.

            if (input != null) {
                var weekday = parseIsoWeekday(input, this.localeData());
                return this.day(this.day() % 7 ? weekday : weekday - 7);
            } else {
                return this.day() || 7;
            }
        }

        function weekdaysRegex(isStrict) {
            if (this._weekdaysParseExact) {
                if (!hasOwnProp(this, '_weekdaysRegex')) {
                    computeWeekdaysParse.call(this);
                }
                if (isStrict) {
                    return this._weekdaysStrictRegex;
                } else {
                    return this._weekdaysRegex;
                }
            } else {
                if (!hasOwnProp(this, '_weekdaysRegex')) {
                    this._weekdaysRegex = defaultWeekdaysRegex;
                }
                return this._weekdaysStrictRegex && isStrict
                    ? this._weekdaysStrictRegex
                    : this._weekdaysRegex;
            }
        }

        function weekdaysShortRegex(isStrict) {
            if (this._weekdaysParseExact) {
                if (!hasOwnProp(this, '_weekdaysRegex')) {
                    computeWeekdaysParse.call(this);
                }
                if (isStrict) {
                    return this._weekdaysShortStrictRegex;
                } else {
                    return this._weekdaysShortRegex;
                }
            } else {
                if (!hasOwnProp(this, '_weekdaysShortRegex')) {
                    this._weekdaysShortRegex = defaultWeekdaysShortRegex;
                }
                return this._weekdaysShortStrictRegex && isStrict
                    ? this._weekdaysShortStrictRegex
                    : this._weekdaysShortRegex;
            }
        }

        function weekdaysMinRegex(isStrict) {
            if (this._weekdaysParseExact) {
                if (!hasOwnProp(this, '_weekdaysRegex')) {
                    computeWeekdaysParse.call(this);
                }
                if (isStrict) {
                    return this._weekdaysMinStrictRegex;
                } else {
                    return this._weekdaysMinRegex;
                }
            } else {
                if (!hasOwnProp(this, '_weekdaysMinRegex')) {
                    this._weekdaysMinRegex = defaultWeekdaysMinRegex;
                }
                return this._weekdaysMinStrictRegex && isStrict
                    ? this._weekdaysMinStrictRegex
                    : this._weekdaysMinRegex;
            }
        }

        function computeWeekdaysParse() {
            function cmpLenRev(a, b) {
                return b.length - a.length;
            }

            var minPieces = [],
                shortPieces = [],
                longPieces = [],
                mixedPieces = [],
                i,
                mom,
                minp,
                shortp,
                longp;
            for (i = 0; i < 7; i++) {
                // make the regex if we don't have it already
                mom = createUTC([2000, 1]).day(i);
                minp = regexEscape(this.weekdaysMin(mom, ''));
                shortp = regexEscape(this.weekdaysShort(mom, ''));
                longp = regexEscape(this.weekdays(mom, ''));
                minPieces.push(minp);
                shortPieces.push(shortp);
                longPieces.push(longp);
                mixedPieces.push(minp);
                mixedPieces.push(shortp);
                mixedPieces.push(longp);
            }
            // Sorting makes sure if one weekday (or abbr) is a prefix of another it
            // will match the longer piece.
            minPieces.sort(cmpLenRev);
            shortPieces.sort(cmpLenRev);
            longPieces.sort(cmpLenRev);
            mixedPieces.sort(cmpLenRev);

            this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
            this._weekdaysShortRegex = this._weekdaysRegex;
            this._weekdaysMinRegex = this._weekdaysRegex;

            this._weekdaysStrictRegex = new RegExp(
                '^(' + longPieces.join('|') + ')',
                'i'
            );
            this._weekdaysShortStrictRegex = new RegExp(
                '^(' + shortPieces.join('|') + ')',
                'i'
            );
            this._weekdaysMinStrictRegex = new RegExp(
                '^(' + minPieces.join('|') + ')',
                'i'
            );
        }

        // FORMATTING

        function hFormat() {
            return this.hours() % 12 || 12;
        }

        function kFormat() {
            return this.hours() || 24;
        }

        addFormatToken('H', ['HH', 2], 0, 'hour');
        addFormatToken('h', ['hh', 2], 0, hFormat);
        addFormatToken('k', ['kk', 2], 0, kFormat);

        addFormatToken('hmm', 0, 0, function () {
            return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
        });

        addFormatToken('hmmss', 0, 0, function () {
            return (
                '' +
                hFormat.apply(this) +
                zeroFill(this.minutes(), 2) +
                zeroFill(this.seconds(), 2)
            );
        });

        addFormatToken('Hmm', 0, 0, function () {
            return '' + this.hours() + zeroFill(this.minutes(), 2);
        });

        addFormatToken('Hmmss', 0, 0, function () {
            return (
                '' +
                this.hours() +
                zeroFill(this.minutes(), 2) +
                zeroFill(this.seconds(), 2)
            );
        });

        function meridiem(token, lowercase) {
            addFormatToken(token, 0, 0, function () {
                return this.localeData().meridiem(
                    this.hours(),
                    this.minutes(),
                    lowercase
                );
            });
        }

        meridiem('a', true);
        meridiem('A', false);

        // PARSING

        function matchMeridiem(isStrict, locale) {
            return locale._meridiemParse;
        }

        addRegexToken('a', matchMeridiem);
        addRegexToken('A', matchMeridiem);
        addRegexToken('H', match1to2, match1to2HasZero);
        addRegexToken('h', match1to2, match1to2NoLeadingZero);
        addRegexToken('k', match1to2, match1to2NoLeadingZero);
        addRegexToken('HH', match1to2, match2);
        addRegexToken('hh', match1to2, match2);
        addRegexToken('kk', match1to2, match2);

        addRegexToken('hmm', match3to4);
        addRegexToken('hmmss', match5to6);
        addRegexToken('Hmm', match3to4);
        addRegexToken('Hmmss', match5to6);

        addParseToken(['H', 'HH'], HOUR);
        addParseToken(['k', 'kk'], function (input, array, config) {
            var kInput = toInt(input);
            array[HOUR] = kInput === 24 ? 0 : kInput;
        });
        addParseToken(['a', 'A'], function (input, array, config) {
            config._isPm = config._locale.isPM(input);
            config._meridiem = input;
        });
        addParseToken(['h', 'hh'], function (input, array, config) {
            array[HOUR] = toInt(input);
            getParsingFlags(config).bigHour = true;
        });
        addParseToken('hmm', function (input, array, config) {
            var pos = input.length - 2;
            array[HOUR] = toInt(input.substr(0, pos));
            array[MINUTE] = toInt(input.substr(pos));
            getParsingFlags(config).bigHour = true;
        });
        addParseToken('hmmss', function (input, array, config) {
            var pos1 = input.length - 4,
                pos2 = input.length - 2;
            array[HOUR] = toInt(input.substr(0, pos1));
            array[MINUTE] = toInt(input.substr(pos1, 2));
            array[SECOND] = toInt(input.substr(pos2));
            getParsingFlags(config).bigHour = true;
        });
        addParseToken('Hmm', function (input, array, config) {
            var pos = input.length - 2;
            array[HOUR] = toInt(input.substr(0, pos));
            array[MINUTE] = toInt(input.substr(pos));
        });
        addParseToken('Hmmss', function (input, array, config) {
            var pos1 = input.length - 4,
                pos2 = input.length - 2;
            array[HOUR] = toInt(input.substr(0, pos1));
            array[MINUTE] = toInt(input.substr(pos1, 2));
            array[SECOND] = toInt(input.substr(pos2));
        });

        // LOCALES

        function localeIsPM(input) {
            // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
            // Using charAt should be more compatible.
            return (input + '').toLowerCase().charAt(0) === 'p';
        }

        var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i,
            // Setting the hour should keep the time, because the user explicitly
            // specified which hour they want. So trying to maintain the same hour (in
            // a new timezone) makes sense. Adding/subtracting hours does not follow
            // this rule.
            getSetHour = makeGetSet('Hours', true);

        function localeMeridiem(hours, minutes, isLower) {
            if (hours > 11) {
                return isLower ? 'pm' : 'PM';
            } else {
                return isLower ? 'am' : 'AM';
            }
        }

        var baseConfig = {
            calendar: defaultCalendar,
            longDateFormat: defaultLongDateFormat,
            invalidDate: defaultInvalidDate,
            ordinal: defaultOrdinal,
            dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
            relativeTime: defaultRelativeTime,

            months: defaultLocaleMonths,
            monthsShort: defaultLocaleMonthsShort,

            week: defaultLocaleWeek,

            weekdays: defaultLocaleWeekdays,
            weekdaysMin: defaultLocaleWeekdaysMin,
            weekdaysShort: defaultLocaleWeekdaysShort,

            meridiemParse: defaultLocaleMeridiemParse,
        };

        // internal storage for locale config files
        var locales = {},
            localeFamilies = {},
            globalLocale;

        function commonPrefix(arr1, arr2) {
            var i,
                minl = Math.min(arr1.length, arr2.length);
            for (i = 0; i < minl; i += 1) {
                if (arr1[i] !== arr2[i]) {
                    return i;
                }
            }
            return minl;
        }

        function normalizeLocale(key) {
            return key ? key.toLowerCase().replace('_', '-') : key;
        }

        // pick the locale from the array
        // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
        // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
        function chooseLocale(names) {
            var i = 0,
                j,
                next,
                locale,
                split;

            while (i < names.length) {
                split = normalizeLocale(names[i]).split('-');
                j = split.length;
                next = normalizeLocale(names[i + 1]);
                next = next ? next.split('-') : null;
                while (j > 0) {
                    locale = loadLocale(split.slice(0, j).join('-'));
                    if (locale) {
                        return locale;
                    }
                    if (
                        next &&
                        next.length >= j &&
                        commonPrefix(split, next) >= j - 1
                    ) {
                        //the next array item is better than a shallower substring of this one
                        break;
                    }
                    j--;
                }
                i++;
            }
            return globalLocale;
        }

        function isLocaleNameSane(name) {
            // Prevent names that look like filesystem paths, i.e contain '/' or '\'
            // Ensure name is available and function returns boolean
            return !!(name && name.match('^[^/\\\\]*$'));
        }

        function loadLocale(name) {
            var oldLocale = null,
                aliasedRequire;
            // TODO: Find a better way to register and load all the locales in Node
            if (
                locales[name] === undefined &&
                'object' !== 'undefined' &&
                module &&
                module.exports &&
                isLocaleNameSane(name)
            ) {
                try {
                    oldLocale = globalLocale._abbr;
                    aliasedRequire = commonjsRequire;
                    aliasedRequire('./locale/' + name);
                    getSetGlobalLocale(oldLocale);
                } catch (e) {
                    // mark as not found to avoid repeating expensive file require call causing high CPU
                    // when trying to find en-US, en_US, en-us for every format call
                    locales[name] = null; // null means not found
                }
            }
            return locales[name];
        }

        // This function will load locale and then set the global locale.  If
        // no arguments are passed in, it will simply return the current global
        // locale key.
        function getSetGlobalLocale(key, values) {
            var data;
            if (key) {
                if (isUndefined(values)) {
                    data = getLocale(key);
                } else {
                    data = defineLocale(key, values);
                }

                if (data) {
                    // moment.duration._locale = moment._locale = data;
                    globalLocale = data;
                } else {
                    if (typeof console !== 'undefined' && console.warn) {
                        //warn user if arguments are passed but the locale could not be set
                        console.warn(
                            'Locale ' + key + ' not found. Did you forget to load it?'
                        );
                    }
                }
            }

            return globalLocale._abbr;
        }

        function defineLocale(name, config) {
            if (config !== null) {
                var locale,
                    parentConfig = baseConfig;
                config.abbr = name;
                if (locales[name] != null) {
                    deprecateSimple(
                        'defineLocaleOverride',
                        'use moment.updateLocale(localeName, config) to change ' +
                            'an existing locale. moment.defineLocale(localeName, ' +
                            'config) should only be used for creating a new locale ' +
                            'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.'
                    );
                    parentConfig = locales[name]._config;
                } else if (config.parentLocale != null) {
                    if (locales[config.parentLocale] != null) {
                        parentConfig = locales[config.parentLocale]._config;
                    } else {
                        locale = loadLocale(config.parentLocale);
                        if (locale != null) {
                            parentConfig = locale._config;
                        } else {
                            if (!localeFamilies[config.parentLocale]) {
                                localeFamilies[config.parentLocale] = [];
                            }
                            localeFamilies[config.parentLocale].push({
                                name: name,
                                config: config,
                            });
                            return null;
                        }
                    }
                }
                locales[name] = new Locale(mergeConfigs(parentConfig, config));

                if (localeFamilies[name]) {
                    localeFamilies[name].forEach(function (x) {
                        defineLocale(x.name, x.config);
                    });
                }

                // backwards compat for now: also set the locale
                // make sure we set the locale AFTER all child locales have been
                // created, so we won't end up with the child locale set.
                getSetGlobalLocale(name);

                return locales[name];
            } else {
                // useful for testing
                delete locales[name];
                return null;
            }
        }

        function updateLocale(name, config) {
            if (config != null) {
                var locale,
                    tmpLocale,
                    parentConfig = baseConfig;

                if (locales[name] != null && locales[name].parentLocale != null) {
                    // Update existing child locale in-place to avoid memory-leaks
                    locales[name].set(mergeConfigs(locales[name]._config, config));
                } else {
                    // MERGE
                    tmpLocale = loadLocale(name);
                    if (tmpLocale != null) {
                        parentConfig = tmpLocale._config;
                    }
                    config = mergeConfigs(parentConfig, config);
                    if (tmpLocale == null) {
                        // updateLocale is called for creating a new locale
                        // Set abbr so it will have a name (getters return
                        // undefined otherwise).
                        config.abbr = name;
                    }
                    locale = new Locale(config);
                    locale.parentLocale = locales[name];
                    locales[name] = locale;
                }

                // backwards compat for now: also set the locale
                getSetGlobalLocale(name);
            } else {
                // pass null for config to unupdate, useful for tests
                if (locales[name] != null) {
                    if (locales[name].parentLocale != null) {
                        locales[name] = locales[name].parentLocale;
                        if (name === getSetGlobalLocale()) {
                            getSetGlobalLocale(name);
                        }
                    } else if (locales[name] != null) {
                        delete locales[name];
                    }
                }
            }
            return locales[name];
        }

        // returns locale data
        function getLocale(key) {
            var locale;

            if (key && key._locale && key._locale._abbr) {
                key = key._locale._abbr;
            }

            if (!key) {
                return globalLocale;
            }

            if (!isArray(key)) {
                //short-circuit everything else
                locale = loadLocale(key);
                if (locale) {
                    return locale;
                }
                key = [key];
            }

            return chooseLocale(key);
        }

        function listLocales() {
            return keys(locales);
        }

        function checkOverflow(m) {
            var overflow,
                a = m._a;

            if (a && getParsingFlags(m).overflow === -2) {
                overflow =
                    a[MONTH] < 0 || a[MONTH] > 11
                        ? MONTH
                        : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH])
                          ? DATE
                          : a[HOUR] < 0 ||
                              a[HOUR] > 24 ||
                              (a[HOUR] === 24 &&
                                  (a[MINUTE] !== 0 ||
                                      a[SECOND] !== 0 ||
                                      a[MILLISECOND] !== 0))
                            ? HOUR
                            : a[MINUTE] < 0 || a[MINUTE] > 59
                              ? MINUTE
                              : a[SECOND] < 0 || a[SECOND] > 59
                                ? SECOND
                                : a[MILLISECOND] < 0 || a[MILLISECOND] > 999
                                  ? MILLISECOND
                                  : -1;

                if (
                    getParsingFlags(m)._overflowDayOfYear &&
                    (overflow < YEAR || overflow > DATE)
                ) {
                    overflow = DATE;
                }
                if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
                    overflow = WEEK;
                }
                if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
                    overflow = WEEKDAY;
                }

                getParsingFlags(m).overflow = overflow;
            }

            return m;
        }

        // iso 8601 regex
        // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
        var extendedIsoRegex =
                /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
            basicIsoRegex =
                /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
            tzRegex = /Z|[+-]\d\d(?::?\d\d)?/,
            isoDates = [
                ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
                ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
                ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
                ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
                ['YYYY-DDD', /\d{4}-\d{3}/],
                ['YYYY-MM', /\d{4}-\d\d/, false],
                ['YYYYYYMMDD', /[+-]\d{10}/],
                ['YYYYMMDD', /\d{8}/],
                ['GGGG[W]WWE', /\d{4}W\d{3}/],
                ['GGGG[W]WW', /\d{4}W\d{2}/, false],
                ['YYYYDDD', /\d{7}/],
                ['YYYYMM', /\d{6}/, false],
                ['YYYY', /\d{4}/, false],
            ],
            // iso time formats and regexes
            isoTimes = [
                ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
                ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
                ['HH:mm:ss', /\d\d:\d\d:\d\d/],
                ['HH:mm', /\d\d:\d\d/],
                ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
                ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
                ['HHmmss', /\d\d\d\d\d\d/],
                ['HHmm', /\d\d\d\d/],
                ['HH', /\d\d/],
            ],
            aspNetJsonRegex = /^\/?Date\((-?\d+)/i,
            // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
            rfc2822 =
                /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/,
            obsOffsets = {
                UT: 0,
                GMT: 0,
                EDT: -4 * 60,
                EST: -5 * 60,
                CDT: -5 * 60,
                CST: -6 * 60,
                MDT: -6 * 60,
                MST: -7 * 60,
                PDT: -7 * 60,
                PST: -8 * 60,
            };

        // date from iso format
        function configFromISO(config) {
            var i,
                l,
                string = config._i,
                match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
                allowTime,
                dateFormat,
                timeFormat,
                tzFormat,
                isoDatesLen = isoDates.length,
                isoTimesLen = isoTimes.length;

            if (match) {
                getParsingFlags(config).iso = true;
                for (i = 0, l = isoDatesLen; i < l; i++) {
                    if (isoDates[i][1].exec(match[1])) {
                        dateFormat = isoDates[i][0];
                        allowTime = isoDates[i][2] !== false;
                        break;
                    }
                }
                if (dateFormat == null) {
                    config._isValid = false;
                    return;
                }
                if (match[3]) {
                    for (i = 0, l = isoTimesLen; i < l; i++) {
                        if (isoTimes[i][1].exec(match[3])) {
                            // match[2] should be 'T' or space
                            timeFormat = (match[2] || ' ') + isoTimes[i][0];
                            break;
                        }
                    }
                    if (timeFormat == null) {
                        config._isValid = false;
                        return;
                    }
                }
                if (!allowTime && timeFormat != null) {
                    config._isValid = false;
                    return;
                }
                if (match[4]) {
                    if (tzRegex.exec(match[4])) {
                        tzFormat = 'Z';
                    } else {
                        config._isValid = false;
                        return;
                    }
                }
                config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
                configFromStringAndFormat(config);
            } else {
                config._isValid = false;
            }
        }

        function extractFromRFC2822Strings(
            yearStr,
            monthStr,
            dayStr,
            hourStr,
            minuteStr,
            secondStr
        ) {
            var result = [
                untruncateYear(yearStr),
                defaultLocaleMonthsShort.indexOf(monthStr),
                parseInt(dayStr, 10),
                parseInt(hourStr, 10),
                parseInt(minuteStr, 10),
            ];

            if (secondStr) {
                result.push(parseInt(secondStr, 10));
            }

            return result;
        }

        function untruncateYear(yearStr) {
            var year = parseInt(yearStr, 10);
            if (year <= 49) {
                return 2000 + year;
            } else if (year <= 999) {
                return 1900 + year;
            }
            return year;
        }

        function preprocessRFC2822(s) {
            // Remove comments and folding whitespace and replace multiple-spaces with a single space
            return s
                .replace(/\([^()]*\)|[\n\t]/g, ' ')
                .replace(/(\s\s+)/g, ' ')
                .replace(/^\s\s*/, '')
                .replace(/\s\s*$/, '');
        }

        function checkWeekday(weekdayStr, parsedInput, config) {
            if (weekdayStr) {
                // TODO: Replace the vanilla JS Date object with an independent day-of-week check.
                var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
                    weekdayActual = new Date(
                        parsedInput[0],
                        parsedInput[1],
                        parsedInput[2]
                    ).getDay();
                if (weekdayProvided !== weekdayActual) {
                    getParsingFlags(config).weekdayMismatch = true;
                    config._isValid = false;
                    return false;
                }
            }
            return true;
        }

        function calculateOffset(obsOffset, militaryOffset, numOffset) {
            if (obsOffset) {
                return obsOffsets[obsOffset];
            } else if (militaryOffset) {
                // the only allowed military tz is Z
                return 0;
            } else {
                var hm = parseInt(numOffset, 10),
                    m = hm % 100,
                    h = (hm - m) / 100;
                return h * 60 + m;
            }
        }

        // date and time from ref 2822 format
        function configFromRFC2822(config) {
            var match = rfc2822.exec(preprocessRFC2822(config._i)),
                parsedArray;
            if (match) {
                parsedArray = extractFromRFC2822Strings(
                    match[4],
                    match[3],
                    match[2],
                    match[5],
                    match[6],
                    match[7]
                );
                if (!checkWeekday(match[1], parsedArray, config)) {
                    return;
                }

                config._a = parsedArray;
                config._tzm = calculateOffset(match[8], match[9], match[10]);

                config._d = createUTCDate.apply(null, config._a);
                config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);

                getParsingFlags(config).rfc2822 = true;
            } else {
                config._isValid = false;
            }
        }

        // date from 1) ASP.NET, 2) ISO, 3) RFC 2822 formats, or 4) optional fallback if parsing isn't strict
        function configFromString(config) {
            var matched = aspNetJsonRegex.exec(config._i);
            if (matched !== null) {
                config._d = new Date(+matched[1]);
                return;
            }

            configFromISO(config);
            if (config._isValid === false) {
                delete config._isValid;
            } else {
                return;
            }

            configFromRFC2822(config);
            if (config._isValid === false) {
                delete config._isValid;
            } else {
                return;
            }

            if (config._strict) {
                config._isValid = false;
            } else {
                // Final attempt, use Input Fallback
                hooks.createFromInputFallback(config);
            }
        }

        hooks.createFromInputFallback = deprecate(
            'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +
                'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +
                'discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.',
            function (config) {
                config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
            }
        );

        // Pick the first defined of two or three arguments.
        function defaults(a, b, c) {
            if (a != null) {
                return a;
            }
            if (b != null) {
                return b;
            }
            return c;
        }

        function currentDateArray(config) {
            // hooks is actually the exported moment object
            var nowValue = new Date(hooks.now());
            if (config._useUTC) {
                return [
                    nowValue.getUTCFullYear(),
                    nowValue.getUTCMonth(),
                    nowValue.getUTCDate(),
                ];
            }
            return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
        }

        // convert an array to a date.
        // the array should mirror the parameters below
        // note: all values past the year are optional and will default to the lowest possible value.
        // [year, month, day , hour, minute, second, millisecond]
        function configFromArray(config) {
            var i,
                date,
                input = [],
                currentDate,
                expectedWeekday,
                yearToUse;

            if (config._d) {
                return;
            }

            currentDate = currentDateArray(config);

            //compute day of the year from weeks and weekdays
            if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
                dayOfYearFromWeekInfo(config);
            }

            //if the day of the year is set, figure out what it is
            if (config._dayOfYear != null) {
                yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

                if (
                    config._dayOfYear > daysInYear(yearToUse) ||
                    config._dayOfYear === 0
                ) {
                    getParsingFlags(config)._overflowDayOfYear = true;
                }

                date = createUTCDate(yearToUse, 0, config._dayOfYear);
                config._a[MONTH] = date.getUTCMonth();
                config._a[DATE] = date.getUTCDate();
            }

            // Default to current date.
            // * if no year, month, day of month are given, default to today
            // * if day of month is given, default month and year
            // * if month is given, default only year
            // * if year is given, don't default anything
            for (i = 0; i < 3 && config._a[i] == null; ++i) {
                config._a[i] = input[i] = currentDate[i];
            }

            // Zero out whatever was not defaulted, including time
            for (; i < 7; i++) {
                config._a[i] = input[i] =
                    config._a[i] == null ? (i === 2 ? 1 : 0) : config._a[i];
            }

            // Check for 24:00:00.000
            if (
                config._a[HOUR] === 24 &&
                config._a[MINUTE] === 0 &&
                config._a[SECOND] === 0 &&
                config._a[MILLISECOND] === 0
            ) {
                config._nextDay = true;
                config._a[HOUR] = 0;
            }

            config._d = (config._useUTC ? createUTCDate : createDate).apply(
                null,
                input
            );
            expectedWeekday = config._useUTC
                ? config._d.getUTCDay()
                : config._d.getDay();

            // Apply timezone offset from input. The actual utcOffset can be changed
            // with parseZone.
            if (config._tzm != null) {
                config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
            }

            if (config._nextDay) {
                config._a[HOUR] = 24;
            }

            // check for mismatching day of week
            if (
                config._w &&
                typeof config._w.d !== 'undefined' &&
                config._w.d !== expectedWeekday
            ) {
                getParsingFlags(config).weekdayMismatch = true;
            }
        }

        function dayOfYearFromWeekInfo(config) {
            var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;

            w = config._w;
            if (w.GG != null || w.W != null || w.E != null) {
                dow = 1;
                doy = 4;

                // TODO: We need to take the current isoWeekYear, but that depends on
                // how we interpret now (local, utc, fixed offset). So create
                // a now version of current config (take local/utc/offset flags, and
                // create now).
                weekYear = defaults(
                    w.GG,
                    config._a[YEAR],
                    weekOfYear(createLocal(), 1, 4).year
                );
                week = defaults(w.W, 1);
                weekday = defaults(w.E, 1);
                if (weekday < 1 || weekday > 7) {
                    weekdayOverflow = true;
                }
            } else {
                dow = config._locale._week.dow;
                doy = config._locale._week.doy;

                curWeek = weekOfYear(createLocal(), dow, doy);

                weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

                // Default to current week.
                week = defaults(w.w, curWeek.week);

                if (w.d != null) {
                    // weekday -- low day numbers are considered next week
                    weekday = w.d;
                    if (weekday < 0 || weekday > 6) {
                        weekdayOverflow = true;
                    }
                } else if (w.e != null) {
                    // local weekday -- counting starts from beginning of week
                    weekday = w.e + dow;
                    if (w.e < 0 || w.e > 6) {
                        weekdayOverflow = true;
                    }
                } else {
                    // default to beginning of week
                    weekday = dow;
                }
            }
            if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
                getParsingFlags(config)._overflowWeeks = true;
            } else if (weekdayOverflow != null) {
                getParsingFlags(config)._overflowWeekday = true;
            } else {
                temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
                config._a[YEAR] = temp.year;
                config._dayOfYear = temp.dayOfYear;
            }
        }

        // constant that refers to the ISO standard
        hooks.ISO_8601 = function () {};

        // constant that refers to the RFC 2822 form
        hooks.RFC_2822 = function () {};

        // date from string and format string
        function configFromStringAndFormat(config) {
            // TODO: Move this to another part of the creation flow to prevent circular deps
            if (config._f === hooks.ISO_8601) {
                configFromISO(config);
                return;
            }
            if (config._f === hooks.RFC_2822) {
                configFromRFC2822(config);
                return;
            }
            config._a = [];
            getParsingFlags(config).empty = true;

            // This array is used to make a Date, either with `new Date` or `Date.UTC`
            var string = '' + config._i,
                i,
                parsedInput,
                tokens,
                token,
                skipped,
                stringLength = string.length,
                totalParsedInputLength = 0,
                era,
                tokenLen;

            tokens =
                expandFormat(config._f, config._locale).match(formattingTokens) || [];
            tokenLen = tokens.length;
            for (i = 0; i < tokenLen; i++) {
                token = tokens[i];
                parsedInput = (string.match(getParseRegexForToken(token, config)) ||
                    [])[0];
                if (parsedInput) {
                    skipped = string.substr(0, string.indexOf(parsedInput));
                    if (skipped.length > 0) {
                        getParsingFlags(config).unusedInput.push(skipped);
                    }
                    string = string.slice(
                        string.indexOf(parsedInput) + parsedInput.length
                    );
                    totalParsedInputLength += parsedInput.length;
                }
                // don't parse if it's not a known token
                if (formatTokenFunctions[token]) {
                    if (parsedInput) {
                        getParsingFlags(config).empty = false;
                    } else {
                        getParsingFlags(config).unusedTokens.push(token);
                    }
                    addTimeToArrayFromToken(token, parsedInput, config);
                } else if (config._strict && !parsedInput) {
                    getParsingFlags(config).unusedTokens.push(token);
                }
            }

            // add remaining unparsed input length to the string
            getParsingFlags(config).charsLeftOver =
                stringLength - totalParsedInputLength;
            if (string.length > 0) {
                getParsingFlags(config).unusedInput.push(string);
            }

            // clear _12h flag if hour is <= 12
            if (
                config._a[HOUR] <= 12 &&
                getParsingFlags(config).bigHour === true &&
                config._a[HOUR] > 0
            ) {
                getParsingFlags(config).bigHour = undefined;
            }

            getParsingFlags(config).parsedDateParts = config._a.slice(0);
            getParsingFlags(config).meridiem = config._meridiem;
            // handle meridiem
            config._a[HOUR] = meridiemFixWrap(
                config._locale,
                config._a[HOUR],
                config._meridiem
            );

            // handle era
            era = getParsingFlags(config).era;
            if (era !== null) {
                config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);
            }

            configFromArray(config);
            checkOverflow(config);
        }

        function meridiemFixWrap(locale, hour, meridiem) {
            var isPm;

            if (meridiem == null) {
                // nothing to do
                return hour;
            }
            if (locale.meridiemHour != null) {
                return locale.meridiemHour(hour, meridiem);
            } else if (locale.isPM != null) {
                // Fallback
                isPm = locale.isPM(meridiem);
                if (isPm && hour < 12) {
                    hour += 12;
                }
                if (!isPm && hour === 12) {
                    hour = 0;
                }
                return hour;
            } else {
                // this is not supposed to happen
                return hour;
            }
        }

        // date from string and array of format strings
        function configFromStringAndArray(config) {
            var tempConfig,
                bestMoment,
                scoreToBeat,
                i,
                currentScore,
                validFormatFound,
                bestFormatIsValid = false,
                configfLen = config._f.length;

            if (configfLen === 0) {
                getParsingFlags(config).invalidFormat = true;
                config._d = new Date(NaN);
                return;
            }

            for (i = 0; i < configfLen; i++) {
                currentScore = 0;
                validFormatFound = false;
                tempConfig = copyConfig({}, config);
                if (config._useUTC != null) {
                    tempConfig._useUTC = config._useUTC;
                }
                tempConfig._f = config._f[i];
                configFromStringAndFormat(tempConfig);

                if (isValid(tempConfig)) {
                    validFormatFound = true;
                }

                // if there is any input that was not parsed add a penalty for that format
                currentScore += getParsingFlags(tempConfig).charsLeftOver;

                //or tokens
                currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

                getParsingFlags(tempConfig).score = currentScore;

                if (!bestFormatIsValid) {
                    if (
                        scoreToBeat == null ||
                        currentScore < scoreToBeat ||
                        validFormatFound
                    ) {
                        scoreToBeat = currentScore;
                        bestMoment = tempConfig;
                        if (validFormatFound) {
                            bestFormatIsValid = true;
                        }
                    }
                } else {
                    if (currentScore < scoreToBeat) {
                        scoreToBeat = currentScore;
                        bestMoment = tempConfig;
                    }
                }
            }

            extend(config, bestMoment || tempConfig);
        }

        function configFromObject(config) {
            if (config._d) {
                return;
            }

            var i = normalizeObjectUnits(config._i),
                dayOrDate = i.day === undefined ? i.date : i.day;
            config._a = map(
                [i.year, i.month, dayOrDate, i.hour, i.minute, i.second, i.millisecond],
                function (obj) {
                    return obj && parseInt(obj, 10);
                }
            );

            configFromArray(config);
        }

        function createFromConfig(config) {
            var res = new Moment(checkOverflow(prepareConfig(config)));
            if (res._nextDay) {
                // Adding is smart enough around DST
                res.add(1, 'd');
                res._nextDay = undefined;
            }

            return res;
        }

        function prepareConfig(config) {
            var input = config._i,
                format = config._f;

            config._locale = config._locale || getLocale(config._l);

            if (input === null || (format === undefined && input === '')) {
                return createInvalid({ nullInput: true });
            }

            if (typeof input === 'string') {
                config._i = input = config._locale.preparse(input);
            }

            if (isMoment(input)) {
                return new Moment(checkOverflow(input));
            } else if (isDate(input)) {
                config._d = input;
            } else if (isArray(format)) {
                configFromStringAndArray(config);
            } else if (format) {
                configFromStringAndFormat(config);
            } else {
                configFromInput(config);
            }

            if (!isValid(config)) {
                config._d = null;
            }

            return config;
        }

        function configFromInput(config) {
            var input = config._i;
            if (isUndefined(input)) {
                config._d = new Date(hooks.now());
            } else if (isDate(input)) {
                config._d = new Date(input.valueOf());
            } else if (typeof input === 'string') {
                configFromString(config);
            } else if (isArray(input)) {
                config._a = map(input.slice(0), function (obj) {
                    return parseInt(obj, 10);
                });
                configFromArray(config);
            } else if (isObject(input)) {
                configFromObject(config);
            } else if (isNumber(input)) {
                // from milliseconds
                config._d = new Date(input);
            } else {
                hooks.createFromInputFallback(config);
            }
        }

        function createLocalOrUTC(input, format, locale, strict, isUTC) {
            var c = {};

            if (format === true || format === false) {
                strict = format;
                format = undefined;
            }

            if (locale === true || locale === false) {
                strict = locale;
                locale = undefined;
            }

            if (
                (isObject(input) && isObjectEmpty(input)) ||
                (isArray(input) && input.length === 0)
            ) {
                input = undefined;
            }
            // object construction must be done this way.
            // https://github.com/moment/moment/issues/1423
            c._isAMomentObject = true;
            c._useUTC = c._isUTC = isUTC;
            c._l = locale;
            c._i = input;
            c._f = format;
            c._strict = strict;

            return createFromConfig(c);
        }

        function createLocal(input, format, locale, strict) {
            return createLocalOrUTC(input, format, locale, strict, false);
        }

        var prototypeMin = deprecate(
                'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
                function () {
                    var other = createLocal.apply(null, arguments);
                    if (this.isValid() && other.isValid()) {
                        return other < this ? this : other;
                    } else {
                        return createInvalid();
                    }
                }
            ),
            prototypeMax = deprecate(
                'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
                function () {
                    var other = createLocal.apply(null, arguments);
                    if (this.isValid() && other.isValid()) {
                        return other > this ? this : other;
                    } else {
                        return createInvalid();
                    }
                }
            );

        // Pick a moment m from moments so that m[fn](other) is true for all
        // other. This relies on the function fn to be transitive.
        //
        // moments should either be an array of moment objects or an array, whose
        // first element is an array of moment objects.
        function pickBy(fn, moments) {
            var res, i;
            if (moments.length === 1 && isArray(moments[0])) {
                moments = moments[0];
            }
            if (!moments.length) {
                return createLocal();
            }
            res = moments[0];
            for (i = 1; i < moments.length; ++i) {
                if (!moments[i].isValid() || moments[i][fn](res)) {
                    res = moments[i];
                }
            }
            return res;
        }

        // TODO: Use [].sort instead?
        function min() {
            var args = [].slice.call(arguments, 0);

            return pickBy('isBefore', args);
        }

        function max() {
            var args = [].slice.call(arguments, 0);

            return pickBy('isAfter', args);
        }

        var now = function () {
            return Date.now ? Date.now() : +new Date();
        };

        var ordering = [
            'year',
            'quarter',
            'month',
            'week',
            'day',
            'hour',
            'minute',
            'second',
            'millisecond',
        ];

        function isDurationValid(m) {
            var key,
                unitHasDecimal = false,
                i,
                orderLen = ordering.length;
            for (key in m) {
                if (
                    hasOwnProp(m, key) &&
                    !(
                        indexOf.call(ordering, key) !== -1 &&
                        (m[key] == null || !isNaN(m[key]))
                    )
                ) {
                    return false;
                }
            }

            for (i = 0; i < orderLen; ++i) {
                if (m[ordering[i]]) {
                    if (unitHasDecimal) {
                        return false; // only allow non-integers for smallest unit
                    }
                    if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
                        unitHasDecimal = true;
                    }
                }
            }

            return true;
        }

        function isValid$1() {
            return this._isValid;
        }

        function createInvalid$1() {
            return createDuration(NaN);
        }

        function Duration(duration) {
            var normalizedInput = normalizeObjectUnits(duration),
                years = normalizedInput.year || 0,
                quarters = normalizedInput.quarter || 0,
                months = normalizedInput.month || 0,
                weeks = normalizedInput.week || normalizedInput.isoWeek || 0,
                days = normalizedInput.day || 0,
                hours = normalizedInput.hour || 0,
                minutes = normalizedInput.minute || 0,
                seconds = normalizedInput.second || 0,
                milliseconds = normalizedInput.millisecond || 0;

            this._isValid = isDurationValid(normalizedInput);

            // representation for dateAddRemove
            this._milliseconds =
                +milliseconds +
                seconds * 1e3 + // 1000
                minutes * 6e4 + // 1000 * 60
                hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
            // Because of dateAddRemove treats 24 hours as different from a
            // day when working around DST, we need to store them separately
            this._days = +days + weeks * 7;
            // It is impossible to translate months into days without knowing
            // which months you are are talking about, so we have to store
            // it separately.
            this._months = +months + quarters * 3 + years * 12;

            this._data = {};

            this._locale = getLocale();

            this._bubble();
        }

        function isDuration(obj) {
            return obj instanceof Duration;
        }

        function absRound(number) {
            if (number < 0) {
                return Math.round(-1 * number) * -1;
            } else {
                return Math.round(number);
            }
        }

        // compare two arrays, return the number of differences
        function compareArrays(array1, array2, dontConvert) {
            var len = Math.min(array1.length, array2.length),
                lengthDiff = Math.abs(array1.length - array2.length),
                diffs = 0,
                i;
            for (i = 0; i < len; i++) {
                if (
                    (dontConvert && array1[i] !== array2[i]) ||
                    (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))
                ) {
                    diffs++;
                }
            }
            return diffs + lengthDiff;
        }

        // FORMATTING

        function offset(token, separator) {
            addFormatToken(token, 0, 0, function () {
                var offset = this.utcOffset(),
                    sign = '+';
                if (offset < 0) {
                    offset = -offset;
                    sign = '-';
                }
                return (
                    sign +
                    zeroFill(~~(offset / 60), 2) +
                    separator +
                    zeroFill(~~offset % 60, 2)
                );
            });
        }

        offset('Z', ':');
        offset('ZZ', '');

        // PARSING

        addRegexToken('Z', matchShortOffset);
        addRegexToken('ZZ', matchShortOffset);
        addParseToken(['Z', 'ZZ'], function (input, array, config) {
            config._useUTC = true;
            config._tzm = offsetFromString(matchShortOffset, input);
        });

        // HELPERS

        // timezone chunker
        // '+10:00' > ['10',  '00']
        // '-1530'  > ['-15', '30']
        var chunkOffset = /([\+\-]|\d\d)/gi;

        function offsetFromString(matcher, string) {
            var matches = (string || '').match(matcher),
                chunk,
                parts,
                minutes;

            if (matches === null) {
                return null;
            }

            chunk = matches[matches.length - 1] || [];
            parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];
            minutes = +(parts[1] * 60) + toInt(parts[2]);

            return minutes === 0 ? 0 : parts[0] === '+' ? minutes : -minutes;
        }

        // Return a moment from input, that is local/utc/zone equivalent to model.
        function cloneWithOffset(input, model) {
            var res, diff;
            if (model._isUTC) {
                res = model.clone();
                diff =
                    (isMoment(input) || isDate(input)
                        ? input.valueOf()
                        : createLocal(input).valueOf()) - res.valueOf();
                // Use low-level api, because this fn is low-level api.
                res._d.setTime(res._d.valueOf() + diff);
                hooks.updateOffset(res, false);
                return res;
            } else {
                return createLocal(input).local();
            }
        }

        function getDateOffset(m) {
            // On Firefox.24 Date#getTimezoneOffset returns a floating point.
            // https://github.com/moment/moment/pull/1871
            return -Math.round(m._d.getTimezoneOffset());
        }

        // HOOKS

        // This function will be called whenever a moment is mutated.
        // It is intended to keep the offset in sync with the timezone.
        hooks.updateOffset = function () {};

        // MOMENTS

        // keepLocalTime = true means only change the timezone, without
        // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
        // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
        // +0200, so we adjust the time as needed, to be valid.
        //
        // Keeping the time actually adds/subtracts (one hour)
        // from the actual represented time. That is why we call updateOffset
        // a second time. In case it wants us to change the offset again
        // _changeInProgress == true case, then we have to adjust, because
        // there is no such time in the given timezone.
        function getSetOffset(input, keepLocalTime, keepMinutes) {
            var offset = this._offset || 0,
                localAdjust;
            if (!this.isValid()) {
                return input != null ? this : NaN;
            }
            if (input != null) {
                if (typeof input === 'string') {
                    input = offsetFromString(matchShortOffset, input);
                    if (input === null) {
                        return this;
                    }
                } else if (Math.abs(input) < 16 && !keepMinutes) {
                    input = input * 60;
                }
                if (!this._isUTC && keepLocalTime) {
                    localAdjust = getDateOffset(this);
                }
                this._offset = input;
                this._isUTC = true;
                if (localAdjust != null) {
                    this.add(localAdjust, 'm');
                }
                if (offset !== input) {
                    if (!keepLocalTime || this._changeInProgress) {
                        addSubtract(
                            this,
                            createDuration(input - offset, 'm'),
                            1,
                            false
                        );
                    } else if (!this._changeInProgress) {
                        this._changeInProgress = true;
                        hooks.updateOffset(this, true);
                        this._changeInProgress = null;
                    }
                }
                return this;
            } else {
                return this._isUTC ? offset : getDateOffset(this);
            }
        }

        function getSetZone(input, keepLocalTime) {
            if (input != null) {
                if (typeof input !== 'string') {
                    input = -input;
                }

                this.utcOffset(input, keepLocalTime);

                return this;
            } else {
                return -this.utcOffset();
            }
        }

        function setOffsetToUTC(keepLocalTime) {
            return this.utcOffset(0, keepLocalTime);
        }

        function setOffsetToLocal(keepLocalTime) {
            if (this._isUTC) {
                this.utcOffset(0, keepLocalTime);
                this._isUTC = false;

                if (keepLocalTime) {
                    this.subtract(getDateOffset(this), 'm');
                }
            }
            return this;
        }

        function setOffsetToParsedOffset() {
            if (this._tzm != null) {
                this.utcOffset(this._tzm, false, true);
            } else if (typeof this._i === 'string') {
                var tZone = offsetFromString(matchOffset, this._i);
                if (tZone != null) {
                    this.utcOffset(tZone);
                } else {
                    this.utcOffset(0, true);
                }
            }
            return this;
        }

        function hasAlignedHourOffset(input) {
            if (!this.isValid()) {
                return false;
            }
            input = input ? createLocal(input).utcOffset() : 0;

            return (this.utcOffset() - input) % 60 === 0;
        }

        function isDaylightSavingTime() {
            return (
                this.utcOffset() > this.clone().month(0).utcOffset() ||
                this.utcOffset() > this.clone().month(5).utcOffset()
            );
        }

        function isDaylightSavingTimeShifted() {
            if (!isUndefined(this._isDSTShifted)) {
                return this._isDSTShifted;
            }

            var c = {},
                other;

            copyConfig(c, this);
            c = prepareConfig(c);

            if (c._a) {
                other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
                this._isDSTShifted =
                    this.isValid() && compareArrays(c._a, other.toArray()) > 0;
            } else {
                this._isDSTShifted = false;
            }

            return this._isDSTShifted;
        }

        function isLocal() {
            return this.isValid() ? !this._isUTC : false;
        }

        function isUtcOffset() {
            return this.isValid() ? this._isUTC : false;
        }

        function isUtc() {
            return this.isValid() ? this._isUTC && this._offset === 0 : false;
        }

        // ASP.NET json date format regex
        var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/,
            // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
            // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
            // and further modified to allow for strings containing both week and day
            isoRegex =
                /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;

        function createDuration(input, key) {
            var duration = input,
                // matching against regexp is expensive, do it on demand
                match = null,
                sign,
                ret,
                diffRes;

            if (isDuration(input)) {
                duration = {
                    ms: input._milliseconds,
                    d: input._days,
                    M: input._months,
                };
            } else if (isNumber(input) || !isNaN(+input)) {
                duration = {};
                if (key) {
                    duration[key] = +input;
                } else {
                    duration.milliseconds = +input;
                }
            } else if ((match = aspNetRegex.exec(input))) {
                sign = match[1] === '-' ? -1 : 1;
                duration = {
                    y: 0,
                    d: toInt(match[DATE]) * sign,
                    h: toInt(match[HOUR]) * sign,
                    m: toInt(match[MINUTE]) * sign,
                    s: toInt(match[SECOND]) * sign,
                    ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign, // the millisecond decimal point is included in the match
                };
            } else if ((match = isoRegex.exec(input))) {
                sign = match[1] === '-' ? -1 : 1;
                duration = {
                    y: parseIso(match[2], sign),
                    M: parseIso(match[3], sign),
                    w: parseIso(match[4], sign),
                    d: parseIso(match[5], sign),
                    h: parseIso(match[6], sign),
                    m: parseIso(match[7], sign),
                    s: parseIso(match[8], sign),
                };
            } else if (duration == null) {
                // checks for null or undefined
                duration = {};
            } else if (
                typeof duration === 'object' &&
                ('from' in duration || 'to' in duration)
            ) {
                diffRes = momentsDifference(
                    createLocal(duration.from),
                    createLocal(duration.to)
                );

                duration = {};
                duration.ms = diffRes.milliseconds;
                duration.M = diffRes.months;
            }

            ret = new Duration(duration);

            if (isDuration(input) && hasOwnProp(input, '_locale')) {
                ret._locale = input._locale;
            }

            if (isDuration(input) && hasOwnProp(input, '_isValid')) {
                ret._isValid = input._isValid;
            }

            return ret;
        }

        createDuration.fn = Duration.prototype;
        createDuration.invalid = createInvalid$1;

        function parseIso(inp, sign) {
            // We'd normally use ~~inp for this, but unfortunately it also
            // converts floats to ints.
            // inp may be undefined, so careful calling replace on it.
            var res = inp && parseFloat(inp.replace(',', '.'));
            // apply sign while we're at it
            return (isNaN(res) ? 0 : res) * sign;
        }

        function positiveMomentsDifference(base, other) {
            var res = {};

            res.months =
                other.month() - base.month() + (other.year() - base.year()) * 12;
            if (base.clone().add(res.months, 'M').isAfter(other)) {
                --res.months;
            }

            res.milliseconds = +other - +base.clone().add(res.months, 'M');

            return res;
        }

        function momentsDifference(base, other) {
            var res;
            if (!(base.isValid() && other.isValid())) {
                return { milliseconds: 0, months: 0 };
            }

            other = cloneWithOffset(other, base);
            if (base.isBefore(other)) {
                res = positiveMomentsDifference(base, other);
            } else {
                res = positiveMomentsDifference(other, base);
                res.milliseconds = -res.milliseconds;
                res.months = -res.months;
            }

            return res;
        }

        // TODO: remove 'name' arg after deprecation is removed
        function createAdder(direction, name) {
            return function (val, period) {
                var dur, tmp;
                //invert the arguments, but complain about it
                if (period !== null && !isNaN(+period)) {
                    deprecateSimple(
                        name,
                        'moment().' +
                            name +
                            '(period, number) is deprecated. Please use moment().' +
                            name +
                            '(number, period). ' +
                            'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.'
                    );
                    tmp = val;
                    val = period;
                    period = tmp;
                }

                dur = createDuration(val, period);
                addSubtract(this, dur, direction);
                return this;
            };
        }

        function addSubtract(mom, duration, isAdding, updateOffset) {
            var milliseconds = duration._milliseconds,
                days = absRound(duration._days),
                months = absRound(duration._months);

            if (!mom.isValid()) {
                // No op
                return;
            }

            updateOffset = updateOffset == null ? true : updateOffset;

            if (months) {
                setMonth(mom, get(mom, 'Month') + months * isAdding);
            }
            if (days) {
                set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
            }
            if (milliseconds) {
                mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
            }
            if (updateOffset) {
                hooks.updateOffset(mom, days || months);
            }
        }

        var add = createAdder(1, 'add'),
            subtract = createAdder(-1, 'subtract');

        function isString(input) {
            return typeof input === 'string' || input instanceof String;
        }

        // type MomentInput = Moment | Date | string | number | (number | string)[] | MomentInputObject | void; // null | undefined
        function isMomentInput(input) {
            return (
                isMoment(input) ||
                isDate(input) ||
                isString(input) ||
                isNumber(input) ||
                isNumberOrStringArray(input) ||
                isMomentInputObject(input) ||
                input === null ||
                input === undefined
            );
        }

        function isMomentInputObject(input) {
            var objectTest = isObject(input) && !isObjectEmpty(input),
                propertyTest = false,
                properties = [
                    'years',
                    'year',
                    'y',
                    'months',
                    'month',
                    'M',
                    'days',
                    'day',
                    'd',
                    'dates',
                    'date',
                    'D',
                    'hours',
                    'hour',
                    'h',
                    'minutes',
                    'minute',
                    'm',
                    'seconds',
                    'second',
                    's',
                    'milliseconds',
                    'millisecond',
                    'ms',
                ],
                i,
                property,
                propertyLen = properties.length;

            for (i = 0; i < propertyLen; i += 1) {
                property = properties[i];
                propertyTest = propertyTest || hasOwnProp(input, property);
            }

            return objectTest && propertyTest;
        }

        function isNumberOrStringArray(input) {
            var arrayTest = isArray(input),
                dataTypeTest = false;
            if (arrayTest) {
                dataTypeTest =
                    input.filter(function (item) {
                        return !isNumber(item) && isString(input);
                    }).length === 0;
            }
            return arrayTest && dataTypeTest;
        }

        function isCalendarSpec(input) {
            var objectTest = isObject(input) && !isObjectEmpty(input),
                propertyTest = false,
                properties = [
                    'sameDay',
                    'nextDay',
                    'lastDay',
                    'nextWeek',
                    'lastWeek',
                    'sameElse',
                ],
                i,
                property;

            for (i = 0; i < properties.length; i += 1) {
                property = properties[i];
                propertyTest = propertyTest || hasOwnProp(input, property);
            }

            return objectTest && propertyTest;
        }

        function getCalendarFormat(myMoment, now) {
            var diff = myMoment.diff(now, 'days', true);
            return diff < -6
                ? 'sameElse'
                : diff < -1
                  ? 'lastWeek'
                  : diff < 0
                    ? 'lastDay'
                    : diff < 1
                      ? 'sameDay'
                      : diff < 2
                        ? 'nextDay'
                        : diff < 7
                          ? 'nextWeek'
                          : 'sameElse';
        }

        function calendar$1(time, formats) {
            // Support for single parameter, formats only overload to the calendar function
            if (arguments.length === 1) {
                if (!arguments[0]) {
                    time = undefined;
                    formats = undefined;
                } else if (isMomentInput(arguments[0])) {
                    time = arguments[0];
                    formats = undefined;
                } else if (isCalendarSpec(arguments[0])) {
                    formats = arguments[0];
                    time = undefined;
                }
            }
            // We want to compare the start of today, vs this.
            // Getting start-of-today depends on whether we're local/utc/offset or not.
            var now = time || createLocal(),
                sod = cloneWithOffset(now, this).startOf('day'),
                format = hooks.calendarFormat(this, sod) || 'sameElse',
                output =
                    formats &&
                    (isFunction(formats[format])
                        ? formats[format].call(this, now)
                        : formats[format]);

            return this.format(
                output || this.localeData().calendar(format, this, createLocal(now))
            );
        }

        function clone() {
            return new Moment(this);
        }

        function isAfter(input, units) {
            var localInput = isMoment(input) ? input : createLocal(input);
            if (!(this.isValid() && localInput.isValid())) {
                return false;
            }
            units = normalizeUnits(units) || 'millisecond';
            if (units === 'millisecond') {
                return this.valueOf() > localInput.valueOf();
            } else {
                return localInput.valueOf() < this.clone().startOf(units).valueOf();
            }
        }

        function isBefore(input, units) {
            var localInput = isMoment(input) ? input : createLocal(input);
            if (!(this.isValid() && localInput.isValid())) {
                return false;
            }
            units = normalizeUnits(units) || 'millisecond';
            if (units === 'millisecond') {
                return this.valueOf() < localInput.valueOf();
            } else {
                return this.clone().endOf(units).valueOf() < localInput.valueOf();
            }
        }

        function isBetween(from, to, units, inclusivity) {
            var localFrom = isMoment(from) ? from : createLocal(from),
                localTo = isMoment(to) ? to : createLocal(to);
            if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
                return false;
            }
            inclusivity = inclusivity || '()';
            return (
                (inclusivity[0] === '('
                    ? this.isAfter(localFrom, units)
                    : !this.isBefore(localFrom, units)) &&
                (inclusivity[1] === ')'
                    ? this.isBefore(localTo, units)
                    : !this.isAfter(localTo, units))
            );
        }

        function isSame(input, units) {
            var localInput = isMoment(input) ? input : createLocal(input),
                inputMs;
            if (!(this.isValid() && localInput.isValid())) {
                return false;
            }
            units = normalizeUnits(units) || 'millisecond';
            if (units === 'millisecond') {
                return this.valueOf() === localInput.valueOf();
            } else {
                inputMs = localInput.valueOf();
                return (
                    this.clone().startOf(units).valueOf() <= inputMs &&
                    inputMs <= this.clone().endOf(units).valueOf()
                );
            }
        }

        function isSameOrAfter(input, units) {
            return this.isSame(input, units) || this.isAfter(input, units);
        }

        function isSameOrBefore(input, units) {
            return this.isSame(input, units) || this.isBefore(input, units);
        }

        function diff(input, units, asFloat) {
            var that, zoneDelta, output;

            if (!this.isValid()) {
                return NaN;
            }

            that = cloneWithOffset(input, this);

            if (!that.isValid()) {
                return NaN;
            }

            zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

            units = normalizeUnits(units);

            switch (units) {
                case 'year':
                    output = monthDiff(this, that) / 12;
                    break;
                case 'month':
                    output = monthDiff(this, that);
                    break;
                case 'quarter':
                    output = monthDiff(this, that) / 3;
                    break;
                case 'second':
                    output = (this - that) / 1e3;
                    break; // 1000
                case 'minute':
                    output = (this - that) / 6e4;
                    break; // 1000 * 60
                case 'hour':
                    output = (this - that) / 36e5;
                    break; // 1000 * 60 * 60
                case 'day':
                    output = (this - that - zoneDelta) / 864e5;
                    break; // 1000 * 60 * 60 * 24, negate dst
                case 'week':
                    output = (this - that - zoneDelta) / 6048e5;
                    break; // 1000 * 60 * 60 * 24 * 7, negate dst
                default:
                    output = this - that;
            }

            return asFloat ? output : absFloor(output);
        }

        function monthDiff(a, b) {
            if (a.date() < b.date()) {
                // end-of-month calculations work correct when the start month has more
                // days than the end month.
                return -monthDiff(b, a);
            }
            // difference in months
            var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()),
                // b is in (anchor - 1 month, anchor + 1 month)
                anchor = a.clone().add(wholeMonthDiff, 'months'),
                anchor2,
                adjust;

            if (b - anchor < 0) {
                anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
                // linear across the month
                adjust = (b - anchor) / (anchor - anchor2);
            } else {
                anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
                // linear across the month
                adjust = (b - anchor) / (anchor2 - anchor);
            }

            //check for negative zero, return zero if negative zero
            return -(wholeMonthDiff + adjust) || 0;
        }

        hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
        hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

        function toString() {
            return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
        }

        function toISOString(keepOffset) {
            if (!this.isValid()) {
                return null;
            }
            var utc = keepOffset !== true,
                m = utc ? this.clone().utc() : this;
            if (m.year() < 0 || m.year() > 9999) {
                return formatMoment(
                    m,
                    utc
                        ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]'
                        : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ'
                );
            }
            if (isFunction(Date.prototype.toISOString)) {
                // native implementation is ~50x faster, use it when we can
                if (utc) {
                    return this.toDate().toISOString();
                } else {
                    return new Date(this.valueOf() + this.utcOffset() * 60 * 1000)
                        .toISOString()
                        .replace('Z', formatMoment(m, 'Z'));
                }
            }
            return formatMoment(
                m,
                utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ'
            );
        }

        /**
         * Return a human readable representation of a moment that can
         * also be evaluated to get a new moment which is the same
         *
         * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
         */
        function inspect() {
            if (!this.isValid()) {
                return 'moment.invalid(/* ' + this._i + ' */)';
            }
            var func = 'moment',
                zone = '',
                prefix,
                year,
                datetime,
                suffix;
            if (!this.isLocal()) {
                func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
                zone = 'Z';
            }
            prefix = '[' + func + '("]';
            year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';
            datetime = '-MM-DD[T]HH:mm:ss.SSS';
            suffix = zone + '[")]';

            return this.format(prefix + year + datetime + suffix);
        }

        function format(inputString) {
            if (!inputString) {
                inputString = this.isUtc()
                    ? hooks.defaultFormatUtc
                    : hooks.defaultFormat;
            }
            var output = formatMoment(this, inputString);
            return this.localeData().postformat(output);
        }

        function from(time, withoutSuffix) {
            if (
                this.isValid() &&
                ((isMoment(time) && time.isValid()) || createLocal(time).isValid())
            ) {
                return createDuration({ to: this, from: time })
                    .locale(this.locale())
                    .humanize(!withoutSuffix);
            } else {
                return this.localeData().invalidDate();
            }
        }

        function fromNow(withoutSuffix) {
            return this.from(createLocal(), withoutSuffix);
        }

        function to(time, withoutSuffix) {
            if (
                this.isValid() &&
                ((isMoment(time) && time.isValid()) || createLocal(time).isValid())
            ) {
                return createDuration({ from: this, to: time })
                    .locale(this.locale())
                    .humanize(!withoutSuffix);
            } else {
                return this.localeData().invalidDate();
            }
        }

        function toNow(withoutSuffix) {
            return this.to(createLocal(), withoutSuffix);
        }

        // If passed a locale key, it will set the locale for this
        // instance.  Otherwise, it will return the locale configuration
        // variables for this instance.
        function locale(key) {
            var newLocaleData;

            if (key === undefined) {
                return this._locale._abbr;
            } else {
                newLocaleData = getLocale(key);
                if (newLocaleData != null) {
                    this._locale = newLocaleData;
                }
                return this;
            }
        }

        var lang = deprecate(
            'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
            function (key) {
                if (key === undefined) {
                    return this.localeData();
                } else {
                    return this.locale(key);
                }
            }
        );

        function localeData() {
            return this._locale;
        }

        var MS_PER_SECOND = 1000,
            MS_PER_MINUTE = 60 * MS_PER_SECOND,
            MS_PER_HOUR = 60 * MS_PER_MINUTE,
            MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;

        // actual modulo - handles negative numbers (for dates before 1970):
        function mod$1(dividend, divisor) {
            return ((dividend % divisor) + divisor) % divisor;
        }

        function localStartOfDate(y, m, d) {
            // the date constructor remaps years 0-99 to 1900-1999
            if (y < 100 && y >= 0) {
                // preserve leap years using a full 400 year cycle, then reset
                return new Date(y + 400, m, d) - MS_PER_400_YEARS;
            } else {
                return new Date(y, m, d).valueOf();
            }
        }

        function utcStartOfDate(y, m, d) {
            // Date.UTC remaps years 0-99 to 1900-1999
            if (y < 100 && y >= 0) {
                // preserve leap years using a full 400 year cycle, then reset
                return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
            } else {
                return Date.UTC(y, m, d);
            }
        }

        function startOf(units) {
            var time, startOfDate;
            units = normalizeUnits(units);
            if (units === undefined || units === 'millisecond' || !this.isValid()) {
                return this;
            }

            startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

            switch (units) {
                case 'year':
                    time = startOfDate(this.year(), 0, 1);
                    break;
                case 'quarter':
                    time = startOfDate(
                        this.year(),
                        this.month() - (this.month() % 3),
                        1
                    );
                    break;
                case 'month':
                    time = startOfDate(this.year(), this.month(), 1);
                    break;
                case 'week':
                    time = startOfDate(
                        this.year(),
                        this.month(),
                        this.date() - this.weekday()
                    );
                    break;
                case 'isoWeek':
                    time = startOfDate(
                        this.year(),
                        this.month(),
                        this.date() - (this.isoWeekday() - 1)
                    );
                    break;
                case 'day':
                case 'date':
                    time = startOfDate(this.year(), this.month(), this.date());
                    break;
                case 'hour':
                    time = this._d.valueOf();
                    time -= mod$1(
                        time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
                        MS_PER_HOUR
                    );
                    break;
                case 'minute':
                    time = this._d.valueOf();
                    time -= mod$1(time, MS_PER_MINUTE);
                    break;
                case 'second':
                    time = this._d.valueOf();
                    time -= mod$1(time, MS_PER_SECOND);
                    break;
            }

            this._d.setTime(time);
            hooks.updateOffset(this, true);
            return this;
        }

        function endOf(units) {
            var time, startOfDate;
            units = normalizeUnits(units);
            if (units === undefined || units === 'millisecond' || !this.isValid()) {
                return this;
            }

            startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

            switch (units) {
                case 'year':
                    time = startOfDate(this.year() + 1, 0, 1) - 1;
                    break;
                case 'quarter':
                    time =
                        startOfDate(
                            this.year(),
                            this.month() - (this.month() % 3) + 3,
                            1
                        ) - 1;
                    break;
                case 'month':
                    time = startOfDate(this.year(), this.month() + 1, 1) - 1;
                    break;
                case 'week':
                    time =
                        startOfDate(
                            this.year(),
                            this.month(),
                            this.date() - this.weekday() + 7
                        ) - 1;
                    break;
                case 'isoWeek':
                    time =
                        startOfDate(
                            this.year(),
                            this.month(),
                            this.date() - (this.isoWeekday() - 1) + 7
                        ) - 1;
                    break;
                case 'day':
                case 'date':
                    time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
                    break;
                case 'hour':
                    time = this._d.valueOf();
                    time +=
                        MS_PER_HOUR -
                        mod$1(
                            time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
                            MS_PER_HOUR
                        ) -
                        1;
                    break;
                case 'minute':
                    time = this._d.valueOf();
                    time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
                    break;
                case 'second':
                    time = this._d.valueOf();
                    time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
                    break;
            }

            this._d.setTime(time);
            hooks.updateOffset(this, true);
            return this;
        }

        function valueOf() {
            return this._d.valueOf() - (this._offset || 0) * 60000;
        }

        function unix() {
            return Math.floor(this.valueOf() / 1000);
        }

        function toDate() {
            return new Date(this.valueOf());
        }

        function toArray() {
            var m = this;
            return [
                m.year(),
                m.month(),
                m.date(),
                m.hour(),
                m.minute(),
                m.second(),
                m.millisecond(),
            ];
        }

        function toObject() {
            var m = this;
            return {
                years: m.year(),
                months: m.month(),
                date: m.date(),
                hours: m.hours(),
                minutes: m.minutes(),
                seconds: m.seconds(),
                milliseconds: m.milliseconds(),
            };
        }

        function toJSON() {
            // new Date(NaN).toJSON() === null
            return this.isValid() ? this.toISOString() : null;
        }

        function isValid$2() {
            return isValid(this);
        }

        function parsingFlags() {
            return extend({}, getParsingFlags(this));
        }

        function invalidAt() {
            return getParsingFlags(this).overflow;
        }

        function creationData() {
            return {
                input: this._i,
                format: this._f,
                locale: this._locale,
                isUTC: this._isUTC,
                strict: this._strict,
            };
        }

        addFormatToken('N', 0, 0, 'eraAbbr');
        addFormatToken('NN', 0, 0, 'eraAbbr');
        addFormatToken('NNN', 0, 0, 'eraAbbr');
        addFormatToken('NNNN', 0, 0, 'eraName');
        addFormatToken('NNNNN', 0, 0, 'eraNarrow');

        addFormatToken('y', ['y', 1], 'yo', 'eraYear');
        addFormatToken('y', ['yy', 2], 0, 'eraYear');
        addFormatToken('y', ['yyy', 3], 0, 'eraYear');
        addFormatToken('y', ['yyyy', 4], 0, 'eraYear');

        addRegexToken('N', matchEraAbbr);
        addRegexToken('NN', matchEraAbbr);
        addRegexToken('NNN', matchEraAbbr);
        addRegexToken('NNNN', matchEraName);
        addRegexToken('NNNNN', matchEraNarrow);

        addParseToken(
            ['N', 'NN', 'NNN', 'NNNN', 'NNNNN'],
            function (input, array, config, token) {
                var era = config._locale.erasParse(input, token, config._strict);
                if (era) {
                    getParsingFlags(config).era = era;
                } else {
                    getParsingFlags(config).invalidEra = input;
                }
            }
        );

        addRegexToken('y', matchUnsigned);
        addRegexToken('yy', matchUnsigned);
        addRegexToken('yyy', matchUnsigned);
        addRegexToken('yyyy', matchUnsigned);
        addRegexToken('yo', matchEraYearOrdinal);

        addParseToken(['y', 'yy', 'yyy', 'yyyy'], YEAR);
        addParseToken(['yo'], function (input, array, config, token) {
            var match;
            if (config._locale._eraYearOrdinalRegex) {
                match = input.match(config._locale._eraYearOrdinalRegex);
            }

            if (config._locale.eraYearOrdinalParse) {
                array[YEAR] = config._locale.eraYearOrdinalParse(input, match);
            } else {
                array[YEAR] = parseInt(input, 10);
            }
        });

        function localeEras(m, format) {
            var i,
                l,
                date,
                eras = this._eras || getLocale('en')._eras;
            for (i = 0, l = eras.length; i < l; ++i) {
                switch (typeof eras[i].since) {
                    case 'string':
                        // truncate time
                        date = hooks(eras[i].since).startOf('day');
                        eras[i].since = date.valueOf();
                        break;
                }

                switch (typeof eras[i].until) {
                    case 'undefined':
                        eras[i].until = +Infinity;
                        break;
                    case 'string':
                        // truncate time
                        date = hooks(eras[i].until).startOf('day').valueOf();
                        eras[i].until = date.valueOf();
                        break;
                }
            }
            return eras;
        }

        function localeErasParse(eraName, format, strict) {
            var i,
                l,
                eras = this.eras(),
                name,
                abbr,
                narrow;
            eraName = eraName.toUpperCase();

            for (i = 0, l = eras.length; i < l; ++i) {
                name = eras[i].name.toUpperCase();
                abbr = eras[i].abbr.toUpperCase();
                narrow = eras[i].narrow.toUpperCase();

                if (strict) {
                    switch (format) {
                        case 'N':
                        case 'NN':
                        case 'NNN':
                            if (abbr === eraName) {
                                return eras[i];
                            }
                            break;

                        case 'NNNN':
                            if (name === eraName) {
                                return eras[i];
                            }
                            break;

                        case 'NNNNN':
                            if (narrow === eraName) {
                                return eras[i];
                            }
                            break;
                    }
                } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
                    return eras[i];
                }
            }
        }

        function localeErasConvertYear(era, year) {
            var dir = era.since <= era.until ? +1 : -1;
            if (year === undefined) {
                return hooks(era.since).year();
            } else {
                return hooks(era.since).year() + (year - era.offset) * dir;
            }
        }

        function getEraName() {
            var i,
                l,
                val,
                eras = this.localeData().eras();
            for (i = 0, l = eras.length; i < l; ++i) {
                // truncate time
                val = this.clone().startOf('day').valueOf();

                if (eras[i].since <= val && val <= eras[i].until) {
                    return eras[i].name;
                }
                if (eras[i].until <= val && val <= eras[i].since) {
                    return eras[i].name;
                }
            }

            return '';
        }

        function getEraNarrow() {
            var i,
                l,
                val,
                eras = this.localeData().eras();
            for (i = 0, l = eras.length; i < l; ++i) {
                // truncate time
                val = this.clone().startOf('day').valueOf();

                if (eras[i].since <= val && val <= eras[i].until) {
                    return eras[i].narrow;
                }
                if (eras[i].until <= val && val <= eras[i].since) {
                    return eras[i].narrow;
                }
            }

            return '';
        }

        function getEraAbbr() {
            var i,
                l,
                val,
                eras = this.localeData().eras();
            for (i = 0, l = eras.length; i < l; ++i) {
                // truncate time
                val = this.clone().startOf('day').valueOf();

                if (eras[i].since <= val && val <= eras[i].until) {
                    return eras[i].abbr;
                }
                if (eras[i].until <= val && val <= eras[i].since) {
                    return eras[i].abbr;
                }
            }

            return '';
        }

        function getEraYear() {
            var i,
                l,
                dir,
                val,
                eras = this.localeData().eras();
            for (i = 0, l = eras.length; i < l; ++i) {
                dir = eras[i].since <= eras[i].until ? +1 : -1;

                // truncate time
                val = this.clone().startOf('day').valueOf();

                if (
                    (eras[i].since <= val && val <= eras[i].until) ||
                    (eras[i].until <= val && val <= eras[i].since)
                ) {
                    return (
                        (this.year() - hooks(eras[i].since).year()) * dir +
                        eras[i].offset
                    );
                }
            }

            return this.year();
        }

        function erasNameRegex(isStrict) {
            if (!hasOwnProp(this, '_erasNameRegex')) {
                computeErasParse.call(this);
            }
            return isStrict ? this._erasNameRegex : this._erasRegex;
        }

        function erasAbbrRegex(isStrict) {
            if (!hasOwnProp(this, '_erasAbbrRegex')) {
                computeErasParse.call(this);
            }
            return isStrict ? this._erasAbbrRegex : this._erasRegex;
        }

        function erasNarrowRegex(isStrict) {
            if (!hasOwnProp(this, '_erasNarrowRegex')) {
                computeErasParse.call(this);
            }
            return isStrict ? this._erasNarrowRegex : this._erasRegex;
        }

        function matchEraAbbr(isStrict, locale) {
            return locale.erasAbbrRegex(isStrict);
        }

        function matchEraName(isStrict, locale) {
            return locale.erasNameRegex(isStrict);
        }

        function matchEraNarrow(isStrict, locale) {
            return locale.erasNarrowRegex(isStrict);
        }

        function matchEraYearOrdinal(isStrict, locale) {
            return locale._eraYearOrdinalRegex || matchUnsigned;
        }

        function computeErasParse() {
            var abbrPieces = [],
                namePieces = [],
                narrowPieces = [],
                mixedPieces = [],
                i,
                l,
                erasName,
                erasAbbr,
                erasNarrow,
                eras = this.eras();

            for (i = 0, l = eras.length; i < l; ++i) {
                erasName = regexEscape(eras[i].name);
                erasAbbr = regexEscape(eras[i].abbr);
                erasNarrow = regexEscape(eras[i].narrow);

                namePieces.push(erasName);
                abbrPieces.push(erasAbbr);
                narrowPieces.push(erasNarrow);
                mixedPieces.push(erasName);
                mixedPieces.push(erasAbbr);
                mixedPieces.push(erasNarrow);
            }

            this._erasRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
            this._erasNameRegex = new RegExp('^(' + namePieces.join('|') + ')', 'i');
            this._erasAbbrRegex = new RegExp('^(' + abbrPieces.join('|') + ')', 'i');
            this._erasNarrowRegex = new RegExp(
                '^(' + narrowPieces.join('|') + ')',
                'i'
            );
        }

        // FORMATTING

        addFormatToken(0, ['gg', 2], 0, function () {
            return this.weekYear() % 100;
        });

        addFormatToken(0, ['GG', 2], 0, function () {
            return this.isoWeekYear() % 100;
        });

        function addWeekYearFormatToken(token, getter) {
            addFormatToken(0, [token, token.length], 0, getter);
        }

        addWeekYearFormatToken('gggg', 'weekYear');
        addWeekYearFormatToken('ggggg', 'weekYear');
        addWeekYearFormatToken('GGGG', 'isoWeekYear');
        addWeekYearFormatToken('GGGGG', 'isoWeekYear');

        // ALIASES

        // PARSING

        addRegexToken('G', matchSigned);
        addRegexToken('g', matchSigned);
        addRegexToken('GG', match1to2, match2);
        addRegexToken('gg', match1to2, match2);
        addRegexToken('GGGG', match1to4, match4);
        addRegexToken('gggg', match1to4, match4);
        addRegexToken('GGGGG', match1to6, match6);
        addRegexToken('ggggg', match1to6, match6);

        addWeekParseToken(
            ['gggg', 'ggggg', 'GGGG', 'GGGGG'],
            function (input, week, config, token) {
                week[token.substr(0, 2)] = toInt(input);
            }
        );

        addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
            week[token] = hooks.parseTwoDigitYear(input);
        });

        // MOMENTS

        function getSetWeekYear(input) {
            return getSetWeekYearHelper.call(
                this,
                input,
                this.week(),
                this.weekday() + this.localeData()._week.dow,
                this.localeData()._week.dow,
                this.localeData()._week.doy
            );
        }

        function getSetISOWeekYear(input) {
            return getSetWeekYearHelper.call(
                this,
                input,
                this.isoWeek(),
                this.isoWeekday(),
                1,
                4
            );
        }

        function getISOWeeksInYear() {
            return weeksInYear(this.year(), 1, 4);
        }

        function getISOWeeksInISOWeekYear() {
            return weeksInYear(this.isoWeekYear(), 1, 4);
        }

        function getWeeksInYear() {
            var weekInfo = this.localeData()._week;
            return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
        }

        function getWeeksInWeekYear() {
            var weekInfo = this.localeData()._week;
            return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
        }

        function getSetWeekYearHelper(input, week, weekday, dow, doy) {
            var weeksTarget;
            if (input == null) {
                return weekOfYear(this, dow, doy).year;
            } else {
                weeksTarget = weeksInYear(input, dow, doy);
                if (week > weeksTarget) {
                    week = weeksTarget;
                }
                return setWeekAll.call(this, input, week, weekday, dow, doy);
            }
        }

        function setWeekAll(weekYear, week, weekday, dow, doy) {
            var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
                date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

            this.year(date.getUTCFullYear());
            this.month(date.getUTCMonth());
            this.date(date.getUTCDate());
            return this;
        }

        // FORMATTING

        addFormatToken('Q', 0, 'Qo', 'quarter');

        // PARSING

        addRegexToken('Q', match1);
        addParseToken('Q', function (input, array) {
            array[MONTH] = (toInt(input) - 1) * 3;
        });

        // MOMENTS

        function getSetQuarter(input) {
            return input == null
                ? Math.ceil((this.month() + 1) / 3)
                : this.month((input - 1) * 3 + (this.month() % 3));
        }

        // FORMATTING

        addFormatToken('D', ['DD', 2], 'Do', 'date');

        // PARSING

        addRegexToken('D', match1to2, match1to2NoLeadingZero);
        addRegexToken('DD', match1to2, match2);
        addRegexToken('Do', function (isStrict, locale) {
            // TODO: Remove "ordinalParse" fallback in next major release.
            return isStrict
                ? locale._dayOfMonthOrdinalParse || locale._ordinalParse
                : locale._dayOfMonthOrdinalParseLenient;
        });

        addParseToken(['D', 'DD'], DATE);
        addParseToken('Do', function (input, array) {
            array[DATE] = toInt(input.match(match1to2)[0]);
        });

        // MOMENTS

        var getSetDayOfMonth = makeGetSet('Date', true);

        // FORMATTING

        addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

        // PARSING

        addRegexToken('DDD', match1to3);
        addRegexToken('DDDD', match3);
        addParseToken(['DDD', 'DDDD'], function (input, array, config) {
            config._dayOfYear = toInt(input);
        });

        // HELPERS

        // MOMENTS

        function getSetDayOfYear(input) {
            var dayOfYear =
                Math.round(
                    (this.clone().startOf('day') - this.clone().startOf('year')) / 864e5
                ) + 1;
            return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');
        }

        // FORMATTING

        addFormatToken('m', ['mm', 2], 0, 'minute');

        // PARSING

        addRegexToken('m', match1to2, match1to2HasZero);
        addRegexToken('mm', match1to2, match2);
        addParseToken(['m', 'mm'], MINUTE);

        // MOMENTS

        var getSetMinute = makeGetSet('Minutes', false);

        // FORMATTING

        addFormatToken('s', ['ss', 2], 0, 'second');

        // PARSING

        addRegexToken('s', match1to2, match1to2HasZero);
        addRegexToken('ss', match1to2, match2);
        addParseToken(['s', 'ss'], SECOND);

        // MOMENTS

        var getSetSecond = makeGetSet('Seconds', false);

        // FORMATTING

        addFormatToken('S', 0, 0, function () {
            return ~~(this.millisecond() / 100);
        });

        addFormatToken(0, ['SS', 2], 0, function () {
            return ~~(this.millisecond() / 10);
        });

        addFormatToken(0, ['SSS', 3], 0, 'millisecond');
        addFormatToken(0, ['SSSS', 4], 0, function () {
            return this.millisecond() * 10;
        });
        addFormatToken(0, ['SSSSS', 5], 0, function () {
            return this.millisecond() * 100;
        });
        addFormatToken(0, ['SSSSSS', 6], 0, function () {
            return this.millisecond() * 1000;
        });
        addFormatToken(0, ['SSSSSSS', 7], 0, function () {
            return this.millisecond() * 10000;
        });
        addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
            return this.millisecond() * 100000;
        });
        addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
            return this.millisecond() * 1000000;
        });

        // PARSING

        addRegexToken('S', match1to3, match1);
        addRegexToken('SS', match1to3, match2);
        addRegexToken('SSS', match1to3, match3);

        var token, getSetMillisecond;
        for (token = 'SSSS'; token.length <= 9; token += 'S') {
            addRegexToken(token, matchUnsigned);
        }

        function parseMs(input, array) {
            array[MILLISECOND] = toInt(('0.' + input) * 1000);
        }

        for (token = 'S'; token.length <= 9; token += 'S') {
            addParseToken(token, parseMs);
        }

        getSetMillisecond = makeGetSet('Milliseconds', false);

        // FORMATTING

        addFormatToken('z', 0, 0, 'zoneAbbr');
        addFormatToken('zz', 0, 0, 'zoneName');

        // MOMENTS

        function getZoneAbbr() {
            return this._isUTC ? 'UTC' : '';
        }

        function getZoneName() {
            return this._isUTC ? 'Coordinated Universal Time' : '';
        }

        var proto = Moment.prototype;

        proto.add = add;
        proto.calendar = calendar$1;
        proto.clone = clone;
        proto.diff = diff;
        proto.endOf = endOf;
        proto.format = format;
        proto.from = from;
        proto.fromNow = fromNow;
        proto.to = to;
        proto.toNow = toNow;
        proto.get = stringGet;
        proto.invalidAt = invalidAt;
        proto.isAfter = isAfter;
        proto.isBefore = isBefore;
        proto.isBetween = isBetween;
        proto.isSame = isSame;
        proto.isSameOrAfter = isSameOrAfter;
        proto.isSameOrBefore = isSameOrBefore;
        proto.isValid = isValid$2;
        proto.lang = lang;
        proto.locale = locale;
        proto.localeData = localeData;
        proto.max = prototypeMax;
        proto.min = prototypeMin;
        proto.parsingFlags = parsingFlags;
        proto.set = stringSet;
        proto.startOf = startOf;
        proto.subtract = subtract;
        proto.toArray = toArray;
        proto.toObject = toObject;
        proto.toDate = toDate;
        proto.toISOString = toISOString;
        proto.inspect = inspect;
        if (typeof Symbol !== 'undefined' && Symbol.for != null) {
            proto[Symbol.for('nodejs.util.inspect.custom')] = function () {
                return 'Moment<' + this.format() + '>';
            };
        }
        proto.toJSON = toJSON;
        proto.toString = toString;
        proto.unix = unix;
        proto.valueOf = valueOf;
        proto.creationData = creationData;
        proto.eraName = getEraName;
        proto.eraNarrow = getEraNarrow;
        proto.eraAbbr = getEraAbbr;
        proto.eraYear = getEraYear;
        proto.year = getSetYear;
        proto.isLeapYear = getIsLeapYear;
        proto.weekYear = getSetWeekYear;
        proto.isoWeekYear = getSetISOWeekYear;
        proto.quarter = proto.quarters = getSetQuarter;
        proto.month = getSetMonth;
        proto.daysInMonth = getDaysInMonth;
        proto.week = proto.weeks = getSetWeek;
        proto.isoWeek = proto.isoWeeks = getSetISOWeek;
        proto.weeksInYear = getWeeksInYear;
        proto.weeksInWeekYear = getWeeksInWeekYear;
        proto.isoWeeksInYear = getISOWeeksInYear;
        proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
        proto.date = getSetDayOfMonth;
        proto.day = proto.days = getSetDayOfWeek;
        proto.weekday = getSetLocaleDayOfWeek;
        proto.isoWeekday = getSetISODayOfWeek;
        proto.dayOfYear = getSetDayOfYear;
        proto.hour = proto.hours = getSetHour;
        proto.minute = proto.minutes = getSetMinute;
        proto.second = proto.seconds = getSetSecond;
        proto.millisecond = proto.milliseconds = getSetMillisecond;
        proto.utcOffset = getSetOffset;
        proto.utc = setOffsetToUTC;
        proto.local = setOffsetToLocal;
        proto.parseZone = setOffsetToParsedOffset;
        proto.hasAlignedHourOffset = hasAlignedHourOffset;
        proto.isDST = isDaylightSavingTime;
        proto.isLocal = isLocal;
        proto.isUtcOffset = isUtcOffset;
        proto.isUtc = isUtc;
        proto.isUTC = isUtc;
        proto.zoneAbbr = getZoneAbbr;
        proto.zoneName = getZoneName;
        proto.dates = deprecate(
            'dates accessor is deprecated. Use date instead.',
            getSetDayOfMonth
        );
        proto.months = deprecate(
            'months accessor is deprecated. Use month instead',
            getSetMonth
        );
        proto.years = deprecate(
            'years accessor is deprecated. Use year instead',
            getSetYear
        );
        proto.zone = deprecate(
            'moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/',
            getSetZone
        );
        proto.isDSTShifted = deprecate(
            'isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information',
            isDaylightSavingTimeShifted
        );

        function createUnix(input) {
            return createLocal(input * 1000);
        }

        function createInZone() {
            return createLocal.apply(null, arguments).parseZone();
        }

        function preParsePostFormat(string) {
            return string;
        }

        var proto$1 = Locale.prototype;

        proto$1.calendar = calendar;
        proto$1.longDateFormat = longDateFormat;
        proto$1.invalidDate = invalidDate;
        proto$1.ordinal = ordinal;
        proto$1.preparse = preParsePostFormat;
        proto$1.postformat = preParsePostFormat;
        proto$1.relativeTime = relativeTime;
        proto$1.pastFuture = pastFuture;
        proto$1.set = set;
        proto$1.eras = localeEras;
        proto$1.erasParse = localeErasParse;
        proto$1.erasConvertYear = localeErasConvertYear;
        proto$1.erasAbbrRegex = erasAbbrRegex;
        proto$1.erasNameRegex = erasNameRegex;
        proto$1.erasNarrowRegex = erasNarrowRegex;

        proto$1.months = localeMonths;
        proto$1.monthsShort = localeMonthsShort;
        proto$1.monthsParse = localeMonthsParse;
        proto$1.monthsRegex = monthsRegex;
        proto$1.monthsShortRegex = monthsShortRegex;
        proto$1.week = localeWeek;
        proto$1.firstDayOfYear = localeFirstDayOfYear;
        proto$1.firstDayOfWeek = localeFirstDayOfWeek;

        proto$1.weekdays = localeWeekdays;
        proto$1.weekdaysMin = localeWeekdaysMin;
        proto$1.weekdaysShort = localeWeekdaysShort;
        proto$1.weekdaysParse = localeWeekdaysParse;

        proto$1.weekdaysRegex = weekdaysRegex;
        proto$1.weekdaysShortRegex = weekdaysShortRegex;
        proto$1.weekdaysMinRegex = weekdaysMinRegex;

        proto$1.isPM = localeIsPM;
        proto$1.meridiem = localeMeridiem;

        function get$1(format, index, field, setter) {
            var locale = getLocale(),
                utc = createUTC().set(setter, index);
            return locale[field](utc, format);
        }

        function listMonthsImpl(format, index, field) {
            if (isNumber(format)) {
                index = format;
                format = undefined;
            }

            format = format || '';

            if (index != null) {
                return get$1(format, index, field, 'month');
            }

            var i,
                out = [];
            for (i = 0; i < 12; i++) {
                out[i] = get$1(format, i, field, 'month');
            }
            return out;
        }

        // ()
        // (5)
        // (fmt, 5)
        // (fmt)
        // (true)
        // (true, 5)
        // (true, fmt, 5)
        // (true, fmt)
        function listWeekdaysImpl(localeSorted, format, index, field) {
            if (typeof localeSorted === 'boolean') {
                if (isNumber(format)) {
                    index = format;
                    format = undefined;
                }

                format = format || '';
            } else {
                format = localeSorted;
                index = format;
                localeSorted = false;

                if (isNumber(format)) {
                    index = format;
                    format = undefined;
                }

                format = format || '';
            }

            var locale = getLocale(),
                shift = localeSorted ? locale._week.dow : 0,
                i,
                out = [];

            if (index != null) {
                return get$1(format, (index + shift) % 7, field, 'day');
            }

            for (i = 0; i < 7; i++) {
                out[i] = get$1(format, (i + shift) % 7, field, 'day');
            }
            return out;
        }

        function listMonths(format, index) {
            return listMonthsImpl(format, index, 'months');
        }

        function listMonthsShort(format, index) {
            return listMonthsImpl(format, index, 'monthsShort');
        }

        function listWeekdays(localeSorted, format, index) {
            return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
        }

        function listWeekdaysShort(localeSorted, format, index) {
            return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
        }

        function listWeekdaysMin(localeSorted, format, index) {
            return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
        }

        getSetGlobalLocale('en', {
            eras: [
                {
                    since: '0001-01-01',
                    until: +Infinity,
                    offset: 1,
                    name: 'Anno Domini',
                    narrow: 'AD',
                    abbr: 'AD',
                },
                {
                    since: '0000-12-31',
                    until: -Infinity,
                    offset: 1,
                    name: 'Before Christ',
                    narrow: 'BC',
                    abbr: 'BC',
                },
            ],
            dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
            ordinal: function (number) {
                var b = number % 10,
                    output =
                        toInt((number % 100) / 10) === 1
                            ? 'th'
                            : b === 1
                              ? 'st'
                              : b === 2
                                ? 'nd'
                                : b === 3
                                  ? 'rd'
                                  : 'th';
                return number + output;
            },
        });

        // Side effect imports

        hooks.lang = deprecate(
            'moment.lang is deprecated. Use moment.locale instead.',
            getSetGlobalLocale
        );
        hooks.langData = deprecate(
            'moment.langData is deprecated. Use moment.localeData instead.',
            getLocale
        );

        var mathAbs = Math.abs;

        function abs() {
            var data = this._data;

            this._milliseconds = mathAbs(this._milliseconds);
            this._days = mathAbs(this._days);
            this._months = mathAbs(this._months);

            data.milliseconds = mathAbs(data.milliseconds);
            data.seconds = mathAbs(data.seconds);
            data.minutes = mathAbs(data.minutes);
            data.hours = mathAbs(data.hours);
            data.months = mathAbs(data.months);
            data.years = mathAbs(data.years);

            return this;
        }

        function addSubtract$1(duration, input, value, direction) {
            var other = createDuration(input, value);

            duration._milliseconds += direction * other._milliseconds;
            duration._days += direction * other._days;
            duration._months += direction * other._months;

            return duration._bubble();
        }

        // supports only 2.0-style add(1, 's') or add(duration)
        function add$1(input, value) {
            return addSubtract$1(this, input, value, 1);
        }

        // supports only 2.0-style subtract(1, 's') or subtract(duration)
        function subtract$1(input, value) {
            return addSubtract$1(this, input, value, -1);
        }

        function absCeil(number) {
            if (number < 0) {
                return Math.floor(number);
            } else {
                return Math.ceil(number);
            }
        }

        function bubble() {
            var milliseconds = this._milliseconds,
                days = this._days,
                months = this._months,
                data = this._data,
                seconds,
                minutes,
                hours,
                years,
                monthsFromDays;

            // if we have a mix of positive and negative values, bubble down first
            // check: https://github.com/moment/moment/issues/2166
            if (
                !(
                    (milliseconds >= 0 && days >= 0 && months >= 0) ||
                    (milliseconds <= 0 && days <= 0 && months <= 0)
                )
            ) {
                milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
                days = 0;
                months = 0;
            }

            // The following code bubbles up values, see the tests for
            // examples of what that means.
            data.milliseconds = milliseconds % 1000;

            seconds = absFloor(milliseconds / 1000);
            data.seconds = seconds % 60;

            minutes = absFloor(seconds / 60);
            data.minutes = minutes % 60;

            hours = absFloor(minutes / 60);
            data.hours = hours % 24;

            days += absFloor(hours / 24);

            // convert days to months
            monthsFromDays = absFloor(daysToMonths(days));
            months += monthsFromDays;
            days -= absCeil(monthsToDays(monthsFromDays));

            // 12 months -> 1 year
            years = absFloor(months / 12);
            months %= 12;

            data.days = days;
            data.months = months;
            data.years = years;

            return this;
        }

        function daysToMonths(days) {
            // 400 years have 146097 days (taking into account leap year rules)
            // 400 years have 12 months === 4800
            return (days * 4800) / 146097;
        }

        function monthsToDays(months) {
            // the reverse of daysToMonths
            return (months * 146097) / 4800;
        }

        function as(units) {
            if (!this.isValid()) {
                return NaN;
            }
            var days,
                months,
                milliseconds = this._milliseconds;

            units = normalizeUnits(units);

            if (units === 'month' || units === 'quarter' || units === 'year') {
                days = this._days + milliseconds / 864e5;
                months = this._months + daysToMonths(days);
                switch (units) {
                    case 'month':
                        return months;
                    case 'quarter':
                        return months / 3;
                    case 'year':
                        return months / 12;
                }
            } else {
                // handle milliseconds separately because of floating point math errors (issue #1867)
                days = this._days + Math.round(monthsToDays(this._months));
                switch (units) {
                    case 'week':
                        return days / 7 + milliseconds / 6048e5;
                    case 'day':
                        return days + milliseconds / 864e5;
                    case 'hour':
                        return days * 24 + milliseconds / 36e5;
                    case 'minute':
                        return days * 1440 + milliseconds / 6e4;
                    case 'second':
                        return days * 86400 + milliseconds / 1000;
                    // Math.floor prevents floating point math errors here
                    case 'millisecond':
                        return Math.floor(days * 864e5) + milliseconds;
                    default:
                        throw new Error('Unknown unit ' + units);
                }
            }
        }

        function makeAs(alias) {
            return function () {
                return this.as(alias);
            };
        }

        var asMilliseconds = makeAs('ms'),
            asSeconds = makeAs('s'),
            asMinutes = makeAs('m'),
            asHours = makeAs('h'),
            asDays = makeAs('d'),
            asWeeks = makeAs('w'),
            asMonths = makeAs('M'),
            asQuarters = makeAs('Q'),
            asYears = makeAs('y'),
            valueOf$1 = asMilliseconds;

        function clone$1() {
            return createDuration(this);
        }

        function get$2(units) {
            units = normalizeUnits(units);
            return this.isValid() ? this[units + 's']() : NaN;
        }

        function makeGetter(name) {
            return function () {
                return this.isValid() ? this._data[name] : NaN;
            };
        }

        var milliseconds = makeGetter('milliseconds'),
            seconds = makeGetter('seconds'),
            minutes = makeGetter('minutes'),
            hours = makeGetter('hours'),
            days = makeGetter('days'),
            months = makeGetter('months'),
            years = makeGetter('years');

        function weeks() {
            return absFloor(this.days() / 7);
        }

        var round = Math.round,
            thresholds = {
                ss: 44, // a few seconds to seconds
                s: 45, // seconds to minute
                m: 45, // minutes to hour
                h: 22, // hours to day
                d: 26, // days to month/week
                w: null, // weeks to month
                M: 11, // months to year
            };

        // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
        function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
            return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
        }

        function relativeTime$1(posNegDuration, withoutSuffix, thresholds, locale) {
            var duration = createDuration(posNegDuration).abs(),
                seconds = round(duration.as('s')),
                minutes = round(duration.as('m')),
                hours = round(duration.as('h')),
                days = round(duration.as('d')),
                months = round(duration.as('M')),
                weeks = round(duration.as('w')),
                years = round(duration.as('y')),
                a =
                    (seconds <= thresholds.ss && ['s', seconds]) ||
                    (seconds < thresholds.s && ['ss', seconds]) ||
                    (minutes <= 1 && ['m']) ||
                    (minutes < thresholds.m && ['mm', minutes]) ||
                    (hours <= 1 && ['h']) ||
                    (hours < thresholds.h && ['hh', hours]) ||
                    (days <= 1 && ['d']) ||
                    (days < thresholds.d && ['dd', days]);

            if (thresholds.w != null) {
                a =
                    a ||
                    (weeks <= 1 && ['w']) ||
                    (weeks < thresholds.w && ['ww', weeks]);
            }
            a = a ||
                (months <= 1 && ['M']) ||
                (months < thresholds.M && ['MM', months]) ||
                (years <= 1 && ['y']) || ['yy', years];

            a[2] = withoutSuffix;
            a[3] = +posNegDuration > 0;
            a[4] = locale;
            return substituteTimeAgo.apply(null, a);
        }

        // This function allows you to set the rounding function for relative time strings
        function getSetRelativeTimeRounding(roundingFunction) {
            if (roundingFunction === undefined) {
                return round;
            }
            if (typeof roundingFunction === 'function') {
                round = roundingFunction;
                return true;
            }
            return false;
        }

        // This function allows you to set a threshold for relative time strings
        function getSetRelativeTimeThreshold(threshold, limit) {
            if (thresholds[threshold] === undefined) {
                return false;
            }
            if (limit === undefined) {
                return thresholds[threshold];
            }
            thresholds[threshold] = limit;
            if (threshold === 's') {
                thresholds.ss = limit - 1;
            }
            return true;
        }

        function humanize(argWithSuffix, argThresholds) {
            if (!this.isValid()) {
                return this.localeData().invalidDate();
            }

            var withSuffix = false,
                th = thresholds,
                locale,
                output;

            if (typeof argWithSuffix === 'object') {
                argThresholds = argWithSuffix;
                argWithSuffix = false;
            }
            if (typeof argWithSuffix === 'boolean') {
                withSuffix = argWithSuffix;
            }
            if (typeof argThresholds === 'object') {
                th = Object.assign({}, thresholds, argThresholds);
                if (argThresholds.s != null && argThresholds.ss == null) {
                    th.ss = argThresholds.s - 1;
                }
            }

            locale = this.localeData();
            output = relativeTime$1(this, !withSuffix, th, locale);

            if (withSuffix) {
                output = locale.pastFuture(+this, output);
            }

            return locale.postformat(output);
        }

        var abs$1 = Math.abs;

        function sign(x) {
            return (x > 0) - (x < 0) || +x;
        }

        function toISOString$1() {
            // for ISO strings we do not use the normal bubbling rules:
            //  * milliseconds bubble up until they become hours
            //  * days do not bubble at all
            //  * months bubble up until they become years
            // This is because there is no context-free conversion between hours and days
            // (think of clock changes)
            // and also not between days and months (28-31 days per month)
            if (!this.isValid()) {
                return this.localeData().invalidDate();
            }

            var seconds = abs$1(this._milliseconds) / 1000,
                days = abs$1(this._days),
                months = abs$1(this._months),
                minutes,
                hours,
                years,
                s,
                total = this.asSeconds(),
                totalSign,
                ymSign,
                daysSign,
                hmsSign;

            if (!total) {
                // this is the same as C#'s (Noda) and python (isodate)...
                // but not other JS (goog.date)
                return 'P0D';
            }

            // 3600 seconds -> 60 minutes -> 1 hour
            minutes = absFloor(seconds / 60);
            hours = absFloor(minutes / 60);
            seconds %= 60;
            minutes %= 60;

            // 12 months -> 1 year
            years = absFloor(months / 12);
            months %= 12;

            // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
            s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';

            totalSign = total < 0 ? '-' : '';
            ymSign = sign(this._months) !== sign(total) ? '-' : '';
            daysSign = sign(this._days) !== sign(total) ? '-' : '';
            hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';

            return (
                totalSign +
                'P' +
                (years ? ymSign + years + 'Y' : '') +
                (months ? ymSign + months + 'M' : '') +
                (days ? daysSign + days + 'D' : '') +
                (hours || minutes || seconds ? 'T' : '') +
                (hours ? hmsSign + hours + 'H' : '') +
                (minutes ? hmsSign + minutes + 'M' : '') +
                (seconds ? hmsSign + s + 'S' : '')
            );
        }

        var proto$2 = Duration.prototype;

        proto$2.isValid = isValid$1;
        proto$2.abs = abs;
        proto$2.add = add$1;
        proto$2.subtract = subtract$1;
        proto$2.as = as;
        proto$2.asMilliseconds = asMilliseconds;
        proto$2.asSeconds = asSeconds;
        proto$2.asMinutes = asMinutes;
        proto$2.asHours = asHours;
        proto$2.asDays = asDays;
        proto$2.asWeeks = asWeeks;
        proto$2.asMonths = asMonths;
        proto$2.asQuarters = asQuarters;
        proto$2.asYears = asYears;
        proto$2.valueOf = valueOf$1;
        proto$2._bubble = bubble;
        proto$2.clone = clone$1;
        proto$2.get = get$2;
        proto$2.milliseconds = milliseconds;
        proto$2.seconds = seconds;
        proto$2.minutes = minutes;
        proto$2.hours = hours;
        proto$2.days = days;
        proto$2.weeks = weeks;
        proto$2.months = months;
        proto$2.years = years;
        proto$2.humanize = humanize;
        proto$2.toISOString = toISOString$1;
        proto$2.toString = toISOString$1;
        proto$2.toJSON = toISOString$1;
        proto$2.locale = locale;
        proto$2.localeData = localeData;

        proto$2.toIsoString = deprecate(
            'toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)',
            toISOString$1
        );
        proto$2.lang = lang;

        // FORMATTING

        addFormatToken('X', 0, 0, 'unix');
        addFormatToken('x', 0, 0, 'valueOf');

        // PARSING

        addRegexToken('x', matchSigned);
        addRegexToken('X', matchTimestamp);
        addParseToken('X', function (input, array, config) {
            config._d = new Date(parseFloat(input) * 1000);
        });
        addParseToken('x', function (input, array, config) {
            config._d = new Date(toInt(input));
        });

        //! moment.js

        hooks.version = '2.30.1';

        setHookCallback(createLocal);

        hooks.fn = proto;
        hooks.min = min;
        hooks.max = max;
        hooks.now = now;
        hooks.utc = createUTC;
        hooks.unix = createUnix;
        hooks.months = listMonths;
        hooks.isDate = isDate;
        hooks.locale = getSetGlobalLocale;
        hooks.invalid = createInvalid;
        hooks.duration = createDuration;
        hooks.isMoment = isMoment;
        hooks.weekdays = listWeekdays;
        hooks.parseZone = createInZone;
        hooks.localeData = getLocale;
        hooks.isDuration = isDuration;
        hooks.monthsShort = listMonthsShort;
        hooks.weekdaysMin = listWeekdaysMin;
        hooks.defineLocale = defineLocale;
        hooks.updateLocale = updateLocale;
        hooks.locales = listLocales;
        hooks.weekdaysShort = listWeekdaysShort;
        hooks.normalizeUnits = normalizeUnits;
        hooks.relativeTimeRounding = getSetRelativeTimeRounding;
        hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
        hooks.calendarFormat = getCalendarFormat;
        hooks.prototype = proto;

        // currently HTML5 input type only supports 24-hour formats
        hooks.HTML5_FMT = {
            DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm', // <input type="datetime-local" />
            DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss', // <input type="datetime-local" step="1" />
            DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS', // <input type="datetime-local" step="0.001" />
            DATE: 'YYYY-MM-DD', // <input type="date" />
            TIME: 'HH:mm', // <input type="time" />
            TIME_SECONDS: 'HH:mm:ss', // <input type="time" step="1" />
            TIME_MS: 'HH:mm:ss.SSS', // <input type="time" step="0.001" />
            WEEK: 'GGGG-[W]WW', // <input type="week" />
            MONTH: 'YYYY-MM', // <input type="month" />
        };

        return hooks;

    })));
    });

    /*!
     * Chart.js v2.9.4
     * https://www.chartjs.org
     * (c) 2020 Chart.js Contributors
     * Released under the MIT License
     */

    var Chart$1 = createCommonjsModule(function (module, exports) {
    (function (global, factory) {
    module.exports = factory(function() { try { return moment; } catch(e) { } }()) ;
    }(commonjsGlobal, (function (moment) {
    moment = moment && moment.hasOwnProperty('default') ? moment['default'] : moment;

    function createCommonjsModule(fn, module) {
    	return module = { exports: {} }, fn(module, module.exports), module.exports;
    }

    function getCjsExportFromNamespace (n) {
    	return n && n['default'] || n;
    }

    var colorName = {
    	"aliceblue": [240, 248, 255],
    	"antiquewhite": [250, 235, 215],
    	"aqua": [0, 255, 255],
    	"aquamarine": [127, 255, 212],
    	"azure": [240, 255, 255],
    	"beige": [245, 245, 220],
    	"bisque": [255, 228, 196],
    	"black": [0, 0, 0],
    	"blanchedalmond": [255, 235, 205],
    	"blue": [0, 0, 255],
    	"blueviolet": [138, 43, 226],
    	"brown": [165, 42, 42],
    	"burlywood": [222, 184, 135],
    	"cadetblue": [95, 158, 160],
    	"chartreuse": [127, 255, 0],
    	"chocolate": [210, 105, 30],
    	"coral": [255, 127, 80],
    	"cornflowerblue": [100, 149, 237],
    	"cornsilk": [255, 248, 220],
    	"crimson": [220, 20, 60],
    	"cyan": [0, 255, 255],
    	"darkblue": [0, 0, 139],
    	"darkcyan": [0, 139, 139],
    	"darkgoldenrod": [184, 134, 11],
    	"darkgray": [169, 169, 169],
    	"darkgreen": [0, 100, 0],
    	"darkgrey": [169, 169, 169],
    	"darkkhaki": [189, 183, 107],
    	"darkmagenta": [139, 0, 139],
    	"darkolivegreen": [85, 107, 47],
    	"darkorange": [255, 140, 0],
    	"darkorchid": [153, 50, 204],
    	"darkred": [139, 0, 0],
    	"darksalmon": [233, 150, 122],
    	"darkseagreen": [143, 188, 143],
    	"darkslateblue": [72, 61, 139],
    	"darkslategray": [47, 79, 79],
    	"darkslategrey": [47, 79, 79],
    	"darkturquoise": [0, 206, 209],
    	"darkviolet": [148, 0, 211],
    	"deeppink": [255, 20, 147],
    	"deepskyblue": [0, 191, 255],
    	"dimgray": [105, 105, 105],
    	"dimgrey": [105, 105, 105],
    	"dodgerblue": [30, 144, 255],
    	"firebrick": [178, 34, 34],
    	"floralwhite": [255, 250, 240],
    	"forestgreen": [34, 139, 34],
    	"fuchsia": [255, 0, 255],
    	"gainsboro": [220, 220, 220],
    	"ghostwhite": [248, 248, 255],
    	"gold": [255, 215, 0],
    	"goldenrod": [218, 165, 32],
    	"gray": [128, 128, 128],
    	"green": [0, 128, 0],
    	"greenyellow": [173, 255, 47],
    	"grey": [128, 128, 128],
    	"honeydew": [240, 255, 240],
    	"hotpink": [255, 105, 180],
    	"indianred": [205, 92, 92],
    	"indigo": [75, 0, 130],
    	"ivory": [255, 255, 240],
    	"khaki": [240, 230, 140],
    	"lavender": [230, 230, 250],
    	"lavenderblush": [255, 240, 245],
    	"lawngreen": [124, 252, 0],
    	"lemonchiffon": [255, 250, 205],
    	"lightblue": [173, 216, 230],
    	"lightcoral": [240, 128, 128],
    	"lightcyan": [224, 255, 255],
    	"lightgoldenrodyellow": [250, 250, 210],
    	"lightgray": [211, 211, 211],
    	"lightgreen": [144, 238, 144],
    	"lightgrey": [211, 211, 211],
    	"lightpink": [255, 182, 193],
    	"lightsalmon": [255, 160, 122],
    	"lightseagreen": [32, 178, 170],
    	"lightskyblue": [135, 206, 250],
    	"lightslategray": [119, 136, 153],
    	"lightslategrey": [119, 136, 153],
    	"lightsteelblue": [176, 196, 222],
    	"lightyellow": [255, 255, 224],
    	"lime": [0, 255, 0],
    	"limegreen": [50, 205, 50],
    	"linen": [250, 240, 230],
    	"magenta": [255, 0, 255],
    	"maroon": [128, 0, 0],
    	"mediumaquamarine": [102, 205, 170],
    	"mediumblue": [0, 0, 205],
    	"mediumorchid": [186, 85, 211],
    	"mediumpurple": [147, 112, 219],
    	"mediumseagreen": [60, 179, 113],
    	"mediumslateblue": [123, 104, 238],
    	"mediumspringgreen": [0, 250, 154],
    	"mediumturquoise": [72, 209, 204],
    	"mediumvioletred": [199, 21, 133],
    	"midnightblue": [25, 25, 112],
    	"mintcream": [245, 255, 250],
    	"mistyrose": [255, 228, 225],
    	"moccasin": [255, 228, 181],
    	"navajowhite": [255, 222, 173],
    	"navy": [0, 0, 128],
    	"oldlace": [253, 245, 230],
    	"olive": [128, 128, 0],
    	"olivedrab": [107, 142, 35],
    	"orange": [255, 165, 0],
    	"orangered": [255, 69, 0],
    	"orchid": [218, 112, 214],
    	"palegoldenrod": [238, 232, 170],
    	"palegreen": [152, 251, 152],
    	"paleturquoise": [175, 238, 238],
    	"palevioletred": [219, 112, 147],
    	"papayawhip": [255, 239, 213],
    	"peachpuff": [255, 218, 185],
    	"peru": [205, 133, 63],
    	"pink": [255, 192, 203],
    	"plum": [221, 160, 221],
    	"powderblue": [176, 224, 230],
    	"purple": [128, 0, 128],
    	"rebeccapurple": [102, 51, 153],
    	"red": [255, 0, 0],
    	"rosybrown": [188, 143, 143],
    	"royalblue": [65, 105, 225],
    	"saddlebrown": [139, 69, 19],
    	"salmon": [250, 128, 114],
    	"sandybrown": [244, 164, 96],
    	"seagreen": [46, 139, 87],
    	"seashell": [255, 245, 238],
    	"sienna": [160, 82, 45],
    	"silver": [192, 192, 192],
    	"skyblue": [135, 206, 235],
    	"slateblue": [106, 90, 205],
    	"slategray": [112, 128, 144],
    	"slategrey": [112, 128, 144],
    	"snow": [255, 250, 250],
    	"springgreen": [0, 255, 127],
    	"steelblue": [70, 130, 180],
    	"tan": [210, 180, 140],
    	"teal": [0, 128, 128],
    	"thistle": [216, 191, 216],
    	"tomato": [255, 99, 71],
    	"turquoise": [64, 224, 208],
    	"violet": [238, 130, 238],
    	"wheat": [245, 222, 179],
    	"white": [255, 255, 255],
    	"whitesmoke": [245, 245, 245],
    	"yellow": [255, 255, 0],
    	"yellowgreen": [154, 205, 50]
    };

    var conversions = createCommonjsModule(function (module) {
    /* MIT license */


    // NOTE: conversions should only return primitive values (i.e. arrays, or
    //       values that give correct `typeof` results).
    //       do not use box values types (i.e. Number(), String(), etc.)

    var reverseKeywords = {};
    for (var key in colorName) {
    	if (colorName.hasOwnProperty(key)) {
    		reverseKeywords[colorName[key]] = key;
    	}
    }

    var convert = module.exports = {
    	rgb: {channels: 3, labels: 'rgb'},
    	hsl: {channels: 3, labels: 'hsl'},
    	hsv: {channels: 3, labels: 'hsv'},
    	hwb: {channels: 3, labels: 'hwb'},
    	cmyk: {channels: 4, labels: 'cmyk'},
    	xyz: {channels: 3, labels: 'xyz'},
    	lab: {channels: 3, labels: 'lab'},
    	lch: {channels: 3, labels: 'lch'},
    	hex: {channels: 1, labels: ['hex']},
    	keyword: {channels: 1, labels: ['keyword']},
    	ansi16: {channels: 1, labels: ['ansi16']},
    	ansi256: {channels: 1, labels: ['ansi256']},
    	hcg: {channels: 3, labels: ['h', 'c', 'g']},
    	apple: {channels: 3, labels: ['r16', 'g16', 'b16']},
    	gray: {channels: 1, labels: ['gray']}
    };

    // hide .channels and .labels properties
    for (var model in convert) {
    	if (convert.hasOwnProperty(model)) {
    		if (!('channels' in convert[model])) {
    			throw new Error('missing channels property: ' + model);
    		}

    		if (!('labels' in convert[model])) {
    			throw new Error('missing channel labels property: ' + model);
    		}

    		if (convert[model].labels.length !== convert[model].channels) {
    			throw new Error('channel and label counts mismatch: ' + model);
    		}

    		var channels = convert[model].channels;
    		var labels = convert[model].labels;
    		delete convert[model].channels;
    		delete convert[model].labels;
    		Object.defineProperty(convert[model], 'channels', {value: channels});
    		Object.defineProperty(convert[model], 'labels', {value: labels});
    	}
    }

    convert.rgb.hsl = function (rgb) {
    	var r = rgb[0] / 255;
    	var g = rgb[1] / 255;
    	var b = rgb[2] / 255;
    	var min = Math.min(r, g, b);
    	var max = Math.max(r, g, b);
    	var delta = max - min;
    	var h;
    	var s;
    	var l;

    	if (max === min) {
    		h = 0;
    	} else if (r === max) {
    		h = (g - b) / delta;
    	} else if (g === max) {
    		h = 2 + (b - r) / delta;
    	} else if (b === max) {
    		h = 4 + (r - g) / delta;
    	}

    	h = Math.min(h * 60, 360);

    	if (h < 0) {
    		h += 360;
    	}

    	l = (min + max) / 2;

    	if (max === min) {
    		s = 0;
    	} else if (l <= 0.5) {
    		s = delta / (max + min);
    	} else {
    		s = delta / (2 - max - min);
    	}

    	return [h, s * 100, l * 100];
    };

    convert.rgb.hsv = function (rgb) {
    	var rdif;
    	var gdif;
    	var bdif;
    	var h;
    	var s;

    	var r = rgb[0] / 255;
    	var g = rgb[1] / 255;
    	var b = rgb[2] / 255;
    	var v = Math.max(r, g, b);
    	var diff = v - Math.min(r, g, b);
    	var diffc = function (c) {
    		return (v - c) / 6 / diff + 1 / 2;
    	};

    	if (diff === 0) {
    		h = s = 0;
    	} else {
    		s = diff / v;
    		rdif = diffc(r);
    		gdif = diffc(g);
    		bdif = diffc(b);

    		if (r === v) {
    			h = bdif - gdif;
    		} else if (g === v) {
    			h = (1 / 3) + rdif - bdif;
    		} else if (b === v) {
    			h = (2 / 3) + gdif - rdif;
    		}
    		if (h < 0) {
    			h += 1;
    		} else if (h > 1) {
    			h -= 1;
    		}
    	}

    	return [
    		h * 360,
    		s * 100,
    		v * 100
    	];
    };

    convert.rgb.hwb = function (rgb) {
    	var r = rgb[0];
    	var g = rgb[1];
    	var b = rgb[2];
    	var h = convert.rgb.hsl(rgb)[0];
    	var w = 1 / 255 * Math.min(r, Math.min(g, b));

    	b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));

    	return [h, w * 100, b * 100];
    };

    convert.rgb.cmyk = function (rgb) {
    	var r = rgb[0] / 255;
    	var g = rgb[1] / 255;
    	var b = rgb[2] / 255;
    	var c;
    	var m;
    	var y;
    	var k;

    	k = Math.min(1 - r, 1 - g, 1 - b);
    	c = (1 - r - k) / (1 - k) || 0;
    	m = (1 - g - k) / (1 - k) || 0;
    	y = (1 - b - k) / (1 - k) || 0;

    	return [c * 100, m * 100, y * 100, k * 100];
    };

    /**
     * See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance
     * */
    function comparativeDistance(x, y) {
    	return (
    		Math.pow(x[0] - y[0], 2) +
    		Math.pow(x[1] - y[1], 2) +
    		Math.pow(x[2] - y[2], 2)
    	);
    }

    convert.rgb.keyword = function (rgb) {
    	var reversed = reverseKeywords[rgb];
    	if (reversed) {
    		return reversed;
    	}

    	var currentClosestDistance = Infinity;
    	var currentClosestKeyword;

    	for (var keyword in colorName) {
    		if (colorName.hasOwnProperty(keyword)) {
    			var value = colorName[keyword];

    			// Compute comparative distance
    			var distance = comparativeDistance(rgb, value);

    			// Check if its less, if so set as closest
    			if (distance < currentClosestDistance) {
    				currentClosestDistance = distance;
    				currentClosestKeyword = keyword;
    			}
    		}
    	}

    	return currentClosestKeyword;
    };

    convert.keyword.rgb = function (keyword) {
    	return colorName[keyword];
    };

    convert.rgb.xyz = function (rgb) {
    	var r = rgb[0] / 255;
    	var g = rgb[1] / 255;
    	var b = rgb[2] / 255;

    	// assume sRGB
    	r = r > 0.04045 ? Math.pow(((r + 0.055) / 1.055), 2.4) : (r / 12.92);
    	g = g > 0.04045 ? Math.pow(((g + 0.055) / 1.055), 2.4) : (g / 12.92);
    	b = b > 0.04045 ? Math.pow(((b + 0.055) / 1.055), 2.4) : (b / 12.92);

    	var x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);
    	var y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);
    	var z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);

    	return [x * 100, y * 100, z * 100];
    };

    convert.rgb.lab = function (rgb) {
    	var xyz = convert.rgb.xyz(rgb);
    	var x = xyz[0];
    	var y = xyz[1];
    	var z = xyz[2];
    	var l;
    	var a;
    	var b;

    	x /= 95.047;
    	y /= 100;
    	z /= 108.883;

    	x = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);
    	y = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);
    	z = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);

    	l = (116 * y) - 16;
    	a = 500 * (x - y);
    	b = 200 * (y - z);

    	return [l, a, b];
    };

    convert.hsl.rgb = function (hsl) {
    	var h = hsl[0] / 360;
    	var s = hsl[1] / 100;
    	var l = hsl[2] / 100;
    	var t1;
    	var t2;
    	var t3;
    	var rgb;
    	var val;

    	if (s === 0) {
    		val = l * 255;
    		return [val, val, val];
    	}

    	if (l < 0.5) {
    		t2 = l * (1 + s);
    	} else {
    		t2 = l + s - l * s;
    	}

    	t1 = 2 * l - t2;

    	rgb = [0, 0, 0];
    	for (var i = 0; i < 3; i++) {
    		t3 = h + 1 / 3 * -(i - 1);
    		if (t3 < 0) {
    			t3++;
    		}
    		if (t3 > 1) {
    			t3--;
    		}

    		if (6 * t3 < 1) {
    			val = t1 + (t2 - t1) * 6 * t3;
    		} else if (2 * t3 < 1) {
    			val = t2;
    		} else if (3 * t3 < 2) {
    			val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
    		} else {
    			val = t1;
    		}

    		rgb[i] = val * 255;
    	}

    	return rgb;
    };

    convert.hsl.hsv = function (hsl) {
    	var h = hsl[0];
    	var s = hsl[1] / 100;
    	var l = hsl[2] / 100;
    	var smin = s;
    	var lmin = Math.max(l, 0.01);
    	var sv;
    	var v;

    	l *= 2;
    	s *= (l <= 1) ? l : 2 - l;
    	smin *= lmin <= 1 ? lmin : 2 - lmin;
    	v = (l + s) / 2;
    	sv = l === 0 ? (2 * smin) / (lmin + smin) : (2 * s) / (l + s);

    	return [h, sv * 100, v * 100];
    };

    convert.hsv.rgb = function (hsv) {
    	var h = hsv[0] / 60;
    	var s = hsv[1] / 100;
    	var v = hsv[2] / 100;
    	var hi = Math.floor(h) % 6;

    	var f = h - Math.floor(h);
    	var p = 255 * v * (1 - s);
    	var q = 255 * v * (1 - (s * f));
    	var t = 255 * v * (1 - (s * (1 - f)));
    	v *= 255;

    	switch (hi) {
    		case 0:
    			return [v, t, p];
    		case 1:
    			return [q, v, p];
    		case 2:
    			return [p, v, t];
    		case 3:
    			return [p, q, v];
    		case 4:
    			return [t, p, v];
    		case 5:
    			return [v, p, q];
    	}
    };

    convert.hsv.hsl = function (hsv) {
    	var h = hsv[0];
    	var s = hsv[1] / 100;
    	var v = hsv[2] / 100;
    	var vmin = Math.max(v, 0.01);
    	var lmin;
    	var sl;
    	var l;

    	l = (2 - s) * v;
    	lmin = (2 - s) * vmin;
    	sl = s * vmin;
    	sl /= (lmin <= 1) ? lmin : 2 - lmin;
    	sl = sl || 0;
    	l /= 2;

    	return [h, sl * 100, l * 100];
    };

    // http://dev.w3.org/csswg/css-color/#hwb-to-rgb
    convert.hwb.rgb = function (hwb) {
    	var h = hwb[0] / 360;
    	var wh = hwb[1] / 100;
    	var bl = hwb[2] / 100;
    	var ratio = wh + bl;
    	var i;
    	var v;
    	var f;
    	var n;

    	// wh + bl cant be > 1
    	if (ratio > 1) {
    		wh /= ratio;
    		bl /= ratio;
    	}

    	i = Math.floor(6 * h);
    	v = 1 - bl;
    	f = 6 * h - i;

    	if ((i & 0x01) !== 0) {
    		f = 1 - f;
    	}

    	n = wh + f * (v - wh); // linear interpolation

    	var r;
    	var g;
    	var b;
    	switch (i) {
    		default:
    		case 6:
    		case 0: r = v; g = n; b = wh; break;
    		case 1: r = n; g = v; b = wh; break;
    		case 2: r = wh; g = v; b = n; break;
    		case 3: r = wh; g = n; b = v; break;
    		case 4: r = n; g = wh; b = v; break;
    		case 5: r = v; g = wh; b = n; break;
    	}

    	return [r * 255, g * 255, b * 255];
    };

    convert.cmyk.rgb = function (cmyk) {
    	var c = cmyk[0] / 100;
    	var m = cmyk[1] / 100;
    	var y = cmyk[2] / 100;
    	var k = cmyk[3] / 100;
    	var r;
    	var g;
    	var b;

    	r = 1 - Math.min(1, c * (1 - k) + k);
    	g = 1 - Math.min(1, m * (1 - k) + k);
    	b = 1 - Math.min(1, y * (1 - k) + k);

    	return [r * 255, g * 255, b * 255];
    };

    convert.xyz.rgb = function (xyz) {
    	var x = xyz[0] / 100;
    	var y = xyz[1] / 100;
    	var z = xyz[2] / 100;
    	var r;
    	var g;
    	var b;

    	r = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);
    	g = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);
    	b = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);

    	// assume sRGB
    	r = r > 0.0031308
    		? ((1.055 * Math.pow(r, 1.0 / 2.4)) - 0.055)
    		: r * 12.92;

    	g = g > 0.0031308
    		? ((1.055 * Math.pow(g, 1.0 / 2.4)) - 0.055)
    		: g * 12.92;

    	b = b > 0.0031308
    		? ((1.055 * Math.pow(b, 1.0 / 2.4)) - 0.055)
    		: b * 12.92;

    	r = Math.min(Math.max(0, r), 1);
    	g = Math.min(Math.max(0, g), 1);
    	b = Math.min(Math.max(0, b), 1);

    	return [r * 255, g * 255, b * 255];
    };

    convert.xyz.lab = function (xyz) {
    	var x = xyz[0];
    	var y = xyz[1];
    	var z = xyz[2];
    	var l;
    	var a;
    	var b;

    	x /= 95.047;
    	y /= 100;
    	z /= 108.883;

    	x = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);
    	y = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);
    	z = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);

    	l = (116 * y) - 16;
    	a = 500 * (x - y);
    	b = 200 * (y - z);

    	return [l, a, b];
    };

    convert.lab.xyz = function (lab) {
    	var l = lab[0];
    	var a = lab[1];
    	var b = lab[2];
    	var x;
    	var y;
    	var z;

    	y = (l + 16) / 116;
    	x = a / 500 + y;
    	z = y - b / 200;

    	var y2 = Math.pow(y, 3);
    	var x2 = Math.pow(x, 3);
    	var z2 = Math.pow(z, 3);
    	y = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;
    	x = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;
    	z = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;

    	x *= 95.047;
    	y *= 100;
    	z *= 108.883;

    	return [x, y, z];
    };

    convert.lab.lch = function (lab) {
    	var l = lab[0];
    	var a = lab[1];
    	var b = lab[2];
    	var hr;
    	var h;
    	var c;

    	hr = Math.atan2(b, a);
    	h = hr * 360 / 2 / Math.PI;

    	if (h < 0) {
    		h += 360;
    	}

    	c = Math.sqrt(a * a + b * b);

    	return [l, c, h];
    };

    convert.lch.lab = function (lch) {
    	var l = lch[0];
    	var c = lch[1];
    	var h = lch[2];
    	var a;
    	var b;
    	var hr;

    	hr = h / 360 * 2 * Math.PI;
    	a = c * Math.cos(hr);
    	b = c * Math.sin(hr);

    	return [l, a, b];
    };

    convert.rgb.ansi16 = function (args) {
    	var r = args[0];
    	var g = args[1];
    	var b = args[2];
    	var value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2]; // hsv -> ansi16 optimization

    	value = Math.round(value / 50);

    	if (value === 0) {
    		return 30;
    	}

    	var ansi = 30
    		+ ((Math.round(b / 255) << 2)
    		| (Math.round(g / 255) << 1)
    		| Math.round(r / 255));

    	if (value === 2) {
    		ansi += 60;
    	}

    	return ansi;
    };

    convert.hsv.ansi16 = function (args) {
    	// optimization here; we already know the value and don't need to get
    	// it converted for us.
    	return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
    };

    convert.rgb.ansi256 = function (args) {
    	var r = args[0];
    	var g = args[1];
    	var b = args[2];

    	// we use the extended greyscale palette here, with the exception of
    	// black and white. normal palette only has 4 greyscale shades.
    	if (r === g && g === b) {
    		if (r < 8) {
    			return 16;
    		}

    		if (r > 248) {
    			return 231;
    		}

    		return Math.round(((r - 8) / 247) * 24) + 232;
    	}

    	var ansi = 16
    		+ (36 * Math.round(r / 255 * 5))
    		+ (6 * Math.round(g / 255 * 5))
    		+ Math.round(b / 255 * 5);

    	return ansi;
    };

    convert.ansi16.rgb = function (args) {
    	var color = args % 10;

    	// handle greyscale
    	if (color === 0 || color === 7) {
    		if (args > 50) {
    			color += 3.5;
    		}

    		color = color / 10.5 * 255;

    		return [color, color, color];
    	}

    	var mult = (~~(args > 50) + 1) * 0.5;
    	var r = ((color & 1) * mult) * 255;
    	var g = (((color >> 1) & 1) * mult) * 255;
    	var b = (((color >> 2) & 1) * mult) * 255;

    	return [r, g, b];
    };

    convert.ansi256.rgb = function (args) {
    	// handle greyscale
    	if (args >= 232) {
    		var c = (args - 232) * 10 + 8;
    		return [c, c, c];
    	}

    	args -= 16;

    	var rem;
    	var r = Math.floor(args / 36) / 5 * 255;
    	var g = Math.floor((rem = args % 36) / 6) / 5 * 255;
    	var b = (rem % 6) / 5 * 255;

    	return [r, g, b];
    };

    convert.rgb.hex = function (args) {
    	var integer = ((Math.round(args[0]) & 0xFF) << 16)
    		+ ((Math.round(args[1]) & 0xFF) << 8)
    		+ (Math.round(args[2]) & 0xFF);

    	var string = integer.toString(16).toUpperCase();
    	return '000000'.substring(string.length) + string;
    };

    convert.hex.rgb = function (args) {
    	var match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
    	if (!match) {
    		return [0, 0, 0];
    	}

    	var colorString = match[0];

    	if (match[0].length === 3) {
    		colorString = colorString.split('').map(function (char) {
    			return char + char;
    		}).join('');
    	}

    	var integer = parseInt(colorString, 16);
    	var r = (integer >> 16) & 0xFF;
    	var g = (integer >> 8) & 0xFF;
    	var b = integer & 0xFF;

    	return [r, g, b];
    };

    convert.rgb.hcg = function (rgb) {
    	var r = rgb[0] / 255;
    	var g = rgb[1] / 255;
    	var b = rgb[2] / 255;
    	var max = Math.max(Math.max(r, g), b);
    	var min = Math.min(Math.min(r, g), b);
    	var chroma = (max - min);
    	var grayscale;
    	var hue;

    	if (chroma < 1) {
    		grayscale = min / (1 - chroma);
    	} else {
    		grayscale = 0;
    	}

    	if (chroma <= 0) {
    		hue = 0;
    	} else
    	if (max === r) {
    		hue = ((g - b) / chroma) % 6;
    	} else
    	if (max === g) {
    		hue = 2 + (b - r) / chroma;
    	} else {
    		hue = 4 + (r - g) / chroma + 4;
    	}

    	hue /= 6;
    	hue %= 1;

    	return [hue * 360, chroma * 100, grayscale * 100];
    };

    convert.hsl.hcg = function (hsl) {
    	var s = hsl[1] / 100;
    	var l = hsl[2] / 100;
    	var c = 1;
    	var f = 0;

    	if (l < 0.5) {
    		c = 2.0 * s * l;
    	} else {
    		c = 2.0 * s * (1.0 - l);
    	}

    	if (c < 1.0) {
    		f = (l - 0.5 * c) / (1.0 - c);
    	}

    	return [hsl[0], c * 100, f * 100];
    };

    convert.hsv.hcg = function (hsv) {
    	var s = hsv[1] / 100;
    	var v = hsv[2] / 100;

    	var c = s * v;
    	var f = 0;

    	if (c < 1.0) {
    		f = (v - c) / (1 - c);
    	}

    	return [hsv[0], c * 100, f * 100];
    };

    convert.hcg.rgb = function (hcg) {
    	var h = hcg[0] / 360;
    	var c = hcg[1] / 100;
    	var g = hcg[2] / 100;

    	if (c === 0.0) {
    		return [g * 255, g * 255, g * 255];
    	}

    	var pure = [0, 0, 0];
    	var hi = (h % 1) * 6;
    	var v = hi % 1;
    	var w = 1 - v;
    	var mg = 0;

    	switch (Math.floor(hi)) {
    		case 0:
    			pure[0] = 1; pure[1] = v; pure[2] = 0; break;
    		case 1:
    			pure[0] = w; pure[1] = 1; pure[2] = 0; break;
    		case 2:
    			pure[0] = 0; pure[1] = 1; pure[2] = v; break;
    		case 3:
    			pure[0] = 0; pure[1] = w; pure[2] = 1; break;
    		case 4:
    			pure[0] = v; pure[1] = 0; pure[2] = 1; break;
    		default:
    			pure[0] = 1; pure[1] = 0; pure[2] = w;
    	}

    	mg = (1.0 - c) * g;

    	return [
    		(c * pure[0] + mg) * 255,
    		(c * pure[1] + mg) * 255,
    		(c * pure[2] + mg) * 255
    	];
    };

    convert.hcg.hsv = function (hcg) {
    	var c = hcg[1] / 100;
    	var g = hcg[2] / 100;

    	var v = c + g * (1.0 - c);
    	var f = 0;

    	if (v > 0.0) {
    		f = c / v;
    	}

    	return [hcg[0], f * 100, v * 100];
    };

    convert.hcg.hsl = function (hcg) {
    	var c = hcg[1] / 100;
    	var g = hcg[2] / 100;

    	var l = g * (1.0 - c) + 0.5 * c;
    	var s = 0;

    	if (l > 0.0 && l < 0.5) {
    		s = c / (2 * l);
    	} else
    	if (l >= 0.5 && l < 1.0) {
    		s = c / (2 * (1 - l));
    	}

    	return [hcg[0], s * 100, l * 100];
    };

    convert.hcg.hwb = function (hcg) {
    	var c = hcg[1] / 100;
    	var g = hcg[2] / 100;
    	var v = c + g * (1.0 - c);
    	return [hcg[0], (v - c) * 100, (1 - v) * 100];
    };

    convert.hwb.hcg = function (hwb) {
    	var w = hwb[1] / 100;
    	var b = hwb[2] / 100;
    	var v = 1 - b;
    	var c = v - w;
    	var g = 0;

    	if (c < 1) {
    		g = (v - c) / (1 - c);
    	}

    	return [hwb[0], c * 100, g * 100];
    };

    convert.apple.rgb = function (apple) {
    	return [(apple[0] / 65535) * 255, (apple[1] / 65535) * 255, (apple[2] / 65535) * 255];
    };

    convert.rgb.apple = function (rgb) {
    	return [(rgb[0] / 255) * 65535, (rgb[1] / 255) * 65535, (rgb[2] / 255) * 65535];
    };

    convert.gray.rgb = function (args) {
    	return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
    };

    convert.gray.hsl = convert.gray.hsv = function (args) {
    	return [0, 0, args[0]];
    };

    convert.gray.hwb = function (gray) {
    	return [0, 100, gray[0]];
    };

    convert.gray.cmyk = function (gray) {
    	return [0, 0, 0, gray[0]];
    };

    convert.gray.lab = function (gray) {
    	return [gray[0], 0, 0];
    };

    convert.gray.hex = function (gray) {
    	var val = Math.round(gray[0] / 100 * 255) & 0xFF;
    	var integer = (val << 16) + (val << 8) + val;

    	var string = integer.toString(16).toUpperCase();
    	return '000000'.substring(string.length) + string;
    };

    convert.rgb.gray = function (rgb) {
    	var val = (rgb[0] + rgb[1] + rgb[2]) / 3;
    	return [val / 255 * 100];
    };
    });
    conversions.rgb;
    conversions.hsl;
    conversions.hsv;
    conversions.hwb;
    conversions.cmyk;
    conversions.xyz;
    conversions.lab;
    conversions.lch;
    conversions.hex;
    conversions.keyword;
    conversions.ansi16;
    conversions.ansi256;
    conversions.hcg;
    conversions.apple;
    conversions.gray;

    /*
    	this function routes a model to all other models.

    	all functions that are routed have a property `.conversion` attached
    	to the returned synthetic function. This property is an array
    	of strings, each with the steps in between the 'from' and 'to'
    	color models (inclusive).

    	conversions that are not possible simply are not included.
    */

    function buildGraph() {
    	var graph = {};
    	// https://jsperf.com/object-keys-vs-for-in-with-closure/3
    	var models = Object.keys(conversions);

    	for (var len = models.length, i = 0; i < len; i++) {
    		graph[models[i]] = {
    			// http://jsperf.com/1-vs-infinity
    			// micro-opt, but this is simple.
    			distance: -1,
    			parent: null
    		};
    	}

    	return graph;
    }

    // https://en.wikipedia.org/wiki/Breadth-first_search
    function deriveBFS(fromModel) {
    	var graph = buildGraph();
    	var queue = [fromModel]; // unshift -> queue -> pop

    	graph[fromModel].distance = 0;

    	while (queue.length) {
    		var current = queue.pop();
    		var adjacents = Object.keys(conversions[current]);

    		for (var len = adjacents.length, i = 0; i < len; i++) {
    			var adjacent = adjacents[i];
    			var node = graph[adjacent];

    			if (node.distance === -1) {
    				node.distance = graph[current].distance + 1;
    				node.parent = current;
    				queue.unshift(adjacent);
    			}
    		}
    	}

    	return graph;
    }

    function link(from, to) {
    	return function (args) {
    		return to(from(args));
    	};
    }

    function wrapConversion(toModel, graph) {
    	var path = [graph[toModel].parent, toModel];
    	var fn = conversions[graph[toModel].parent][toModel];

    	var cur = graph[toModel].parent;
    	while (graph[cur].parent) {
    		path.unshift(graph[cur].parent);
    		fn = link(conversions[graph[cur].parent][cur], fn);
    		cur = graph[cur].parent;
    	}

    	fn.conversion = path;
    	return fn;
    }

    var route = function (fromModel) {
    	var graph = deriveBFS(fromModel);
    	var conversion = {};

    	var models = Object.keys(graph);
    	for (var len = models.length, i = 0; i < len; i++) {
    		var toModel = models[i];
    		var node = graph[toModel];

    		if (node.parent === null) {
    			// no possible conversion, or this node is the source model.
    			continue;
    		}

    		conversion[toModel] = wrapConversion(toModel, graph);
    	}

    	return conversion;
    };

    var convert = {};

    var models = Object.keys(conversions);

    function wrapRaw(fn) {
    	var wrappedFn = function (args) {
    		if (args === undefined || args === null) {
    			return args;
    		}

    		if (arguments.length > 1) {
    			args = Array.prototype.slice.call(arguments);
    		}

    		return fn(args);
    	};

    	// preserve .conversion property if there is one
    	if ('conversion' in fn) {
    		wrappedFn.conversion = fn.conversion;
    	}

    	return wrappedFn;
    }

    function wrapRounded(fn) {
    	var wrappedFn = function (args) {
    		if (args === undefined || args === null) {
    			return args;
    		}

    		if (arguments.length > 1) {
    			args = Array.prototype.slice.call(arguments);
    		}

    		var result = fn(args);

    		// we're assuming the result is an array here.
    		// see notice in conversions.js; don't use box types
    		// in conversion functions.
    		if (typeof result === 'object') {
    			for (var len = result.length, i = 0; i < len; i++) {
    				result[i] = Math.round(result[i]);
    			}
    		}

    		return result;
    	};

    	// preserve .conversion property if there is one
    	if ('conversion' in fn) {
    		wrappedFn.conversion = fn.conversion;
    	}

    	return wrappedFn;
    }

    models.forEach(function (fromModel) {
    	convert[fromModel] = {};

    	Object.defineProperty(convert[fromModel], 'channels', {value: conversions[fromModel].channels});
    	Object.defineProperty(convert[fromModel], 'labels', {value: conversions[fromModel].labels});

    	var routes = route(fromModel);
    	var routeModels = Object.keys(routes);

    	routeModels.forEach(function (toModel) {
    		var fn = routes[toModel];

    		convert[fromModel][toModel] = wrapRounded(fn);
    		convert[fromModel][toModel].raw = wrapRaw(fn);
    	});
    });

    var colorConvert = convert;

    var colorName$1 = {
    	"aliceblue": [240, 248, 255],
    	"antiquewhite": [250, 235, 215],
    	"aqua": [0, 255, 255],
    	"aquamarine": [127, 255, 212],
    	"azure": [240, 255, 255],
    	"beige": [245, 245, 220],
    	"bisque": [255, 228, 196],
    	"black": [0, 0, 0],
    	"blanchedalmond": [255, 235, 205],
    	"blue": [0, 0, 255],
    	"blueviolet": [138, 43, 226],
    	"brown": [165, 42, 42],
    	"burlywood": [222, 184, 135],
    	"cadetblue": [95, 158, 160],
    	"chartreuse": [127, 255, 0],
    	"chocolate": [210, 105, 30],
    	"coral": [255, 127, 80],
    	"cornflowerblue": [100, 149, 237],
    	"cornsilk": [255, 248, 220],
    	"crimson": [220, 20, 60],
    	"cyan": [0, 255, 255],
    	"darkblue": [0, 0, 139],
    	"darkcyan": [0, 139, 139],
    	"darkgoldenrod": [184, 134, 11],
    	"darkgray": [169, 169, 169],
    	"darkgreen": [0, 100, 0],
    	"darkgrey": [169, 169, 169],
    	"darkkhaki": [189, 183, 107],
    	"darkmagenta": [139, 0, 139],
    	"darkolivegreen": [85, 107, 47],
    	"darkorange": [255, 140, 0],
    	"darkorchid": [153, 50, 204],
    	"darkred": [139, 0, 0],
    	"darksalmon": [233, 150, 122],
    	"darkseagreen": [143, 188, 143],
    	"darkslateblue": [72, 61, 139],
    	"darkslategray": [47, 79, 79],
    	"darkslategrey": [47, 79, 79],
    	"darkturquoise": [0, 206, 209],
    	"darkviolet": [148, 0, 211],
    	"deeppink": [255, 20, 147],
    	"deepskyblue": [0, 191, 255],
    	"dimgray": [105, 105, 105],
    	"dimgrey": [105, 105, 105],
    	"dodgerblue": [30, 144, 255],
    	"firebrick": [178, 34, 34],
    	"floralwhite": [255, 250, 240],
    	"forestgreen": [34, 139, 34],
    	"fuchsia": [255, 0, 255],
    	"gainsboro": [220, 220, 220],
    	"ghostwhite": [248, 248, 255],
    	"gold": [255, 215, 0],
    	"goldenrod": [218, 165, 32],
    	"gray": [128, 128, 128],
    	"green": [0, 128, 0],
    	"greenyellow": [173, 255, 47],
    	"grey": [128, 128, 128],
    	"honeydew": [240, 255, 240],
    	"hotpink": [255, 105, 180],
    	"indianred": [205, 92, 92],
    	"indigo": [75, 0, 130],
    	"ivory": [255, 255, 240],
    	"khaki": [240, 230, 140],
    	"lavender": [230, 230, 250],
    	"lavenderblush": [255, 240, 245],
    	"lawngreen": [124, 252, 0],
    	"lemonchiffon": [255, 250, 205],
    	"lightblue": [173, 216, 230],
    	"lightcoral": [240, 128, 128],
    	"lightcyan": [224, 255, 255],
    	"lightgoldenrodyellow": [250, 250, 210],
    	"lightgray": [211, 211, 211],
    	"lightgreen": [144, 238, 144],
    	"lightgrey": [211, 211, 211],
    	"lightpink": [255, 182, 193],
    	"lightsalmon": [255, 160, 122],
    	"lightseagreen": [32, 178, 170],
    	"lightskyblue": [135, 206, 250],
    	"lightslategray": [119, 136, 153],
    	"lightslategrey": [119, 136, 153],
    	"lightsteelblue": [176, 196, 222],
    	"lightyellow": [255, 255, 224],
    	"lime": [0, 255, 0],
    	"limegreen": [50, 205, 50],
    	"linen": [250, 240, 230],
    	"magenta": [255, 0, 255],
    	"maroon": [128, 0, 0],
    	"mediumaquamarine": [102, 205, 170],
    	"mediumblue": [0, 0, 205],
    	"mediumorchid": [186, 85, 211],
    	"mediumpurple": [147, 112, 219],
    	"mediumseagreen": [60, 179, 113],
    	"mediumslateblue": [123, 104, 238],
    	"mediumspringgreen": [0, 250, 154],
    	"mediumturquoise": [72, 209, 204],
    	"mediumvioletred": [199, 21, 133],
    	"midnightblue": [25, 25, 112],
    	"mintcream": [245, 255, 250],
    	"mistyrose": [255, 228, 225],
    	"moccasin": [255, 228, 181],
    	"navajowhite": [255, 222, 173],
    	"navy": [0, 0, 128],
    	"oldlace": [253, 245, 230],
    	"olive": [128, 128, 0],
    	"olivedrab": [107, 142, 35],
    	"orange": [255, 165, 0],
    	"orangered": [255, 69, 0],
    	"orchid": [218, 112, 214],
    	"palegoldenrod": [238, 232, 170],
    	"palegreen": [152, 251, 152],
    	"paleturquoise": [175, 238, 238],
    	"palevioletred": [219, 112, 147],
    	"papayawhip": [255, 239, 213],
    	"peachpuff": [255, 218, 185],
    	"peru": [205, 133, 63],
    	"pink": [255, 192, 203],
    	"plum": [221, 160, 221],
    	"powderblue": [176, 224, 230],
    	"purple": [128, 0, 128],
    	"rebeccapurple": [102, 51, 153],
    	"red": [255, 0, 0],
    	"rosybrown": [188, 143, 143],
    	"royalblue": [65, 105, 225],
    	"saddlebrown": [139, 69, 19],
    	"salmon": [250, 128, 114],
    	"sandybrown": [244, 164, 96],
    	"seagreen": [46, 139, 87],
    	"seashell": [255, 245, 238],
    	"sienna": [160, 82, 45],
    	"silver": [192, 192, 192],
    	"skyblue": [135, 206, 235],
    	"slateblue": [106, 90, 205],
    	"slategray": [112, 128, 144],
    	"slategrey": [112, 128, 144],
    	"snow": [255, 250, 250],
    	"springgreen": [0, 255, 127],
    	"steelblue": [70, 130, 180],
    	"tan": [210, 180, 140],
    	"teal": [0, 128, 128],
    	"thistle": [216, 191, 216],
    	"tomato": [255, 99, 71],
    	"turquoise": [64, 224, 208],
    	"violet": [238, 130, 238],
    	"wheat": [245, 222, 179],
    	"white": [255, 255, 255],
    	"whitesmoke": [245, 245, 245],
    	"yellow": [255, 255, 0],
    	"yellowgreen": [154, 205, 50]
    };

    /* MIT license */


    var colorString = {
       getRgba: getRgba,
       getHsla: getHsla,
       getRgb: getRgb,
       getHsl: getHsl,
       getHwb: getHwb,
       getAlpha: getAlpha,

       hexString: hexString,
       rgbString: rgbString,
       rgbaString: rgbaString,
       percentString: percentString,
       percentaString: percentaString,
       hslString: hslString,
       hslaString: hslaString,
       hwbString: hwbString,
       keyword: keyword
    };

    function getRgba(string) {
       if (!string) {
          return;
       }
       var abbr =  /^#([a-fA-F0-9]{3,4})$/i,
           hex =  /^#([a-fA-F0-9]{6}([a-fA-F0-9]{2})?)$/i,
           rgba = /^rgba?\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i,
           per = /^rgba?\(\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i,
           keyword = /(\w+)/;

       var rgb = [0, 0, 0],
           a = 1,
           match = string.match(abbr),
           hexAlpha = "";
       if (match) {
          match = match[1];
          hexAlpha = match[3];
          for (var i = 0; i < rgb.length; i++) {
             rgb[i] = parseInt(match[i] + match[i], 16);
          }
          if (hexAlpha) {
             a = Math.round((parseInt(hexAlpha + hexAlpha, 16) / 255) * 100) / 100;
          }
       }
       else if (match = string.match(hex)) {
          hexAlpha = match[2];
          match = match[1];
          for (var i = 0; i < rgb.length; i++) {
             rgb[i] = parseInt(match.slice(i * 2, i * 2 + 2), 16);
          }
          if (hexAlpha) {
             a = Math.round((parseInt(hexAlpha, 16) / 255) * 100) / 100;
          }
       }
       else if (match = string.match(rgba)) {
          for (var i = 0; i < rgb.length; i++) {
             rgb[i] = parseInt(match[i + 1]);
          }
          a = parseFloat(match[4]);
       }
       else if (match = string.match(per)) {
          for (var i = 0; i < rgb.length; i++) {
             rgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);
          }
          a = parseFloat(match[4]);
       }
       else if (match = string.match(keyword)) {
          if (match[1] == "transparent") {
             return [0, 0, 0, 0];
          }
          rgb = colorName$1[match[1]];
          if (!rgb) {
             return;
          }
       }

       for (var i = 0; i < rgb.length; i++) {
          rgb[i] = scale(rgb[i], 0, 255);
       }
       if (!a && a != 0) {
          a = 1;
       }
       else {
          a = scale(a, 0, 1);
       }
       rgb[3] = a;
       return rgb;
    }

    function getHsla(string) {
       if (!string) {
          return;
       }
       var hsl = /^hsla?\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/;
       var match = string.match(hsl);
       if (match) {
          var alpha = parseFloat(match[4]);
          var h = scale(parseInt(match[1]), 0, 360),
              s = scale(parseFloat(match[2]), 0, 100),
              l = scale(parseFloat(match[3]), 0, 100),
              a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);
          return [h, s, l, a];
       }
    }

    function getHwb(string) {
       if (!string) {
          return;
       }
       var hwb = /^hwb\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/;
       var match = string.match(hwb);
       if (match) {
        var alpha = parseFloat(match[4]);
          var h = scale(parseInt(match[1]), 0, 360),
              w = scale(parseFloat(match[2]), 0, 100),
              b = scale(parseFloat(match[3]), 0, 100),
              a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);
          return [h, w, b, a];
       }
    }

    function getRgb(string) {
       var rgba = getRgba(string);
       return rgba && rgba.slice(0, 3);
    }

    function getHsl(string) {
      var hsla = getHsla(string);
      return hsla && hsla.slice(0, 3);
    }

    function getAlpha(string) {
       var vals = getRgba(string);
       if (vals) {
          return vals[3];
       }
       else if (vals = getHsla(string)) {
          return vals[3];
       }
       else if (vals = getHwb(string)) {
          return vals[3];
       }
    }

    // generators
    function hexString(rgba, a) {
       var a = (a !== undefined && rgba.length === 3) ? a : rgba[3];
       return "#" + hexDouble(rgba[0]) 
                  + hexDouble(rgba[1])
                  + hexDouble(rgba[2])
                  + (
                     (a >= 0 && a < 1)
                     ? hexDouble(Math.round(a * 255))
                     : ""
                  );
    }

    function rgbString(rgba, alpha) {
       if (alpha < 1 || (rgba[3] && rgba[3] < 1)) {
          return rgbaString(rgba, alpha);
       }
       return "rgb(" + rgba[0] + ", " + rgba[1] + ", " + rgba[2] + ")";
    }

    function rgbaString(rgba, alpha) {
       if (alpha === undefined) {
          alpha = (rgba[3] !== undefined ? rgba[3] : 1);
       }
       return "rgba(" + rgba[0] + ", " + rgba[1] + ", " + rgba[2]
               + ", " + alpha + ")";
    }

    function percentString(rgba, alpha) {
       if (alpha < 1 || (rgba[3] && rgba[3] < 1)) {
          return percentaString(rgba, alpha);
       }
       var r = Math.round(rgba[0]/255 * 100),
           g = Math.round(rgba[1]/255 * 100),
           b = Math.round(rgba[2]/255 * 100);

       return "rgb(" + r + "%, " + g + "%, " + b + "%)";
    }

    function percentaString(rgba, alpha) {
       var r = Math.round(rgba[0]/255 * 100),
           g = Math.round(rgba[1]/255 * 100),
           b = Math.round(rgba[2]/255 * 100);
       return "rgba(" + r + "%, " + g + "%, " + b + "%, " + (alpha || rgba[3] || 1) + ")";
    }

    function hslString(hsla, alpha) {
       if (alpha < 1 || (hsla[3] && hsla[3] < 1)) {
          return hslaString(hsla, alpha);
       }
       return "hsl(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%)";
    }

    function hslaString(hsla, alpha) {
       if (alpha === undefined) {
          alpha = (hsla[3] !== undefined ? hsla[3] : 1);
       }
       return "hsla(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%, "
               + alpha + ")";
    }

    // hwb is a bit different than rgb(a) & hsl(a) since there is no alpha specific syntax
    // (hwb have alpha optional & 1 is default value)
    function hwbString(hwb, alpha) {
       if (alpha === undefined) {
          alpha = (hwb[3] !== undefined ? hwb[3] : 1);
       }
       return "hwb(" + hwb[0] + ", " + hwb[1] + "%, " + hwb[2] + "%"
               + (alpha !== undefined && alpha !== 1 ? ", " + alpha : "") + ")";
    }

    function keyword(rgb) {
      return reverseNames[rgb.slice(0, 3)];
    }

    // helpers
    function scale(num, min, max) {
       return Math.min(Math.max(min, num), max);
    }

    function hexDouble(num) {
      var str = num.toString(16).toUpperCase();
      return (str.length < 2) ? "0" + str : str;
    }


    //create a list of reverse color names
    var reverseNames = {};
    for (var name in colorName$1) {
       reverseNames[colorName$1[name]] = name;
    }

    /* MIT license */



    var Color = function (obj) {
    	if (obj instanceof Color) {
    		return obj;
    	}
    	if (!(this instanceof Color)) {
    		return new Color(obj);
    	}

    	this.valid = false;
    	this.values = {
    		rgb: [0, 0, 0],
    		hsl: [0, 0, 0],
    		hsv: [0, 0, 0],
    		hwb: [0, 0, 0],
    		cmyk: [0, 0, 0, 0],
    		alpha: 1
    	};

    	// parse Color() argument
    	var vals;
    	if (typeof obj === 'string') {
    		vals = colorString.getRgba(obj);
    		if (vals) {
    			this.setValues('rgb', vals);
    		} else if (vals = colorString.getHsla(obj)) {
    			this.setValues('hsl', vals);
    		} else if (vals = colorString.getHwb(obj)) {
    			this.setValues('hwb', vals);
    		}
    	} else if (typeof obj === 'object') {
    		vals = obj;
    		if (vals.r !== undefined || vals.red !== undefined) {
    			this.setValues('rgb', vals);
    		} else if (vals.l !== undefined || vals.lightness !== undefined) {
    			this.setValues('hsl', vals);
    		} else if (vals.v !== undefined || vals.value !== undefined) {
    			this.setValues('hsv', vals);
    		} else if (vals.w !== undefined || vals.whiteness !== undefined) {
    			this.setValues('hwb', vals);
    		} else if (vals.c !== undefined || vals.cyan !== undefined) {
    			this.setValues('cmyk', vals);
    		}
    	}
    };

    Color.prototype = {
    	isValid: function () {
    		return this.valid;
    	},
    	rgb: function () {
    		return this.setSpace('rgb', arguments);
    	},
    	hsl: function () {
    		return this.setSpace('hsl', arguments);
    	},
    	hsv: function () {
    		return this.setSpace('hsv', arguments);
    	},
    	hwb: function () {
    		return this.setSpace('hwb', arguments);
    	},
    	cmyk: function () {
    		return this.setSpace('cmyk', arguments);
    	},

    	rgbArray: function () {
    		return this.values.rgb;
    	},
    	hslArray: function () {
    		return this.values.hsl;
    	},
    	hsvArray: function () {
    		return this.values.hsv;
    	},
    	hwbArray: function () {
    		var values = this.values;
    		if (values.alpha !== 1) {
    			return values.hwb.concat([values.alpha]);
    		}
    		return values.hwb;
    	},
    	cmykArray: function () {
    		return this.values.cmyk;
    	},
    	rgbaArray: function () {
    		var values = this.values;
    		return values.rgb.concat([values.alpha]);
    	},
    	hslaArray: function () {
    		var values = this.values;
    		return values.hsl.concat([values.alpha]);
    	},
    	alpha: function (val) {
    		if (val === undefined) {
    			return this.values.alpha;
    		}
    		this.setValues('alpha', val);
    		return this;
    	},

    	red: function (val) {
    		return this.setChannel('rgb', 0, val);
    	},
    	green: function (val) {
    		return this.setChannel('rgb', 1, val);
    	},
    	blue: function (val) {
    		return this.setChannel('rgb', 2, val);
    	},
    	hue: function (val) {
    		if (val) {
    			val %= 360;
    			val = val < 0 ? 360 + val : val;
    		}
    		return this.setChannel('hsl', 0, val);
    	},
    	saturation: function (val) {
    		return this.setChannel('hsl', 1, val);
    	},
    	lightness: function (val) {
    		return this.setChannel('hsl', 2, val);
    	},
    	saturationv: function (val) {
    		return this.setChannel('hsv', 1, val);
    	},
    	whiteness: function (val) {
    		return this.setChannel('hwb', 1, val);
    	},
    	blackness: function (val) {
    		return this.setChannel('hwb', 2, val);
    	},
    	value: function (val) {
    		return this.setChannel('hsv', 2, val);
    	},
    	cyan: function (val) {
    		return this.setChannel('cmyk', 0, val);
    	},
    	magenta: function (val) {
    		return this.setChannel('cmyk', 1, val);
    	},
    	yellow: function (val) {
    		return this.setChannel('cmyk', 2, val);
    	},
    	black: function (val) {
    		return this.setChannel('cmyk', 3, val);
    	},

    	hexString: function () {
    		return colorString.hexString(this.values.rgb);
    	},
    	rgbString: function () {
    		return colorString.rgbString(this.values.rgb, this.values.alpha);
    	},
    	rgbaString: function () {
    		return colorString.rgbaString(this.values.rgb, this.values.alpha);
    	},
    	percentString: function () {
    		return colorString.percentString(this.values.rgb, this.values.alpha);
    	},
    	hslString: function () {
    		return colorString.hslString(this.values.hsl, this.values.alpha);
    	},
    	hslaString: function () {
    		return colorString.hslaString(this.values.hsl, this.values.alpha);
    	},
    	hwbString: function () {
    		return colorString.hwbString(this.values.hwb, this.values.alpha);
    	},
    	keyword: function () {
    		return colorString.keyword(this.values.rgb, this.values.alpha);
    	},

    	rgbNumber: function () {
    		var rgb = this.values.rgb;
    		return (rgb[0] << 16) | (rgb[1] << 8) | rgb[2];
    	},

    	luminosity: function () {
    		// http://www.w3.org/TR/WCAG20/#relativeluminancedef
    		var rgb = this.values.rgb;
    		var lum = [];
    		for (var i = 0; i < rgb.length; i++) {
    			var chan = rgb[i] / 255;
    			lum[i] = (chan <= 0.03928) ? chan / 12.92 : Math.pow(((chan + 0.055) / 1.055), 2.4);
    		}
    		return 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];
    	},

    	contrast: function (color2) {
    		// http://www.w3.org/TR/WCAG20/#contrast-ratiodef
    		var lum1 = this.luminosity();
    		var lum2 = color2.luminosity();
    		if (lum1 > lum2) {
    			return (lum1 + 0.05) / (lum2 + 0.05);
    		}
    		return (lum2 + 0.05) / (lum1 + 0.05);
    	},

    	level: function (color2) {
    		var contrastRatio = this.contrast(color2);
    		if (contrastRatio >= 7.1) {
    			return 'AAA';
    		}

    		return (contrastRatio >= 4.5) ? 'AA' : '';
    	},

    	dark: function () {
    		// YIQ equation from http://24ways.org/2010/calculating-color-contrast
    		var rgb = this.values.rgb;
    		var yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000;
    		return yiq < 128;
    	},

    	light: function () {
    		return !this.dark();
    	},

    	negate: function () {
    		var rgb = [];
    		for (var i = 0; i < 3; i++) {
    			rgb[i] = 255 - this.values.rgb[i];
    		}
    		this.setValues('rgb', rgb);
    		return this;
    	},

    	lighten: function (ratio) {
    		var hsl = this.values.hsl;
    		hsl[2] += hsl[2] * ratio;
    		this.setValues('hsl', hsl);
    		return this;
    	},

    	darken: function (ratio) {
    		var hsl = this.values.hsl;
    		hsl[2] -= hsl[2] * ratio;
    		this.setValues('hsl', hsl);
    		return this;
    	},

    	saturate: function (ratio) {
    		var hsl = this.values.hsl;
    		hsl[1] += hsl[1] * ratio;
    		this.setValues('hsl', hsl);
    		return this;
    	},

    	desaturate: function (ratio) {
    		var hsl = this.values.hsl;
    		hsl[1] -= hsl[1] * ratio;
    		this.setValues('hsl', hsl);
    		return this;
    	},

    	whiten: function (ratio) {
    		var hwb = this.values.hwb;
    		hwb[1] += hwb[1] * ratio;
    		this.setValues('hwb', hwb);
    		return this;
    	},

    	blacken: function (ratio) {
    		var hwb = this.values.hwb;
    		hwb[2] += hwb[2] * ratio;
    		this.setValues('hwb', hwb);
    		return this;
    	},

    	greyscale: function () {
    		var rgb = this.values.rgb;
    		// http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale
    		var val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;
    		this.setValues('rgb', [val, val, val]);
    		return this;
    	},

    	clearer: function (ratio) {
    		var alpha = this.values.alpha;
    		this.setValues('alpha', alpha - (alpha * ratio));
    		return this;
    	},

    	opaquer: function (ratio) {
    		var alpha = this.values.alpha;
    		this.setValues('alpha', alpha + (alpha * ratio));
    		return this;
    	},

    	rotate: function (degrees) {
    		var hsl = this.values.hsl;
    		var hue = (hsl[0] + degrees) % 360;
    		hsl[0] = hue < 0 ? 360 + hue : hue;
    		this.setValues('hsl', hsl);
    		return this;
    	},

    	/**
    	 * Ported from sass implementation in C
    	 * https://github.com/sass/libsass/blob/0e6b4a2850092356aa3ece07c6b249f0221caced/functions.cpp#L209
    	 */
    	mix: function (mixinColor, weight) {
    		var color1 = this;
    		var color2 = mixinColor;
    		var p = weight === undefined ? 0.5 : weight;

    		var w = 2 * p - 1;
    		var a = color1.alpha() - color2.alpha();

    		var w1 = (((w * a === -1) ? w : (w + a) / (1 + w * a)) + 1) / 2.0;
    		var w2 = 1 - w1;

    		return this
    			.rgb(
    				w1 * color1.red() + w2 * color2.red(),
    				w1 * color1.green() + w2 * color2.green(),
    				w1 * color1.blue() + w2 * color2.blue()
    			)
    			.alpha(color1.alpha() * p + color2.alpha() * (1 - p));
    	},

    	toJSON: function () {
    		return this.rgb();
    	},

    	clone: function () {
    		// NOTE(SB): using node-clone creates a dependency to Buffer when using browserify,
    		// making the final build way to big to embed in Chart.js. So let's do it manually,
    		// assuming that values to clone are 1 dimension arrays containing only numbers,
    		// except 'alpha' which is a number.
    		var result = new Color();
    		var source = this.values;
    		var target = result.values;
    		var value, type;

    		for (var prop in source) {
    			if (source.hasOwnProperty(prop)) {
    				value = source[prop];
    				type = ({}).toString.call(value);
    				if (type === '[object Array]') {
    					target[prop] = value.slice(0);
    				} else if (type === '[object Number]') {
    					target[prop] = value;
    				} else {
    					console.error('unexpected color value:', value);
    				}
    			}
    		}

    		return result;
    	}
    };

    Color.prototype.spaces = {
    	rgb: ['red', 'green', 'blue'],
    	hsl: ['hue', 'saturation', 'lightness'],
    	hsv: ['hue', 'saturation', 'value'],
    	hwb: ['hue', 'whiteness', 'blackness'],
    	cmyk: ['cyan', 'magenta', 'yellow', 'black']
    };

    Color.prototype.maxes = {
    	rgb: [255, 255, 255],
    	hsl: [360, 100, 100],
    	hsv: [360, 100, 100],
    	hwb: [360, 100, 100],
    	cmyk: [100, 100, 100, 100]
    };

    Color.prototype.getValues = function (space) {
    	var values = this.values;
    	var vals = {};

    	for (var i = 0; i < space.length; i++) {
    		vals[space.charAt(i)] = values[space][i];
    	}

    	if (values.alpha !== 1) {
    		vals.a = values.alpha;
    	}

    	// {r: 255, g: 255, b: 255, a: 0.4}
    	return vals;
    };

    Color.prototype.setValues = function (space, vals) {
    	var values = this.values;
    	var spaces = this.spaces;
    	var maxes = this.maxes;
    	var alpha = 1;
    	var i;

    	this.valid = true;

    	if (space === 'alpha') {
    		alpha = vals;
    	} else if (vals.length) {
    		// [10, 10, 10]
    		values[space] = vals.slice(0, space.length);
    		alpha = vals[space.length];
    	} else if (vals[space.charAt(0)] !== undefined) {
    		// {r: 10, g: 10, b: 10}
    		for (i = 0; i < space.length; i++) {
    			values[space][i] = vals[space.charAt(i)];
    		}

    		alpha = vals.a;
    	} else if (vals[spaces[space][0]] !== undefined) {
    		// {red: 10, green: 10, blue: 10}
    		var chans = spaces[space];

    		for (i = 0; i < space.length; i++) {
    			values[space][i] = vals[chans[i]];
    		}

    		alpha = vals.alpha;
    	}

    	values.alpha = Math.max(0, Math.min(1, (alpha === undefined ? values.alpha : alpha)));

    	if (space === 'alpha') {
    		return false;
    	}

    	var capped;

    	// cap values of the space prior converting all values
    	for (i = 0; i < space.length; i++) {
    		capped = Math.max(0, Math.min(maxes[space][i], values[space][i]));
    		values[space][i] = Math.round(capped);
    	}

    	// convert to all the other color spaces
    	for (var sname in spaces) {
    		if (sname !== space) {
    			values[sname] = colorConvert[space][sname](values[space]);
    		}
    	}

    	return true;
    };

    Color.prototype.setSpace = function (space, args) {
    	var vals = args[0];

    	if (vals === undefined) {
    		// color.rgb()
    		return this.getValues(space);
    	}

    	// color.rgb(10, 10, 10)
    	if (typeof vals === 'number') {
    		vals = Array.prototype.slice.call(args);
    	}

    	this.setValues(space, vals);
    	return this;
    };

    Color.prototype.setChannel = function (space, index, val) {
    	var svalues = this.values[space];
    	if (val === undefined) {
    		// color.red()
    		return svalues[index];
    	} else if (val === svalues[index]) {
    		// color.red(color.red())
    		return this;
    	}

    	// color.red(100)
    	svalues[index] = val;
    	this.setValues(space, svalues);

    	return this;
    };

    if (typeof window !== 'undefined') {
    	window.Color = Color;
    }

    var chartjsColor = Color;

    function isValidKey(key) {
    	return ['__proto__', 'prototype', 'constructor'].indexOf(key) === -1;
    }

    /**
     * @namespace Chart.helpers
     */
    var helpers = {
    	/**
    	 * An empty function that can be used, for example, for optional callback.
    	 */
    	noop: function() {},

    	/**
    	 * Returns a unique id, sequentially generated from a global variable.
    	 * @returns {number}
    	 * @function
    	 */
    	uid: (function() {
    		var id = 0;
    		return function() {
    			return id++;
    		};
    	}()),

    	/**
    	 * Returns true if `value` is neither null nor undefined, else returns false.
    	 * @param {*} value - The value to test.
    	 * @returns {boolean}
    	 * @since 2.7.0
    	 */
    	isNullOrUndef: function(value) {
    		return value === null || typeof value === 'undefined';
    	},

    	/**
    	 * Returns true if `value` is an array (including typed arrays), else returns false.
    	 * @param {*} value - The value to test.
    	 * @returns {boolean}
    	 * @function
    	 */
    	isArray: function(value) {
    		if (Array.isArray && Array.isArray(value)) {
    			return true;
    		}
    		var type = Object.prototype.toString.call(value);
    		if (type.substr(0, 7) === '[object' && type.substr(-6) === 'Array]') {
    			return true;
    		}
    		return false;
    	},

    	/**
    	 * Returns true if `value` is an object (excluding null), else returns false.
    	 * @param {*} value - The value to test.
    	 * @returns {boolean}
    	 * @since 2.7.0
    	 */
    	isObject: function(value) {
    		return value !== null && Object.prototype.toString.call(value) === '[object Object]';
    	},

    	/**
    	 * Returns true if `value` is a finite number, else returns false
    	 * @param {*} value  - The value to test.
    	 * @returns {boolean}
    	 */
    	isFinite: function(value) {
    		return (typeof value === 'number' || value instanceof Number) && isFinite(value);
    	},

    	/**
    	 * Returns `value` if defined, else returns `defaultValue`.
    	 * @param {*} value - The value to return if defined.
    	 * @param {*} defaultValue - The value to return if `value` is undefined.
    	 * @returns {*}
    	 */
    	valueOrDefault: function(value, defaultValue) {
    		return typeof value === 'undefined' ? defaultValue : value;
    	},

    	/**
    	 * Returns value at the given `index` in array if defined, else returns `defaultValue`.
    	 * @param {Array} value - The array to lookup for value at `index`.
    	 * @param {number} index - The index in `value` to lookup for value.
    	 * @param {*} defaultValue - The value to return if `value[index]` is undefined.
    	 * @returns {*}
    	 */
    	valueAtIndexOrDefault: function(value, index, defaultValue) {
    		return helpers.valueOrDefault(helpers.isArray(value) ? value[index] : value, defaultValue);
    	},

    	/**
    	 * Calls `fn` with the given `args` in the scope defined by `thisArg` and returns the
    	 * value returned by `fn`. If `fn` is not a function, this method returns undefined.
    	 * @param {function} fn - The function to call.
    	 * @param {Array|undefined|null} args - The arguments with which `fn` should be called.
    	 * @param {object} [thisArg] - The value of `this` provided for the call to `fn`.
    	 * @returns {*}
    	 */
    	callback: function(fn, args, thisArg) {
    		if (fn && typeof fn.call === 'function') {
    			return fn.apply(thisArg, args);
    		}
    	},

    	/**
    	 * Note(SB) for performance sake, this method should only be used when loopable type
    	 * is unknown or in none intensive code (not called often and small loopable). Else
    	 * it's preferable to use a regular for() loop and save extra function calls.
    	 * @param {object|Array} loopable - The object or array to be iterated.
    	 * @param {function} fn - The function to call for each item.
    	 * @param {object} [thisArg] - The value of `this` provided for the call to `fn`.
    	 * @param {boolean} [reverse] - If true, iterates backward on the loopable.
    	 */
    	each: function(loopable, fn, thisArg, reverse) {
    		var i, len, keys;
    		if (helpers.isArray(loopable)) {
    			len = loopable.length;
    			if (reverse) {
    				for (i = len - 1; i >= 0; i--) {
    					fn.call(thisArg, loopable[i], i);
    				}
    			} else {
    				for (i = 0; i < len; i++) {
    					fn.call(thisArg, loopable[i], i);
    				}
    			}
    		} else if (helpers.isObject(loopable)) {
    			keys = Object.keys(loopable);
    			len = keys.length;
    			for (i = 0; i < len; i++) {
    				fn.call(thisArg, loopable[keys[i]], keys[i]);
    			}
    		}
    	},

    	/**
    	 * Returns true if the `a0` and `a1` arrays have the same content, else returns false.
    	 * @see https://stackoverflow.com/a/14853974
    	 * @param {Array} a0 - The array to compare
    	 * @param {Array} a1 - The array to compare
    	 * @returns {boolean}
    	 */
    	arrayEquals: function(a0, a1) {
    		var i, ilen, v0, v1;

    		if (!a0 || !a1 || a0.length !== a1.length) {
    			return false;
    		}

    		for (i = 0, ilen = a0.length; i < ilen; ++i) {
    			v0 = a0[i];
    			v1 = a1[i];

    			if (v0 instanceof Array && v1 instanceof Array) {
    				if (!helpers.arrayEquals(v0, v1)) {
    					return false;
    				}
    			} else if (v0 !== v1) {
    				// NOTE: two different object instances will never be equal: {x:20} != {x:20}
    				return false;
    			}
    		}

    		return true;
    	},

    	/**
    	 * Returns a deep copy of `source` without keeping references on objects and arrays.
    	 * @param {*} source - The value to clone.
    	 * @returns {*}
    	 */
    	clone: function(source) {
    		if (helpers.isArray(source)) {
    			return source.map(helpers.clone);
    		}

    		if (helpers.isObject(source)) {
    			var target = Object.create(source);
    			var keys = Object.keys(source);
    			var klen = keys.length;
    			var k = 0;

    			for (; k < klen; ++k) {
    				target[keys[k]] = helpers.clone(source[keys[k]]);
    			}

    			return target;
    		}

    		return source;
    	},

    	/**
    	 * The default merger when Chart.helpers.merge is called without merger option.
    	 * Note(SB): also used by mergeConfig and mergeScaleConfig as fallback.
    	 * @private
    	 */
    	_merger: function(key, target, source, options) {
    		if (!isValidKey(key)) {
    			// We want to ensure we do not copy prototypes over
    			// as this can pollute global namespaces
    			return;
    		}

    		var tval = target[key];
    		var sval = source[key];

    		if (helpers.isObject(tval) && helpers.isObject(sval)) {
    			helpers.merge(tval, sval, options);
    		} else {
    			target[key] = helpers.clone(sval);
    		}
    	},

    	/**
    	 * Merges source[key] in target[key] only if target[key] is undefined.
    	 * @private
    	 */
    	_mergerIf: function(key, target, source) {
    		if (!isValidKey(key)) {
    			// We want to ensure we do not copy prototypes over
    			// as this can pollute global namespaces
    			return;
    		}

    		var tval = target[key];
    		var sval = source[key];

    		if (helpers.isObject(tval) && helpers.isObject(sval)) {
    			helpers.mergeIf(tval, sval);
    		} else if (!target.hasOwnProperty(key)) {
    			target[key] = helpers.clone(sval);
    		}
    	},

    	/**
    	 * Recursively deep copies `source` properties into `target` with the given `options`.
    	 * IMPORTANT: `target` is not cloned and will be updated with `source` properties.
    	 * @param {object} target - The target object in which all sources are merged into.
    	 * @param {object|object[]} source - Object(s) to merge into `target`.
    	 * @param {object} [options] - Merging options:
    	 * @param {function} [options.merger] - The merge method (key, target, source, options)
    	 * @returns {object} The `target` object.
    	 */
    	merge: function(target, source, options) {
    		var sources = helpers.isArray(source) ? source : [source];
    		var ilen = sources.length;
    		var merge, i, keys, klen, k;

    		if (!helpers.isObject(target)) {
    			return target;
    		}

    		options = options || {};
    		merge = options.merger || helpers._merger;

    		for (i = 0; i < ilen; ++i) {
    			source = sources[i];
    			if (!helpers.isObject(source)) {
    				continue;
    			}

    			keys = Object.keys(source);
    			for (k = 0, klen = keys.length; k < klen; ++k) {
    				merge(keys[k], target, source, options);
    			}
    		}

    		return target;
    	},

    	/**
    	 * Recursively deep copies `source` properties into `target` *only* if not defined in target.
    	 * IMPORTANT: `target` is not cloned and will be updated with `source` properties.
    	 * @param {object} target - The target object in which all sources are merged into.
    	 * @param {object|object[]} source - Object(s) to merge into `target`.
    	 * @returns {object} The `target` object.
    	 */
    	mergeIf: function(target, source) {
    		return helpers.merge(target, source, {merger: helpers._mergerIf});
    	},

    	/**
    	 * Applies the contents of two or more objects together into the first object.
    	 * @param {object} target - The target object in which all objects are merged into.
    	 * @param {object} arg1 - Object containing additional properties to merge in target.
    	 * @param {object} argN - Additional objects containing properties to merge in target.
    	 * @returns {object} The `target` object.
    	 */
    	extend: Object.assign || function(target) {
    		return helpers.merge(target, [].slice.call(arguments, 1), {
    			merger: function(key, dst, src) {
    				dst[key] = src[key];
    			}
    		});
    	},

    	/**
    	 * Basic javascript inheritance based on the model created in Backbone.js
    	 */
    	inherits: function(extensions) {
    		var me = this;
    		var ChartElement = (extensions && extensions.hasOwnProperty('constructor')) ? extensions.constructor : function() {
    			return me.apply(this, arguments);
    		};

    		var Surrogate = function() {
    			this.constructor = ChartElement;
    		};

    		Surrogate.prototype = me.prototype;
    		ChartElement.prototype = new Surrogate();
    		ChartElement.extend = helpers.inherits;

    		if (extensions) {
    			helpers.extend(ChartElement.prototype, extensions);
    		}

    		ChartElement.__super__ = me.prototype;
    		return ChartElement;
    	},

    	_deprecated: function(scope, value, previous, current) {
    		if (value !== undefined) {
    			console.warn(scope + ': "' + previous +
    				'" is deprecated. Please use "' + current + '" instead');
    		}
    	}
    };

    var helpers_core = helpers;

    // DEPRECATIONS

    /**
     * Provided for backward compatibility, use Chart.helpers.callback instead.
     * @function Chart.helpers.callCallback
     * @deprecated since version 2.6.0
     * @todo remove at version 3
     * @private
     */
    helpers.callCallback = helpers.callback;

    /**
     * Provided for backward compatibility, use Array.prototype.indexOf instead.
     * Array.prototype.indexOf compatibility: Chrome, Opera, Safari, FF1.5+, IE9+
     * @function Chart.helpers.indexOf
     * @deprecated since version 2.7.0
     * @todo remove at version 3
     * @private
     */
    helpers.indexOf = function(array, item, fromIndex) {
    	return Array.prototype.indexOf.call(array, item, fromIndex);
    };

    /**
     * Provided for backward compatibility, use Chart.helpers.valueOrDefault instead.
     * @function Chart.helpers.getValueOrDefault
     * @deprecated since version 2.7.0
     * @todo remove at version 3
     * @private
     */
    helpers.getValueOrDefault = helpers.valueOrDefault;

    /**
     * Provided for backward compatibility, use Chart.helpers.valueAtIndexOrDefault instead.
     * @function Chart.helpers.getValueAtIndexOrDefault
     * @deprecated since version 2.7.0
     * @todo remove at version 3
     * @private
     */
    helpers.getValueAtIndexOrDefault = helpers.valueAtIndexOrDefault;

    /**
     * Easing functions adapted from Robert Penner's easing equations.
     * @namespace Chart.helpers.easingEffects
     * @see http://www.robertpenner.com/easing/
     */
    var effects = {
    	linear: function(t) {
    		return t;
    	},

    	easeInQuad: function(t) {
    		return t * t;
    	},

    	easeOutQuad: function(t) {
    		return -t * (t - 2);
    	},

    	easeInOutQuad: function(t) {
    		if ((t /= 0.5) < 1) {
    			return 0.5 * t * t;
    		}
    		return -0.5 * ((--t) * (t - 2) - 1);
    	},

    	easeInCubic: function(t) {
    		return t * t * t;
    	},

    	easeOutCubic: function(t) {
    		return (t = t - 1) * t * t + 1;
    	},

    	easeInOutCubic: function(t) {
    		if ((t /= 0.5) < 1) {
    			return 0.5 * t * t * t;
    		}
    		return 0.5 * ((t -= 2) * t * t + 2);
    	},

    	easeInQuart: function(t) {
    		return t * t * t * t;
    	},

    	easeOutQuart: function(t) {
    		return -((t = t - 1) * t * t * t - 1);
    	},

    	easeInOutQuart: function(t) {
    		if ((t /= 0.5) < 1) {
    			return 0.5 * t * t * t * t;
    		}
    		return -0.5 * ((t -= 2) * t * t * t - 2);
    	},

    	easeInQuint: function(t) {
    		return t * t * t * t * t;
    	},

    	easeOutQuint: function(t) {
    		return (t = t - 1) * t * t * t * t + 1;
    	},

    	easeInOutQuint: function(t) {
    		if ((t /= 0.5) < 1) {
    			return 0.5 * t * t * t * t * t;
    		}
    		return 0.5 * ((t -= 2) * t * t * t * t + 2);
    	},

    	easeInSine: function(t) {
    		return -Math.cos(t * (Math.PI / 2)) + 1;
    	},

    	easeOutSine: function(t) {
    		return Math.sin(t * (Math.PI / 2));
    	},

    	easeInOutSine: function(t) {
    		return -0.5 * (Math.cos(Math.PI * t) - 1);
    	},

    	easeInExpo: function(t) {
    		return (t === 0) ? 0 : Math.pow(2, 10 * (t - 1));
    	},

    	easeOutExpo: function(t) {
    		return (t === 1) ? 1 : -Math.pow(2, -10 * t) + 1;
    	},

    	easeInOutExpo: function(t) {
    		if (t === 0) {
    			return 0;
    		}
    		if (t === 1) {
    			return 1;
    		}
    		if ((t /= 0.5) < 1) {
    			return 0.5 * Math.pow(2, 10 * (t - 1));
    		}
    		return 0.5 * (-Math.pow(2, -10 * --t) + 2);
    	},

    	easeInCirc: function(t) {
    		if (t >= 1) {
    			return t;
    		}
    		return -(Math.sqrt(1 - t * t) - 1);
    	},

    	easeOutCirc: function(t) {
    		return Math.sqrt(1 - (t = t - 1) * t);
    	},

    	easeInOutCirc: function(t) {
    		if ((t /= 0.5) < 1) {
    			return -0.5 * (Math.sqrt(1 - t * t) - 1);
    		}
    		return 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1);
    	},

    	easeInElastic: function(t) {
    		var s = 1.70158;
    		var p = 0;
    		var a = 1;
    		if (t === 0) {
    			return 0;
    		}
    		if (t === 1) {
    			return 1;
    		}
    		if (!p) {
    			p = 0.3;
    		}
    		{
    			s = p / (2 * Math.PI) * Math.asin(1 / a);
    		}
    		return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p));
    	},

    	easeOutElastic: function(t) {
    		var s = 1.70158;
    		var p = 0;
    		var a = 1;
    		if (t === 0) {
    			return 0;
    		}
    		if (t === 1) {
    			return 1;
    		}
    		if (!p) {
    			p = 0.3;
    		}
    		{
    			s = p / (2 * Math.PI) * Math.asin(1 / a);
    		}
    		return a * Math.pow(2, -10 * t) * Math.sin((t - s) * (2 * Math.PI) / p) + 1;
    	},

    	easeInOutElastic: function(t) {
    		var s = 1.70158;
    		var p = 0;
    		var a = 1;
    		if (t === 0) {
    			return 0;
    		}
    		if ((t /= 0.5) === 2) {
    			return 1;
    		}
    		if (!p) {
    			p = 0.45;
    		}
    		{
    			s = p / (2 * Math.PI) * Math.asin(1 / a);
    		}
    		if (t < 1) {
    			return -0.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p));
    		}
    		return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p) * 0.5 + 1;
    	},
    	easeInBack: function(t) {
    		var s = 1.70158;
    		return t * t * ((s + 1) * t - s);
    	},

    	easeOutBack: function(t) {
    		var s = 1.70158;
    		return (t = t - 1) * t * ((s + 1) * t + s) + 1;
    	},

    	easeInOutBack: function(t) {
    		var s = 1.70158;
    		if ((t /= 0.5) < 1) {
    			return 0.5 * (t * t * (((s *= (1.525)) + 1) * t - s));
    		}
    		return 0.5 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2);
    	},

    	easeInBounce: function(t) {
    		return 1 - effects.easeOutBounce(1 - t);
    	},

    	easeOutBounce: function(t) {
    		if (t < (1 / 2.75)) {
    			return 7.5625 * t * t;
    		}
    		if (t < (2 / 2.75)) {
    			return 7.5625 * (t -= (1.5 / 2.75)) * t + 0.75;
    		}
    		if (t < (2.5 / 2.75)) {
    			return 7.5625 * (t -= (2.25 / 2.75)) * t + 0.9375;
    		}
    		return 7.5625 * (t -= (2.625 / 2.75)) * t + 0.984375;
    	},

    	easeInOutBounce: function(t) {
    		if (t < 0.5) {
    			return effects.easeInBounce(t * 2) * 0.5;
    		}
    		return effects.easeOutBounce(t * 2 - 1) * 0.5 + 0.5;
    	}
    };

    var helpers_easing = {
    	effects: effects
    };

    // DEPRECATIONS

    /**
     * Provided for backward compatibility, use Chart.helpers.easing.effects instead.
     * @function Chart.helpers.easingEffects
     * @deprecated since version 2.7.0
     * @todo remove at version 3
     * @private
     */
    helpers_core.easingEffects = effects;

    var PI = Math.PI;
    var RAD_PER_DEG = PI / 180;
    var DOUBLE_PI = PI * 2;
    var HALF_PI = PI / 2;
    var QUARTER_PI = PI / 4;
    var TWO_THIRDS_PI = PI * 2 / 3;

    /**
     * @namespace Chart.helpers.canvas
     */
    var exports$1 = {
    	/**
    	 * Clears the entire canvas associated to the given `chart`.
    	 * @param {Chart} chart - The chart for which to clear the canvas.
    	 */
    	clear: function(chart) {
    		chart.ctx.clearRect(0, 0, chart.width, chart.height);
    	},

    	/**
    	 * Creates a "path" for a rectangle with rounded corners at position (x, y) with a
    	 * given size (width, height) and the same `radius` for all corners.
    	 * @param {CanvasRenderingContext2D} ctx - The canvas 2D Context.
    	 * @param {number} x - The x axis of the coordinate for the rectangle starting point.
    	 * @param {number} y - The y axis of the coordinate for the rectangle starting point.
    	 * @param {number} width - The rectangle's width.
    	 * @param {number} height - The rectangle's height.
    	 * @param {number} radius - The rounded amount (in pixels) for the four corners.
    	 * @todo handle `radius` as top-left, top-right, bottom-right, bottom-left array/object?
    	 */
    	roundedRect: function(ctx, x, y, width, height, radius) {
    		if (radius) {
    			var r = Math.min(radius, height / 2, width / 2);
    			var left = x + r;
    			var top = y + r;
    			var right = x + width - r;
    			var bottom = y + height - r;

    			ctx.moveTo(x, top);
    			if (left < right && top < bottom) {
    				ctx.arc(left, top, r, -PI, -HALF_PI);
    				ctx.arc(right, top, r, -HALF_PI, 0);
    				ctx.arc(right, bottom, r, 0, HALF_PI);
    				ctx.arc(left, bottom, r, HALF_PI, PI);
    			} else if (left < right) {
    				ctx.moveTo(left, y);
    				ctx.arc(right, top, r, -HALF_PI, HALF_PI);
    				ctx.arc(left, top, r, HALF_PI, PI + HALF_PI);
    			} else if (top < bottom) {
    				ctx.arc(left, top, r, -PI, 0);
    				ctx.arc(left, bottom, r, 0, PI);
    			} else {
    				ctx.arc(left, top, r, -PI, PI);
    			}
    			ctx.closePath();
    			ctx.moveTo(x, y);
    		} else {
    			ctx.rect(x, y, width, height);
    		}
    	},

    	drawPoint: function(ctx, style, radius, x, y, rotation) {
    		var type, xOffset, yOffset, size, cornerRadius;
    		var rad = (rotation || 0) * RAD_PER_DEG;

    		if (style && typeof style === 'object') {
    			type = style.toString();
    			if (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {
    				ctx.save();
    				ctx.translate(x, y);
    				ctx.rotate(rad);
    				ctx.drawImage(style, -style.width / 2, -style.height / 2, style.width, style.height);
    				ctx.restore();
    				return;
    			}
    		}

    		if (isNaN(radius) || radius <= 0) {
    			return;
    		}

    		ctx.beginPath();

    		switch (style) {
    		// Default includes circle
    		default:
    			ctx.arc(x, y, radius, 0, DOUBLE_PI);
    			ctx.closePath();
    			break;
    		case 'triangle':
    			ctx.moveTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);
    			rad += TWO_THIRDS_PI;
    			ctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);
    			rad += TWO_THIRDS_PI;
    			ctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);
    			ctx.closePath();
    			break;
    		case 'rectRounded':
    			// NOTE: the rounded rect implementation changed to use `arc` instead of
    			// `quadraticCurveTo` since it generates better results when rect is
    			// almost a circle. 0.516 (instead of 0.5) produces results with visually
    			// closer proportion to the previous impl and it is inscribed in the
    			// circle with `radius`. For more details, see the following PRs:
    			// https://github.com/chartjs/Chart.js/issues/5597
    			// https://github.com/chartjs/Chart.js/issues/5858
    			cornerRadius = radius * 0.516;
    			size = radius - cornerRadius;
    			xOffset = Math.cos(rad + QUARTER_PI) * size;
    			yOffset = Math.sin(rad + QUARTER_PI) * size;
    			ctx.arc(x - xOffset, y - yOffset, cornerRadius, rad - PI, rad - HALF_PI);
    			ctx.arc(x + yOffset, y - xOffset, cornerRadius, rad - HALF_PI, rad);
    			ctx.arc(x + xOffset, y + yOffset, cornerRadius, rad, rad + HALF_PI);
    			ctx.arc(x - yOffset, y + xOffset, cornerRadius, rad + HALF_PI, rad + PI);
    			ctx.closePath();
    			break;
    		case 'rect':
    			if (!rotation) {
    				size = Math.SQRT1_2 * radius;
    				ctx.rect(x - size, y - size, 2 * size, 2 * size);
    				break;
    			}
    			rad += QUARTER_PI;
    			/* falls through */
    		case 'rectRot':
    			xOffset = Math.cos(rad) * radius;
    			yOffset = Math.sin(rad) * radius;
    			ctx.moveTo(x - xOffset, y - yOffset);
    			ctx.lineTo(x + yOffset, y - xOffset);
    			ctx.lineTo(x + xOffset, y + yOffset);
    			ctx.lineTo(x - yOffset, y + xOffset);
    			ctx.closePath();
    			break;
    		case 'crossRot':
    			rad += QUARTER_PI;
    			/* falls through */
    		case 'cross':
    			xOffset = Math.cos(rad) * radius;
    			yOffset = Math.sin(rad) * radius;
    			ctx.moveTo(x - xOffset, y - yOffset);
    			ctx.lineTo(x + xOffset, y + yOffset);
    			ctx.moveTo(x + yOffset, y - xOffset);
    			ctx.lineTo(x - yOffset, y + xOffset);
    			break;
    		case 'star':
    			xOffset = Math.cos(rad) * radius;
    			yOffset = Math.sin(rad) * radius;
    			ctx.moveTo(x - xOffset, y - yOffset);
    			ctx.lineTo(x + xOffset, y + yOffset);
    			ctx.moveTo(x + yOffset, y - xOffset);
    			ctx.lineTo(x - yOffset, y + xOffset);
    			rad += QUARTER_PI;
    			xOffset = Math.cos(rad) * radius;
    			yOffset = Math.sin(rad) * radius;
    			ctx.moveTo(x - xOffset, y - yOffset);
    			ctx.lineTo(x + xOffset, y + yOffset);
    			ctx.moveTo(x + yOffset, y - xOffset);
    			ctx.lineTo(x - yOffset, y + xOffset);
    			break;
    		case 'line':
    			xOffset = Math.cos(rad) * radius;
    			yOffset = Math.sin(rad) * radius;
    			ctx.moveTo(x - xOffset, y - yOffset);
    			ctx.lineTo(x + xOffset, y + yOffset);
    			break;
    		case 'dash':
    			ctx.moveTo(x, y);
    			ctx.lineTo(x + Math.cos(rad) * radius, y + Math.sin(rad) * radius);
    			break;
    		}

    		ctx.fill();
    		ctx.stroke();
    	},

    	/**
    	 * Returns true if the point is inside the rectangle
    	 * @param {object} point - The point to test
    	 * @param {object} area - The rectangle
    	 * @returns {boolean}
    	 * @private
    	 */
    	_isPointInArea: function(point, area) {
    		var epsilon = 1e-6; // 1e-6 is margin in pixels for accumulated error.

    		return point.x > area.left - epsilon && point.x < area.right + epsilon &&
    			point.y > area.top - epsilon && point.y < area.bottom + epsilon;
    	},

    	clipArea: function(ctx, area) {
    		ctx.save();
    		ctx.beginPath();
    		ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);
    		ctx.clip();
    	},

    	unclipArea: function(ctx) {
    		ctx.restore();
    	},

    	lineTo: function(ctx, previous, target, flip) {
    		var stepped = target.steppedLine;
    		if (stepped) {
    			if (stepped === 'middle') {
    				var midpoint = (previous.x + target.x) / 2.0;
    				ctx.lineTo(midpoint, flip ? target.y : previous.y);
    				ctx.lineTo(midpoint, flip ? previous.y : target.y);
    			} else if ((stepped === 'after' && !flip) || (stepped !== 'after' && flip)) {
    				ctx.lineTo(previous.x, target.y);
    			} else {
    				ctx.lineTo(target.x, previous.y);
    			}
    			ctx.lineTo(target.x, target.y);
    			return;
    		}

    		if (!target.tension) {
    			ctx.lineTo(target.x, target.y);
    			return;
    		}

    		ctx.bezierCurveTo(
    			flip ? previous.controlPointPreviousX : previous.controlPointNextX,
    			flip ? previous.controlPointPreviousY : previous.controlPointNextY,
    			flip ? target.controlPointNextX : target.controlPointPreviousX,
    			flip ? target.controlPointNextY : target.controlPointPreviousY,
    			target.x,
    			target.y);
    	}
    };

    var helpers_canvas = exports$1;

    // DEPRECATIONS

    /**
     * Provided for backward compatibility, use Chart.helpers.canvas.clear instead.
     * @namespace Chart.helpers.clear
     * @deprecated since version 2.7.0
     * @todo remove at version 3
     * @private
     */
    helpers_core.clear = exports$1.clear;

    /**
     * Provided for backward compatibility, use Chart.helpers.canvas.roundedRect instead.
     * @namespace Chart.helpers.drawRoundedRectangle
     * @deprecated since version 2.7.0
     * @todo remove at version 3
     * @private
     */
    helpers_core.drawRoundedRectangle = function(ctx) {
    	ctx.beginPath();
    	exports$1.roundedRect.apply(exports$1, arguments);
    };

    var defaults = {
    	/**
    	 * @private
    	 */
    	_set: function(scope, values) {
    		return helpers_core.merge(this[scope] || (this[scope] = {}), values);
    	}
    };

    // TODO(v3): remove 'global' from namespace.  all default are global and
    // there's inconsistency around which options are under 'global'
    defaults._set('global', {
    	defaultColor: 'rgba(0,0,0,0.1)',
    	defaultFontColor: '#666',
    	defaultFontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
    	defaultFontSize: 12,
    	defaultFontStyle: 'normal',
    	defaultLineHeight: 1.2,
    	showLines: true
    });

    var core_defaults = defaults;

    var valueOrDefault = helpers_core.valueOrDefault;

    /**
     * Converts the given font object into a CSS font string.
     * @param {object} font - A font object.
     * @return {string} The CSS font string. See https://developer.mozilla.org/en-US/docs/Web/CSS/font
     * @private
     */
    function toFontString(font) {
    	if (!font || helpers_core.isNullOrUndef(font.size) || helpers_core.isNullOrUndef(font.family)) {
    		return null;
    	}

    	return (font.style ? font.style + ' ' : '')
    		+ (font.weight ? font.weight + ' ' : '')
    		+ font.size + 'px '
    		+ font.family;
    }

    /**
     * @alias Chart.helpers.options
     * @namespace
     */
    var helpers_options = {
    	/**
    	 * Converts the given line height `value` in pixels for a specific font `size`.
    	 * @param {number|string} value - The lineHeight to parse (eg. 1.6, '14px', '75%', '1.6em').
    	 * @param {number} size - The font size (in pixels) used to resolve relative `value`.
    	 * @returns {number} The effective line height in pixels (size * 1.2 if value is invalid).
    	 * @see https://developer.mozilla.org/en-US/docs/Web/CSS/line-height
    	 * @since 2.7.0
    	 */
    	toLineHeight: function(value, size) {
    		var matches = ('' + value).match(/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/);
    		if (!matches || matches[1] === 'normal') {
    			return size * 1.2;
    		}

    		value = +matches[2];

    		switch (matches[3]) {
    		case 'px':
    			return value;
    		case '%':
    			value /= 100;
    			break;
    		}

    		return size * value;
    	},

    	/**
    	 * Converts the given value into a padding object with pre-computed width/height.
    	 * @param {number|object} value - If a number, set the value to all TRBL component,
    	 *  else, if and object, use defined properties and sets undefined ones to 0.
    	 * @returns {object} The padding values (top, right, bottom, left, width, height)
    	 * @since 2.7.0
    	 */
    	toPadding: function(value) {
    		var t, r, b, l;

    		if (helpers_core.isObject(value)) {
    			t = +value.top || 0;
    			r = +value.right || 0;
    			b = +value.bottom || 0;
    			l = +value.left || 0;
    		} else {
    			t = r = b = l = +value || 0;
    		}

    		return {
    			top: t,
    			right: r,
    			bottom: b,
    			left: l,
    			height: t + b,
    			width: l + r
    		};
    	},

    	/**
    	 * Parses font options and returns the font object.
    	 * @param {object} options - A object that contains font options to be parsed.
    	 * @return {object} The font object.
    	 * @todo Support font.* options and renamed to toFont().
    	 * @private
    	 */
    	_parseFont: function(options) {
    		var globalDefaults = core_defaults.global;
    		var size = valueOrDefault(options.fontSize, globalDefaults.defaultFontSize);
    		var font = {
    			family: valueOrDefault(options.fontFamily, globalDefaults.defaultFontFamily),
    			lineHeight: helpers_core.options.toLineHeight(valueOrDefault(options.lineHeight, globalDefaults.defaultLineHeight), size),
    			size: size,
    			style: valueOrDefault(options.fontStyle, globalDefaults.defaultFontStyle),
    			weight: null,
    			string: ''
    		};

    		font.string = toFontString(font);
    		return font;
    	},

    	/**
    	 * Evaluates the given `inputs` sequentially and returns the first defined value.
    	 * @param {Array} inputs - An array of values, falling back to the last value.
    	 * @param {object} [context] - If defined and the current value is a function, the value
    	 * is called with `context` as first argument and the result becomes the new input.
    	 * @param {number} [index] - If defined and the current value is an array, the value
    	 * at `index` become the new input.
    	 * @param {object} [info] - object to return information about resolution in
    	 * @param {boolean} [info.cacheable] - Will be set to `false` if option is not cacheable.
    	 * @since 2.7.0
    	 */
    	resolve: function(inputs, context, index, info) {
    		var cacheable = true;
    		var i, ilen, value;

    		for (i = 0, ilen = inputs.length; i < ilen; ++i) {
    			value = inputs[i];
    			if (value === undefined) {
    				continue;
    			}
    			if (context !== undefined && typeof value === 'function') {
    				value = value(context);
    				cacheable = false;
    			}
    			if (index !== undefined && helpers_core.isArray(value)) {
    				value = value[index];
    				cacheable = false;
    			}
    			if (value !== undefined) {
    				if (info && !cacheable) {
    					info.cacheable = false;
    				}
    				return value;
    			}
    		}
    	}
    };

    /**
     * @alias Chart.helpers.math
     * @namespace
     */
    var exports$2 = {
    	/**
    	 * Returns an array of factors sorted from 1 to sqrt(value)
    	 * @private
    	 */
    	_factorize: function(value) {
    		var result = [];
    		var sqrt = Math.sqrt(value);
    		var i;

    		for (i = 1; i < sqrt; i++) {
    			if (value % i === 0) {
    				result.push(i);
    				result.push(value / i);
    			}
    		}
    		if (sqrt === (sqrt | 0)) { // if value is a square number
    			result.push(sqrt);
    		}

    		result.sort(function(a, b) {
    			return a - b;
    		}).pop();
    		return result;
    	},

    	log10: Math.log10 || function(x) {
    		var exponent = Math.log(x) * Math.LOG10E; // Math.LOG10E = 1 / Math.LN10.
    		// Check for whole powers of 10,
    		// which due to floating point rounding error should be corrected.
    		var powerOf10 = Math.round(exponent);
    		var isPowerOf10 = x === Math.pow(10, powerOf10);

    		return isPowerOf10 ? powerOf10 : exponent;
    	}
    };

    var helpers_math = exports$2;

    // DEPRECATIONS

    /**
     * Provided for backward compatibility, use Chart.helpers.math.log10 instead.
     * @namespace Chart.helpers.log10
     * @deprecated since version 2.9.0
     * @todo remove at version 3
     * @private
     */
    helpers_core.log10 = exports$2.log10;

    var getRtlAdapter = function(rectX, width) {
    	return {
    		x: function(x) {
    			return rectX + rectX + width - x;
    		},
    		setWidth: function(w) {
    			width = w;
    		},
    		textAlign: function(align) {
    			if (align === 'center') {
    				return align;
    			}
    			return align === 'right' ? 'left' : 'right';
    		},
    		xPlus: function(x, value) {
    			return x - value;
    		},
    		leftForLtr: function(x, itemWidth) {
    			return x - itemWidth;
    		},
    	};
    };

    var getLtrAdapter = function() {
    	return {
    		x: function(x) {
    			return x;
    		},
    		setWidth: function(w) { // eslint-disable-line no-unused-vars
    		},
    		textAlign: function(align) {
    			return align;
    		},
    		xPlus: function(x, value) {
    			return x + value;
    		},
    		leftForLtr: function(x, _itemWidth) { // eslint-disable-line no-unused-vars
    			return x;
    		},
    	};
    };

    var getAdapter = function(rtl, rectX, width) {
    	return rtl ? getRtlAdapter(rectX, width) : getLtrAdapter();
    };

    var overrideTextDirection = function(ctx, direction) {
    	var style, original;
    	if (direction === 'ltr' || direction === 'rtl') {
    		style = ctx.canvas.style;
    		original = [
    			style.getPropertyValue('direction'),
    			style.getPropertyPriority('direction'),
    		];

    		style.setProperty('direction', direction, 'important');
    		ctx.prevTextDirection = original;
    	}
    };

    var restoreTextDirection = function(ctx) {
    	var original = ctx.prevTextDirection;
    	if (original !== undefined) {
    		delete ctx.prevTextDirection;
    		ctx.canvas.style.setProperty('direction', original[0], original[1]);
    	}
    };

    var helpers_rtl = {
    	getRtlAdapter: getAdapter,
    	overrideTextDirection: overrideTextDirection,
    	restoreTextDirection: restoreTextDirection,
    };

    var helpers$1 = helpers_core;
    var easing = helpers_easing;
    var canvas = helpers_canvas;
    var options = helpers_options;
    var math = helpers_math;
    var rtl = helpers_rtl;
    helpers$1.easing = easing;
    helpers$1.canvas = canvas;
    helpers$1.options = options;
    helpers$1.math = math;
    helpers$1.rtl = rtl;

    function interpolate(start, view, model, ease) {
    	var keys = Object.keys(model);
    	var i, ilen, key, actual, origin, target, type, c0, c1;

    	for (i = 0, ilen = keys.length; i < ilen; ++i) {
    		key = keys[i];

    		target = model[key];

    		// if a value is added to the model after pivot() has been called, the view
    		// doesn't contain it, so let's initialize the view to the target value.
    		if (!view.hasOwnProperty(key)) {
    			view[key] = target;
    		}

    		actual = view[key];

    		if (actual === target || key[0] === '_') {
    			continue;
    		}

    		if (!start.hasOwnProperty(key)) {
    			start[key] = actual;
    		}

    		origin = start[key];

    		type = typeof target;

    		if (type === typeof origin) {
    			if (type === 'string') {
    				c0 = chartjsColor(origin);
    				if (c0.valid) {
    					c1 = chartjsColor(target);
    					if (c1.valid) {
    						view[key] = c1.mix(c0, ease).rgbString();
    						continue;
    					}
    				}
    			} else if (helpers$1.isFinite(origin) && helpers$1.isFinite(target)) {
    				view[key] = origin + (target - origin) * ease;
    				continue;
    			}
    		}

    		view[key] = target;
    	}
    }

    var Element = function(configuration) {
    	helpers$1.extend(this, configuration);
    	this.initialize.apply(this, arguments);
    };

    helpers$1.extend(Element.prototype, {
    	_type: undefined,

    	initialize: function() {
    		this.hidden = false;
    	},

    	pivot: function() {
    		var me = this;
    		if (!me._view) {
    			me._view = helpers$1.extend({}, me._model);
    		}
    		me._start = {};
    		return me;
    	},

    	transition: function(ease) {
    		var me = this;
    		var model = me._model;
    		var start = me._start;
    		var view = me._view;

    		// No animation -> No Transition
    		if (!model || ease === 1) {
    			me._view = helpers$1.extend({}, model);
    			me._start = null;
    			return me;
    		}

    		if (!view) {
    			view = me._view = {};
    		}

    		if (!start) {
    			start = me._start = {};
    		}

    		interpolate(start, view, model, ease);

    		return me;
    	},

    	tooltipPosition: function() {
    		return {
    			x: this._model.x,
    			y: this._model.y
    		};
    	},

    	hasValue: function() {
    		return helpers$1.isNumber(this._model.x) && helpers$1.isNumber(this._model.y);
    	}
    });

    Element.extend = helpers$1.inherits;

    var core_element = Element;

    var exports$3 = core_element.extend({
    	chart: null, // the animation associated chart instance
    	currentStep: 0, // the current animation step
    	numSteps: 60, // default number of steps
    	easing: '', // the easing to use for this animation
    	render: null, // render function used by the animation service

    	onAnimationProgress: null, // user specified callback to fire on each step of the animation
    	onAnimationComplete: null, // user specified callback to fire when the animation finishes
    });

    var core_animation = exports$3;

    // DEPRECATIONS

    /**
     * Provided for backward compatibility, use Chart.Animation instead
     * @prop Chart.Animation#animationObject
     * @deprecated since version 2.6.0
     * @todo remove at version 3
     */
    Object.defineProperty(exports$3.prototype, 'animationObject', {
    	get: function() {
    		return this;
    	}
    });

    /**
     * Provided for backward compatibility, use Chart.Animation#chart instead
     * @prop Chart.Animation#chartInstance
     * @deprecated since version 2.6.0
     * @todo remove at version 3
     */
    Object.defineProperty(exports$3.prototype, 'chartInstance', {
    	get: function() {
    		return this.chart;
    	},
    	set: function(value) {
    		this.chart = value;
    	}
    });

    core_defaults._set('global', {
    	animation: {
    		duration: 1000,
    		easing: 'easeOutQuart',
    		onProgress: helpers$1.noop,
    		onComplete: helpers$1.noop
    	}
    });

    var core_animations = {
    	animations: [],
    	request: null,

    	/**
    	 * @param {Chart} chart - The chart to animate.
    	 * @param {Chart.Animation} animation - The animation that we will animate.
    	 * @param {number} duration - The animation duration in ms.
    	 * @param {boolean} lazy - if true, the chart is not marked as animating to enable more responsive interactions
    	 */
    	addAnimation: function(chart, animation, duration, lazy) {
    		var animations = this.animations;
    		var i, ilen;

    		animation.chart = chart;
    		animation.startTime = Date.now();
    		animation.duration = duration;

    		if (!lazy) {
    			chart.animating = true;
    		}

    		for (i = 0, ilen = animations.length; i < ilen; ++i) {
    			if (animations[i].chart === chart) {
    				animations[i] = animation;
    				return;
    			}
    		}

    		animations.push(animation);

    		// If there are no animations queued, manually kickstart a digest, for lack of a better word
    		if (animations.length === 1) {
    			this.requestAnimationFrame();
    		}
    	},

    	cancelAnimation: function(chart) {
    		var index = helpers$1.findIndex(this.animations, function(animation) {
    			return animation.chart === chart;
    		});

    		if (index !== -1) {
    			this.animations.splice(index, 1);
    			chart.animating = false;
    		}
    	},

    	requestAnimationFrame: function() {
    		var me = this;
    		if (me.request === null) {
    			// Skip animation frame requests until the active one is executed.
    			// This can happen when processing mouse events, e.g. 'mousemove'
    			// and 'mouseout' events will trigger multiple renders.
    			me.request = helpers$1.requestAnimFrame.call(window, function() {
    				me.request = null;
    				me.startDigest();
    			});
    		}
    	},

    	/**
    	 * @private
    	 */
    	startDigest: function() {
    		var me = this;

    		me.advance();

    		// Do we have more stuff to animate?
    		if (me.animations.length > 0) {
    			me.requestAnimationFrame();
    		}
    	},

    	/**
    	 * @private
    	 */
    	advance: function() {
    		var animations = this.animations;
    		var animation, chart, numSteps, nextStep;
    		var i = 0;

    		// 1 animation per chart, so we are looping charts here
    		while (i < animations.length) {
    			animation = animations[i];
    			chart = animation.chart;
    			numSteps = animation.numSteps;

    			// Make sure that currentStep starts at 1
    			// https://github.com/chartjs/Chart.js/issues/6104
    			nextStep = Math.floor((Date.now() - animation.startTime) / animation.duration * numSteps) + 1;
    			animation.currentStep = Math.min(nextStep, numSteps);

    			helpers$1.callback(animation.render, [chart, animation], chart);
    			helpers$1.callback(animation.onAnimationProgress, [animation], chart);

    			if (animation.currentStep >= numSteps) {
    				helpers$1.callback(animation.onAnimationComplete, [animation], chart);
    				chart.animating = false;
    				animations.splice(i, 1);
    			} else {
    				++i;
    			}
    		}
    	}
    };

    var resolve = helpers$1.options.resolve;

    var arrayEvents = ['push', 'pop', 'shift', 'splice', 'unshift'];

    /**
     * Hooks the array methods that add or remove values ('push', pop', 'shift', 'splice',
     * 'unshift') and notify the listener AFTER the array has been altered. Listeners are
     * called on the 'onData*' callbacks (e.g. onDataPush, etc.) with same arguments.
     */
    function listenArrayEvents(array, listener) {
    	if (array._chartjs) {
    		array._chartjs.listeners.push(listener);
    		return;
    	}

    	Object.defineProperty(array, '_chartjs', {
    		configurable: true,
    		enumerable: false,
    		value: {
    			listeners: [listener]
    		}
    	});

    	arrayEvents.forEach(function(key) {
    		var method = 'onData' + key.charAt(0).toUpperCase() + key.slice(1);
    		var base = array[key];

    		Object.defineProperty(array, key, {
    			configurable: true,
    			enumerable: false,
    			value: function() {
    				var args = Array.prototype.slice.call(arguments);
    				var res = base.apply(this, args);

    				helpers$1.each(array._chartjs.listeners, function(object) {
    					if (typeof object[method] === 'function') {
    						object[method].apply(object, args);
    					}
    				});

    				return res;
    			}
    		});
    	});
    }

    /**
     * Removes the given array event listener and cleanup extra attached properties (such as
     * the _chartjs stub and overridden methods) if array doesn't have any more listeners.
     */
    function unlistenArrayEvents(array, listener) {
    	var stub = array._chartjs;
    	if (!stub) {
    		return;
    	}

    	var listeners = stub.listeners;
    	var index = listeners.indexOf(listener);
    	if (index !== -1) {
    		listeners.splice(index, 1);
    	}

    	if (listeners.length > 0) {
    		return;
    	}

    	arrayEvents.forEach(function(key) {
    		delete array[key];
    	});

    	delete array._chartjs;
    }

    // Base class for all dataset controllers (line, bar, etc)
    var DatasetController = function(chart, datasetIndex) {
    	this.initialize(chart, datasetIndex);
    };

    helpers$1.extend(DatasetController.prototype, {

    	/**
    	 * Element type used to generate a meta dataset (e.g. Chart.element.Line).
    	 * @type {Chart.core.element}
    	 */
    	datasetElementType: null,

    	/**
    	 * Element type used to generate a meta data (e.g. Chart.element.Point).
    	 * @type {Chart.core.element}
    	 */
    	dataElementType: null,

    	/**
    	 * Dataset element option keys to be resolved in _resolveDatasetElementOptions.
    	 * A derived controller may override this to resolve controller-specific options.
    	 * The keys defined here are for backward compatibility for legend styles.
    	 * @private
    	 */
    	_datasetElementOptions: [
    		'backgroundColor',
    		'borderCapStyle',
    		'borderColor',
    		'borderDash',
    		'borderDashOffset',
    		'borderJoinStyle',
    		'borderWidth'
    	],

    	/**
    	 * Data element option keys to be resolved in _resolveDataElementOptions.
    	 * A derived controller may override this to resolve controller-specific options.
    	 * The keys defined here are for backward compatibility for legend styles.
    	 * @private
    	 */
    	_dataElementOptions: [
    		'backgroundColor',
    		'borderColor',
    		'borderWidth',
    		'pointStyle'
    	],

    	initialize: function(chart, datasetIndex) {
    		var me = this;
    		me.chart = chart;
    		me.index = datasetIndex;
    		me.linkScales();
    		me.addElements();
    		me._type = me.getMeta().type;
    	},

    	updateIndex: function(datasetIndex) {
    		this.index = datasetIndex;
    	},

    	linkScales: function() {
    		var me = this;
    		var meta = me.getMeta();
    		var chart = me.chart;
    		var scales = chart.scales;
    		var dataset = me.getDataset();
    		var scalesOpts = chart.options.scales;

    		if (meta.xAxisID === null || !(meta.xAxisID in scales) || dataset.xAxisID) {
    			meta.xAxisID = dataset.xAxisID || scalesOpts.xAxes[0].id;
    		}
    		if (meta.yAxisID === null || !(meta.yAxisID in scales) || dataset.yAxisID) {
    			meta.yAxisID = dataset.yAxisID || scalesOpts.yAxes[0].id;
    		}
    	},

    	getDataset: function() {
    		return this.chart.data.datasets[this.index];
    	},

    	getMeta: function() {
    		return this.chart.getDatasetMeta(this.index);
    	},

    	getScaleForId: function(scaleID) {
    		return this.chart.scales[scaleID];
    	},

    	/**
    	 * @private
    	 */
    	_getValueScaleId: function() {
    		return this.getMeta().yAxisID;
    	},

    	/**
    	 * @private
    	 */
    	_getIndexScaleId: function() {
    		return this.getMeta().xAxisID;
    	},

    	/**
    	 * @private
    	 */
    	_getValueScale: function() {
    		return this.getScaleForId(this._getValueScaleId());
    	},

    	/**
    	 * @private
    	 */
    	_getIndexScale: function() {
    		return this.getScaleForId(this._getIndexScaleId());
    	},

    	reset: function() {
    		this._update(true);
    	},

    	/**
    	 * @private
    	 */
    	destroy: function() {
    		if (this._data) {
    			unlistenArrayEvents(this._data, this);
    		}
    	},

    	createMetaDataset: function() {
    		var me = this;
    		var type = me.datasetElementType;
    		return type && new type({
    			_chart: me.chart,
    			_datasetIndex: me.index
    		});
    	},

    	createMetaData: function(index) {
    		var me = this;
    		var type = me.dataElementType;
    		return type && new type({
    			_chart: me.chart,
    			_datasetIndex: me.index,
    			_index: index
    		});
    	},

    	addElements: function() {
    		var me = this;
    		var meta = me.getMeta();
    		var data = me.getDataset().data || [];
    		var metaData = meta.data;
    		var i, ilen;

    		for (i = 0, ilen = data.length; i < ilen; ++i) {
    			metaData[i] = metaData[i] || me.createMetaData(i);
    		}

    		meta.dataset = meta.dataset || me.createMetaDataset();
    	},

    	addElementAndReset: function(index) {
    		var element = this.createMetaData(index);
    		this.getMeta().data.splice(index, 0, element);
    		this.updateElement(element, index, true);
    	},

    	buildOrUpdateElements: function() {
    		var me = this;
    		var dataset = me.getDataset();
    		var data = dataset.data || (dataset.data = []);

    		// In order to correctly handle data addition/deletion animation (an thus simulate
    		// real-time charts), we need to monitor these data modifications and synchronize
    		// the internal meta data accordingly.
    		if (me._data !== data) {
    			if (me._data) {
    				// This case happens when the user replaced the data array instance.
    				unlistenArrayEvents(me._data, me);
    			}

    			if (data && Object.isExtensible(data)) {
    				listenArrayEvents(data, me);
    			}
    			me._data = data;
    		}

    		// Re-sync meta data in case the user replaced the data array or if we missed
    		// any updates and so make sure that we handle number of datapoints changing.
    		me.resyncElements();
    	},

    	/**
    	 * Returns the merged user-supplied and default dataset-level options
    	 * @private
    	 */
    	_configure: function() {
    		var me = this;
    		me._config = helpers$1.merge(Object.create(null), [
    			me.chart.options.datasets[me._type],
    			me.getDataset(),
    		], {
    			merger: function(key, target, source) {
    				if (key !== '_meta' && key !== 'data') {
    					helpers$1._merger(key, target, source);
    				}
    			}
    		});
    	},

    	_update: function(reset) {
    		var me = this;
    		me._configure();
    		me._cachedDataOpts = null;
    		me.update(reset);
    	},

    	update: helpers$1.noop,

    	transition: function(easingValue) {
    		var meta = this.getMeta();
    		var elements = meta.data || [];
    		var ilen = elements.length;
    		var i = 0;

    		for (; i < ilen; ++i) {
    			elements[i].transition(easingValue);
    		}

    		if (meta.dataset) {
    			meta.dataset.transition(easingValue);
    		}
    	},

    	draw: function() {
    		var meta = this.getMeta();
    		var elements = meta.data || [];
    		var ilen = elements.length;
    		var i = 0;

    		if (meta.dataset) {
    			meta.dataset.draw();
    		}

    		for (; i < ilen; ++i) {
    			elements[i].draw();
    		}
    	},

    	/**
    	 * Returns a set of predefined style properties that should be used to represent the dataset
    	 * or the data if the index is specified
    	 * @param {number} index - data index
    	 * @return {IStyleInterface} style object
    	 */
    	getStyle: function(index) {
    		var me = this;
    		var meta = me.getMeta();
    		var dataset = meta.dataset;
    		var style;

    		me._configure();
    		if (dataset && index === undefined) {
    			style = me._resolveDatasetElementOptions(dataset || {});
    		} else {
    			index = index || 0;
    			style = me._resolveDataElementOptions(meta.data[index] || {}, index);
    		}

    		if (style.fill === false || style.fill === null) {
    			style.backgroundColor = style.borderColor;
    		}

    		return style;
    	},

    	/**
    	 * @private
    	 */
    	_resolveDatasetElementOptions: function(element, hover) {
    		var me = this;
    		var chart = me.chart;
    		var datasetOpts = me._config;
    		var custom = element.custom || {};
    		var options = chart.options.elements[me.datasetElementType.prototype._type] || {};
    		var elementOptions = me._datasetElementOptions;
    		var values = {};
    		var i, ilen, key, readKey;

    		// Scriptable options
    		var context = {
    			chart: chart,
    			dataset: me.getDataset(),
    			datasetIndex: me.index,
    			hover: hover
    		};

    		for (i = 0, ilen = elementOptions.length; i < ilen; ++i) {
    			key = elementOptions[i];
    			readKey = hover ? 'hover' + key.charAt(0).toUpperCase() + key.slice(1) : key;
    			values[key] = resolve([
    				custom[readKey],
    				datasetOpts[readKey],
    				options[readKey]
    			], context);
    		}

    		return values;
    	},

    	/**
    	 * @private
    	 */
    	_resolveDataElementOptions: function(element, index) {
    		var me = this;
    		var custom = element && element.custom;
    		var cached = me._cachedDataOpts;
    		if (cached && !custom) {
    			return cached;
    		}
    		var chart = me.chart;
    		var datasetOpts = me._config;
    		var options = chart.options.elements[me.dataElementType.prototype._type] || {};
    		var elementOptions = me._dataElementOptions;
    		var values = {};

    		// Scriptable options
    		var context = {
    			chart: chart,
    			dataIndex: index,
    			dataset: me.getDataset(),
    			datasetIndex: me.index
    		};

    		// `resolve` sets cacheable to `false` if any option is indexed or scripted
    		var info = {cacheable: !custom};

    		var keys, i, ilen, key;

    		custom = custom || {};

    		if (helpers$1.isArray(elementOptions)) {
    			for (i = 0, ilen = elementOptions.length; i < ilen; ++i) {
    				key = elementOptions[i];
    				values[key] = resolve([
    					custom[key],
    					datasetOpts[key],
    					options[key]
    				], context, index, info);
    			}
    		} else {
    			keys = Object.keys(elementOptions);
    			for (i = 0, ilen = keys.length; i < ilen; ++i) {
    				key = keys[i];
    				values[key] = resolve([
    					custom[key],
    					datasetOpts[elementOptions[key]],
    					datasetOpts[key],
    					options[key]
    				], context, index, info);
    			}
    		}

    		if (info.cacheable) {
    			me._cachedDataOpts = Object.freeze(values);
    		}

    		return values;
    	},

    	removeHoverStyle: function(element) {
    		helpers$1.merge(element._model, element.$previousStyle || {});
    		delete element.$previousStyle;
    	},

    	setHoverStyle: function(element) {
    		var dataset = this.chart.data.datasets[element._datasetIndex];
    		var index = element._index;
    		var custom = element.custom || {};
    		var model = element._model;
    		var getHoverColor = helpers$1.getHoverColor;

    		element.$previousStyle = {
    			backgroundColor: model.backgroundColor,
    			borderColor: model.borderColor,
    			borderWidth: model.borderWidth
    		};

    		model.backgroundColor = resolve([custom.hoverBackgroundColor, dataset.hoverBackgroundColor, getHoverColor(model.backgroundColor)], undefined, index);
    		model.borderColor = resolve([custom.hoverBorderColor, dataset.hoverBorderColor, getHoverColor(model.borderColor)], undefined, index);
    		model.borderWidth = resolve([custom.hoverBorderWidth, dataset.hoverBorderWidth, model.borderWidth], undefined, index);
    	},

    	/**
    	 * @private
    	 */
    	_removeDatasetHoverStyle: function() {
    		var element = this.getMeta().dataset;

    		if (element) {
    			this.removeHoverStyle(element);
    		}
    	},

    	/**
    	 * @private
    	 */
    	_setDatasetHoverStyle: function() {
    		var element = this.getMeta().dataset;
    		var prev = {};
    		var i, ilen, key, keys, hoverOptions, model;

    		if (!element) {
    			return;
    		}

    		model = element._model;
    		hoverOptions = this._resolveDatasetElementOptions(element, true);

    		keys = Object.keys(hoverOptions);
    		for (i = 0, ilen = keys.length; i < ilen; ++i) {
    			key = keys[i];
    			prev[key] = model[key];
    			model[key] = hoverOptions[key];
    		}

    		element.$previousStyle = prev;
    	},

    	/**
    	 * @private
    	 */
    	resyncElements: function() {
    		var me = this;
    		var meta = me.getMeta();
    		var data = me.getDataset().data;
    		var numMeta = meta.data.length;
    		var numData = data.length;

    		if (numData < numMeta) {
    			meta.data.splice(numData, numMeta - numData);
    		} else if (numData > numMeta) {
    			me.insertElements(numMeta, numData - numMeta);
    		}
    	},

    	/**
    	 * @private
    	 */
    	insertElements: function(start, count) {
    		for (var i = 0; i < count; ++i) {
    			this.addElementAndReset(start + i);
    		}
    	},

    	/**
    	 * @private
    	 */
    	onDataPush: function() {
    		var count = arguments.length;
    		this.insertElements(this.getDataset().data.length - count, count);
    	},

    	/**
    	 * @private
    	 */
    	onDataPop: function() {
    		this.getMeta().data.pop();
    	},

    	/**
    	 * @private
    	 */
    	onDataShift: function() {
    		this.getMeta().data.shift();
    	},

    	/**
    	 * @private
    	 */
    	onDataSplice: function(start, count) {
    		this.getMeta().data.splice(start, count);
    		this.insertElements(start, arguments.length - 2);
    	},

    	/**
    	 * @private
    	 */
    	onDataUnshift: function() {
    		this.insertElements(0, arguments.length);
    	}
    });

    DatasetController.extend = helpers$1.inherits;

    var core_datasetController = DatasetController;

    var TAU = Math.PI * 2;

    core_defaults._set('global', {
    	elements: {
    		arc: {
    			backgroundColor: core_defaults.global.defaultColor,
    			borderColor: '#fff',
    			borderWidth: 2,
    			borderAlign: 'center'
    		}
    	}
    });

    function clipArc(ctx, arc) {
    	var startAngle = arc.startAngle;
    	var endAngle = arc.endAngle;
    	var pixelMargin = arc.pixelMargin;
    	var angleMargin = pixelMargin / arc.outerRadius;
    	var x = arc.x;
    	var y = arc.y;

    	// Draw an inner border by cliping the arc and drawing a double-width border
    	// Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders
    	ctx.beginPath();
    	ctx.arc(x, y, arc.outerRadius, startAngle - angleMargin, endAngle + angleMargin);
    	if (arc.innerRadius > pixelMargin) {
    		angleMargin = pixelMargin / arc.innerRadius;
    		ctx.arc(x, y, arc.innerRadius - pixelMargin, endAngle + angleMargin, startAngle - angleMargin, true);
    	} else {
    		ctx.arc(x, y, pixelMargin, endAngle + Math.PI / 2, startAngle - Math.PI / 2);
    	}
    	ctx.closePath();
    	ctx.clip();
    }

    function drawFullCircleBorders(ctx, vm, arc, inner) {
    	var endAngle = arc.endAngle;
    	var i;

    	if (inner) {
    		arc.endAngle = arc.startAngle + TAU;
    		clipArc(ctx, arc);
    		arc.endAngle = endAngle;
    		if (arc.endAngle === arc.startAngle && arc.fullCircles) {
    			arc.endAngle += TAU;
    			arc.fullCircles--;
    		}
    	}

    	ctx.beginPath();
    	ctx.arc(arc.x, arc.y, arc.innerRadius, arc.startAngle + TAU, arc.startAngle, true);
    	for (i = 0; i < arc.fullCircles; ++i) {
    		ctx.stroke();
    	}

    	ctx.beginPath();
    	ctx.arc(arc.x, arc.y, vm.outerRadius, arc.startAngle, arc.startAngle + TAU);
    	for (i = 0; i < arc.fullCircles; ++i) {
    		ctx.stroke();
    	}
    }

    function drawBorder(ctx, vm, arc) {
    	var inner = vm.borderAlign === 'inner';

    	if (inner) {
    		ctx.lineWidth = vm.borderWidth * 2;
    		ctx.lineJoin = 'round';
    	} else {
    		ctx.lineWidth = vm.borderWidth;
    		ctx.lineJoin = 'bevel';
    	}

    	if (arc.fullCircles) {
    		drawFullCircleBorders(ctx, vm, arc, inner);
    	}

    	if (inner) {
    		clipArc(ctx, arc);
    	}

    	ctx.beginPath();
    	ctx.arc(arc.x, arc.y, vm.outerRadius, arc.startAngle, arc.endAngle);
    	ctx.arc(arc.x, arc.y, arc.innerRadius, arc.endAngle, arc.startAngle, true);
    	ctx.closePath();
    	ctx.stroke();
    }

    var element_arc = core_element.extend({
    	_type: 'arc',

    	inLabelRange: function(mouseX) {
    		var vm = this._view;

    		if (vm) {
    			return (Math.pow(mouseX - vm.x, 2) < Math.pow(vm.radius + vm.hoverRadius, 2));
    		}
    		return false;
    	},

    	inRange: function(chartX, chartY) {
    		var vm = this._view;

    		if (vm) {
    			var pointRelativePosition = helpers$1.getAngleFromPoint(vm, {x: chartX, y: chartY});
    			var angle = pointRelativePosition.angle;
    			var distance = pointRelativePosition.distance;

    			// Sanitise angle range
    			var startAngle = vm.startAngle;
    			var endAngle = vm.endAngle;
    			while (endAngle < startAngle) {
    				endAngle += TAU;
    			}
    			while (angle > endAngle) {
    				angle -= TAU;
    			}
    			while (angle < startAngle) {
    				angle += TAU;
    			}

    			// Check if within the range of the open/close angle
    			var betweenAngles = (angle >= startAngle && angle <= endAngle);
    			var withinRadius = (distance >= vm.innerRadius && distance <= vm.outerRadius);

    			return (betweenAngles && withinRadius);
    		}
    		return false;
    	},

    	getCenterPoint: function() {
    		var vm = this._view;
    		var halfAngle = (vm.startAngle + vm.endAngle) / 2;
    		var halfRadius = (vm.innerRadius + vm.outerRadius) / 2;
    		return {
    			x: vm.x + Math.cos(halfAngle) * halfRadius,
    			y: vm.y + Math.sin(halfAngle) * halfRadius
    		};
    	},

    	getArea: function() {
    		var vm = this._view;
    		return Math.PI * ((vm.endAngle - vm.startAngle) / (2 * Math.PI)) * (Math.pow(vm.outerRadius, 2) - Math.pow(vm.innerRadius, 2));
    	},

    	tooltipPosition: function() {
    		var vm = this._view;
    		var centreAngle = vm.startAngle + ((vm.endAngle - vm.startAngle) / 2);
    		var rangeFromCentre = (vm.outerRadius - vm.innerRadius) / 2 + vm.innerRadius;

    		return {
    			x: vm.x + (Math.cos(centreAngle) * rangeFromCentre),
    			y: vm.y + (Math.sin(centreAngle) * rangeFromCentre)
    		};
    	},

    	draw: function() {
    		var ctx = this._chart.ctx;
    		var vm = this._view;
    		var pixelMargin = (vm.borderAlign === 'inner') ? 0.33 : 0;
    		var arc = {
    			x: vm.x,
    			y: vm.y,
    			innerRadius: vm.innerRadius,
    			outerRadius: Math.max(vm.outerRadius - pixelMargin, 0),
    			pixelMargin: pixelMargin,
    			startAngle: vm.startAngle,
    			endAngle: vm.endAngle,
    			fullCircles: Math.floor(vm.circumference / TAU)
    		};
    		var i;

    		ctx.save();

    		ctx.fillStyle = vm.backgroundColor;
    		ctx.strokeStyle = vm.borderColor;

    		if (arc.fullCircles) {
    			arc.endAngle = arc.startAngle + TAU;
    			ctx.beginPath();
    			ctx.arc(arc.x, arc.y, arc.outerRadius, arc.startAngle, arc.endAngle);
    			ctx.arc(arc.x, arc.y, arc.innerRadius, arc.endAngle, arc.startAngle, true);
    			ctx.closePath();
    			for (i = 0; i < arc.fullCircles; ++i) {
    				ctx.fill();
    			}
    			arc.endAngle = arc.startAngle + vm.circumference % TAU;
    		}

    		ctx.beginPath();
    		ctx.arc(arc.x, arc.y, arc.outerRadius, arc.startAngle, arc.endAngle);
    		ctx.arc(arc.x, arc.y, arc.innerRadius, arc.endAngle, arc.startAngle, true);
    		ctx.closePath();
    		ctx.fill();

    		if (vm.borderWidth) {
    			drawBorder(ctx, vm, arc);
    		}

    		ctx.restore();
    	}
    });

    var valueOrDefault$1 = helpers$1.valueOrDefault;

    var defaultColor = core_defaults.global.defaultColor;

    core_defaults._set('global', {
    	elements: {
    		line: {
    			tension: 0.4,
    			backgroundColor: defaultColor,
    			borderWidth: 3,
    			borderColor: defaultColor,
    			borderCapStyle: 'butt',
    			borderDash: [],
    			borderDashOffset: 0.0,
    			borderJoinStyle: 'miter',
    			capBezierPoints: true,
    			fill: true, // do we fill in the area between the line and its base axis
    		}
    	}
    });

    var element_line = core_element.extend({
    	_type: 'line',

    	draw: function() {
    		var me = this;
    		var vm = me._view;
    		var ctx = me._chart.ctx;
    		var spanGaps = vm.spanGaps;
    		var points = me._children.slice(); // clone array
    		var globalDefaults = core_defaults.global;
    		var globalOptionLineElements = globalDefaults.elements.line;
    		var lastDrawnIndex = -1;
    		var closePath = me._loop;
    		var index, previous, currentVM;

    		if (!points.length) {
    			return;
    		}

    		if (me._loop) {
    			for (index = 0; index < points.length; ++index) {
    				previous = helpers$1.previousItem(points, index);
    				// If the line has an open path, shift the point array
    				if (!points[index]._view.skip && previous._view.skip) {
    					points = points.slice(index).concat(points.slice(0, index));
    					closePath = spanGaps;
    					break;
    				}
    			}
    			// If the line has a close path, add the first point again
    			if (closePath) {
    				points.push(points[0]);
    			}
    		}

    		ctx.save();

    		// Stroke Line Options
    		ctx.lineCap = vm.borderCapStyle || globalOptionLineElements.borderCapStyle;

    		// IE 9 and 10 do not support line dash
    		if (ctx.setLineDash) {
    			ctx.setLineDash(vm.borderDash || globalOptionLineElements.borderDash);
    		}

    		ctx.lineDashOffset = valueOrDefault$1(vm.borderDashOffset, globalOptionLineElements.borderDashOffset);
    		ctx.lineJoin = vm.borderJoinStyle || globalOptionLineElements.borderJoinStyle;
    		ctx.lineWidth = valueOrDefault$1(vm.borderWidth, globalOptionLineElements.borderWidth);
    		ctx.strokeStyle = vm.borderColor || globalDefaults.defaultColor;

    		// Stroke Line
    		ctx.beginPath();

    		// First point moves to it's starting position no matter what
    		currentVM = points[0]._view;
    		if (!currentVM.skip) {
    			ctx.moveTo(currentVM.x, currentVM.y);
    			lastDrawnIndex = 0;
    		}

    		for (index = 1; index < points.length; ++index) {
    			currentVM = points[index]._view;
    			previous = lastDrawnIndex === -1 ? helpers$1.previousItem(points, index) : points[lastDrawnIndex];

    			if (!currentVM.skip) {
    				if ((lastDrawnIndex !== (index - 1) && !spanGaps) || lastDrawnIndex === -1) {
    					// There was a gap and this is the first point after the gap
    					ctx.moveTo(currentVM.x, currentVM.y);
    				} else {
    					// Line to next point
    					helpers$1.canvas.lineTo(ctx, previous._view, currentVM);
    				}
    				lastDrawnIndex = index;
    			}
    		}

    		if (closePath) {
    			ctx.closePath();
    		}

    		ctx.stroke();
    		ctx.restore();
    	}
    });

    var valueOrDefault$2 = helpers$1.valueOrDefault;

    var defaultColor$1 = core_defaults.global.defaultColor;

    core_defaults._set('global', {
    	elements: {
    		point: {
    			radius: 3,
    			pointStyle: 'circle',
    			backgroundColor: defaultColor$1,
    			borderColor: defaultColor$1,
    			borderWidth: 1,
    			// Hover
    			hitRadius: 1,
    			hoverRadius: 4,
    			hoverBorderWidth: 1
    		}
    	}
    });

    function xRange(mouseX) {
    	var vm = this._view;
    	return vm ? (Math.abs(mouseX - vm.x) < vm.radius + vm.hitRadius) : false;
    }

    function yRange(mouseY) {
    	var vm = this._view;
    	return vm ? (Math.abs(mouseY - vm.y) < vm.radius + vm.hitRadius) : false;
    }

    var element_point = core_element.extend({
    	_type: 'point',

    	inRange: function(mouseX, mouseY) {
    		var vm = this._view;
    		return vm ? ((Math.pow(mouseX - vm.x, 2) + Math.pow(mouseY - vm.y, 2)) < Math.pow(vm.hitRadius + vm.radius, 2)) : false;
    	},

    	inLabelRange: xRange,
    	inXRange: xRange,
    	inYRange: yRange,

    	getCenterPoint: function() {
    		var vm = this._view;
    		return {
    			x: vm.x,
    			y: vm.y
    		};
    	},

    	getArea: function() {
    		return Math.PI * Math.pow(this._view.radius, 2);
    	},

    	tooltipPosition: function() {
    		var vm = this._view;
    		return {
    			x: vm.x,
    			y: vm.y,
    			padding: vm.radius + vm.borderWidth
    		};
    	},

    	draw: function(chartArea) {
    		var vm = this._view;
    		var ctx = this._chart.ctx;
    		var pointStyle = vm.pointStyle;
    		var rotation = vm.rotation;
    		var radius = vm.radius;
    		var x = vm.x;
    		var y = vm.y;
    		var globalDefaults = core_defaults.global;
    		var defaultColor = globalDefaults.defaultColor; // eslint-disable-line no-shadow

    		if (vm.skip) {
    			return;
    		}

    		// Clipping for Points.
    		if (chartArea === undefined || helpers$1.canvas._isPointInArea(vm, chartArea)) {
    			ctx.strokeStyle = vm.borderColor || defaultColor;
    			ctx.lineWidth = valueOrDefault$2(vm.borderWidth, globalDefaults.elements.point.borderWidth);
    			ctx.fillStyle = vm.backgroundColor || defaultColor;
    			helpers$1.canvas.drawPoint(ctx, pointStyle, radius, x, y, rotation);
    		}
    	}
    });

    var defaultColor$2 = core_defaults.global.defaultColor;

    core_defaults._set('global', {
    	elements: {
    		rectangle: {
    			backgroundColor: defaultColor$2,
    			borderColor: defaultColor$2,
    			borderSkipped: 'bottom',
    			borderWidth: 0
    		}
    	}
    });

    function isVertical(vm) {
    	return vm && vm.width !== undefined;
    }

    /**
     * Helper function to get the bounds of the bar regardless of the orientation
     * @param bar {Chart.Element.Rectangle} the bar
     * @return {Bounds} bounds of the bar
     * @private
     */
    function getBarBounds(vm) {
    	var x1, x2, y1, y2, half;

    	if (isVertical(vm)) {
    		half = vm.width / 2;
    		x1 = vm.x - half;
    		x2 = vm.x + half;
    		y1 = Math.min(vm.y, vm.base);
    		y2 = Math.max(vm.y, vm.base);
    	} else {
    		half = vm.height / 2;
    		x1 = Math.min(vm.x, vm.base);
    		x2 = Math.max(vm.x, vm.base);
    		y1 = vm.y - half;
    		y2 = vm.y + half;
    	}

    	return {
    		left: x1,
    		top: y1,
    		right: x2,
    		bottom: y2
    	};
    }

    function swap(orig, v1, v2) {
    	return orig === v1 ? v2 : orig === v2 ? v1 : orig;
    }

    function parseBorderSkipped(vm) {
    	var edge = vm.borderSkipped;
    	var res = {};

    	if (!edge) {
    		return res;
    	}

    	if (vm.horizontal) {
    		if (vm.base > vm.x) {
    			edge = swap(edge, 'left', 'right');
    		}
    	} else if (vm.base < vm.y) {
    		edge = swap(edge, 'bottom', 'top');
    	}

    	res[edge] = true;
    	return res;
    }

    function parseBorderWidth(vm, maxW, maxH) {
    	var value = vm.borderWidth;
    	var skip = parseBorderSkipped(vm);
    	var t, r, b, l;

    	if (helpers$1.isObject(value)) {
    		t = +value.top || 0;
    		r = +value.right || 0;
    		b = +value.bottom || 0;
    		l = +value.left || 0;
    	} else {
    		t = r = b = l = +value || 0;
    	}

    	return {
    		t: skip.top || (t < 0) ? 0 : t > maxH ? maxH : t,
    		r: skip.right || (r < 0) ? 0 : r > maxW ? maxW : r,
    		b: skip.bottom || (b < 0) ? 0 : b > maxH ? maxH : b,
    		l: skip.left || (l < 0) ? 0 : l > maxW ? maxW : l
    	};
    }

    function boundingRects(vm) {
    	var bounds = getBarBounds(vm);
    	var width = bounds.right - bounds.left;
    	var height = bounds.bottom - bounds.top;
    	var border = parseBorderWidth(vm, width / 2, height / 2);

    	return {
    		outer: {
    			x: bounds.left,
    			y: bounds.top,
    			w: width,
    			h: height
    		},
    		inner: {
    			x: bounds.left + border.l,
    			y: bounds.top + border.t,
    			w: width - border.l - border.r,
    			h: height - border.t - border.b
    		}
    	};
    }

    function inRange(vm, x, y) {
    	var skipX = x === null;
    	var skipY = y === null;
    	var bounds = !vm || (skipX && skipY) ? false : getBarBounds(vm);

    	return bounds
    		&& (skipX || x >= bounds.left && x <= bounds.right)
    		&& (skipY || y >= bounds.top && y <= bounds.bottom);
    }

    var element_rectangle = core_element.extend({
    	_type: 'rectangle',

    	draw: function() {
    		var ctx = this._chart.ctx;
    		var vm = this._view;
    		var rects = boundingRects(vm);
    		var outer = rects.outer;
    		var inner = rects.inner;

    		ctx.fillStyle = vm.backgroundColor;
    		ctx.fillRect(outer.x, outer.y, outer.w, outer.h);

    		if (outer.w === inner.w && outer.h === inner.h) {
    			return;
    		}

    		ctx.save();
    		ctx.beginPath();
    		ctx.rect(outer.x, outer.y, outer.w, outer.h);
    		ctx.clip();
    		ctx.fillStyle = vm.borderColor;
    		ctx.rect(inner.x, inner.y, inner.w, inner.h);
    		ctx.fill('evenodd');
    		ctx.restore();
    	},

    	height: function() {
    		var vm = this._view;
    		return vm.base - vm.y;
    	},

    	inRange: function(mouseX, mouseY) {
    		return inRange(this._view, mouseX, mouseY);
    	},

    	inLabelRange: function(mouseX, mouseY) {
    		var vm = this._view;
    		return isVertical(vm)
    			? inRange(vm, mouseX, null)
    			: inRange(vm, null, mouseY);
    	},

    	inXRange: function(mouseX) {
    		return inRange(this._view, mouseX, null);
    	},

    	inYRange: function(mouseY) {
    		return inRange(this._view, null, mouseY);
    	},

    	getCenterPoint: function() {
    		var vm = this._view;
    		var x, y;
    		if (isVertical(vm)) {
    			x = vm.x;
    			y = (vm.y + vm.base) / 2;
    		} else {
    			x = (vm.x + vm.base) / 2;
    			y = vm.y;
    		}

    		return {x: x, y: y};
    	},

    	getArea: function() {
    		var vm = this._view;

    		return isVertical(vm)
    			? vm.width * Math.abs(vm.y - vm.base)
    			: vm.height * Math.abs(vm.x - vm.base);
    	},

    	tooltipPosition: function() {
    		var vm = this._view;
    		return {
    			x: vm.x,
    			y: vm.y
    		};
    	}
    });

    var elements = {};
    var Arc = element_arc;
    var Line = element_line;
    var Point = element_point;
    var Rectangle = element_rectangle;
    elements.Arc = Arc;
    elements.Line = Line;
    elements.Point = Point;
    elements.Rectangle = Rectangle;

    var deprecated = helpers$1._deprecated;
    var valueOrDefault$3 = helpers$1.valueOrDefault;

    core_defaults._set('bar', {
    	hover: {
    		mode: 'label'
    	},

    	scales: {
    		xAxes: [{
    			type: 'category',
    			offset: true,
    			gridLines: {
    				offsetGridLines: true
    			}
    		}],

    		yAxes: [{
    			type: 'linear'
    		}]
    	}
    });

    core_defaults._set('global', {
    	datasets: {
    		bar: {
    			categoryPercentage: 0.8,
    			barPercentage: 0.9
    		}
    	}
    });

    /**
     * Computes the "optimal" sample size to maintain bars equally sized while preventing overlap.
     * @private
     */
    function computeMinSampleSize(scale, pixels) {
    	var min = scale._length;
    	var prev, curr, i, ilen;

    	for (i = 1, ilen = pixels.length; i < ilen; ++i) {
    		min = Math.min(min, Math.abs(pixels[i] - pixels[i - 1]));
    	}

    	for (i = 0, ilen = scale.getTicks().length; i < ilen; ++i) {
    		curr = scale.getPixelForTick(i);
    		min = i > 0 ? Math.min(min, Math.abs(curr - prev)) : min;
    		prev = curr;
    	}

    	return min;
    }

    /**
     * Computes an "ideal" category based on the absolute bar thickness or, if undefined or null,
     * uses the smallest interval (see computeMinSampleSize) that prevents bar overlapping. This
     * mode currently always generates bars equally sized (until we introduce scriptable options?).
     * @private
     */
    function computeFitCategoryTraits(index, ruler, options) {
    	var thickness = options.barThickness;
    	var count = ruler.stackCount;
    	var curr = ruler.pixels[index];
    	var min = helpers$1.isNullOrUndef(thickness)
    		? computeMinSampleSize(ruler.scale, ruler.pixels)
    		: -1;
    	var size, ratio;

    	if (helpers$1.isNullOrUndef(thickness)) {
    		size = min * options.categoryPercentage;
    		ratio = options.barPercentage;
    	} else {
    		// When bar thickness is enforced, category and bar percentages are ignored.
    		// Note(SB): we could add support for relative bar thickness (e.g. barThickness: '50%')
    		// and deprecate barPercentage since this value is ignored when thickness is absolute.
    		size = thickness * count;
    		ratio = 1;
    	}

    	return {
    		chunk: size / count,
    		ratio: ratio,
    		start: curr - (size / 2)
    	};
    }

    /**
     * Computes an "optimal" category that globally arranges bars side by side (no gap when
     * percentage options are 1), based on the previous and following categories. This mode
     * generates bars with different widths when data are not evenly spaced.
     * @private
     */
    function computeFlexCategoryTraits(index, ruler, options) {
    	var pixels = ruler.pixels;
    	var curr = pixels[index];
    	var prev = index > 0 ? pixels[index - 1] : null;
    	var next = index < pixels.length - 1 ? pixels[index + 1] : null;
    	var percent = options.categoryPercentage;
    	var start, size;

    	if (prev === null) {
    		// first data: its size is double based on the next point or,
    		// if it's also the last data, we use the scale size.
    		prev = curr - (next === null ? ruler.end - ruler.start : next - curr);
    	}

    	if (next === null) {
    		// last data: its size is also double based on the previous point.
    		next = curr + curr - prev;
    	}

    	start = curr - (curr - Math.min(prev, next)) / 2 * percent;
    	size = Math.abs(next - prev) / 2 * percent;

    	return {
    		chunk: size / ruler.stackCount,
    		ratio: options.barPercentage,
    		start: start
    	};
    }

    var controller_bar = core_datasetController.extend({

    	dataElementType: elements.Rectangle,

    	/**
    	 * @private
    	 */
    	_dataElementOptions: [
    		'backgroundColor',
    		'borderColor',
    		'borderSkipped',
    		'borderWidth',
    		'barPercentage',
    		'barThickness',
    		'categoryPercentage',
    		'maxBarThickness',
    		'minBarLength'
    	],

    	initialize: function() {
    		var me = this;
    		var meta, scaleOpts;

    		core_datasetController.prototype.initialize.apply(me, arguments);

    		meta = me.getMeta();
    		meta.stack = me.getDataset().stack;
    		meta.bar = true;

    		scaleOpts = me._getIndexScale().options;
    		deprecated('bar chart', scaleOpts.barPercentage, 'scales.[x/y]Axes.barPercentage', 'dataset.barPercentage');
    		deprecated('bar chart', scaleOpts.barThickness, 'scales.[x/y]Axes.barThickness', 'dataset.barThickness');
    		deprecated('bar chart', scaleOpts.categoryPercentage, 'scales.[x/y]Axes.categoryPercentage', 'dataset.categoryPercentage');
    		deprecated('bar chart', me._getValueScale().options.minBarLength, 'scales.[x/y]Axes.minBarLength', 'dataset.minBarLength');
    		deprecated('bar chart', scaleOpts.maxBarThickness, 'scales.[x/y]Axes.maxBarThickness', 'dataset.maxBarThickness');
    	},

    	update: function(reset) {
    		var me = this;
    		var rects = me.getMeta().data;
    		var i, ilen;

    		me._ruler = me.getRuler();

    		for (i = 0, ilen = rects.length; i < ilen; ++i) {
    			me.updateElement(rects[i], i, reset);
    		}
    	},

    	updateElement: function(rectangle, index, reset) {
    		var me = this;
    		var meta = me.getMeta();
    		var dataset = me.getDataset();
    		var options = me._resolveDataElementOptions(rectangle, index);

    		rectangle._xScale = me.getScaleForId(meta.xAxisID);
    		rectangle._yScale = me.getScaleForId(meta.yAxisID);
    		rectangle._datasetIndex = me.index;
    		rectangle._index = index;
    		rectangle._model = {
    			backgroundColor: options.backgroundColor,
    			borderColor: options.borderColor,
    			borderSkipped: options.borderSkipped,
    			borderWidth: options.borderWidth,
    			datasetLabel: dataset.label,
    			label: me.chart.data.labels[index]
    		};

    		if (helpers$1.isArray(dataset.data[index])) {
    			rectangle._model.borderSkipped = null;
    		}

    		me._updateElementGeometry(rectangle, index, reset, options);

    		rectangle.pivot();
    	},

    	/**
    	 * @private
    	 */
    	_updateElementGeometry: function(rectangle, index, reset, options) {
    		var me = this;
    		var model = rectangle._model;
    		var vscale = me._getValueScale();
    		var base = vscale.getBasePixel();
    		var horizontal = vscale.isHorizontal();
    		var ruler = me._ruler || me.getRuler();
    		var vpixels = me.calculateBarValuePixels(me.index, index, options);
    		var ipixels = me.calculateBarIndexPixels(me.index, index, ruler, options);

    		model.horizontal = horizontal;
    		model.base = reset ? base : vpixels.base;
    		model.x = horizontal ? reset ? base : vpixels.head : ipixels.center;
    		model.y = horizontal ? ipixels.center : reset ? base : vpixels.head;
    		model.height = horizontal ? ipixels.size : undefined;
    		model.width = horizontal ? undefined : ipixels.size;
    	},

    	/**
    	 * Returns the stacks based on groups and bar visibility.
    	 * @param {number} [last] - The dataset index
    	 * @returns {string[]} The list of stack IDs
    	 * @private
    	 */
    	_getStacks: function(last) {
    		var me = this;
    		var scale = me._getIndexScale();
    		var metasets = scale._getMatchingVisibleMetas(me._type);
    		var stacked = scale.options.stacked;
    		var ilen = metasets.length;
    		var stacks = [];
    		var i, meta;

    		for (i = 0; i < ilen; ++i) {
    			meta = metasets[i];
    			// stacked   | meta.stack
    			//           | found | not found | undefined
    			// false     |   x   |     x     |     x
    			// true      |       |     x     |
    			// undefined |       |     x     |     x
    			if (stacked === false || stacks.indexOf(meta.stack) === -1 ||
    				(stacked === undefined && meta.stack === undefined)) {
    				stacks.push(meta.stack);
    			}
    			if (meta.index === last) {
    				break;
    			}
    		}

    		return stacks;
    	},

    	/**
    	 * Returns the effective number of stacks based on groups and bar visibility.
    	 * @private
    	 */
    	getStackCount: function() {
    		return this._getStacks().length;
    	},

    	/**
    	 * Returns the stack index for the given dataset based on groups and bar visibility.
    	 * @param {number} [datasetIndex] - The dataset index
    	 * @param {string} [name] - The stack name to find
    	 * @returns {number} The stack index
    	 * @private
    	 */
    	getStackIndex: function(datasetIndex, name) {
    		var stacks = this._getStacks(datasetIndex);
    		var index = (name !== undefined)
    			? stacks.indexOf(name)
    			: -1; // indexOf returns -1 if element is not present

    		return (index === -1)
    			? stacks.length - 1
    			: index;
    	},

    	/**
    	 * @private
    	 */
    	getRuler: function() {
    		var me = this;
    		var scale = me._getIndexScale();
    		var pixels = [];
    		var i, ilen;

    		for (i = 0, ilen = me.getMeta().data.length; i < ilen; ++i) {
    			pixels.push(scale.getPixelForValue(null, i, me.index));
    		}

    		return {
    			pixels: pixels,
    			start: scale._startPixel,
    			end: scale._endPixel,
    			stackCount: me.getStackCount(),
    			scale: scale
    		};
    	},

    	/**
    	 * Note: pixel values are not clamped to the scale area.
    	 * @private
    	 */
    	calculateBarValuePixels: function(datasetIndex, index, options) {
    		var me = this;
    		var chart = me.chart;
    		var scale = me._getValueScale();
    		var isHorizontal = scale.isHorizontal();
    		var datasets = chart.data.datasets;
    		var metasets = scale._getMatchingVisibleMetas(me._type);
    		var value = scale._parseValue(datasets[datasetIndex].data[index]);
    		var minBarLength = options.minBarLength;
    		var stacked = scale.options.stacked;
    		var stack = me.getMeta().stack;
    		var start = value.start === undefined ? 0 : value.max >= 0 && value.min >= 0 ? value.min : value.max;
    		var length = value.start === undefined ? value.end : value.max >= 0 && value.min >= 0 ? value.max - value.min : value.min - value.max;
    		var ilen = metasets.length;
    		var i, imeta, ivalue, base, head, size, stackLength;

    		if (stacked || (stacked === undefined && stack !== undefined)) {
    			for (i = 0; i < ilen; ++i) {
    				imeta = metasets[i];

    				if (imeta.index === datasetIndex) {
    					break;
    				}

    				if (imeta.stack === stack) {
    					stackLength = scale._parseValue(datasets[imeta.index].data[index]);
    					ivalue = stackLength.start === undefined ? stackLength.end : stackLength.min >= 0 && stackLength.max >= 0 ? stackLength.max : stackLength.min;

    					if ((value.min < 0 && ivalue < 0) || (value.max >= 0 && ivalue > 0)) {
    						start += ivalue;
    					}
    				}
    			}
    		}

    		base = scale.getPixelForValue(start);
    		head = scale.getPixelForValue(start + length);
    		size = head - base;

    		if (minBarLength !== undefined && Math.abs(size) < minBarLength) {
    			size = minBarLength;
    			if (length >= 0 && !isHorizontal || length < 0 && isHorizontal) {
    				head = base - minBarLength;
    			} else {
    				head = base + minBarLength;
    			}
    		}

    		return {
    			size: size,
    			base: base,
    			head: head,
    			center: head + size / 2
    		};
    	},

    	/**
    	 * @private
    	 */
    	calculateBarIndexPixels: function(datasetIndex, index, ruler, options) {
    		var me = this;
    		var range = options.barThickness === 'flex'
    			? computeFlexCategoryTraits(index, ruler, options)
    			: computeFitCategoryTraits(index, ruler, options);

    		var stackIndex = me.getStackIndex(datasetIndex, me.getMeta().stack);
    		var center = range.start + (range.chunk * stackIndex) + (range.chunk / 2);
    		var size = Math.min(
    			valueOrDefault$3(options.maxBarThickness, Infinity),
    			range.chunk * range.ratio);

    		return {
    			base: center - size / 2,
    			head: center + size / 2,
    			center: center,
    			size: size
    		};
    	},

    	draw: function() {
    		var me = this;
    		var chart = me.chart;
    		var scale = me._getValueScale();
    		var rects = me.getMeta().data;
    		var dataset = me.getDataset();
    		var ilen = rects.length;
    		var i = 0;

    		helpers$1.canvas.clipArea(chart.ctx, chart.chartArea);

    		for (; i < ilen; ++i) {
    			var val = scale._parseValue(dataset.data[i]);
    			if (!isNaN(val.min) && !isNaN(val.max)) {
    				rects[i].draw();
    			}
    		}

    		helpers$1.canvas.unclipArea(chart.ctx);
    	},

    	/**
    	 * @private
    	 */
    	_resolveDataElementOptions: function() {
    		var me = this;
    		var values = helpers$1.extend({}, core_datasetController.prototype._resolveDataElementOptions.apply(me, arguments));
    		var indexOpts = me._getIndexScale().options;
    		var valueOpts = me._getValueScale().options;

    		values.barPercentage = valueOrDefault$3(indexOpts.barPercentage, values.barPercentage);
    		values.barThickness = valueOrDefault$3(indexOpts.barThickness, values.barThickness);
    		values.categoryPercentage = valueOrDefault$3(indexOpts.categoryPercentage, values.categoryPercentage);
    		values.maxBarThickness = valueOrDefault$3(indexOpts.maxBarThickness, values.maxBarThickness);
    		values.minBarLength = valueOrDefault$3(valueOpts.minBarLength, values.minBarLength);

    		return values;
    	}

    });

    var valueOrDefault$4 = helpers$1.valueOrDefault;
    var resolve$1 = helpers$1.options.resolve;

    core_defaults._set('bubble', {
    	hover: {
    		mode: 'single'
    	},

    	scales: {
    		xAxes: [{
    			type: 'linear', // bubble should probably use a linear scale by default
    			position: 'bottom',
    			id: 'x-axis-0' // need an ID so datasets can reference the scale
    		}],
    		yAxes: [{
    			type: 'linear',
    			position: 'left',
    			id: 'y-axis-0'
    		}]
    	},

    	tooltips: {
    		callbacks: {
    			title: function() {
    				// Title doesn't make sense for scatter since we format the data as a point
    				return '';
    			},
    			label: function(item, data) {
    				var datasetLabel = data.datasets[item.datasetIndex].label || '';
    				var dataPoint = data.datasets[item.datasetIndex].data[item.index];
    				return datasetLabel + ': (' + item.xLabel + ', ' + item.yLabel + ', ' + dataPoint.r + ')';
    			}
    		}
    	}
    });

    var controller_bubble = core_datasetController.extend({
    	/**
    	 * @protected
    	 */
    	dataElementType: elements.Point,

    	/**
    	 * @private
    	 */
    	_dataElementOptions: [
    		'backgroundColor',
    		'borderColor',
    		'borderWidth',
    		'hoverBackgroundColor',
    		'hoverBorderColor',
    		'hoverBorderWidth',
    		'hoverRadius',
    		'hitRadius',
    		'pointStyle',
    		'rotation'
    	],

    	/**
    	 * @protected
    	 */
    	update: function(reset) {
    		var me = this;
    		var meta = me.getMeta();
    		var points = meta.data;

    		// Update Points
    		helpers$1.each(points, function(point, index) {
    			me.updateElement(point, index, reset);
    		});
    	},

    	/**
    	 * @protected
    	 */
    	updateElement: function(point, index, reset) {
    		var me = this;
    		var meta = me.getMeta();
    		var custom = point.custom || {};
    		var xScale = me.getScaleForId(meta.xAxisID);
    		var yScale = me.getScaleForId(meta.yAxisID);
    		var options = me._resolveDataElementOptions(point, index);
    		var data = me.getDataset().data[index];
    		var dsIndex = me.index;

    		var x = reset ? xScale.getPixelForDecimal(0.5) : xScale.getPixelForValue(typeof data === 'object' ? data : NaN, index, dsIndex);
    		var y = reset ? yScale.getBasePixel() : yScale.getPixelForValue(data, index, dsIndex);

    		point._xScale = xScale;
    		point._yScale = yScale;
    		point._options = options;
    		point._datasetIndex = dsIndex;
    		point._index = index;
    		point._model = {
    			backgroundColor: options.backgroundColor,
    			borderColor: options.borderColor,
    			borderWidth: options.borderWidth,
    			hitRadius: options.hitRadius,
    			pointStyle: options.pointStyle,
    			rotation: options.rotation,
    			radius: reset ? 0 : options.radius,
    			skip: custom.skip || isNaN(x) || isNaN(y),
    			x: x,
    			y: y,
    		};

    		point.pivot();
    	},

    	/**
    	 * @protected
    	 */
    	setHoverStyle: function(point) {
    		var model = point._model;
    		var options = point._options;
    		var getHoverColor = helpers$1.getHoverColor;

    		point.$previousStyle = {
    			backgroundColor: model.backgroundColor,
    			borderColor: model.borderColor,
    			borderWidth: model.borderWidth,
    			radius: model.radius
    		};

    		model.backgroundColor = valueOrDefault$4(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));
    		model.borderColor = valueOrDefault$4(options.hoverBorderColor, getHoverColor(options.borderColor));
    		model.borderWidth = valueOrDefault$4(options.hoverBorderWidth, options.borderWidth);
    		model.radius = options.radius + options.hoverRadius;
    	},

    	/**
    	 * @private
    	 */
    	_resolveDataElementOptions: function(point, index) {
    		var me = this;
    		var chart = me.chart;
    		var dataset = me.getDataset();
    		var custom = point.custom || {};
    		var data = dataset.data[index] || {};
    		var values = core_datasetController.prototype._resolveDataElementOptions.apply(me, arguments);

    		// Scriptable options
    		var context = {
    			chart: chart,
    			dataIndex: index,
    			dataset: dataset,
    			datasetIndex: me.index
    		};

    		// In case values were cached (and thus frozen), we need to clone the values
    		if (me._cachedDataOpts === values) {
    			values = helpers$1.extend({}, values);
    		}

    		// Custom radius resolution
    		values.radius = resolve$1([
    			custom.radius,
    			data.r,
    			me._config.radius,
    			chart.options.elements.point.radius
    		], context, index);

    		return values;
    	}
    });

    var valueOrDefault$5 = helpers$1.valueOrDefault;

    var PI$1 = Math.PI;
    var DOUBLE_PI$1 = PI$1 * 2;
    var HALF_PI$1 = PI$1 / 2;

    core_defaults._set('doughnut', {
    	animation: {
    		// Boolean - Whether we animate the rotation of the Doughnut
    		animateRotate: true,
    		// Boolean - Whether we animate scaling the Doughnut from the centre
    		animateScale: false
    	},
    	hover: {
    		mode: 'single'
    	},
    	legendCallback: function(chart) {
    		var list = document.createElement('ul');
    		var data = chart.data;
    		var datasets = data.datasets;
    		var labels = data.labels;
    		var i, ilen, listItem, listItemSpan;

    		list.setAttribute('class', chart.id + '-legend');
    		if (datasets.length) {
    			for (i = 0, ilen = datasets[0].data.length; i < ilen; ++i) {
    				listItem = list.appendChild(document.createElement('li'));
    				listItemSpan = listItem.appendChild(document.createElement('span'));
    				listItemSpan.style.backgroundColor = datasets[0].backgroundColor[i];
    				if (labels[i]) {
    					listItem.appendChild(document.createTextNode(labels[i]));
    				}
    			}
    		}

    		return list.outerHTML;
    	},
    	legend: {
    		labels: {
    			generateLabels: function(chart) {
    				var data = chart.data;
    				if (data.labels.length && data.datasets.length) {
    					return data.labels.map(function(label, i) {
    						var meta = chart.getDatasetMeta(0);
    						var style = meta.controller.getStyle(i);

    						return {
    							text: label,
    							fillStyle: style.backgroundColor,
    							strokeStyle: style.borderColor,
    							lineWidth: style.borderWidth,
    							hidden: isNaN(data.datasets[0].data[i]) || meta.data[i].hidden,

    							// Extra data used for toggling the correct item
    							index: i
    						};
    					});
    				}
    				return [];
    			}
    		},

    		onClick: function(e, legendItem) {
    			var index = legendItem.index;
    			var chart = this.chart;
    			var i, ilen, meta;

    			for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {
    				meta = chart.getDatasetMeta(i);
    				// toggle visibility of index if exists
    				if (meta.data[index]) {
    					meta.data[index].hidden = !meta.data[index].hidden;
    				}
    			}

    			chart.update();
    		}
    	},

    	// The percentage of the chart that we cut out of the middle.
    	cutoutPercentage: 50,

    	// The rotation of the chart, where the first data arc begins.
    	rotation: -HALF_PI$1,

    	// The total circumference of the chart.
    	circumference: DOUBLE_PI$1,

    	// Need to override these to give a nice default
    	tooltips: {
    		callbacks: {
    			title: function() {
    				return '';
    			},
    			label: function(tooltipItem, data) {
    				var dataLabel = data.labels[tooltipItem.index];
    				var value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];

    				if (helpers$1.isArray(dataLabel)) {
    					// show value on first line of multiline label
    					// need to clone because we are changing the value
    					dataLabel = dataLabel.slice();
    					dataLabel[0] += value;
    				} else {
    					dataLabel += value;
    				}

    				return dataLabel;
    			}
    		}
    	}
    });

    var controller_doughnut = core_datasetController.extend({

    	dataElementType: elements.Arc,

    	linkScales: helpers$1.noop,

    	/**
    	 * @private
    	 */
    	_dataElementOptions: [
    		'backgroundColor',
    		'borderColor',
    		'borderWidth',
    		'borderAlign',
    		'hoverBackgroundColor',
    		'hoverBorderColor',
    		'hoverBorderWidth',
    	],

    	// Get index of the dataset in relation to the visible datasets. This allows determining the inner and outer radius correctly
    	getRingIndex: function(datasetIndex) {
    		var ringIndex = 0;

    		for (var j = 0; j < datasetIndex; ++j) {
    			if (this.chart.isDatasetVisible(j)) {
    				++ringIndex;
    			}
    		}

    		return ringIndex;
    	},

    	update: function(reset) {
    		var me = this;
    		var chart = me.chart;
    		var chartArea = chart.chartArea;
    		var opts = chart.options;
    		var ratioX = 1;
    		var ratioY = 1;
    		var offsetX = 0;
    		var offsetY = 0;
    		var meta = me.getMeta();
    		var arcs = meta.data;
    		var cutout = opts.cutoutPercentage / 100 || 0;
    		var circumference = opts.circumference;
    		var chartWeight = me._getRingWeight(me.index);
    		var maxWidth, maxHeight, i, ilen;

    		// If the chart's circumference isn't a full circle, calculate size as a ratio of the width/height of the arc
    		if (circumference < DOUBLE_PI$1) {
    			var startAngle = opts.rotation % DOUBLE_PI$1;
    			startAngle += startAngle >= PI$1 ? -DOUBLE_PI$1 : startAngle < -PI$1 ? DOUBLE_PI$1 : 0;
    			var endAngle = startAngle + circumference;
    			var startX = Math.cos(startAngle);
    			var startY = Math.sin(startAngle);
    			var endX = Math.cos(endAngle);
    			var endY = Math.sin(endAngle);
    			var contains0 = (startAngle <= 0 && endAngle >= 0) || endAngle >= DOUBLE_PI$1;
    			var contains90 = (startAngle <= HALF_PI$1 && endAngle >= HALF_PI$1) || endAngle >= DOUBLE_PI$1 + HALF_PI$1;
    			var contains180 = startAngle === -PI$1 || endAngle >= PI$1;
    			var contains270 = (startAngle <= -HALF_PI$1 && endAngle >= -HALF_PI$1) || endAngle >= PI$1 + HALF_PI$1;
    			var minX = contains180 ? -1 : Math.min(startX, startX * cutout, endX, endX * cutout);
    			var minY = contains270 ? -1 : Math.min(startY, startY * cutout, endY, endY * cutout);
    			var maxX = contains0 ? 1 : Math.max(startX, startX * cutout, endX, endX * cutout);
    			var maxY = contains90 ? 1 : Math.max(startY, startY * cutout, endY, endY * cutout);
    			ratioX = (maxX - minX) / 2;
    			ratioY = (maxY - minY) / 2;
    			offsetX = -(maxX + minX) / 2;
    			offsetY = -(maxY + minY) / 2;
    		}

    		for (i = 0, ilen = arcs.length; i < ilen; ++i) {
    			arcs[i]._options = me._resolveDataElementOptions(arcs[i], i);
    		}

    		chart.borderWidth = me.getMaxBorderWidth();
    		maxWidth = (chartArea.right - chartArea.left - chart.borderWidth) / ratioX;
    		maxHeight = (chartArea.bottom - chartArea.top - chart.borderWidth) / ratioY;
    		chart.outerRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);
    		chart.innerRadius = Math.max(chart.outerRadius * cutout, 0);
    		chart.radiusLength = (chart.outerRadius - chart.innerRadius) / (me._getVisibleDatasetWeightTotal() || 1);
    		chart.offsetX = offsetX * chart.outerRadius;
    		chart.offsetY = offsetY * chart.outerRadius;

    		meta.total = me.calculateTotal();

    		me.outerRadius = chart.outerRadius - chart.radiusLength * me._getRingWeightOffset(me.index);
    		me.innerRadius = Math.max(me.outerRadius - chart.radiusLength * chartWeight, 0);

    		for (i = 0, ilen = arcs.length; i < ilen; ++i) {
    			me.updateElement(arcs[i], i, reset);
    		}
    	},

    	updateElement: function(arc, index, reset) {
    		var me = this;
    		var chart = me.chart;
    		var chartArea = chart.chartArea;
    		var opts = chart.options;
    		var animationOpts = opts.animation;
    		var centerX = (chartArea.left + chartArea.right) / 2;
    		var centerY = (chartArea.top + chartArea.bottom) / 2;
    		var startAngle = opts.rotation; // non reset case handled later
    		var endAngle = opts.rotation; // non reset case handled later
    		var dataset = me.getDataset();
    		var circumference = reset && animationOpts.animateRotate ? 0 : arc.hidden ? 0 : me.calculateCircumference(dataset.data[index]) * (opts.circumference / DOUBLE_PI$1);
    		var innerRadius = reset && animationOpts.animateScale ? 0 : me.innerRadius;
    		var outerRadius = reset && animationOpts.animateScale ? 0 : me.outerRadius;
    		var options = arc._options || {};

    		helpers$1.extend(arc, {
    			// Utility
    			_datasetIndex: me.index,
    			_index: index,

    			// Desired view properties
    			_model: {
    				backgroundColor: options.backgroundColor,
    				borderColor: options.borderColor,
    				borderWidth: options.borderWidth,
    				borderAlign: options.borderAlign,
    				x: centerX + chart.offsetX,
    				y: centerY + chart.offsetY,
    				startAngle: startAngle,
    				endAngle: endAngle,
    				circumference: circumference,
    				outerRadius: outerRadius,
    				innerRadius: innerRadius,
    				label: helpers$1.valueAtIndexOrDefault(dataset.label, index, chart.data.labels[index])
    			}
    		});

    		var model = arc._model;

    		// Set correct angles if not resetting
    		if (!reset || !animationOpts.animateRotate) {
    			if (index === 0) {
    				model.startAngle = opts.rotation;
    			} else {
    				model.startAngle = me.getMeta().data[index - 1]._model.endAngle;
    			}

    			model.endAngle = model.startAngle + model.circumference;
    		}

    		arc.pivot();
    	},

    	calculateTotal: function() {
    		var dataset = this.getDataset();
    		var meta = this.getMeta();
    		var total = 0;
    		var value;

    		helpers$1.each(meta.data, function(element, index) {
    			value = dataset.data[index];
    			if (!isNaN(value) && !element.hidden) {
    				total += Math.abs(value);
    			}
    		});

    		/* if (total === 0) {
    			total = NaN;
    		}*/

    		return total;
    	},

    	calculateCircumference: function(value) {
    		var total = this.getMeta().total;
    		if (total > 0 && !isNaN(value)) {
    			return DOUBLE_PI$1 * (Math.abs(value) / total);
    		}
    		return 0;
    	},

    	// gets the max border or hover width to properly scale pie charts
    	getMaxBorderWidth: function(arcs) {
    		var me = this;
    		var max = 0;
    		var chart = me.chart;
    		var i, ilen, meta, arc, controller, options, borderWidth, hoverWidth;

    		if (!arcs) {
    			// Find the outmost visible dataset
    			for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {
    				if (chart.isDatasetVisible(i)) {
    					meta = chart.getDatasetMeta(i);
    					arcs = meta.data;
    					if (i !== me.index) {
    						controller = meta.controller;
    					}
    					break;
    				}
    			}
    		}

    		if (!arcs) {
    			return 0;
    		}

    		for (i = 0, ilen = arcs.length; i < ilen; ++i) {
    			arc = arcs[i];
    			if (controller) {
    				controller._configure();
    				options = controller._resolveDataElementOptions(arc, i);
    			} else {
    				options = arc._options;
    			}
    			if (options.borderAlign !== 'inner') {
    				borderWidth = options.borderWidth;
    				hoverWidth = options.hoverBorderWidth;

    				max = borderWidth > max ? borderWidth : max;
    				max = hoverWidth > max ? hoverWidth : max;
    			}
    		}
    		return max;
    	},

    	/**
    	 * @protected
    	 */
    	setHoverStyle: function(arc) {
    		var model = arc._model;
    		var options = arc._options;
    		var getHoverColor = helpers$1.getHoverColor;

    		arc.$previousStyle = {
    			backgroundColor: model.backgroundColor,
    			borderColor: model.borderColor,
    			borderWidth: model.borderWidth,
    		};

    		model.backgroundColor = valueOrDefault$5(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));
    		model.borderColor = valueOrDefault$5(options.hoverBorderColor, getHoverColor(options.borderColor));
    		model.borderWidth = valueOrDefault$5(options.hoverBorderWidth, options.borderWidth);
    	},

    	/**
    	 * Get radius length offset of the dataset in relation to the visible datasets weights. This allows determining the inner and outer radius correctly
    	 * @private
    	 */
    	_getRingWeightOffset: function(datasetIndex) {
    		var ringWeightOffset = 0;

    		for (var i = 0; i < datasetIndex; ++i) {
    			if (this.chart.isDatasetVisible(i)) {
    				ringWeightOffset += this._getRingWeight(i);
    			}
    		}

    		return ringWeightOffset;
    	},

    	/**
    	 * @private
    	 */
    	_getRingWeight: function(dataSetIndex) {
    		return Math.max(valueOrDefault$5(this.chart.data.datasets[dataSetIndex].weight, 1), 0);
    	},

    	/**
    	 * Returns the sum of all visibile data set weights.  This value can be 0.
    	 * @private
    	 */
    	_getVisibleDatasetWeightTotal: function() {
    		return this._getRingWeightOffset(this.chart.data.datasets.length);
    	}
    });

    core_defaults._set('horizontalBar', {
    	hover: {
    		mode: 'index',
    		axis: 'y'
    	},

    	scales: {
    		xAxes: [{
    			type: 'linear',
    			position: 'bottom'
    		}],

    		yAxes: [{
    			type: 'category',
    			position: 'left',
    			offset: true,
    			gridLines: {
    				offsetGridLines: true
    			}
    		}]
    	},

    	elements: {
    		rectangle: {
    			borderSkipped: 'left'
    		}
    	},

    	tooltips: {
    		mode: 'index',
    		axis: 'y'
    	}
    });

    core_defaults._set('global', {
    	datasets: {
    		horizontalBar: {
    			categoryPercentage: 0.8,
    			barPercentage: 0.9
    		}
    	}
    });

    var controller_horizontalBar = controller_bar.extend({
    	/**
    	 * @private
    	 */
    	_getValueScaleId: function() {
    		return this.getMeta().xAxisID;
    	},

    	/**
    	 * @private
    	 */
    	_getIndexScaleId: function() {
    		return this.getMeta().yAxisID;
    	}
    });

    var valueOrDefault$6 = helpers$1.valueOrDefault;
    var resolve$2 = helpers$1.options.resolve;
    var isPointInArea = helpers$1.canvas._isPointInArea;

    core_defaults._set('line', {
    	showLines: true,
    	spanGaps: false,

    	hover: {
    		mode: 'label'
    	},

    	scales: {
    		xAxes: [{
    			type: 'category',
    			id: 'x-axis-0'
    		}],
    		yAxes: [{
    			type: 'linear',
    			id: 'y-axis-0'
    		}]
    	}
    });

    function scaleClip(scale, halfBorderWidth) {
    	var tickOpts = scale && scale.options.ticks || {};
    	var reverse = tickOpts.reverse;
    	var min = tickOpts.min === undefined ? halfBorderWidth : 0;
    	var max = tickOpts.max === undefined ? halfBorderWidth : 0;
    	return {
    		start: reverse ? max : min,
    		end: reverse ? min : max
    	};
    }

    function defaultClip(xScale, yScale, borderWidth) {
    	var halfBorderWidth = borderWidth / 2;
    	var x = scaleClip(xScale, halfBorderWidth);
    	var y = scaleClip(yScale, halfBorderWidth);

    	return {
    		top: y.end,
    		right: x.end,
    		bottom: y.start,
    		left: x.start
    	};
    }

    function toClip(value) {
    	var t, r, b, l;

    	if (helpers$1.isObject(value)) {
    		t = value.top;
    		r = value.right;
    		b = value.bottom;
    		l = value.left;
    	} else {
    		t = r = b = l = value;
    	}

    	return {
    		top: t,
    		right: r,
    		bottom: b,
    		left: l
    	};
    }


    var controller_line = core_datasetController.extend({

    	datasetElementType: elements.Line,

    	dataElementType: elements.Point,

    	/**
    	 * @private
    	 */
    	_datasetElementOptions: [
    		'backgroundColor',
    		'borderCapStyle',
    		'borderColor',
    		'borderDash',
    		'borderDashOffset',
    		'borderJoinStyle',
    		'borderWidth',
    		'cubicInterpolationMode',
    		'fill'
    	],

    	/**
    	 * @private
    	 */
    	_dataElementOptions: {
    		backgroundColor: 'pointBackgroundColor',
    		borderColor: 'pointBorderColor',
    		borderWidth: 'pointBorderWidth',
    		hitRadius: 'pointHitRadius',
    		hoverBackgroundColor: 'pointHoverBackgroundColor',
    		hoverBorderColor: 'pointHoverBorderColor',
    		hoverBorderWidth: 'pointHoverBorderWidth',
    		hoverRadius: 'pointHoverRadius',
    		pointStyle: 'pointStyle',
    		radius: 'pointRadius',
    		rotation: 'pointRotation'
    	},

    	update: function(reset) {
    		var me = this;
    		var meta = me.getMeta();
    		var line = meta.dataset;
    		var points = meta.data || [];
    		var options = me.chart.options;
    		var config = me._config;
    		var showLine = me._showLine = valueOrDefault$6(config.showLine, options.showLines);
    		var i, ilen;

    		me._xScale = me.getScaleForId(meta.xAxisID);
    		me._yScale = me.getScaleForId(meta.yAxisID);

    		// Update Line
    		if (showLine) {
    			// Compatibility: If the properties are defined with only the old name, use those values
    			if (config.tension !== undefined && config.lineTension === undefined) {
    				config.lineTension = config.tension;
    			}

    			// Utility
    			line._scale = me._yScale;
    			line._datasetIndex = me.index;
    			// Data
    			line._children = points;
    			// Model
    			line._model = me._resolveDatasetElementOptions(line);

    			line.pivot();
    		}

    		// Update Points
    		for (i = 0, ilen = points.length; i < ilen; ++i) {
    			me.updateElement(points[i], i, reset);
    		}

    		if (showLine && line._model.tension !== 0) {
    			me.updateBezierControlPoints();
    		}

    		// Now pivot the point for animation
    		for (i = 0, ilen = points.length; i < ilen; ++i) {
    			points[i].pivot();
    		}
    	},

    	updateElement: function(point, index, reset) {
    		var me = this;
    		var meta = me.getMeta();
    		var custom = point.custom || {};
    		var dataset = me.getDataset();
    		var datasetIndex = me.index;
    		var value = dataset.data[index];
    		var xScale = me._xScale;
    		var yScale = me._yScale;
    		var lineModel = meta.dataset._model;
    		var x, y;

    		var options = me._resolveDataElementOptions(point, index);

    		x = xScale.getPixelForValue(typeof value === 'object' ? value : NaN, index, datasetIndex);
    		y = reset ? yScale.getBasePixel() : me.calculatePointY(value, index, datasetIndex);

    		// Utility
    		point._xScale = xScale;
    		point._yScale = yScale;
    		point._options = options;
    		point._datasetIndex = datasetIndex;
    		point._index = index;

    		// Desired view properties
    		point._model = {
    			x: x,
    			y: y,
    			skip: custom.skip || isNaN(x) || isNaN(y),
    			// Appearance
    			radius: options.radius,
    			pointStyle: options.pointStyle,
    			rotation: options.rotation,
    			backgroundColor: options.backgroundColor,
    			borderColor: options.borderColor,
    			borderWidth: options.borderWidth,
    			tension: valueOrDefault$6(custom.tension, lineModel ? lineModel.tension : 0),
    			steppedLine: lineModel ? lineModel.steppedLine : false,
    			// Tooltip
    			hitRadius: options.hitRadius
    		};
    	},

    	/**
    	 * @private
    	 */
    	_resolveDatasetElementOptions: function(element) {
    		var me = this;
    		var config = me._config;
    		var custom = element.custom || {};
    		var options = me.chart.options;
    		var lineOptions = options.elements.line;
    		var values = core_datasetController.prototype._resolveDatasetElementOptions.apply(me, arguments);

    		// The default behavior of lines is to break at null values, according
    		// to https://github.com/chartjs/Chart.js/issues/2435#issuecomment-216718158
    		// This option gives lines the ability to span gaps
    		values.spanGaps = valueOrDefault$6(config.spanGaps, options.spanGaps);
    		values.tension = valueOrDefault$6(config.lineTension, lineOptions.tension);
    		values.steppedLine = resolve$2([custom.steppedLine, config.steppedLine, lineOptions.stepped]);
    		values.clip = toClip(valueOrDefault$6(config.clip, defaultClip(me._xScale, me._yScale, values.borderWidth)));

    		return values;
    	},

    	calculatePointY: function(value, index, datasetIndex) {
    		var me = this;
    		var chart = me.chart;
    		var yScale = me._yScale;
    		var sumPos = 0;
    		var sumNeg = 0;
    		var i, ds, dsMeta, stackedRightValue, rightValue, metasets, ilen;

    		if (yScale.options.stacked) {
    			rightValue = +yScale.getRightValue(value);
    			metasets = chart._getSortedVisibleDatasetMetas();
    			ilen = metasets.length;

    			for (i = 0; i < ilen; ++i) {
    				dsMeta = metasets[i];
    				if (dsMeta.index === datasetIndex) {
    					break;
    				}

    				ds = chart.data.datasets[dsMeta.index];
    				if (dsMeta.type === 'line' && dsMeta.yAxisID === yScale.id) {
    					stackedRightValue = +yScale.getRightValue(ds.data[index]);
    					if (stackedRightValue < 0) {
    						sumNeg += stackedRightValue || 0;
    					} else {
    						sumPos += stackedRightValue || 0;
    					}
    				}
    			}

    			if (rightValue < 0) {
    				return yScale.getPixelForValue(sumNeg + rightValue);
    			}
    			return yScale.getPixelForValue(sumPos + rightValue);
    		}
    		return yScale.getPixelForValue(value);
    	},

    	updateBezierControlPoints: function() {
    		var me = this;
    		var chart = me.chart;
    		var meta = me.getMeta();
    		var lineModel = meta.dataset._model;
    		var area = chart.chartArea;
    		var points = meta.data || [];
    		var i, ilen, model, controlPoints;

    		// Only consider points that are drawn in case the spanGaps option is used
    		if (lineModel.spanGaps) {
    			points = points.filter(function(pt) {
    				return !pt._model.skip;
    			});
    		}

    		function capControlPoint(pt, min, max) {
    			return Math.max(Math.min(pt, max), min);
    		}

    		if (lineModel.cubicInterpolationMode === 'monotone') {
    			helpers$1.splineCurveMonotone(points);
    		} else {
    			for (i = 0, ilen = points.length; i < ilen; ++i) {
    				model = points[i]._model;
    				controlPoints = helpers$1.splineCurve(
    					helpers$1.previousItem(points, i)._model,
    					model,
    					helpers$1.nextItem(points, i)._model,
    					lineModel.tension
    				);
    				model.controlPointPreviousX = controlPoints.previous.x;
    				model.controlPointPreviousY = controlPoints.previous.y;
    				model.controlPointNextX = controlPoints.next.x;
    				model.controlPointNextY = controlPoints.next.y;
    			}
    		}

    		if (chart.options.elements.line.capBezierPoints) {
    			for (i = 0, ilen = points.length; i < ilen; ++i) {
    				model = points[i]._model;
    				if (isPointInArea(model, area)) {
    					if (i > 0 && isPointInArea(points[i - 1]._model, area)) {
    						model.controlPointPreviousX = capControlPoint(model.controlPointPreviousX, area.left, area.right);
    						model.controlPointPreviousY = capControlPoint(model.controlPointPreviousY, area.top, area.bottom);
    					}
    					if (i < points.length - 1 && isPointInArea(points[i + 1]._model, area)) {
    						model.controlPointNextX = capControlPoint(model.controlPointNextX, area.left, area.right);
    						model.controlPointNextY = capControlPoint(model.controlPointNextY, area.top, area.bottom);
    					}
    				}
    			}
    		}
    	},

    	draw: function() {
    		var me = this;
    		var chart = me.chart;
    		var meta = me.getMeta();
    		var points = meta.data || [];
    		var area = chart.chartArea;
    		var canvas = chart.canvas;
    		var i = 0;
    		var ilen = points.length;
    		var clip;

    		if (me._showLine) {
    			clip = meta.dataset._model.clip;

    			helpers$1.canvas.clipArea(chart.ctx, {
    				left: clip.left === false ? 0 : area.left - clip.left,
    				right: clip.right === false ? canvas.width : area.right + clip.right,
    				top: clip.top === false ? 0 : area.top - clip.top,
    				bottom: clip.bottom === false ? canvas.height : area.bottom + clip.bottom
    			});

    			meta.dataset.draw();

    			helpers$1.canvas.unclipArea(chart.ctx);
    		}

    		// Draw the points
    		for (; i < ilen; ++i) {
    			points[i].draw(area);
    		}
    	},

    	/**
    	 * @protected
    	 */
    	setHoverStyle: function(point) {
    		var model = point._model;
    		var options = point._options;
    		var getHoverColor = helpers$1.getHoverColor;

    		point.$previousStyle = {
    			backgroundColor: model.backgroundColor,
    			borderColor: model.borderColor,
    			borderWidth: model.borderWidth,
    			radius: model.radius
    		};

    		model.backgroundColor = valueOrDefault$6(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));
    		model.borderColor = valueOrDefault$6(options.hoverBorderColor, getHoverColor(options.borderColor));
    		model.borderWidth = valueOrDefault$6(options.hoverBorderWidth, options.borderWidth);
    		model.radius = valueOrDefault$6(options.hoverRadius, options.radius);
    	},
    });

    var resolve$3 = helpers$1.options.resolve;

    core_defaults._set('polarArea', {
    	scale: {
    		type: 'radialLinear',
    		angleLines: {
    			display: false
    		},
    		gridLines: {
    			circular: true
    		},
    		pointLabels: {
    			display: false
    		},
    		ticks: {
    			beginAtZero: true
    		}
    	},

    	// Boolean - Whether to animate the rotation of the chart
    	animation: {
    		animateRotate: true,
    		animateScale: true
    	},

    	startAngle: -0.5 * Math.PI,
    	legendCallback: function(chart) {
    		var list = document.createElement('ul');
    		var data = chart.data;
    		var datasets = data.datasets;
    		var labels = data.labels;
    		var i, ilen, listItem, listItemSpan;

    		list.setAttribute('class', chart.id + '-legend');
    		if (datasets.length) {
    			for (i = 0, ilen = datasets[0].data.length; i < ilen; ++i) {
    				listItem = list.appendChild(document.createElement('li'));
    				listItemSpan = listItem.appendChild(document.createElement('span'));
    				listItemSpan.style.backgroundColor = datasets[0].backgroundColor[i];
    				if (labels[i]) {
    					listItem.appendChild(document.createTextNode(labels[i]));
    				}
    			}
    		}

    		return list.outerHTML;
    	},
    	legend: {
    		labels: {
    			generateLabels: function(chart) {
    				var data = chart.data;
    				if (data.labels.length && data.datasets.length) {
    					return data.labels.map(function(label, i) {
    						var meta = chart.getDatasetMeta(0);
    						var style = meta.controller.getStyle(i);

    						return {
    							text: label,
    							fillStyle: style.backgroundColor,
    							strokeStyle: style.borderColor,
    							lineWidth: style.borderWidth,
    							hidden: isNaN(data.datasets[0].data[i]) || meta.data[i].hidden,

    							// Extra data used for toggling the correct item
    							index: i
    						};
    					});
    				}
    				return [];
    			}
    		},

    		onClick: function(e, legendItem) {
    			var index = legendItem.index;
    			var chart = this.chart;
    			var i, ilen, meta;

    			for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {
    				meta = chart.getDatasetMeta(i);
    				meta.data[index].hidden = !meta.data[index].hidden;
    			}

    			chart.update();
    		}
    	},

    	// Need to override these to give a nice default
    	tooltips: {
    		callbacks: {
    			title: function() {
    				return '';
    			},
    			label: function(item, data) {
    				return data.labels[item.index] + ': ' + item.yLabel;
    			}
    		}
    	}
    });

    var controller_polarArea = core_datasetController.extend({

    	dataElementType: elements.Arc,

    	linkScales: helpers$1.noop,

    	/**
    	 * @private
    	 */
    	_dataElementOptions: [
    		'backgroundColor',
    		'borderColor',
    		'borderWidth',
    		'borderAlign',
    		'hoverBackgroundColor',
    		'hoverBorderColor',
    		'hoverBorderWidth',
    	],

    	/**
    	 * @private
    	 */
    	_getIndexScaleId: function() {
    		return this.chart.scale.id;
    	},

    	/**
    	 * @private
    	 */
    	_getValueScaleId: function() {
    		return this.chart.scale.id;
    	},

    	update: function(reset) {
    		var me = this;
    		var dataset = me.getDataset();
    		var meta = me.getMeta();
    		var start = me.chart.options.startAngle || 0;
    		var starts = me._starts = [];
    		var angles = me._angles = [];
    		var arcs = meta.data;
    		var i, ilen, angle;

    		me._updateRadius();

    		meta.count = me.countVisibleElements();

    		for (i = 0, ilen = dataset.data.length; i < ilen; i++) {
    			starts[i] = start;
    			angle = me._computeAngle(i);
    			angles[i] = angle;
    			start += angle;
    		}

    		for (i = 0, ilen = arcs.length; i < ilen; ++i) {
    			arcs[i]._options = me._resolveDataElementOptions(arcs[i], i);
    			me.updateElement(arcs[i], i, reset);
    		}
    	},

    	/**
    	 * @private
    	 */
    	_updateRadius: function() {
    		var me = this;
    		var chart = me.chart;
    		var chartArea = chart.chartArea;
    		var opts = chart.options;
    		var minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);

    		chart.outerRadius = Math.max(minSize / 2, 0);
    		chart.innerRadius = Math.max(opts.cutoutPercentage ? (chart.outerRadius / 100) * (opts.cutoutPercentage) : 1, 0);
    		chart.radiusLength = (chart.outerRadius - chart.innerRadius) / chart.getVisibleDatasetCount();

    		me.outerRadius = chart.outerRadius - (chart.radiusLength * me.index);
    		me.innerRadius = me.outerRadius - chart.radiusLength;
    	},

    	updateElement: function(arc, index, reset) {
    		var me = this;
    		var chart = me.chart;
    		var dataset = me.getDataset();
    		var opts = chart.options;
    		var animationOpts = opts.animation;
    		var scale = chart.scale;
    		var labels = chart.data.labels;

    		var centerX = scale.xCenter;
    		var centerY = scale.yCenter;

    		// var negHalfPI = -0.5 * Math.PI;
    		var datasetStartAngle = opts.startAngle;
    		var distance = arc.hidden ? 0 : scale.getDistanceFromCenterForValue(dataset.data[index]);
    		var startAngle = me._starts[index];
    		var endAngle = startAngle + (arc.hidden ? 0 : me._angles[index]);

    		var resetRadius = animationOpts.animateScale ? 0 : scale.getDistanceFromCenterForValue(dataset.data[index]);
    		var options = arc._options || {};

    		helpers$1.extend(arc, {
    			// Utility
    			_datasetIndex: me.index,
    			_index: index,
    			_scale: scale,

    			// Desired view properties
    			_model: {
    				backgroundColor: options.backgroundColor,
    				borderColor: options.borderColor,
    				borderWidth: options.borderWidth,
    				borderAlign: options.borderAlign,
    				x: centerX,
    				y: centerY,
    				innerRadius: 0,
    				outerRadius: reset ? resetRadius : distance,
    				startAngle: reset && animationOpts.animateRotate ? datasetStartAngle : startAngle,
    				endAngle: reset && animationOpts.animateRotate ? datasetStartAngle : endAngle,
    				label: helpers$1.valueAtIndexOrDefault(labels, index, labels[index])
    			}
    		});

    		arc.pivot();
    	},

    	countVisibleElements: function() {
    		var dataset = this.getDataset();
    		var meta = this.getMeta();
    		var count = 0;

    		helpers$1.each(meta.data, function(element, index) {
    			if (!isNaN(dataset.data[index]) && !element.hidden) {
    				count++;
    			}
    		});

    		return count;
    	},

    	/**
    	 * @protected
    	 */
    	setHoverStyle: function(arc) {
    		var model = arc._model;
    		var options = arc._options;
    		var getHoverColor = helpers$1.getHoverColor;
    		var valueOrDefault = helpers$1.valueOrDefault;

    		arc.$previousStyle = {
    			backgroundColor: model.backgroundColor,
    			borderColor: model.borderColor,
    			borderWidth: model.borderWidth,
    		};

    		model.backgroundColor = valueOrDefault(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));
    		model.borderColor = valueOrDefault(options.hoverBorderColor, getHoverColor(options.borderColor));
    		model.borderWidth = valueOrDefault(options.hoverBorderWidth, options.borderWidth);
    	},

    	/**
    	 * @private
    	 */
    	_computeAngle: function(index) {
    		var me = this;
    		var count = this.getMeta().count;
    		var dataset = me.getDataset();
    		var meta = me.getMeta();

    		if (isNaN(dataset.data[index]) || meta.data[index].hidden) {
    			return 0;
    		}

    		// Scriptable options
    		var context = {
    			chart: me.chart,
    			dataIndex: index,
    			dataset: dataset,
    			datasetIndex: me.index
    		};

    		return resolve$3([
    			me.chart.options.elements.arc.angle,
    			(2 * Math.PI) / count
    		], context, index);
    	}
    });

    core_defaults._set('pie', helpers$1.clone(core_defaults.doughnut));
    core_defaults._set('pie', {
    	cutoutPercentage: 0
    });

    // Pie charts are Doughnut chart with different defaults
    var controller_pie = controller_doughnut;

    var valueOrDefault$7 = helpers$1.valueOrDefault;

    core_defaults._set('radar', {
    	spanGaps: false,
    	scale: {
    		type: 'radialLinear'
    	},
    	elements: {
    		line: {
    			fill: 'start',
    			tension: 0 // no bezier in radar
    		}
    	}
    });

    var controller_radar = core_datasetController.extend({
    	datasetElementType: elements.Line,

    	dataElementType: elements.Point,

    	linkScales: helpers$1.noop,

    	/**
    	 * @private
    	 */
    	_datasetElementOptions: [
    		'backgroundColor',
    		'borderWidth',
    		'borderColor',
    		'borderCapStyle',
    		'borderDash',
    		'borderDashOffset',
    		'borderJoinStyle',
    		'fill'
    	],

    	/**
    	 * @private
    	 */
    	_dataElementOptions: {
    		backgroundColor: 'pointBackgroundColor',
    		borderColor: 'pointBorderColor',
    		borderWidth: 'pointBorderWidth',
    		hitRadius: 'pointHitRadius',
    		hoverBackgroundColor: 'pointHoverBackgroundColor',
    		hoverBorderColor: 'pointHoverBorderColor',
    		hoverBorderWidth: 'pointHoverBorderWidth',
    		hoverRadius: 'pointHoverRadius',
    		pointStyle: 'pointStyle',
    		radius: 'pointRadius',
    		rotation: 'pointRotation'
    	},

    	/**
    	 * @private
    	 */
    	_getIndexScaleId: function() {
    		return this.chart.scale.id;
    	},

    	/**
    	 * @private
    	 */
    	_getValueScaleId: function() {
    		return this.chart.scale.id;
    	},

    	update: function(reset) {
    		var me = this;
    		var meta = me.getMeta();
    		var line = meta.dataset;
    		var points = meta.data || [];
    		var scale = me.chart.scale;
    		var config = me._config;
    		var i, ilen;

    		// Compatibility: If the properties are defined with only the old name, use those values
    		if (config.tension !== undefined && config.lineTension === undefined) {
    			config.lineTension = config.tension;
    		}

    		// Utility
    		line._scale = scale;
    		line._datasetIndex = me.index;
    		// Data
    		line._children = points;
    		line._loop = true;
    		// Model
    		line._model = me._resolveDatasetElementOptions(line);

    		line.pivot();

    		// Update Points
    		for (i = 0, ilen = points.length; i < ilen; ++i) {
    			me.updateElement(points[i], i, reset);
    		}

    		// Update bezier control points
    		me.updateBezierControlPoints();

    		// Now pivot the point for animation
    		for (i = 0, ilen = points.length; i < ilen; ++i) {
    			points[i].pivot();
    		}
    	},

    	updateElement: function(point, index, reset) {
    		var me = this;
    		var custom = point.custom || {};
    		var dataset = me.getDataset();
    		var scale = me.chart.scale;
    		var pointPosition = scale.getPointPositionForValue(index, dataset.data[index]);
    		var options = me._resolveDataElementOptions(point, index);
    		var lineModel = me.getMeta().dataset._model;
    		var x = reset ? scale.xCenter : pointPosition.x;
    		var y = reset ? scale.yCenter : pointPosition.y;

    		// Utility
    		point._scale = scale;
    		point._options = options;
    		point._datasetIndex = me.index;
    		point._index = index;

    		// Desired view properties
    		point._model = {
    			x: x, // value not used in dataset scale, but we want a consistent API between scales
    			y: y,
    			skip: custom.skip || isNaN(x) || isNaN(y),
    			// Appearance
    			radius: options.radius,
    			pointStyle: options.pointStyle,
    			rotation: options.rotation,
    			backgroundColor: options.backgroundColor,
    			borderColor: options.borderColor,
    			borderWidth: options.borderWidth,
    			tension: valueOrDefault$7(custom.tension, lineModel ? lineModel.tension : 0),

    			// Tooltip
    			hitRadius: options.hitRadius
    		};
    	},

    	/**
    	 * @private
    	 */
    	_resolveDatasetElementOptions: function() {
    		var me = this;
    		var config = me._config;
    		var options = me.chart.options;
    		var values = core_datasetController.prototype._resolveDatasetElementOptions.apply(me, arguments);

    		values.spanGaps = valueOrDefault$7(config.spanGaps, options.spanGaps);
    		values.tension = valueOrDefault$7(config.lineTension, options.elements.line.tension);

    		return values;
    	},

    	updateBezierControlPoints: function() {
    		var me = this;
    		var meta = me.getMeta();
    		var area = me.chart.chartArea;
    		var points = meta.data || [];
    		var i, ilen, model, controlPoints;

    		// Only consider points that are drawn in case the spanGaps option is used
    		if (meta.dataset._model.spanGaps) {
    			points = points.filter(function(pt) {
    				return !pt._model.skip;
    			});
    		}

    		function capControlPoint(pt, min, max) {
    			return Math.max(Math.min(pt, max), min);
    		}

    		for (i = 0, ilen = points.length; i < ilen; ++i) {
    			model = points[i]._model;
    			controlPoints = helpers$1.splineCurve(
    				helpers$1.previousItem(points, i, true)._model,
    				model,
    				helpers$1.nextItem(points, i, true)._model,
    				model.tension
    			);

    			// Prevent the bezier going outside of the bounds of the graph
    			model.controlPointPreviousX = capControlPoint(controlPoints.previous.x, area.left, area.right);
    			model.controlPointPreviousY = capControlPoint(controlPoints.previous.y, area.top, area.bottom);
    			model.controlPointNextX = capControlPoint(controlPoints.next.x, area.left, area.right);
    			model.controlPointNextY = capControlPoint(controlPoints.next.y, area.top, area.bottom);
    		}
    	},

    	setHoverStyle: function(point) {
    		var model = point._model;
    		var options = point._options;
    		var getHoverColor = helpers$1.getHoverColor;

    		point.$previousStyle = {
    			backgroundColor: model.backgroundColor,
    			borderColor: model.borderColor,
    			borderWidth: model.borderWidth,
    			radius: model.radius
    		};

    		model.backgroundColor = valueOrDefault$7(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));
    		model.borderColor = valueOrDefault$7(options.hoverBorderColor, getHoverColor(options.borderColor));
    		model.borderWidth = valueOrDefault$7(options.hoverBorderWidth, options.borderWidth);
    		model.radius = valueOrDefault$7(options.hoverRadius, options.radius);
    	}
    });

    core_defaults._set('scatter', {
    	hover: {
    		mode: 'single'
    	},

    	scales: {
    		xAxes: [{
    			id: 'x-axis-1',    // need an ID so datasets can reference the scale
    			type: 'linear',    // scatter should not use a category axis
    			position: 'bottom'
    		}],
    		yAxes: [{
    			id: 'y-axis-1',
    			type: 'linear',
    			position: 'left'
    		}]
    	},

    	tooltips: {
    		callbacks: {
    			title: function() {
    				return '';     // doesn't make sense for scatter since data are formatted as a point
    			},
    			label: function(item) {
    				return '(' + item.xLabel + ', ' + item.yLabel + ')';
    			}
    		}
    	}
    });

    core_defaults._set('global', {
    	datasets: {
    		scatter: {
    			showLine: false
    		}
    	}
    });

    // Scatter charts use line controllers
    var controller_scatter = controller_line;

    // NOTE export a map in which the key represents the controller type, not
    // the class, and so must be CamelCase in order to be correctly retrieved
    // by the controller in core.controller.js (`controllers[meta.type]`).

    var controllers = {
    	bar: controller_bar,
    	bubble: controller_bubble,
    	doughnut: controller_doughnut,
    	horizontalBar: controller_horizontalBar,
    	line: controller_line,
    	polarArea: controller_polarArea,
    	pie: controller_pie,
    	radar: controller_radar,
    	scatter: controller_scatter
    };

    /**
     * Helper function to get relative position for an event
     * @param {Event|IEvent} event - The event to get the position for
     * @param {Chart} chart - The chart
     * @returns {object} the event position
     */
    function getRelativePosition(e, chart) {
    	if (e.native) {
    		return {
    			x: e.x,
    			y: e.y
    		};
    	}

    	return helpers$1.getRelativePosition(e, chart);
    }

    /**
     * Helper function to traverse all of the visible elements in the chart
     * @param {Chart} chart - the chart
     * @param {function} handler - the callback to execute for each visible item
     */
    function parseVisibleItems(chart, handler) {
    	var metasets = chart._getSortedVisibleDatasetMetas();
    	var metadata, i, j, ilen, jlen, element;

    	for (i = 0, ilen = metasets.length; i < ilen; ++i) {
    		metadata = metasets[i].data;
    		for (j = 0, jlen = metadata.length; j < jlen; ++j) {
    			element = metadata[j];
    			if (!element._view.skip) {
    				handler(element);
    			}
    		}
    	}
    }

    /**
     * Helper function to get the items that intersect the event position
     * @param {ChartElement[]} items - elements to filter
     * @param {object} position - the point to be nearest to
     * @return {ChartElement[]} the nearest items
     */
    function getIntersectItems(chart, position) {
    	var elements = [];

    	parseVisibleItems(chart, function(element) {
    		if (element.inRange(position.x, position.y)) {
    			elements.push(element);
    		}
    	});

    	return elements;
    }

    /**
     * Helper function to get the items nearest to the event position considering all visible items in teh chart
     * @param {Chart} chart - the chart to look at elements from
     * @param {object} position - the point to be nearest to
     * @param {boolean} intersect - if true, only consider items that intersect the position
     * @param {function} distanceMetric - function to provide the distance between points
     * @return {ChartElement[]} the nearest items
     */
    function getNearestItems(chart, position, intersect, distanceMetric) {
    	var minDistance = Number.POSITIVE_INFINITY;
    	var nearestItems = [];

    	parseVisibleItems(chart, function(element) {
    		if (intersect && !element.inRange(position.x, position.y)) {
    			return;
    		}

    		var center = element.getCenterPoint();
    		var distance = distanceMetric(position, center);
    		if (distance < minDistance) {
    			nearestItems = [element];
    			minDistance = distance;
    		} else if (distance === minDistance) {
    			// Can have multiple items at the same distance in which case we sort by size
    			nearestItems.push(element);
    		}
    	});

    	return nearestItems;
    }

    /**
     * Get a distance metric function for two points based on the
     * axis mode setting
     * @param {string} axis - the axis mode. x|y|xy
     */
    function getDistanceMetricForAxis(axis) {
    	var useX = axis.indexOf('x') !== -1;
    	var useY = axis.indexOf('y') !== -1;

    	return function(pt1, pt2) {
    		var deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;
    		var deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;
    		return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));
    	};
    }

    function indexMode(chart, e, options) {
    	var position = getRelativePosition(e, chart);
    	// Default axis for index mode is 'x' to match old behaviour
    	options.axis = options.axis || 'x';
    	var distanceMetric = getDistanceMetricForAxis(options.axis);
    	var items = options.intersect ? getIntersectItems(chart, position) : getNearestItems(chart, position, false, distanceMetric);
    	var elements = [];

    	if (!items.length) {
    		return [];
    	}

    	chart._getSortedVisibleDatasetMetas().forEach(function(meta) {
    		var element = meta.data[items[0]._index];

    		// don't count items that are skipped (null data)
    		if (element && !element._view.skip) {
    			elements.push(element);
    		}
    	});

    	return elements;
    }

    /**
     * @interface IInteractionOptions
     */
    /**
     * If true, only consider items that intersect the point
     * @name IInterfaceOptions#boolean
     * @type Boolean
     */

    /**
     * Contains interaction related functions
     * @namespace Chart.Interaction
     */
    var core_interaction = {
    	// Helper function for different modes
    	modes: {
    		single: function(chart, e) {
    			var position = getRelativePosition(e, chart);
    			var elements = [];

    			parseVisibleItems(chart, function(element) {
    				if (element.inRange(position.x, position.y)) {
    					elements.push(element);
    					return elements;
    				}
    			});

    			return elements.slice(0, 1);
    		},

    		/**
    		 * @function Chart.Interaction.modes.label
    		 * @deprecated since version 2.4.0
    		 * @todo remove at version 3
    		 * @private
    		 */
    		label: indexMode,

    		/**
    		 * Returns items at the same index. If the options.intersect parameter is true, we only return items if we intersect something
    		 * If the options.intersect mode is false, we find the nearest item and return the items at the same index as that item
    		 * @function Chart.Interaction.modes.index
    		 * @since v2.4.0
    		 * @param {Chart} chart - the chart we are returning items from
    		 * @param {Event} e - the event we are find things at
    		 * @param {IInteractionOptions} options - options to use during interaction
    		 * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
    		 */
    		index: indexMode,

    		/**
    		 * Returns items in the same dataset. If the options.intersect parameter is true, we only return items if we intersect something
    		 * If the options.intersect is false, we find the nearest item and return the items in that dataset
    		 * @function Chart.Interaction.modes.dataset
    		 * @param {Chart} chart - the chart we are returning items from
    		 * @param {Event} e - the event we are find things at
    		 * @param {IInteractionOptions} options - options to use during interaction
    		 * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
    		 */
    		dataset: function(chart, e, options) {
    			var position = getRelativePosition(e, chart);
    			options.axis = options.axis || 'xy';
    			var distanceMetric = getDistanceMetricForAxis(options.axis);
    			var items = options.intersect ? getIntersectItems(chart, position) : getNearestItems(chart, position, false, distanceMetric);

    			if (items.length > 0) {
    				items = chart.getDatasetMeta(items[0]._datasetIndex).data;
    			}

    			return items;
    		},

    		/**
    		 * @function Chart.Interaction.modes.x-axis
    		 * @deprecated since version 2.4.0. Use index mode and intersect == true
    		 * @todo remove at version 3
    		 * @private
    		 */
    		'x-axis': function(chart, e) {
    			return indexMode(chart, e, {intersect: false});
    		},

    		/**
    		 * Point mode returns all elements that hit test based on the event position
    		 * of the event
    		 * @function Chart.Interaction.modes.intersect
    		 * @param {Chart} chart - the chart we are returning items from
    		 * @param {Event} e - the event we are find things at
    		 * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
    		 */
    		point: function(chart, e) {
    			var position = getRelativePosition(e, chart);
    			return getIntersectItems(chart, position);
    		},

    		/**
    		 * nearest mode returns the element closest to the point
    		 * @function Chart.Interaction.modes.intersect
    		 * @param {Chart} chart - the chart we are returning items from
    		 * @param {Event} e - the event we are find things at
    		 * @param {IInteractionOptions} options - options to use
    		 * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
    		 */
    		nearest: function(chart, e, options) {
    			var position = getRelativePosition(e, chart);
    			options.axis = options.axis || 'xy';
    			var distanceMetric = getDistanceMetricForAxis(options.axis);
    			return getNearestItems(chart, position, options.intersect, distanceMetric);
    		},

    		/**
    		 * x mode returns the elements that hit-test at the current x coordinate
    		 * @function Chart.Interaction.modes.x
    		 * @param {Chart} chart - the chart we are returning items from
    		 * @param {Event} e - the event we are find things at
    		 * @param {IInteractionOptions} options - options to use
    		 * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
    		 */
    		x: function(chart, e, options) {
    			var position = getRelativePosition(e, chart);
    			var items = [];
    			var intersectsItem = false;

    			parseVisibleItems(chart, function(element) {
    				if (element.inXRange(position.x)) {
    					items.push(element);
    				}

    				if (element.inRange(position.x, position.y)) {
    					intersectsItem = true;
    				}
    			});

    			// If we want to trigger on an intersect and we don't have any items
    			// that intersect the position, return nothing
    			if (options.intersect && !intersectsItem) {
    				items = [];
    			}
    			return items;
    		},

    		/**
    		 * y mode returns the elements that hit-test at the current y coordinate
    		 * @function Chart.Interaction.modes.y
    		 * @param {Chart} chart - the chart we are returning items from
    		 * @param {Event} e - the event we are find things at
    		 * @param {IInteractionOptions} options - options to use
    		 * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
    		 */
    		y: function(chart, e, options) {
    			var position = getRelativePosition(e, chart);
    			var items = [];
    			var intersectsItem = false;

    			parseVisibleItems(chart, function(element) {
    				if (element.inYRange(position.y)) {
    					items.push(element);
    				}

    				if (element.inRange(position.x, position.y)) {
    					intersectsItem = true;
    				}
    			});

    			// If we want to trigger on an intersect and we don't have any items
    			// that intersect the position, return nothing
    			if (options.intersect && !intersectsItem) {
    				items = [];
    			}
    			return items;
    		}
    	}
    };

    var extend = helpers$1.extend;

    function filterByPosition(array, position) {
    	return helpers$1.where(array, function(v) {
    		return v.pos === position;
    	});
    }

    function sortByWeight(array, reverse) {
    	return array.sort(function(a, b) {
    		var v0 = reverse ? b : a;
    		var v1 = reverse ? a : b;
    		return v0.weight === v1.weight ?
    			v0.index - v1.index :
    			v0.weight - v1.weight;
    	});
    }

    function wrapBoxes(boxes) {
    	var layoutBoxes = [];
    	var i, ilen, box;

    	for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {
    		box = boxes[i];
    		layoutBoxes.push({
    			index: i,
    			box: box,
    			pos: box.position,
    			horizontal: box.isHorizontal(),
    			weight: box.weight
    		});
    	}
    	return layoutBoxes;
    }

    function setLayoutDims(layouts, params) {
    	var i, ilen, layout;
    	for (i = 0, ilen = layouts.length; i < ilen; ++i) {
    		layout = layouts[i];
    		// store width used instead of chartArea.w in fitBoxes
    		layout.width = layout.horizontal
    			? layout.box.fullWidth && params.availableWidth
    			: params.vBoxMaxWidth;
    		// store height used instead of chartArea.h in fitBoxes
    		layout.height = layout.horizontal && params.hBoxMaxHeight;
    	}
    }

    function buildLayoutBoxes(boxes) {
    	var layoutBoxes = wrapBoxes(boxes);
    	var left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);
    	var right = sortByWeight(filterByPosition(layoutBoxes, 'right'));
    	var top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);
    	var bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));

    	return {
    		leftAndTop: left.concat(top),
    		rightAndBottom: right.concat(bottom),
    		chartArea: filterByPosition(layoutBoxes, 'chartArea'),
    		vertical: left.concat(right),
    		horizontal: top.concat(bottom)
    	};
    }

    function getCombinedMax(maxPadding, chartArea, a, b) {
    	return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);
    }

    function updateDims(chartArea, params, layout) {
    	var box = layout.box;
    	var maxPadding = chartArea.maxPadding;
    	var newWidth, newHeight;

    	if (layout.size) {
    		// this layout was already counted for, lets first reduce old size
    		chartArea[layout.pos] -= layout.size;
    	}
    	layout.size = layout.horizontal ? box.height : box.width;
    	chartArea[layout.pos] += layout.size;

    	if (box.getPadding) {
    		var boxPadding = box.getPadding();
    		maxPadding.top = Math.max(maxPadding.top, boxPadding.top);
    		maxPadding.left = Math.max(maxPadding.left, boxPadding.left);
    		maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);
    		maxPadding.right = Math.max(maxPadding.right, boxPadding.right);
    	}

    	newWidth = params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right');
    	newHeight = params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom');

    	if (newWidth !== chartArea.w || newHeight !== chartArea.h) {
    		chartArea.w = newWidth;
    		chartArea.h = newHeight;

    		// return true if chart area changed in layout's direction
    		var sizes = layout.horizontal ? [newWidth, chartArea.w] : [newHeight, chartArea.h];
    		return sizes[0] !== sizes[1] && (!isNaN(sizes[0]) || !isNaN(sizes[1]));
    	}
    }

    function handleMaxPadding(chartArea) {
    	var maxPadding = chartArea.maxPadding;

    	function updatePos(pos) {
    		var change = Math.max(maxPadding[pos] - chartArea[pos], 0);
    		chartArea[pos] += change;
    		return change;
    	}
    	chartArea.y += updatePos('top');
    	chartArea.x += updatePos('left');
    	updatePos('right');
    	updatePos('bottom');
    }

    function getMargins(horizontal, chartArea) {
    	var maxPadding = chartArea.maxPadding;

    	function marginForPositions(positions) {
    		var margin = {left: 0, top: 0, right: 0, bottom: 0};
    		positions.forEach(function(pos) {
    			margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);
    		});
    		return margin;
    	}

    	return horizontal
    		? marginForPositions(['left', 'right'])
    		: marginForPositions(['top', 'bottom']);
    }

    function fitBoxes(boxes, chartArea, params) {
    	var refitBoxes = [];
    	var i, ilen, layout, box, refit, changed;

    	for (i = 0, ilen = boxes.length; i < ilen; ++i) {
    		layout = boxes[i];
    		box = layout.box;

    		box.update(
    			layout.width || chartArea.w,
    			layout.height || chartArea.h,
    			getMargins(layout.horizontal, chartArea)
    		);
    		if (updateDims(chartArea, params, layout)) {
    			changed = true;
    			if (refitBoxes.length) {
    				// Dimensions changed and there were non full width boxes before this
    				// -> we have to refit those
    				refit = true;
    			}
    		}
    		if (!box.fullWidth) { // fullWidth boxes don't need to be re-fitted in any case
    			refitBoxes.push(layout);
    		}
    	}

    	return refit ? fitBoxes(refitBoxes, chartArea, params) || changed : changed;
    }

    function placeBoxes(boxes, chartArea, params) {
    	var userPadding = params.padding;
    	var x = chartArea.x;
    	var y = chartArea.y;
    	var i, ilen, layout, box;

    	for (i = 0, ilen = boxes.length; i < ilen; ++i) {
    		layout = boxes[i];
    		box = layout.box;
    		if (layout.horizontal) {
    			box.left = box.fullWidth ? userPadding.left : chartArea.left;
    			box.right = box.fullWidth ? params.outerWidth - userPadding.right : chartArea.left + chartArea.w;
    			box.top = y;
    			box.bottom = y + box.height;
    			box.width = box.right - box.left;
    			y = box.bottom;
    		} else {
    			box.left = x;
    			box.right = x + box.width;
    			box.top = chartArea.top;
    			box.bottom = chartArea.top + chartArea.h;
    			box.height = box.bottom - box.top;
    			x = box.right;
    		}
    	}

    	chartArea.x = x;
    	chartArea.y = y;
    }

    core_defaults._set('global', {
    	layout: {
    		padding: {
    			top: 0,
    			right: 0,
    			bottom: 0,
    			left: 0
    		}
    	}
    });

    /**
     * @interface ILayoutItem
     * @prop {string} position - The position of the item in the chart layout. Possible values are
     * 'left', 'top', 'right', 'bottom', and 'chartArea'
     * @prop {number} weight - The weight used to sort the item. Higher weights are further away from the chart area
     * @prop {boolean} fullWidth - if true, and the item is horizontal, then push vertical boxes down
     * @prop {function} isHorizontal - returns true if the layout item is horizontal (ie. top or bottom)
     * @prop {function} update - Takes two parameters: width and height. Returns size of item
     * @prop {function} getPadding -  Returns an object with padding on the edges
     * @prop {number} width - Width of item. Must be valid after update()
     * @prop {number} height - Height of item. Must be valid after update()
     * @prop {number} left - Left edge of the item. Set by layout system and cannot be used in update
     * @prop {number} top - Top edge of the item. Set by layout system and cannot be used in update
     * @prop {number} right - Right edge of the item. Set by layout system and cannot be used in update
     * @prop {number} bottom - Bottom edge of the item. Set by layout system and cannot be used in update
     */

    // The layout service is very self explanatory.  It's responsible for the layout within a chart.
    // Scales, Legends and Plugins all rely on the layout service and can easily register to be placed anywhere they need
    // It is this service's responsibility of carrying out that layout.
    var core_layouts = {
    	defaults: {},

    	/**
    	 * Register a box to a chart.
    	 * A box is simply a reference to an object that requires layout. eg. Scales, Legend, Title.
    	 * @param {Chart} chart - the chart to use
    	 * @param {ILayoutItem} item - the item to add to be layed out
    	 */
    	addBox: function(chart, item) {
    		if (!chart.boxes) {
    			chart.boxes = [];
    		}

    		// initialize item with default values
    		item.fullWidth = item.fullWidth || false;
    		item.position = item.position || 'top';
    		item.weight = item.weight || 0;
    		item._layers = item._layers || function() {
    			return [{
    				z: 0,
    				draw: function() {
    					item.draw.apply(item, arguments);
    				}
    			}];
    		};

    		chart.boxes.push(item);
    	},

    	/**
    	 * Remove a layoutItem from a chart
    	 * @param {Chart} chart - the chart to remove the box from
    	 * @param {ILayoutItem} layoutItem - the item to remove from the layout
    	 */
    	removeBox: function(chart, layoutItem) {
    		var index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;
    		if (index !== -1) {
    			chart.boxes.splice(index, 1);
    		}
    	},

    	/**
    	 * Sets (or updates) options on the given `item`.
    	 * @param {Chart} chart - the chart in which the item lives (or will be added to)
    	 * @param {ILayoutItem} item - the item to configure with the given options
    	 * @param {object} options - the new item options.
    	 */
    	configure: function(chart, item, options) {
    		var props = ['fullWidth', 'position', 'weight'];
    		var ilen = props.length;
    		var i = 0;
    		var prop;

    		for (; i < ilen; ++i) {
    			prop = props[i];
    			if (options.hasOwnProperty(prop)) {
    				item[prop] = options[prop];
    			}
    		}
    	},

    	/**
    	 * Fits boxes of the given chart into the given size by having each box measure itself
    	 * then running a fitting algorithm
    	 * @param {Chart} chart - the chart
    	 * @param {number} width - the width to fit into
    	 * @param {number} height - the height to fit into
    	 */
    	update: function(chart, width, height) {
    		if (!chart) {
    			return;
    		}

    		var layoutOptions = chart.options.layout || {};
    		var padding = helpers$1.options.toPadding(layoutOptions.padding);

    		var availableWidth = width - padding.width;
    		var availableHeight = height - padding.height;
    		var boxes = buildLayoutBoxes(chart.boxes);
    		var verticalBoxes = boxes.vertical;
    		var horizontalBoxes = boxes.horizontal;

    		// Essentially we now have any number of boxes on each of the 4 sides.
    		// Our canvas looks like the following.
    		// The areas L1 and L2 are the left axes. R1 is the right axis, T1 is the top axis and
    		// B1 is the bottom axis
    		// There are also 4 quadrant-like locations (left to right instead of clockwise) reserved for chart overlays
    		// These locations are single-box locations only, when trying to register a chartArea location that is already taken,
    		// an error will be thrown.
    		//
    		// |----------------------------------------------------|
    		// |                  T1 (Full Width)                   |
    		// |----------------------------------------------------|
    		// |    |    |                 T2                  |    |
    		// |    |----|-------------------------------------|----|
    		// |    |    | C1 |                           | C2 |    |
    		// |    |    |----|                           |----|    |
    		// |    |    |                                     |    |
    		// | L1 | L2 |           ChartArea (C0)            | R1 |
    		// |    |    |                                     |    |
    		// |    |    |----|                           |----|    |
    		// |    |    | C3 |                           | C4 |    |
    		// |    |----|-------------------------------------|----|
    		// |    |    |                 B1                  |    |
    		// |----------------------------------------------------|
    		// |                  B2 (Full Width)                   |
    		// |----------------------------------------------------|
    		//

    		var params = Object.freeze({
    			outerWidth: width,
    			outerHeight: height,
    			padding: padding,
    			availableWidth: availableWidth,
    			vBoxMaxWidth: availableWidth / 2 / verticalBoxes.length,
    			hBoxMaxHeight: availableHeight / 2
    		});
    		var chartArea = extend({
    			maxPadding: extend({}, padding),
    			w: availableWidth,
    			h: availableHeight,
    			x: padding.left,
    			y: padding.top
    		}, padding);

    		setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);

    		// First fit vertical boxes
    		fitBoxes(verticalBoxes, chartArea, params);

    		// Then fit horizontal boxes
    		if (fitBoxes(horizontalBoxes, chartArea, params)) {
    			// if the area changed, re-fit vertical boxes
    			fitBoxes(verticalBoxes, chartArea, params);
    		}

    		handleMaxPadding(chartArea);

    		// Finally place the boxes to correct coordinates
    		placeBoxes(boxes.leftAndTop, chartArea, params);

    		// Move to opposite side of chart
    		chartArea.x += chartArea.w;
    		chartArea.y += chartArea.h;

    		placeBoxes(boxes.rightAndBottom, chartArea, params);

    		chart.chartArea = {
    			left: chartArea.left,
    			top: chartArea.top,
    			right: chartArea.left + chartArea.w,
    			bottom: chartArea.top + chartArea.h
    		};

    		// Finally update boxes in chartArea (radial scale for example)
    		helpers$1.each(boxes.chartArea, function(layout) {
    			var box = layout.box;
    			extend(box, chart.chartArea);
    			box.update(chartArea.w, chartArea.h);
    		});
    	}
    };

    /**
     * Platform fallback implementation (minimal).
     * @see https://github.com/chartjs/Chart.js/pull/4591#issuecomment-319575939
     */

    var platform_basic = {
    	acquireContext: function(item) {
    		if (item && item.canvas) {
    			// Support for any object associated to a canvas (including a context2d)
    			item = item.canvas;
    		}

    		return item && item.getContext('2d') || null;
    	}
    };

    var platform_dom = "/*\r\n * DOM element rendering detection\r\n * https://davidwalsh.name/detect-node-insertion\r\n */\r\n@keyframes chartjs-render-animation {\r\n\tfrom { opacity: 0.99; }\r\n\tto { opacity: 1; }\r\n}\r\n\r\n.chartjs-render-monitor {\r\n\tanimation: chartjs-render-animation 0.001s;\r\n}\r\n\r\n/*\r\n * DOM element resizing detection\r\n * https://github.com/marcj/css-element-queries\r\n */\r\n.chartjs-size-monitor,\r\n.chartjs-size-monitor-expand,\r\n.chartjs-size-monitor-shrink {\r\n\tposition: absolute;\r\n\tdirection: ltr;\r\n\tleft: 0;\r\n\ttop: 0;\r\n\tright: 0;\r\n\tbottom: 0;\r\n\toverflow: hidden;\r\n\tpointer-events: none;\r\n\tvisibility: hidden;\r\n\tz-index: -1;\r\n}\r\n\r\n.chartjs-size-monitor-expand > div {\r\n\tposition: absolute;\r\n\twidth: 1000000px;\r\n\theight: 1000000px;\r\n\tleft: 0;\r\n\ttop: 0;\r\n}\r\n\r\n.chartjs-size-monitor-shrink > div {\r\n\tposition: absolute;\r\n\twidth: 200%;\r\n\theight: 200%;\r\n\tleft: 0;\r\n\ttop: 0;\r\n}\r\n";

    var platform_dom$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': platform_dom
    });

    var stylesheet = getCjsExportFromNamespace(platform_dom$1);

    var EXPANDO_KEY = '$chartjs';
    var CSS_PREFIX = 'chartjs-';
    var CSS_SIZE_MONITOR = CSS_PREFIX + 'size-monitor';
    var CSS_RENDER_MONITOR = CSS_PREFIX + 'render-monitor';
    var CSS_RENDER_ANIMATION = CSS_PREFIX + 'render-animation';
    var ANIMATION_START_EVENTS = ['animationstart', 'webkitAnimationStart'];

    /**
     * DOM event types -> Chart.js event types.
     * Note: only events with different types are mapped.
     * @see https://developer.mozilla.org/en-US/docs/Web/Events
     */
    var EVENT_TYPES = {
    	touchstart: 'mousedown',
    	touchmove: 'mousemove',
    	touchend: 'mouseup',
    	pointerenter: 'mouseenter',
    	pointerdown: 'mousedown',
    	pointermove: 'mousemove',
    	pointerup: 'mouseup',
    	pointerleave: 'mouseout',
    	pointerout: 'mouseout'
    };

    /**
     * The "used" size is the final value of a dimension property after all calculations have
     * been performed. This method uses the computed style of `element` but returns undefined
     * if the computed style is not expressed in pixels. That can happen in some cases where
     * `element` has a size relative to its parent and this last one is not yet displayed,
     * for example because of `display: none` on a parent node.
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/used_value
     * @returns {number} Size in pixels or undefined if unknown.
     */
    function readUsedSize(element, property) {
    	var value = helpers$1.getStyle(element, property);
    	var matches = value && value.match(/^(\d+)(\.\d+)?px$/);
    	return matches ? Number(matches[1]) : undefined;
    }

    /**
     * Initializes the canvas style and render size without modifying the canvas display size,
     * since responsiveness is handled by the controller.resize() method. The config is used
     * to determine the aspect ratio to apply in case no explicit height has been specified.
     */
    function initCanvas(canvas, config) {
    	var style = canvas.style;

    	// NOTE(SB) canvas.getAttribute('width') !== canvas.width: in the first case it
    	// returns null or '' if no explicit value has been set to the canvas attribute.
    	var renderHeight = canvas.getAttribute('height');
    	var renderWidth = canvas.getAttribute('width');

    	// Chart.js modifies some canvas values that we want to restore on destroy
    	canvas[EXPANDO_KEY] = {
    		initial: {
    			height: renderHeight,
    			width: renderWidth,
    			style: {
    				display: style.display,
    				height: style.height,
    				width: style.width
    			}
    		}
    	};

    	// Force canvas to display as block to avoid extra space caused by inline
    	// elements, which would interfere with the responsive resize process.
    	// https://github.com/chartjs/Chart.js/issues/2538
    	style.display = style.display || 'block';

    	if (renderWidth === null || renderWidth === '') {
    		var displayWidth = readUsedSize(canvas, 'width');
    		if (displayWidth !== undefined) {
    			canvas.width = displayWidth;
    		}
    	}

    	if (renderHeight === null || renderHeight === '') {
    		if (canvas.style.height === '') {
    			// If no explicit render height and style height, let's apply the aspect ratio,
    			// which one can be specified by the user but also by charts as default option
    			// (i.e. options.aspectRatio). If not specified, use canvas aspect ratio of 2.
    			canvas.height = canvas.width / (config.options.aspectRatio || 2);
    		} else {
    			var displayHeight = readUsedSize(canvas, 'height');
    			if (displayWidth !== undefined) {
    				canvas.height = displayHeight;
    			}
    		}
    	}

    	return canvas;
    }

    /**
     * Detects support for options object argument in addEventListener.
     * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support
     * @private
     */
    var supportsEventListenerOptions = (function() {
    	var supports = false;
    	try {
    		var options = Object.defineProperty({}, 'passive', {
    			// eslint-disable-next-line getter-return
    			get: function() {
    				supports = true;
    			}
    		});
    		window.addEventListener('e', null, options);
    	} catch (e) {
    		// continue regardless of error
    	}
    	return supports;
    }());

    // Default passive to true as expected by Chrome for 'touchstart' and 'touchend' events.
    // https://github.com/chartjs/Chart.js/issues/4287
    var eventListenerOptions = supportsEventListenerOptions ? {passive: true} : false;

    function addListener(node, type, listener) {
    	node.addEventListener(type, listener, eventListenerOptions);
    }

    function removeListener(node, type, listener) {
    	node.removeEventListener(type, listener, eventListenerOptions);
    }

    function createEvent(type, chart, x, y, nativeEvent) {
    	return {
    		type: type,
    		chart: chart,
    		native: nativeEvent || null,
    		x: x !== undefined ? x : null,
    		y: y !== undefined ? y : null,
    	};
    }

    function fromNativeEvent(event, chart) {
    	var type = EVENT_TYPES[event.type] || event.type;
    	var pos = helpers$1.getRelativePosition(event, chart);
    	return createEvent(type, chart, pos.x, pos.y, event);
    }

    function throttled(fn, thisArg) {
    	var ticking = false;
    	var args = [];

    	return function() {
    		args = Array.prototype.slice.call(arguments);
    		thisArg = thisArg || this;

    		if (!ticking) {
    			ticking = true;
    			helpers$1.requestAnimFrame.call(window, function() {
    				ticking = false;
    				fn.apply(thisArg, args);
    			});
    		}
    	};
    }

    function createDiv(cls) {
    	var el = document.createElement('div');
    	el.className = cls || '';
    	return el;
    }

    // Implementation based on https://github.com/marcj/css-element-queries
    function createResizer(handler) {
    	var maxSize = 1000000;

    	// NOTE(SB) Don't use innerHTML because it could be considered unsafe.
    	// https://github.com/chartjs/Chart.js/issues/5902
    	var resizer = createDiv(CSS_SIZE_MONITOR);
    	var expand = createDiv(CSS_SIZE_MONITOR + '-expand');
    	var shrink = createDiv(CSS_SIZE_MONITOR + '-shrink');

    	expand.appendChild(createDiv());
    	shrink.appendChild(createDiv());

    	resizer.appendChild(expand);
    	resizer.appendChild(shrink);
    	resizer._reset = function() {
    		expand.scrollLeft = maxSize;
    		expand.scrollTop = maxSize;
    		shrink.scrollLeft = maxSize;
    		shrink.scrollTop = maxSize;
    	};

    	var onScroll = function() {
    		resizer._reset();
    		handler();
    	};

    	addListener(expand, 'scroll', onScroll.bind(expand, 'expand'));
    	addListener(shrink, 'scroll', onScroll.bind(shrink, 'shrink'));

    	return resizer;
    }

    // https://davidwalsh.name/detect-node-insertion
    function watchForRender(node, handler) {
    	var expando = node[EXPANDO_KEY] || (node[EXPANDO_KEY] = {});
    	var proxy = expando.renderProxy = function(e) {
    		if (e.animationName === CSS_RENDER_ANIMATION) {
    			handler();
    		}
    	};

    	helpers$1.each(ANIMATION_START_EVENTS, function(type) {
    		addListener(node, type, proxy);
    	});

    	// #4737: Chrome might skip the CSS animation when the CSS_RENDER_MONITOR class
    	// is removed then added back immediately (same animation frame?). Accessing the
    	// `offsetParent` property will force a reflow and re-evaluate the CSS animation.
    	// https://gist.github.com/paulirish/5d52fb081b3570c81e3a#box-metrics
    	// https://github.com/chartjs/Chart.js/issues/4737
    	expando.reflow = !!node.offsetParent;

    	node.classList.add(CSS_RENDER_MONITOR);
    }

    function unwatchForRender(node) {
    	var expando = node[EXPANDO_KEY] || {};
    	var proxy = expando.renderProxy;

    	if (proxy) {
    		helpers$1.each(ANIMATION_START_EVENTS, function(type) {
    			removeListener(node, type, proxy);
    		});

    		delete expando.renderProxy;
    	}

    	node.classList.remove(CSS_RENDER_MONITOR);
    }

    function addResizeListener(node, listener, chart) {
    	var expando = node[EXPANDO_KEY] || (node[EXPANDO_KEY] = {});

    	// Let's keep track of this added resizer and thus avoid DOM query when removing it.
    	var resizer = expando.resizer = createResizer(throttled(function() {
    		if (expando.resizer) {
    			var container = chart.options.maintainAspectRatio && node.parentNode;
    			var w = container ? container.clientWidth : 0;
    			listener(createEvent('resize', chart));
    			if (container && container.clientWidth < w && chart.canvas) {
    				// If the container size shrank during chart resize, let's assume
    				// scrollbar appeared. So we resize again with the scrollbar visible -
    				// effectively making chart smaller and the scrollbar hidden again.
    				// Because we are inside `throttled`, and currently `ticking`, scroll
    				// events are ignored during this whole 2 resize process.
    				// If we assumed wrong and something else happened, we are resizing
    				// twice in a frame (potential performance issue)
    				listener(createEvent('resize', chart));
    			}
    		}
    	}));

    	// The resizer needs to be attached to the node parent, so we first need to be
    	// sure that `node` is attached to the DOM before injecting the resizer element.
    	watchForRender(node, function() {
    		if (expando.resizer) {
    			var container = node.parentNode;
    			if (container && container !== resizer.parentNode) {
    				container.insertBefore(resizer, container.firstChild);
    			}

    			// The container size might have changed, let's reset the resizer state.
    			resizer._reset();
    		}
    	});
    }

    function removeResizeListener(node) {
    	var expando = node[EXPANDO_KEY] || {};
    	var resizer = expando.resizer;

    	delete expando.resizer;
    	unwatchForRender(node);

    	if (resizer && resizer.parentNode) {
    		resizer.parentNode.removeChild(resizer);
    	}
    }

    /**
     * Injects CSS styles inline if the styles are not already present.
     * @param {HTMLDocument|ShadowRoot} rootNode - the node to contain the <style>.
     * @param {string} css - the CSS to be injected.
     */
    function injectCSS(rootNode, css) {
    	// https://stackoverflow.com/q/3922139
    	var expando = rootNode[EXPANDO_KEY] || (rootNode[EXPANDO_KEY] = {});
    	if (!expando.containsStyles) {
    		expando.containsStyles = true;
    		css = '/* Chart.js */\n' + css;
    		var style = document.createElement('style');
    		style.setAttribute('type', 'text/css');
    		style.appendChild(document.createTextNode(css));
    		rootNode.appendChild(style);
    	}
    }

    var platform_dom$2 = {
    	/**
    	 * When `true`, prevents the automatic injection of the stylesheet required to
    	 * correctly detect when the chart is added to the DOM and then resized. This
    	 * switch has been added to allow external stylesheet (`dist/Chart(.min)?.js`)
    	 * to be manually imported to make this library compatible with any CSP.
    	 * See https://github.com/chartjs/Chart.js/issues/5208
    	 */
    	disableCSSInjection: false,

    	/**
    	 * This property holds whether this platform is enabled for the current environment.
    	 * Currently used by platform.js to select the proper implementation.
    	 * @private
    	 */
    	_enabled: typeof window !== 'undefined' && typeof document !== 'undefined',

    	/**
    	 * Initializes resources that depend on platform options.
    	 * @param {HTMLCanvasElement} canvas - The Canvas element.
    	 * @private
    	 */
    	_ensureLoaded: function(canvas) {
    		if (!this.disableCSSInjection) {
    			// If the canvas is in a shadow DOM, then the styles must also be inserted
    			// into the same shadow DOM.
    			// https://github.com/chartjs/Chart.js/issues/5763
    			var root = canvas.getRootNode ? canvas.getRootNode() : document;
    			var targetNode = root.host ? root : document.head;
    			injectCSS(targetNode, stylesheet);
    		}
    	},

    	acquireContext: function(item, config) {
    		if (typeof item === 'string') {
    			item = document.getElementById(item);
    		} else if (item.length) {
    			// Support for array based queries (such as jQuery)
    			item = item[0];
    		}

    		if (item && item.canvas) {
    			// Support for any object associated to a canvas (including a context2d)
    			item = item.canvas;
    		}

    		// To prevent canvas fingerprinting, some add-ons undefine the getContext
    		// method, for example: https://github.com/kkapsner/CanvasBlocker
    		// https://github.com/chartjs/Chart.js/issues/2807
    		var context = item && item.getContext && item.getContext('2d');

    		// `instanceof HTMLCanvasElement/CanvasRenderingContext2D` fails when the item is
    		// inside an iframe or when running in a protected environment. We could guess the
    		// types from their toString() value but let's keep things flexible and assume it's
    		// a sufficient condition if the item has a context2D which has item as `canvas`.
    		// https://github.com/chartjs/Chart.js/issues/3887
    		// https://github.com/chartjs/Chart.js/issues/4102
    		// https://github.com/chartjs/Chart.js/issues/4152
    		if (context && context.canvas === item) {
    			// Load platform resources on first chart creation, to make it possible to
    			// import the library before setting platform options.
    			this._ensureLoaded(item);
    			initCanvas(item, config);
    			return context;
    		}

    		return null;
    	},

    	releaseContext: function(context) {
    		var canvas = context.canvas;
    		if (!canvas[EXPANDO_KEY]) {
    			return;
    		}

    		var initial = canvas[EXPANDO_KEY].initial;
    		['height', 'width'].forEach(function(prop) {
    			var value = initial[prop];
    			if (helpers$1.isNullOrUndef(value)) {
    				canvas.removeAttribute(prop);
    			} else {
    				canvas.setAttribute(prop, value);
    			}
    		});

    		helpers$1.each(initial.style || {}, function(value, key) {
    			canvas.style[key] = value;
    		});

    		// The canvas render size might have been changed (and thus the state stack discarded),
    		// we can't use save() and restore() to restore the initial state. So make sure that at
    		// least the canvas context is reset to the default state by setting the canvas width.
    		// https://www.w3.org/TR/2011/WD-html5-20110525/the-canvas-element.html
    		// eslint-disable-next-line no-self-assign
    		canvas.width = canvas.width;

    		delete canvas[EXPANDO_KEY];
    	},

    	addEventListener: function(chart, type, listener) {
    		var canvas = chart.canvas;
    		if (type === 'resize') {
    			// Note: the resize event is not supported on all browsers.
    			addResizeListener(canvas, listener, chart);
    			return;
    		}

    		var expando = listener[EXPANDO_KEY] || (listener[EXPANDO_KEY] = {});
    		var proxies = expando.proxies || (expando.proxies = {});
    		var proxy = proxies[chart.id + '_' + type] = function(event) {
    			listener(fromNativeEvent(event, chart));
    		};

    		addListener(canvas, type, proxy);
    	},

    	removeEventListener: function(chart, type, listener) {
    		var canvas = chart.canvas;
    		if (type === 'resize') {
    			// Note: the resize event is not supported on all browsers.
    			removeResizeListener(canvas);
    			return;
    		}

    		var expando = listener[EXPANDO_KEY] || {};
    		var proxies = expando.proxies || {};
    		var proxy = proxies[chart.id + '_' + type];
    		if (!proxy) {
    			return;
    		}

    		removeListener(canvas, type, proxy);
    	}
    };

    // DEPRECATIONS

    /**
     * Provided for backward compatibility, use EventTarget.addEventListener instead.
     * EventTarget.addEventListener compatibility: Chrome, Opera 7, Safari, FF1.5+, IE9+
     * @see https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener
     * @function Chart.helpers.addEvent
     * @deprecated since version 2.7.0
     * @todo remove at version 3
     * @private
     */
    helpers$1.addEvent = addListener;

    /**
     * Provided for backward compatibility, use EventTarget.removeEventListener instead.
     * EventTarget.removeEventListener compatibility: Chrome, Opera 7, Safari, FF1.5+, IE9+
     * @see https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener
     * @function Chart.helpers.removeEvent
     * @deprecated since version 2.7.0
     * @todo remove at version 3
     * @private
     */
    helpers$1.removeEvent = removeListener;

    // @TODO Make possible to select another platform at build time.
    var implementation = platform_dom$2._enabled ? platform_dom$2 : platform_basic;

    /**
     * @namespace Chart.platform
     * @see https://chartjs.gitbooks.io/proposals/content/Platform.html
     * @since 2.4.0
     */
    var platform = helpers$1.extend({
    	/**
    	 * @since 2.7.0
    	 */
    	initialize: function() {},

    	/**
    	 * Called at chart construction time, returns a context2d instance implementing
    	 * the [W3C Canvas 2D Context API standard]{@link https://www.w3.org/TR/2dcontext/}.
    	 * @param {*} item - The native item from which to acquire context (platform specific)
    	 * @param {object} options - The chart options
    	 * @returns {CanvasRenderingContext2D} context2d instance
    	 */
    	acquireContext: function() {},

    	/**
    	 * Called at chart destruction time, releases any resources associated to the context
    	 * previously returned by the acquireContext() method.
    	 * @param {CanvasRenderingContext2D} context - The context2d instance
    	 * @returns {boolean} true if the method succeeded, else false
    	 */
    	releaseContext: function() {},

    	/**
    	 * Registers the specified listener on the given chart.
    	 * @param {Chart} chart - Chart from which to listen for event
    	 * @param {string} type - The ({@link IEvent}) type to listen for
    	 * @param {function} listener - Receives a notification (an object that implements
    	 * the {@link IEvent} interface) when an event of the specified type occurs.
    	 */
    	addEventListener: function() {},

    	/**
    	 * Removes the specified listener previously registered with addEventListener.
    	 * @param {Chart} chart - Chart from which to remove the listener
    	 * @param {string} type - The ({@link IEvent}) type to remove
    	 * @param {function} listener - The listener function to remove from the event target.
    	 */
    	removeEventListener: function() {}

    }, implementation);

    core_defaults._set('global', {
    	plugins: {}
    });

    /**
     * The plugin service singleton
     * @namespace Chart.plugins
     * @since 2.1.0
     */
    var core_plugins = {
    	/**
    	 * Globally registered plugins.
    	 * @private
    	 */
    	_plugins: [],

    	/**
    	 * This identifier is used to invalidate the descriptors cache attached to each chart
    	 * when a global plugin is registered or unregistered. In this case, the cache ID is
    	 * incremented and descriptors are regenerated during following API calls.
    	 * @private
    	 */
    	_cacheId: 0,

    	/**
    	 * Registers the given plugin(s) if not already registered.
    	 * @param {IPlugin[]|IPlugin} plugins plugin instance(s).
    	 */
    	register: function(plugins) {
    		var p = this._plugins;
    		([]).concat(plugins).forEach(function(plugin) {
    			if (p.indexOf(plugin) === -1) {
    				p.push(plugin);
    			}
    		});

    		this._cacheId++;
    	},

    	/**
    	 * Unregisters the given plugin(s) only if registered.
    	 * @param {IPlugin[]|IPlugin} plugins plugin instance(s).
    	 */
    	unregister: function(plugins) {
    		var p = this._plugins;
    		([]).concat(plugins).forEach(function(plugin) {
    			var idx = p.indexOf(plugin);
    			if (idx !== -1) {
    				p.splice(idx, 1);
    			}
    		});

    		this._cacheId++;
    	},

    	/**
    	 * Remove all registered plugins.
    	 * @since 2.1.5
    	 */
    	clear: function() {
    		this._plugins = [];
    		this._cacheId++;
    	},

    	/**
    	 * Returns the number of registered plugins?
    	 * @returns {number}
    	 * @since 2.1.5
    	 */
    	count: function() {
    		return this._plugins.length;
    	},

    	/**
    	 * Returns all registered plugin instances.
    	 * @returns {IPlugin[]} array of plugin objects.
    	 * @since 2.1.5
    	 */
    	getAll: function() {
    		return this._plugins;
    	},

    	/**
    	 * Calls enabled plugins for `chart` on the specified hook and with the given args.
    	 * This method immediately returns as soon as a plugin explicitly returns false. The
    	 * returned value can be used, for instance, to interrupt the current action.
    	 * @param {Chart} chart - The chart instance for which plugins should be called.
    	 * @param {string} hook - The name of the plugin method to call (e.g. 'beforeUpdate').
    	 * @param {Array} [args] - Extra arguments to apply to the hook call.
    	 * @returns {boolean} false if any of the plugins return false, else returns true.
    	 */
    	notify: function(chart, hook, args) {
    		var descriptors = this.descriptors(chart);
    		var ilen = descriptors.length;
    		var i, descriptor, plugin, params, method;

    		for (i = 0; i < ilen; ++i) {
    			descriptor = descriptors[i];
    			plugin = descriptor.plugin;
    			method = plugin[hook];
    			if (typeof method === 'function') {
    				params = [chart].concat(args || []);
    				params.push(descriptor.options);
    				if (method.apply(plugin, params) === false) {
    					return false;
    				}
    			}
    		}

    		return true;
    	},

    	/**
    	 * Returns descriptors of enabled plugins for the given chart.
    	 * @returns {object[]} [{ plugin, options }]
    	 * @private
    	 */
    	descriptors: function(chart) {
    		var cache = chart.$plugins || (chart.$plugins = {});
    		if (cache.id === this._cacheId) {
    			return cache.descriptors;
    		}

    		var plugins = [];
    		var descriptors = [];
    		var config = (chart && chart.config) || {};
    		var options = (config.options && config.options.plugins) || {};

    		this._plugins.concat(config.plugins || []).forEach(function(plugin) {
    			var idx = plugins.indexOf(plugin);
    			if (idx !== -1) {
    				return;
    			}

    			var id = plugin.id;
    			var opts = options[id];
    			if (opts === false) {
    				return;
    			}

    			if (opts === true) {
    				opts = helpers$1.clone(core_defaults.global.plugins[id]);
    			}

    			plugins.push(plugin);
    			descriptors.push({
    				plugin: plugin,
    				options: opts || {}
    			});
    		});

    		cache.descriptors = descriptors;
    		cache.id = this._cacheId;
    		return descriptors;
    	},

    	/**
    	 * Invalidates cache for the given chart: descriptors hold a reference on plugin option,
    	 * but in some cases, this reference can be changed by the user when updating options.
    	 * https://github.com/chartjs/Chart.js/issues/5111#issuecomment-355934167
    	 * @private
    	 */
    	_invalidate: function(chart) {
    		delete chart.$plugins;
    	}
    };

    var core_scaleService = {
    	// Scale registration object. Extensions can register new scale types (such as log or DB scales) and then
    	// use the new chart options to grab the correct scale
    	constructors: {},
    	// Use a registration function so that we can move to an ES6 map when we no longer need to support
    	// old browsers

    	// Scale config defaults
    	defaults: {},
    	registerScaleType: function(type, scaleConstructor, scaleDefaults) {
    		this.constructors[type] = scaleConstructor;
    		this.defaults[type] = helpers$1.clone(scaleDefaults);
    	},
    	getScaleConstructor: function(type) {
    		return this.constructors.hasOwnProperty(type) ? this.constructors[type] : undefined;
    	},
    	getScaleDefaults: function(type) {
    		// Return the scale defaults merged with the global settings so that we always use the latest ones
    		return this.defaults.hasOwnProperty(type) ? helpers$1.merge(Object.create(null), [core_defaults.scale, this.defaults[type]]) : {};
    	},
    	updateScaleDefaults: function(type, additions) {
    		var me = this;
    		if (me.defaults.hasOwnProperty(type)) {
    			me.defaults[type] = helpers$1.extend(me.defaults[type], additions);
    		}
    	},
    	addScalesToLayout: function(chart) {
    		// Adds each scale to the chart.boxes array to be sized accordingly
    		helpers$1.each(chart.scales, function(scale) {
    			// Set ILayoutItem parameters for backwards compatibility
    			scale.fullWidth = scale.options.fullWidth;
    			scale.position = scale.options.position;
    			scale.weight = scale.options.weight;
    			core_layouts.addBox(chart, scale);
    		});
    	}
    };

    var valueOrDefault$8 = helpers$1.valueOrDefault;
    var getRtlHelper = helpers$1.rtl.getRtlAdapter;

    core_defaults._set('global', {
    	tooltips: {
    		enabled: true,
    		custom: null,
    		mode: 'nearest',
    		position: 'average',
    		intersect: true,
    		backgroundColor: 'rgba(0,0,0,0.8)',
    		titleFontStyle: 'bold',
    		titleSpacing: 2,
    		titleMarginBottom: 6,
    		titleFontColor: '#fff',
    		titleAlign: 'left',
    		bodySpacing: 2,
    		bodyFontColor: '#fff',
    		bodyAlign: 'left',
    		footerFontStyle: 'bold',
    		footerSpacing: 2,
    		footerMarginTop: 6,
    		footerFontColor: '#fff',
    		footerAlign: 'left',
    		yPadding: 6,
    		xPadding: 6,
    		caretPadding: 2,
    		caretSize: 5,
    		cornerRadius: 6,
    		multiKeyBackground: '#fff',
    		displayColors: true,
    		borderColor: 'rgba(0,0,0,0)',
    		borderWidth: 0,
    		callbacks: {
    			// Args are: (tooltipItems, data)
    			beforeTitle: helpers$1.noop,
    			title: function(tooltipItems, data) {
    				var title = '';
    				var labels = data.labels;
    				var labelCount = labels ? labels.length : 0;

    				if (tooltipItems.length > 0) {
    					var item = tooltipItems[0];
    					if (item.label) {
    						title = item.label;
    					} else if (item.xLabel) {
    						title = item.xLabel;
    					} else if (labelCount > 0 && item.index < labelCount) {
    						title = labels[item.index];
    					}
    				}

    				return title;
    			},
    			afterTitle: helpers$1.noop,

    			// Args are: (tooltipItems, data)
    			beforeBody: helpers$1.noop,

    			// Args are: (tooltipItem, data)
    			beforeLabel: helpers$1.noop,
    			label: function(tooltipItem, data) {
    				var label = data.datasets[tooltipItem.datasetIndex].label || '';

    				if (label) {
    					label += ': ';
    				}
    				if (!helpers$1.isNullOrUndef(tooltipItem.value)) {
    					label += tooltipItem.value;
    				} else {
    					label += tooltipItem.yLabel;
    				}
    				return label;
    			},
    			labelColor: function(tooltipItem, chart) {
    				var meta = chart.getDatasetMeta(tooltipItem.datasetIndex);
    				var activeElement = meta.data[tooltipItem.index];
    				var view = activeElement._view;
    				return {
    					borderColor: view.borderColor,
    					backgroundColor: view.backgroundColor
    				};
    			},
    			labelTextColor: function() {
    				return this._options.bodyFontColor;
    			},
    			afterLabel: helpers$1.noop,

    			// Args are: (tooltipItems, data)
    			afterBody: helpers$1.noop,

    			// Args are: (tooltipItems, data)
    			beforeFooter: helpers$1.noop,
    			footer: helpers$1.noop,
    			afterFooter: helpers$1.noop
    		}
    	}
    });

    var positioners = {
    	/**
    	 * Average mode places the tooltip at the average position of the elements shown
    	 * @function Chart.Tooltip.positioners.average
    	 * @param elements {ChartElement[]} the elements being displayed in the tooltip
    	 * @returns {object} tooltip position
    	 */
    	average: function(elements) {
    		if (!elements.length) {
    			return false;
    		}

    		var i, len;
    		var x = 0;
    		var y = 0;
    		var count = 0;

    		for (i = 0, len = elements.length; i < len; ++i) {
    			var el = elements[i];
    			if (el && el.hasValue()) {
    				var pos = el.tooltipPosition();
    				x += pos.x;
    				y += pos.y;
    				++count;
    			}
    		}

    		return {
    			x: x / count,
    			y: y / count
    		};
    	},

    	/**
    	 * Gets the tooltip position nearest of the item nearest to the event position
    	 * @function Chart.Tooltip.positioners.nearest
    	 * @param elements {Chart.Element[]} the tooltip elements
    	 * @param eventPosition {object} the position of the event in canvas coordinates
    	 * @returns {object} the tooltip position
    	 */
    	nearest: function(elements, eventPosition) {
    		var x = eventPosition.x;
    		var y = eventPosition.y;
    		var minDistance = Number.POSITIVE_INFINITY;
    		var i, len, nearestElement;

    		for (i = 0, len = elements.length; i < len; ++i) {
    			var el = elements[i];
    			if (el && el.hasValue()) {
    				var center = el.getCenterPoint();
    				var d = helpers$1.distanceBetweenPoints(eventPosition, center);

    				if (d < minDistance) {
    					minDistance = d;
    					nearestElement = el;
    				}
    			}
    		}

    		if (nearestElement) {
    			var tp = nearestElement.tooltipPosition();
    			x = tp.x;
    			y = tp.y;
    		}

    		return {
    			x: x,
    			y: y
    		};
    	}
    };

    // Helper to push or concat based on if the 2nd parameter is an array or not
    function pushOrConcat(base, toPush) {
    	if (toPush) {
    		if (helpers$1.isArray(toPush)) {
    			// base = base.concat(toPush);
    			Array.prototype.push.apply(base, toPush);
    		} else {
    			base.push(toPush);
    		}
    	}

    	return base;
    }

    /**
     * Returns array of strings split by newline
     * @param {string} value - The value to split by newline.
     * @returns {string[]} value if newline present - Returned from String split() method
     * @function
     */
    function splitNewlines(str) {
    	if ((typeof str === 'string' || str instanceof String) && str.indexOf('\n') > -1) {
    		return str.split('\n');
    	}
    	return str;
    }


    /**
     * Private helper to create a tooltip item model
     * @param element - the chart element (point, arc, bar) to create the tooltip item for
     * @return new tooltip item
     */
    function createTooltipItem(element) {
    	var xScale = element._xScale;
    	var yScale = element._yScale || element._scale; // handle radar || polarArea charts
    	var index = element._index;
    	var datasetIndex = element._datasetIndex;
    	var controller = element._chart.getDatasetMeta(datasetIndex).controller;
    	var indexScale = controller._getIndexScale();
    	var valueScale = controller._getValueScale();

    	return {
    		xLabel: xScale ? xScale.getLabelForIndex(index, datasetIndex) : '',
    		yLabel: yScale ? yScale.getLabelForIndex(index, datasetIndex) : '',
    		label: indexScale ? '' + indexScale.getLabelForIndex(index, datasetIndex) : '',
    		value: valueScale ? '' + valueScale.getLabelForIndex(index, datasetIndex) : '',
    		index: index,
    		datasetIndex: datasetIndex,
    		x: element._model.x,
    		y: element._model.y
    	};
    }

    /**
     * Helper to get the reset model for the tooltip
     * @param tooltipOpts {object} the tooltip options
     */
    function getBaseModel(tooltipOpts) {
    	var globalDefaults = core_defaults.global;

    	return {
    		// Positioning
    		xPadding: tooltipOpts.xPadding,
    		yPadding: tooltipOpts.yPadding,
    		xAlign: tooltipOpts.xAlign,
    		yAlign: tooltipOpts.yAlign,

    		// Drawing direction and text direction
    		rtl: tooltipOpts.rtl,
    		textDirection: tooltipOpts.textDirection,

    		// Body
    		bodyFontColor: tooltipOpts.bodyFontColor,
    		_bodyFontFamily: valueOrDefault$8(tooltipOpts.bodyFontFamily, globalDefaults.defaultFontFamily),
    		_bodyFontStyle: valueOrDefault$8(tooltipOpts.bodyFontStyle, globalDefaults.defaultFontStyle),
    		_bodyAlign: tooltipOpts.bodyAlign,
    		bodyFontSize: valueOrDefault$8(tooltipOpts.bodyFontSize, globalDefaults.defaultFontSize),
    		bodySpacing: tooltipOpts.bodySpacing,

    		// Title
    		titleFontColor: tooltipOpts.titleFontColor,
    		_titleFontFamily: valueOrDefault$8(tooltipOpts.titleFontFamily, globalDefaults.defaultFontFamily),
    		_titleFontStyle: valueOrDefault$8(tooltipOpts.titleFontStyle, globalDefaults.defaultFontStyle),
    		titleFontSize: valueOrDefault$8(tooltipOpts.titleFontSize, globalDefaults.defaultFontSize),
    		_titleAlign: tooltipOpts.titleAlign,
    		titleSpacing: tooltipOpts.titleSpacing,
    		titleMarginBottom: tooltipOpts.titleMarginBottom,

    		// Footer
    		footerFontColor: tooltipOpts.footerFontColor,
    		_footerFontFamily: valueOrDefault$8(tooltipOpts.footerFontFamily, globalDefaults.defaultFontFamily),
    		_footerFontStyle: valueOrDefault$8(tooltipOpts.footerFontStyle, globalDefaults.defaultFontStyle),
    		footerFontSize: valueOrDefault$8(tooltipOpts.footerFontSize, globalDefaults.defaultFontSize),
    		_footerAlign: tooltipOpts.footerAlign,
    		footerSpacing: tooltipOpts.footerSpacing,
    		footerMarginTop: tooltipOpts.footerMarginTop,

    		// Appearance
    		caretSize: tooltipOpts.caretSize,
    		cornerRadius: tooltipOpts.cornerRadius,
    		backgroundColor: tooltipOpts.backgroundColor,
    		opacity: 0,
    		legendColorBackground: tooltipOpts.multiKeyBackground,
    		displayColors: tooltipOpts.displayColors,
    		borderColor: tooltipOpts.borderColor,
    		borderWidth: tooltipOpts.borderWidth
    	};
    }

    /**
     * Get the size of the tooltip
     */
    function getTooltipSize(tooltip, model) {
    	var ctx = tooltip._chart.ctx;

    	var height = model.yPadding * 2; // Tooltip Padding
    	var width = 0;

    	// Count of all lines in the body
    	var body = model.body;
    	var combinedBodyLength = body.reduce(function(count, bodyItem) {
    		return count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length;
    	}, 0);
    	combinedBodyLength += model.beforeBody.length + model.afterBody.length;

    	var titleLineCount = model.title.length;
    	var footerLineCount = model.footer.length;
    	var titleFontSize = model.titleFontSize;
    	var bodyFontSize = model.bodyFontSize;
    	var footerFontSize = model.footerFontSize;

    	height += titleLineCount * titleFontSize; // Title Lines
    	height += titleLineCount ? (titleLineCount - 1) * model.titleSpacing : 0; // Title Line Spacing
    	height += titleLineCount ? model.titleMarginBottom : 0; // Title's bottom Margin
    	height += combinedBodyLength * bodyFontSize; // Body Lines
    	height += combinedBodyLength ? (combinedBodyLength - 1) * model.bodySpacing : 0; // Body Line Spacing
    	height += footerLineCount ? model.footerMarginTop : 0; // Footer Margin
    	height += footerLineCount * (footerFontSize); // Footer Lines
    	height += footerLineCount ? (footerLineCount - 1) * model.footerSpacing : 0; // Footer Line Spacing

    	// Title width
    	var widthPadding = 0;
    	var maxLineWidth = function(line) {
    		width = Math.max(width, ctx.measureText(line).width + widthPadding);
    	};

    	ctx.font = helpers$1.fontString(titleFontSize, model._titleFontStyle, model._titleFontFamily);
    	helpers$1.each(model.title, maxLineWidth);

    	// Body width
    	ctx.font = helpers$1.fontString(bodyFontSize, model._bodyFontStyle, model._bodyFontFamily);
    	helpers$1.each(model.beforeBody.concat(model.afterBody), maxLineWidth);

    	// Body lines may include some extra width due to the color box
    	widthPadding = model.displayColors ? (bodyFontSize + 2) : 0;
    	helpers$1.each(body, function(bodyItem) {
    		helpers$1.each(bodyItem.before, maxLineWidth);
    		helpers$1.each(bodyItem.lines, maxLineWidth);
    		helpers$1.each(bodyItem.after, maxLineWidth);
    	});

    	// Reset back to 0
    	widthPadding = 0;

    	// Footer width
    	ctx.font = helpers$1.fontString(footerFontSize, model._footerFontStyle, model._footerFontFamily);
    	helpers$1.each(model.footer, maxLineWidth);

    	// Add padding
    	width += 2 * model.xPadding;

    	return {
    		width: width,
    		height: height
    	};
    }

    /**
     * Helper to get the alignment of a tooltip given the size
     */
    function determineAlignment(tooltip, size) {
    	var model = tooltip._model;
    	var chart = tooltip._chart;
    	var chartArea = tooltip._chart.chartArea;
    	var xAlign = 'center';
    	var yAlign = 'center';

    	if (model.y < size.height) {
    		yAlign = 'top';
    	} else if (model.y > (chart.height - size.height)) {
    		yAlign = 'bottom';
    	}

    	var lf, rf; // functions to determine left, right alignment
    	var olf, orf; // functions to determine if left/right alignment causes tooltip to go outside chart
    	var yf; // function to get the y alignment if the tooltip goes outside of the left or right edges
    	var midX = (chartArea.left + chartArea.right) / 2;
    	var midY = (chartArea.top + chartArea.bottom) / 2;

    	if (yAlign === 'center') {
    		lf = function(x) {
    			return x <= midX;
    		};
    		rf = function(x) {
    			return x > midX;
    		};
    	} else {
    		lf = function(x) {
    			return x <= (size.width / 2);
    		};
    		rf = function(x) {
    			return x >= (chart.width - (size.width / 2));
    		};
    	}

    	olf = function(x) {
    		return x + size.width + model.caretSize + model.caretPadding > chart.width;
    	};
    	orf = function(x) {
    		return x - size.width - model.caretSize - model.caretPadding < 0;
    	};
    	yf = function(y) {
    		return y <= midY ? 'top' : 'bottom';
    	};

    	if (lf(model.x)) {
    		xAlign = 'left';

    		// Is tooltip too wide and goes over the right side of the chart.?
    		if (olf(model.x)) {
    			xAlign = 'center';
    			yAlign = yf(model.y);
    		}
    	} else if (rf(model.x)) {
    		xAlign = 'right';

    		// Is tooltip too wide and goes outside left edge of canvas?
    		if (orf(model.x)) {
    			xAlign = 'center';
    			yAlign = yf(model.y);
    		}
    	}

    	var opts = tooltip._options;
    	return {
    		xAlign: opts.xAlign ? opts.xAlign : xAlign,
    		yAlign: opts.yAlign ? opts.yAlign : yAlign
    	};
    }

    /**
     * Helper to get the location a tooltip needs to be placed at given the initial position (via the vm) and the size and alignment
     */
    function getBackgroundPoint(vm, size, alignment, chart) {
    	// Background Position
    	var x = vm.x;
    	var y = vm.y;

    	var caretSize = vm.caretSize;
    	var caretPadding = vm.caretPadding;
    	var cornerRadius = vm.cornerRadius;
    	var xAlign = alignment.xAlign;
    	var yAlign = alignment.yAlign;
    	var paddingAndSize = caretSize + caretPadding;
    	var radiusAndPadding = cornerRadius + caretPadding;

    	if (xAlign === 'right') {
    		x -= size.width;
    	} else if (xAlign === 'center') {
    		x -= (size.width / 2);
    		if (x + size.width > chart.width) {
    			x = chart.width - size.width;
    		}
    		if (x < 0) {
    			x = 0;
    		}
    	}

    	if (yAlign === 'top') {
    		y += paddingAndSize;
    	} else if (yAlign === 'bottom') {
    		y -= size.height + paddingAndSize;
    	} else {
    		y -= (size.height / 2);
    	}

    	if (yAlign === 'center') {
    		if (xAlign === 'left') {
    			x += paddingAndSize;
    		} else if (xAlign === 'right') {
    			x -= paddingAndSize;
    		}
    	} else if (xAlign === 'left') {
    		x -= radiusAndPadding;
    	} else if (xAlign === 'right') {
    		x += radiusAndPadding;
    	}

    	return {
    		x: x,
    		y: y
    	};
    }

    function getAlignedX(vm, align) {
    	return align === 'center'
    		? vm.x + vm.width / 2
    		: align === 'right'
    			? vm.x + vm.width - vm.xPadding
    			: vm.x + vm.xPadding;
    }

    /**
     * Helper to build before and after body lines
     */
    function getBeforeAfterBodyLines(callback) {
    	return pushOrConcat([], splitNewlines(callback));
    }

    var exports$4 = core_element.extend({
    	initialize: function() {
    		this._model = getBaseModel(this._options);
    		this._lastActive = [];
    	},

    	// Get the title
    	// Args are: (tooltipItem, data)
    	getTitle: function() {
    		var me = this;
    		var opts = me._options;
    		var callbacks = opts.callbacks;

    		var beforeTitle = callbacks.beforeTitle.apply(me, arguments);
    		var title = callbacks.title.apply(me, arguments);
    		var afterTitle = callbacks.afterTitle.apply(me, arguments);

    		var lines = [];
    		lines = pushOrConcat(lines, splitNewlines(beforeTitle));
    		lines = pushOrConcat(lines, splitNewlines(title));
    		lines = pushOrConcat(lines, splitNewlines(afterTitle));

    		return lines;
    	},

    	// Args are: (tooltipItem, data)
    	getBeforeBody: function() {
    		return getBeforeAfterBodyLines(this._options.callbacks.beforeBody.apply(this, arguments));
    	},

    	// Args are: (tooltipItem, data)
    	getBody: function(tooltipItems, data) {
    		var me = this;
    		var callbacks = me._options.callbacks;
    		var bodyItems = [];

    		helpers$1.each(tooltipItems, function(tooltipItem) {
    			var bodyItem = {
    				before: [],
    				lines: [],
    				after: []
    			};
    			pushOrConcat(bodyItem.before, splitNewlines(callbacks.beforeLabel.call(me, tooltipItem, data)));
    			pushOrConcat(bodyItem.lines, callbacks.label.call(me, tooltipItem, data));
    			pushOrConcat(bodyItem.after, splitNewlines(callbacks.afterLabel.call(me, tooltipItem, data)));

    			bodyItems.push(bodyItem);
    		});

    		return bodyItems;
    	},

    	// Args are: (tooltipItem, data)
    	getAfterBody: function() {
    		return getBeforeAfterBodyLines(this._options.callbacks.afterBody.apply(this, arguments));
    	},

    	// Get the footer and beforeFooter and afterFooter lines
    	// Args are: (tooltipItem, data)
    	getFooter: function() {
    		var me = this;
    		var callbacks = me._options.callbacks;

    		var beforeFooter = callbacks.beforeFooter.apply(me, arguments);
    		var footer = callbacks.footer.apply(me, arguments);
    		var afterFooter = callbacks.afterFooter.apply(me, arguments);

    		var lines = [];
    		lines = pushOrConcat(lines, splitNewlines(beforeFooter));
    		lines = pushOrConcat(lines, splitNewlines(footer));
    		lines = pushOrConcat(lines, splitNewlines(afterFooter));

    		return lines;
    	},

    	update: function(changed) {
    		var me = this;
    		var opts = me._options;

    		// Need to regenerate the model because its faster than using extend and it is necessary due to the optimization in Chart.Element.transition
    		// that does _view = _model if ease === 1. This causes the 2nd tooltip update to set properties in both the view and model at the same time
    		// which breaks any animations.
    		var existingModel = me._model;
    		var model = me._model = getBaseModel(opts);
    		var active = me._active;

    		var data = me._data;

    		// In the case where active.length === 0 we need to keep these at existing values for good animations
    		var alignment = {
    			xAlign: existingModel.xAlign,
    			yAlign: existingModel.yAlign
    		};
    		var backgroundPoint = {
    			x: existingModel.x,
    			y: existingModel.y
    		};
    		var tooltipSize = {
    			width: existingModel.width,
    			height: existingModel.height
    		};
    		var tooltipPosition = {
    			x: existingModel.caretX,
    			y: existingModel.caretY
    		};

    		var i, len;

    		if (active.length) {
    			model.opacity = 1;

    			var labelColors = [];
    			var labelTextColors = [];
    			tooltipPosition = positioners[opts.position].call(me, active, me._eventPosition);

    			var tooltipItems = [];
    			for (i = 0, len = active.length; i < len; ++i) {
    				tooltipItems.push(createTooltipItem(active[i]));
    			}

    			// If the user provided a filter function, use it to modify the tooltip items
    			if (opts.filter) {
    				tooltipItems = tooltipItems.filter(function(a) {
    					return opts.filter(a, data);
    				});
    			}

    			// If the user provided a sorting function, use it to modify the tooltip items
    			if (opts.itemSort) {
    				tooltipItems = tooltipItems.sort(function(a, b) {
    					return opts.itemSort(a, b, data);
    				});
    			}

    			// Determine colors for boxes
    			helpers$1.each(tooltipItems, function(tooltipItem) {
    				labelColors.push(opts.callbacks.labelColor.call(me, tooltipItem, me._chart));
    				labelTextColors.push(opts.callbacks.labelTextColor.call(me, tooltipItem, me._chart));
    			});


    			// Build the Text Lines
    			model.title = me.getTitle(tooltipItems, data);
    			model.beforeBody = me.getBeforeBody(tooltipItems, data);
    			model.body = me.getBody(tooltipItems, data);
    			model.afterBody = me.getAfterBody(tooltipItems, data);
    			model.footer = me.getFooter(tooltipItems, data);

    			// Initial positioning and colors
    			model.x = tooltipPosition.x;
    			model.y = tooltipPosition.y;
    			model.caretPadding = opts.caretPadding;
    			model.labelColors = labelColors;
    			model.labelTextColors = labelTextColors;

    			// data points
    			model.dataPoints = tooltipItems;

    			// We need to determine alignment of the tooltip
    			tooltipSize = getTooltipSize(this, model);
    			alignment = determineAlignment(this, tooltipSize);
    			// Final Size and Position
    			backgroundPoint = getBackgroundPoint(model, tooltipSize, alignment, me._chart);
    		} else {
    			model.opacity = 0;
    		}

    		model.xAlign = alignment.xAlign;
    		model.yAlign = alignment.yAlign;
    		model.x = backgroundPoint.x;
    		model.y = backgroundPoint.y;
    		model.width = tooltipSize.width;
    		model.height = tooltipSize.height;

    		// Point where the caret on the tooltip points to
    		model.caretX = tooltipPosition.x;
    		model.caretY = tooltipPosition.y;

    		me._model = model;

    		if (changed && opts.custom) {
    			opts.custom.call(me, model);
    		}

    		return me;
    	},

    	drawCaret: function(tooltipPoint, size) {
    		var ctx = this._chart.ctx;
    		var vm = this._view;
    		var caretPosition = this.getCaretPosition(tooltipPoint, size, vm);

    		ctx.lineTo(caretPosition.x1, caretPosition.y1);
    		ctx.lineTo(caretPosition.x2, caretPosition.y2);
    		ctx.lineTo(caretPosition.x3, caretPosition.y3);
    	},
    	getCaretPosition: function(tooltipPoint, size, vm) {
    		var x1, x2, x3, y1, y2, y3;
    		var caretSize = vm.caretSize;
    		var cornerRadius = vm.cornerRadius;
    		var xAlign = vm.xAlign;
    		var yAlign = vm.yAlign;
    		var ptX = tooltipPoint.x;
    		var ptY = tooltipPoint.y;
    		var width = size.width;
    		var height = size.height;

    		if (yAlign === 'center') {
    			y2 = ptY + (height / 2);

    			if (xAlign === 'left') {
    				x1 = ptX;
    				x2 = x1 - caretSize;
    				x3 = x1;

    				y1 = y2 + caretSize;
    				y3 = y2 - caretSize;
    			} else {
    				x1 = ptX + width;
    				x2 = x1 + caretSize;
    				x3 = x1;

    				y1 = y2 - caretSize;
    				y3 = y2 + caretSize;
    			}
    		} else {
    			if (xAlign === 'left') {
    				x2 = ptX + cornerRadius + (caretSize);
    				x1 = x2 - caretSize;
    				x3 = x2 + caretSize;
    			} else if (xAlign === 'right') {
    				x2 = ptX + width - cornerRadius - caretSize;
    				x1 = x2 - caretSize;
    				x3 = x2 + caretSize;
    			} else {
    				x2 = vm.caretX;
    				x1 = x2 - caretSize;
    				x3 = x2 + caretSize;
    			}
    			if (yAlign === 'top') {
    				y1 = ptY;
    				y2 = y1 - caretSize;
    				y3 = y1;
    			} else {
    				y1 = ptY + height;
    				y2 = y1 + caretSize;
    				y3 = y1;
    				// invert drawing order
    				var tmp = x3;
    				x3 = x1;
    				x1 = tmp;
    			}
    		}
    		return {x1: x1, x2: x2, x3: x3, y1: y1, y2: y2, y3: y3};
    	},

    	drawTitle: function(pt, vm, ctx) {
    		var title = vm.title;
    		var length = title.length;
    		var titleFontSize, titleSpacing, i;

    		if (length) {
    			var rtlHelper = getRtlHelper(vm.rtl, vm.x, vm.width);

    			pt.x = getAlignedX(vm, vm._titleAlign);

    			ctx.textAlign = rtlHelper.textAlign(vm._titleAlign);
    			ctx.textBaseline = 'middle';

    			titleFontSize = vm.titleFontSize;
    			titleSpacing = vm.titleSpacing;

    			ctx.fillStyle = vm.titleFontColor;
    			ctx.font = helpers$1.fontString(titleFontSize, vm._titleFontStyle, vm._titleFontFamily);

    			for (i = 0; i < length; ++i) {
    				ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFontSize / 2);
    				pt.y += titleFontSize + titleSpacing; // Line Height and spacing

    				if (i + 1 === length) {
    					pt.y += vm.titleMarginBottom - titleSpacing; // If Last, add margin, remove spacing
    				}
    			}
    		}
    	},

    	drawBody: function(pt, vm, ctx) {
    		var bodyFontSize = vm.bodyFontSize;
    		var bodySpacing = vm.bodySpacing;
    		var bodyAlign = vm._bodyAlign;
    		var body = vm.body;
    		var drawColorBoxes = vm.displayColors;
    		var xLinePadding = 0;
    		var colorX = drawColorBoxes ? getAlignedX(vm, 'left') : 0;

    		var rtlHelper = getRtlHelper(vm.rtl, vm.x, vm.width);

    		var fillLineOfText = function(line) {
    			ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyFontSize / 2);
    			pt.y += bodyFontSize + bodySpacing;
    		};

    		var bodyItem, textColor, labelColors, lines, i, j, ilen, jlen;
    		var bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);

    		ctx.textAlign = bodyAlign;
    		ctx.textBaseline = 'middle';
    		ctx.font = helpers$1.fontString(bodyFontSize, vm._bodyFontStyle, vm._bodyFontFamily);

    		pt.x = getAlignedX(vm, bodyAlignForCalculation);

    		// Before body lines
    		ctx.fillStyle = vm.bodyFontColor;
    		helpers$1.each(vm.beforeBody, fillLineOfText);

    		xLinePadding = drawColorBoxes && bodyAlignForCalculation !== 'right'
    			? bodyAlign === 'center' ? (bodyFontSize / 2 + 1) : (bodyFontSize + 2)
    			: 0;

    		// Draw body lines now
    		for (i = 0, ilen = body.length; i < ilen; ++i) {
    			bodyItem = body[i];
    			textColor = vm.labelTextColors[i];
    			labelColors = vm.labelColors[i];

    			ctx.fillStyle = textColor;
    			helpers$1.each(bodyItem.before, fillLineOfText);

    			lines = bodyItem.lines;
    			for (j = 0, jlen = lines.length; j < jlen; ++j) {
    				// Draw Legend-like boxes if needed
    				if (drawColorBoxes) {
    					var rtlColorX = rtlHelper.x(colorX);

    					// Fill a white rect so that colours merge nicely if the opacity is < 1
    					ctx.fillStyle = vm.legendColorBackground;
    					ctx.fillRect(rtlHelper.leftForLtr(rtlColorX, bodyFontSize), pt.y, bodyFontSize, bodyFontSize);

    					// Border
    					ctx.lineWidth = 1;
    					ctx.strokeStyle = labelColors.borderColor;
    					ctx.strokeRect(rtlHelper.leftForLtr(rtlColorX, bodyFontSize), pt.y, bodyFontSize, bodyFontSize);

    					// Inner square
    					ctx.fillStyle = labelColors.backgroundColor;
    					ctx.fillRect(rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), bodyFontSize - 2), pt.y + 1, bodyFontSize - 2, bodyFontSize - 2);
    					ctx.fillStyle = textColor;
    				}

    				fillLineOfText(lines[j]);
    			}

    			helpers$1.each(bodyItem.after, fillLineOfText);
    		}

    		// Reset back to 0 for after body
    		xLinePadding = 0;

    		// After body lines
    		helpers$1.each(vm.afterBody, fillLineOfText);
    		pt.y -= bodySpacing; // Remove last body spacing
    	},

    	drawFooter: function(pt, vm, ctx) {
    		var footer = vm.footer;
    		var length = footer.length;
    		var footerFontSize, i;

    		if (length) {
    			var rtlHelper = getRtlHelper(vm.rtl, vm.x, vm.width);

    			pt.x = getAlignedX(vm, vm._footerAlign);
    			pt.y += vm.footerMarginTop;

    			ctx.textAlign = rtlHelper.textAlign(vm._footerAlign);
    			ctx.textBaseline = 'middle';

    			footerFontSize = vm.footerFontSize;

    			ctx.fillStyle = vm.footerFontColor;
    			ctx.font = helpers$1.fontString(footerFontSize, vm._footerFontStyle, vm._footerFontFamily);

    			for (i = 0; i < length; ++i) {
    				ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFontSize / 2);
    				pt.y += footerFontSize + vm.footerSpacing;
    			}
    		}
    	},

    	drawBackground: function(pt, vm, ctx, tooltipSize) {
    		ctx.fillStyle = vm.backgroundColor;
    		ctx.strokeStyle = vm.borderColor;
    		ctx.lineWidth = vm.borderWidth;
    		var xAlign = vm.xAlign;
    		var yAlign = vm.yAlign;
    		var x = pt.x;
    		var y = pt.y;
    		var width = tooltipSize.width;
    		var height = tooltipSize.height;
    		var radius = vm.cornerRadius;

    		ctx.beginPath();
    		ctx.moveTo(x + radius, y);
    		if (yAlign === 'top') {
    			this.drawCaret(pt, tooltipSize);
    		}
    		ctx.lineTo(x + width - radius, y);
    		ctx.quadraticCurveTo(x + width, y, x + width, y + radius);
    		if (yAlign === 'center' && xAlign === 'right') {
    			this.drawCaret(pt, tooltipSize);
    		}
    		ctx.lineTo(x + width, y + height - radius);
    		ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);
    		if (yAlign === 'bottom') {
    			this.drawCaret(pt, tooltipSize);
    		}
    		ctx.lineTo(x + radius, y + height);
    		ctx.quadraticCurveTo(x, y + height, x, y + height - radius);
    		if (yAlign === 'center' && xAlign === 'left') {
    			this.drawCaret(pt, tooltipSize);
    		}
    		ctx.lineTo(x, y + radius);
    		ctx.quadraticCurveTo(x, y, x + radius, y);
    		ctx.closePath();

    		ctx.fill();

    		if (vm.borderWidth > 0) {
    			ctx.stroke();
    		}
    	},

    	draw: function() {
    		var ctx = this._chart.ctx;
    		var vm = this._view;

    		if (vm.opacity === 0) {
    			return;
    		}

    		var tooltipSize = {
    			width: vm.width,
    			height: vm.height
    		};
    		var pt = {
    			x: vm.x,
    			y: vm.y
    		};

    		// IE11/Edge does not like very small opacities, so snap to 0
    		var opacity = Math.abs(vm.opacity < 1e-3) ? 0 : vm.opacity;

    		// Truthy/falsey value for empty tooltip
    		var hasTooltipContent = vm.title.length || vm.beforeBody.length || vm.body.length || vm.afterBody.length || vm.footer.length;

    		if (this._options.enabled && hasTooltipContent) {
    			ctx.save();
    			ctx.globalAlpha = opacity;

    			// Draw Background
    			this.drawBackground(pt, vm, ctx, tooltipSize);

    			// Draw Title, Body, and Footer
    			pt.y += vm.yPadding;

    			helpers$1.rtl.overrideTextDirection(ctx, vm.textDirection);

    			// Titles
    			this.drawTitle(pt, vm, ctx);

    			// Body
    			this.drawBody(pt, vm, ctx);

    			// Footer
    			this.drawFooter(pt, vm, ctx);

    			helpers$1.rtl.restoreTextDirection(ctx, vm.textDirection);

    			ctx.restore();
    		}
    	},

    	/**
    	 * Handle an event
    	 * @private
    	 * @param {IEvent} event - The event to handle
    	 * @returns {boolean} true if the tooltip changed
    	 */
    	handleEvent: function(e) {
    		var me = this;
    		var options = me._options;
    		var changed = false;

    		me._lastActive = me._lastActive || [];

    		// Find Active Elements for tooltips
    		if (e.type === 'mouseout') {
    			me._active = [];
    		} else {
    			me._active = me._chart.getElementsAtEventForMode(e, options.mode, options);
    			if (options.reverse) {
    				me._active.reverse();
    			}
    		}

    		// Remember Last Actives
    		changed = !helpers$1.arrayEquals(me._active, me._lastActive);

    		// Only handle target event on tooltip change
    		if (changed) {
    			me._lastActive = me._active;

    			if (options.enabled || options.custom) {
    				me._eventPosition = {
    					x: e.x,
    					y: e.y
    				};

    				me.update(true);
    				me.pivot();
    			}
    		}

    		return changed;
    	}
    });

    /**
     * @namespace Chart.Tooltip.positioners
     */
    var positioners_1 = positioners;

    var core_tooltip = exports$4;
    core_tooltip.positioners = positioners_1;

    var valueOrDefault$9 = helpers$1.valueOrDefault;

    core_defaults._set('global', {
    	elements: {},
    	events: [
    		'mousemove',
    		'mouseout',
    		'click',
    		'touchstart',
    		'touchmove'
    	],
    	hover: {
    		onHover: null,
    		mode: 'nearest',
    		intersect: true,
    		animationDuration: 400
    	},
    	onClick: null,
    	maintainAspectRatio: true,
    	responsive: true,
    	responsiveAnimationDuration: 0
    });

    /**
     * Recursively merge the given config objects representing the `scales` option
     * by incorporating scale defaults in `xAxes` and `yAxes` array items, then
     * returns a deep copy of the result, thus doesn't alter inputs.
     */
    function mergeScaleConfig(/* config objects ... */) {
    	return helpers$1.merge(Object.create(null), [].slice.call(arguments), {
    		merger: function(key, target, source, options) {
    			if (key === 'xAxes' || key === 'yAxes') {
    				var slen = source[key].length;
    				var i, type, scale;

    				if (!target[key]) {
    					target[key] = [];
    				}

    				for (i = 0; i < slen; ++i) {
    					scale = source[key][i];
    					type = valueOrDefault$9(scale.type, key === 'xAxes' ? 'category' : 'linear');

    					if (i >= target[key].length) {
    						target[key].push({});
    					}

    					if (!target[key][i].type || (scale.type && scale.type !== target[key][i].type)) {
    						// new/untyped scale or type changed: let's apply the new defaults
    						// then merge source scale to correctly overwrite the defaults.
    						helpers$1.merge(target[key][i], [core_scaleService.getScaleDefaults(type), scale]);
    					} else {
    						// scales type are the same
    						helpers$1.merge(target[key][i], scale);
    					}
    				}
    			} else {
    				helpers$1._merger(key, target, source, options);
    			}
    		}
    	});
    }

    /**
     * Recursively merge the given config objects as the root options by handling
     * default scale options for the `scales` and `scale` properties, then returns
     * a deep copy of the result, thus doesn't alter inputs.
     */
    function mergeConfig(/* config objects ... */) {
    	return helpers$1.merge(Object.create(null), [].slice.call(arguments), {
    		merger: function(key, target, source, options) {
    			var tval = target[key] || Object.create(null);
    			var sval = source[key];

    			if (key === 'scales') {
    				// scale config merging is complex. Add our own function here for that
    				target[key] = mergeScaleConfig(tval, sval);
    			} else if (key === 'scale') {
    				// used in polar area & radar charts since there is only one scale
    				target[key] = helpers$1.merge(tval, [core_scaleService.getScaleDefaults(sval.type), sval]);
    			} else {
    				helpers$1._merger(key, target, source, options);
    			}
    		}
    	});
    }

    function initConfig(config) {
    	config = config || Object.create(null);

    	// Do NOT use mergeConfig for the data object because this method merges arrays
    	// and so would change references to labels and datasets, preventing data updates.
    	var data = config.data = config.data || {};
    	data.datasets = data.datasets || [];
    	data.labels = data.labels || [];

    	config.options = mergeConfig(
    		core_defaults.global,
    		core_defaults[config.type],
    		config.options || {});

    	return config;
    }

    function updateConfig(chart) {
    	var newOptions = chart.options;

    	helpers$1.each(chart.scales, function(scale) {
    		core_layouts.removeBox(chart, scale);
    	});

    	newOptions = mergeConfig(
    		core_defaults.global,
    		core_defaults[chart.config.type],
    		newOptions);

    	chart.options = chart.config.options = newOptions;
    	chart.ensureScalesHaveIDs();
    	chart.buildOrUpdateScales();

    	// Tooltip
    	chart.tooltip._options = newOptions.tooltips;
    	chart.tooltip.initialize();
    }

    function nextAvailableScaleId(axesOpts, prefix, index) {
    	var id;
    	var hasId = function(obj) {
    		return obj.id === id;
    	};

    	do {
    		id = prefix + index++;
    	} while (helpers$1.findIndex(axesOpts, hasId) >= 0);

    	return id;
    }

    function positionIsHorizontal(position) {
    	return position === 'top' || position === 'bottom';
    }

    function compare2Level(l1, l2) {
    	return function(a, b) {
    		return a[l1] === b[l1]
    			? a[l2] - b[l2]
    			: a[l1] - b[l1];
    	};
    }

    var Chart = function(item, config) {
    	this.construct(item, config);
    	return this;
    };

    helpers$1.extend(Chart.prototype, /** @lends Chart */ {
    	/**
    	 * @private
    	 */
    	construct: function(item, config) {
    		var me = this;

    		config = initConfig(config);

    		var context = platform.acquireContext(item, config);
    		var canvas = context && context.canvas;
    		var height = canvas && canvas.height;
    		var width = canvas && canvas.width;

    		me.id = helpers$1.uid();
    		me.ctx = context;
    		me.canvas = canvas;
    		me.config = config;
    		me.width = width;
    		me.height = height;
    		me.aspectRatio = height ? width / height : null;
    		me.options = config.options;
    		me._bufferedRender = false;
    		me._layers = [];

    		/**
    		 * Provided for backward compatibility, Chart and Chart.Controller have been merged,
    		 * the "instance" still need to be defined since it might be called from plugins.
    		 * @prop Chart#chart
    		 * @deprecated since version 2.6.0
    		 * @todo remove at version 3
    		 * @private
    		 */
    		me.chart = me;
    		me.controller = me; // chart.chart.controller #inception

    		// Add the chart instance to the global namespace
    		Chart.instances[me.id] = me;

    		// Define alias to the config data: `chart.data === chart.config.data`
    		Object.defineProperty(me, 'data', {
    			get: function() {
    				return me.config.data;
    			},
    			set: function(value) {
    				me.config.data = value;
    			}
    		});

    		if (!context || !canvas) {
    			// The given item is not a compatible context2d element, let's return before finalizing
    			// the chart initialization but after setting basic chart / controller properties that
    			// can help to figure out that the chart is not valid (e.g chart.canvas !== null);
    			// https://github.com/chartjs/Chart.js/issues/2807
    			console.error("Failed to create chart: can't acquire context from the given item");
    			return;
    		}

    		me.initialize();
    		me.update();
    	},

    	/**
    	 * @private
    	 */
    	initialize: function() {
    		var me = this;

    		// Before init plugin notification
    		core_plugins.notify(me, 'beforeInit');

    		helpers$1.retinaScale(me, me.options.devicePixelRatio);

    		me.bindEvents();

    		if (me.options.responsive) {
    			// Initial resize before chart draws (must be silent to preserve initial animations).
    			me.resize(true);
    		}

    		me.initToolTip();

    		// After init plugin notification
    		core_plugins.notify(me, 'afterInit');

    		return me;
    	},

    	clear: function() {
    		helpers$1.canvas.clear(this);
    		return this;
    	},

    	stop: function() {
    		// Stops any current animation loop occurring
    		core_animations.cancelAnimation(this);
    		return this;
    	},

    	resize: function(silent) {
    		var me = this;
    		var options = me.options;
    		var canvas = me.canvas;
    		var aspectRatio = (options.maintainAspectRatio && me.aspectRatio) || null;

    		// the canvas render width and height will be casted to integers so make sure that
    		// the canvas display style uses the same integer values to avoid blurring effect.

    		// Set to 0 instead of canvas.size because the size defaults to 300x150 if the element is collapsed
    		var newWidth = Math.max(0, Math.floor(helpers$1.getMaximumWidth(canvas)));
    		var newHeight = Math.max(0, Math.floor(aspectRatio ? newWidth / aspectRatio : helpers$1.getMaximumHeight(canvas)));

    		if (me.width === newWidth && me.height === newHeight) {
    			return;
    		}

    		canvas.width = me.width = newWidth;
    		canvas.height = me.height = newHeight;
    		canvas.style.width = newWidth + 'px';
    		canvas.style.height = newHeight + 'px';

    		helpers$1.retinaScale(me, options.devicePixelRatio);

    		if (!silent) {
    			// Notify any plugins about the resize
    			var newSize = {width: newWidth, height: newHeight};
    			core_plugins.notify(me, 'resize', [newSize]);

    			// Notify of resize
    			if (options.onResize) {
    				options.onResize(me, newSize);
    			}

    			me.stop();
    			me.update({
    				duration: options.responsiveAnimationDuration
    			});
    		}
    	},

    	ensureScalesHaveIDs: function() {
    		var options = this.options;
    		var scalesOptions = options.scales || {};
    		var scaleOptions = options.scale;

    		helpers$1.each(scalesOptions.xAxes, function(xAxisOptions, index) {
    			if (!xAxisOptions.id) {
    				xAxisOptions.id = nextAvailableScaleId(scalesOptions.xAxes, 'x-axis-', index);
    			}
    		});

    		helpers$1.each(scalesOptions.yAxes, function(yAxisOptions, index) {
    			if (!yAxisOptions.id) {
    				yAxisOptions.id = nextAvailableScaleId(scalesOptions.yAxes, 'y-axis-', index);
    			}
    		});

    		if (scaleOptions) {
    			scaleOptions.id = scaleOptions.id || 'scale';
    		}
    	},

    	/**
    	 * Builds a map of scale ID to scale object for future lookup.
    	 */
    	buildOrUpdateScales: function() {
    		var me = this;
    		var options = me.options;
    		var scales = me.scales || {};
    		var items = [];
    		var updated = Object.keys(scales).reduce(function(obj, id) {
    			obj[id] = false;
    			return obj;
    		}, {});

    		if (options.scales) {
    			items = items.concat(
    				(options.scales.xAxes || []).map(function(xAxisOptions) {
    					return {options: xAxisOptions, dtype: 'category', dposition: 'bottom'};
    				}),
    				(options.scales.yAxes || []).map(function(yAxisOptions) {
    					return {options: yAxisOptions, dtype: 'linear', dposition: 'left'};
    				})
    			);
    		}

    		if (options.scale) {
    			items.push({
    				options: options.scale,
    				dtype: 'radialLinear',
    				isDefault: true,
    				dposition: 'chartArea'
    			});
    		}

    		helpers$1.each(items, function(item) {
    			var scaleOptions = item.options;
    			var id = scaleOptions.id;
    			var scaleType = valueOrDefault$9(scaleOptions.type, item.dtype);

    			if (positionIsHorizontal(scaleOptions.position) !== positionIsHorizontal(item.dposition)) {
    				scaleOptions.position = item.dposition;
    			}

    			updated[id] = true;
    			var scale = null;
    			if (id in scales && scales[id].type === scaleType) {
    				scale = scales[id];
    				scale.options = scaleOptions;
    				scale.ctx = me.ctx;
    				scale.chart = me;
    			} else {
    				var scaleClass = core_scaleService.getScaleConstructor(scaleType);
    				if (!scaleClass) {
    					return;
    				}
    				scale = new scaleClass({
    					id: id,
    					type: scaleType,
    					options: scaleOptions,
    					ctx: me.ctx,
    					chart: me
    				});
    				scales[scale.id] = scale;
    			}

    			scale.mergeTicksOptions();

    			// TODO(SB): I think we should be able to remove this custom case (options.scale)
    			// and consider it as a regular scale part of the "scales"" map only! This would
    			// make the logic easier and remove some useless? custom code.
    			if (item.isDefault) {
    				me.scale = scale;
    			}
    		});
    		// clear up discarded scales
    		helpers$1.each(updated, function(hasUpdated, id) {
    			if (!hasUpdated) {
    				delete scales[id];
    			}
    		});

    		me.scales = scales;

    		core_scaleService.addScalesToLayout(this);
    	},

    	buildOrUpdateControllers: function() {
    		var me = this;
    		var newControllers = [];
    		var datasets = me.data.datasets;
    		var i, ilen;

    		for (i = 0, ilen = datasets.length; i < ilen; i++) {
    			var dataset = datasets[i];
    			var meta = me.getDatasetMeta(i);
    			var type = dataset.type || me.config.type;

    			if (meta.type && meta.type !== type) {
    				me.destroyDatasetMeta(i);
    				meta = me.getDatasetMeta(i);
    			}
    			meta.type = type;
    			meta.order = dataset.order || 0;
    			meta.index = i;

    			if (meta.controller) {
    				meta.controller.updateIndex(i);
    				meta.controller.linkScales();
    			} else {
    				var ControllerClass = controllers[meta.type];
    				if (ControllerClass === undefined) {
    					throw new Error('"' + meta.type + '" is not a chart type.');
    				}

    				meta.controller = new ControllerClass(me, i);
    				newControllers.push(meta.controller);
    			}
    		}

    		return newControllers;
    	},

    	/**
    	 * Reset the elements of all datasets
    	 * @private
    	 */
    	resetElements: function() {
    		var me = this;
    		helpers$1.each(me.data.datasets, function(dataset, datasetIndex) {
    			me.getDatasetMeta(datasetIndex).controller.reset();
    		}, me);
    	},

    	/**
    	* Resets the chart back to it's state before the initial animation
    	*/
    	reset: function() {
    		this.resetElements();
    		this.tooltip.initialize();
    	},

    	update: function(config) {
    		var me = this;
    		var i, ilen;

    		if (!config || typeof config !== 'object') {
    			// backwards compatibility
    			config = {
    				duration: config,
    				lazy: arguments[1]
    			};
    		}

    		updateConfig(me);

    		// plugins options references might have change, let's invalidate the cache
    		// https://github.com/chartjs/Chart.js/issues/5111#issuecomment-355934167
    		core_plugins._invalidate(me);

    		if (core_plugins.notify(me, 'beforeUpdate') === false) {
    			return;
    		}

    		// In case the entire data object changed
    		me.tooltip._data = me.data;

    		// Make sure dataset controllers are updated and new controllers are reset
    		var newControllers = me.buildOrUpdateControllers();

    		// Make sure all dataset controllers have correct meta data counts
    		for (i = 0, ilen = me.data.datasets.length; i < ilen; i++) {
    			me.getDatasetMeta(i).controller.buildOrUpdateElements();
    		}

    		me.updateLayout();

    		// Can only reset the new controllers after the scales have been updated
    		if (me.options.animation && me.options.animation.duration) {
    			helpers$1.each(newControllers, function(controller) {
    				controller.reset();
    			});
    		}

    		me.updateDatasets();

    		// Need to reset tooltip in case it is displayed with elements that are removed
    		// after update.
    		me.tooltip.initialize();

    		// Last active contains items that were previously in the tooltip.
    		// When we reset the tooltip, we need to clear it
    		me.lastActive = [];

    		// Do this before render so that any plugins that need final scale updates can use it
    		core_plugins.notify(me, 'afterUpdate');

    		me._layers.sort(compare2Level('z', '_idx'));

    		if (me._bufferedRender) {
    			me._bufferedRequest = {
    				duration: config.duration,
    				easing: config.easing,
    				lazy: config.lazy
    			};
    		} else {
    			me.render(config);
    		}
    	},

    	/**
    	 * Updates the chart layout unless a plugin returns `false` to the `beforeLayout`
    	 * hook, in which case, plugins will not be called on `afterLayout`.
    	 * @private
    	 */
    	updateLayout: function() {
    		var me = this;

    		if (core_plugins.notify(me, 'beforeLayout') === false) {
    			return;
    		}

    		core_layouts.update(this, this.width, this.height);

    		me._layers = [];
    		helpers$1.each(me.boxes, function(box) {
    			// _configure is called twice, once in core.scale.update and once here.
    			// Here the boxes are fully updated and at their final positions.
    			if (box._configure) {
    				box._configure();
    			}
    			me._layers.push.apply(me._layers, box._layers());
    		}, me);

    		me._layers.forEach(function(item, index) {
    			item._idx = index;
    		});

    		/**
    		 * Provided for backward compatibility, use `afterLayout` instead.
    		 * @method IPlugin#afterScaleUpdate
    		 * @deprecated since version 2.5.0
    		 * @todo remove at version 3
    		 * @private
    		 */
    		core_plugins.notify(me, 'afterScaleUpdate');
    		core_plugins.notify(me, 'afterLayout');
    	},

    	/**
    	 * Updates all datasets unless a plugin returns `false` to the `beforeDatasetsUpdate`
    	 * hook, in which case, plugins will not be called on `afterDatasetsUpdate`.
    	 * @private
    	 */
    	updateDatasets: function() {
    		var me = this;

    		if (core_plugins.notify(me, 'beforeDatasetsUpdate') === false) {
    			return;
    		}

    		for (var i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {
    			me.updateDataset(i);
    		}

    		core_plugins.notify(me, 'afterDatasetsUpdate');
    	},

    	/**
    	 * Updates dataset at index unless a plugin returns `false` to the `beforeDatasetUpdate`
    	 * hook, in which case, plugins will not be called on `afterDatasetUpdate`.
    	 * @private
    	 */
    	updateDataset: function(index) {
    		var me = this;
    		var meta = me.getDatasetMeta(index);
    		var args = {
    			meta: meta,
    			index: index
    		};

    		if (core_plugins.notify(me, 'beforeDatasetUpdate', [args]) === false) {
    			return;
    		}

    		meta.controller._update();

    		core_plugins.notify(me, 'afterDatasetUpdate', [args]);
    	},

    	render: function(config) {
    		var me = this;

    		if (!config || typeof config !== 'object') {
    			// backwards compatibility
    			config = {
    				duration: config,
    				lazy: arguments[1]
    			};
    		}

    		var animationOptions = me.options.animation;
    		var duration = valueOrDefault$9(config.duration, animationOptions && animationOptions.duration);
    		var lazy = config.lazy;

    		if (core_plugins.notify(me, 'beforeRender') === false) {
    			return;
    		}

    		var onComplete = function(animation) {
    			core_plugins.notify(me, 'afterRender');
    			helpers$1.callback(animationOptions && animationOptions.onComplete, [animation], me);
    		};

    		if (animationOptions && duration) {
    			var animation = new core_animation({
    				numSteps: duration / 16.66, // 60 fps
    				easing: config.easing || animationOptions.easing,

    				render: function(chart, animationObject) {
    					var easingFunction = helpers$1.easing.effects[animationObject.easing];
    					var currentStep = animationObject.currentStep;
    					var stepDecimal = currentStep / animationObject.numSteps;

    					chart.draw(easingFunction(stepDecimal), stepDecimal, currentStep);
    				},

    				onAnimationProgress: animationOptions.onProgress,
    				onAnimationComplete: onComplete
    			});

    			core_animations.addAnimation(me, animation, duration, lazy);
    		} else {
    			me.draw();

    			// See https://github.com/chartjs/Chart.js/issues/3781
    			onComplete(new core_animation({numSteps: 0, chart: me}));
    		}

    		return me;
    	},

    	draw: function(easingValue) {
    		var me = this;
    		var i, layers;

    		me.clear();

    		if (helpers$1.isNullOrUndef(easingValue)) {
    			easingValue = 1;
    		}

    		me.transition(easingValue);

    		if (me.width <= 0 || me.height <= 0) {
    			return;
    		}

    		if (core_plugins.notify(me, 'beforeDraw', [easingValue]) === false) {
    			return;
    		}

    		// Because of plugin hooks (before/afterDatasetsDraw), datasets can't
    		// currently be part of layers. Instead, we draw
    		// layers <= 0 before(default, backward compat), and the rest after
    		layers = me._layers;
    		for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {
    			layers[i].draw(me.chartArea);
    		}

    		me.drawDatasets(easingValue);

    		// Rest of layers
    		for (; i < layers.length; ++i) {
    			layers[i].draw(me.chartArea);
    		}

    		me._drawTooltip(easingValue);

    		core_plugins.notify(me, 'afterDraw', [easingValue]);
    	},

    	/**
    	 * @private
    	 */
    	transition: function(easingValue) {
    		var me = this;

    		for (var i = 0, ilen = (me.data.datasets || []).length; i < ilen; ++i) {
    			if (me.isDatasetVisible(i)) {
    				me.getDatasetMeta(i).controller.transition(easingValue);
    			}
    		}

    		me.tooltip.transition(easingValue);
    	},

    	/**
    	 * @private
    	 */
    	_getSortedDatasetMetas: function(filterVisible) {
    		var me = this;
    		var datasets = me.data.datasets || [];
    		var result = [];
    		var i, ilen;

    		for (i = 0, ilen = datasets.length; i < ilen; ++i) {
    			if (!filterVisible || me.isDatasetVisible(i)) {
    				result.push(me.getDatasetMeta(i));
    			}
    		}

    		result.sort(compare2Level('order', 'index'));

    		return result;
    	},

    	/**
    	 * @private
    	 */
    	_getSortedVisibleDatasetMetas: function() {
    		return this._getSortedDatasetMetas(true);
    	},

    	/**
    	 * Draws all datasets unless a plugin returns `false` to the `beforeDatasetsDraw`
    	 * hook, in which case, plugins will not be called on `afterDatasetsDraw`.
    	 * @private
    	 */
    	drawDatasets: function(easingValue) {
    		var me = this;
    		var metasets, i;

    		if (core_plugins.notify(me, 'beforeDatasetsDraw', [easingValue]) === false) {
    			return;
    		}

    		metasets = me._getSortedVisibleDatasetMetas();
    		for (i = metasets.length - 1; i >= 0; --i) {
    			me.drawDataset(metasets[i], easingValue);
    		}

    		core_plugins.notify(me, 'afterDatasetsDraw', [easingValue]);
    	},

    	/**
    	 * Draws dataset at index unless a plugin returns `false` to the `beforeDatasetDraw`
    	 * hook, in which case, plugins will not be called on `afterDatasetDraw`.
    	 * @private
    	 */
    	drawDataset: function(meta, easingValue) {
    		var me = this;
    		var args = {
    			meta: meta,
    			index: meta.index,
    			easingValue: easingValue
    		};

    		if (core_plugins.notify(me, 'beforeDatasetDraw', [args]) === false) {
    			return;
    		}

    		meta.controller.draw(easingValue);

    		core_plugins.notify(me, 'afterDatasetDraw', [args]);
    	},

    	/**
    	 * Draws tooltip unless a plugin returns `false` to the `beforeTooltipDraw`
    	 * hook, in which case, plugins will not be called on `afterTooltipDraw`.
    	 * @private
    	 */
    	_drawTooltip: function(easingValue) {
    		var me = this;
    		var tooltip = me.tooltip;
    		var args = {
    			tooltip: tooltip,
    			easingValue: easingValue
    		};

    		if (core_plugins.notify(me, 'beforeTooltipDraw', [args]) === false) {
    			return;
    		}

    		tooltip.draw();

    		core_plugins.notify(me, 'afterTooltipDraw', [args]);
    	},

    	/**
    	 * Get the single element that was clicked on
    	 * @return An object containing the dataset index and element index of the matching element. Also contains the rectangle that was draw
    	 */
    	getElementAtEvent: function(e) {
    		return core_interaction.modes.single(this, e);
    	},

    	getElementsAtEvent: function(e) {
    		return core_interaction.modes.label(this, e, {intersect: true});
    	},

    	getElementsAtXAxis: function(e) {
    		return core_interaction.modes['x-axis'](this, e, {intersect: true});
    	},

    	getElementsAtEventForMode: function(e, mode, options) {
    		var method = core_interaction.modes[mode];
    		if (typeof method === 'function') {
    			return method(this, e, options);
    		}

    		return [];
    	},

    	getDatasetAtEvent: function(e) {
    		return core_interaction.modes.dataset(this, e, {intersect: true});
    	},

    	getDatasetMeta: function(datasetIndex) {
    		var me = this;
    		var dataset = me.data.datasets[datasetIndex];
    		if (!dataset._meta) {
    			dataset._meta = {};
    		}

    		var meta = dataset._meta[me.id];
    		if (!meta) {
    			meta = dataset._meta[me.id] = {
    				type: null,
    				data: [],
    				dataset: null,
    				controller: null,
    				hidden: null,			// See isDatasetVisible() comment
    				xAxisID: null,
    				yAxisID: null,
    				order: dataset.order || 0,
    				index: datasetIndex
    			};
    		}

    		return meta;
    	},

    	getVisibleDatasetCount: function() {
    		var count = 0;
    		for (var i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {
    			if (this.isDatasetVisible(i)) {
    				count++;
    			}
    		}
    		return count;
    	},

    	isDatasetVisible: function(datasetIndex) {
    		var meta = this.getDatasetMeta(datasetIndex);

    		// meta.hidden is a per chart dataset hidden flag override with 3 states: if true or false,
    		// the dataset.hidden value is ignored, else if null, the dataset hidden state is returned.
    		return typeof meta.hidden === 'boolean' ? !meta.hidden : !this.data.datasets[datasetIndex].hidden;
    	},

    	generateLegend: function() {
    		return this.options.legendCallback(this);
    	},

    	/**
    	 * @private
    	 */
    	destroyDatasetMeta: function(datasetIndex) {
    		var id = this.id;
    		var dataset = this.data.datasets[datasetIndex];
    		var meta = dataset._meta && dataset._meta[id];

    		if (meta) {
    			meta.controller.destroy();
    			delete dataset._meta[id];
    		}
    	},

    	destroy: function() {
    		var me = this;
    		var canvas = me.canvas;
    		var i, ilen;

    		me.stop();

    		// dataset controllers need to cleanup associated data
    		for (i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {
    			me.destroyDatasetMeta(i);
    		}

    		if (canvas) {
    			me.unbindEvents();
    			helpers$1.canvas.clear(me);
    			platform.releaseContext(me.ctx);
    			me.canvas = null;
    			me.ctx = null;
    		}

    		core_plugins.notify(me, 'destroy');

    		delete Chart.instances[me.id];
    	},

    	toBase64Image: function() {
    		return this.canvas.toDataURL.apply(this.canvas, arguments);
    	},

    	initToolTip: function() {
    		var me = this;
    		me.tooltip = new core_tooltip({
    			_chart: me,
    			_chartInstance: me, // deprecated, backward compatibility
    			_data: me.data,
    			_options: me.options.tooltips
    		}, me);
    	},

    	/**
    	 * @private
    	 */
    	bindEvents: function() {
    		var me = this;
    		var listeners = me._listeners = {};
    		var listener = function() {
    			me.eventHandler.apply(me, arguments);
    		};

    		helpers$1.each(me.options.events, function(type) {
    			platform.addEventListener(me, type, listener);
    			listeners[type] = listener;
    		});

    		// Elements used to detect size change should not be injected for non responsive charts.
    		// See https://github.com/chartjs/Chart.js/issues/2210
    		if (me.options.responsive) {
    			listener = function() {
    				me.resize();
    			};

    			platform.addEventListener(me, 'resize', listener);
    			listeners.resize = listener;
    		}
    	},

    	/**
    	 * @private
    	 */
    	unbindEvents: function() {
    		var me = this;
    		var listeners = me._listeners;
    		if (!listeners) {
    			return;
    		}

    		delete me._listeners;
    		helpers$1.each(listeners, function(listener, type) {
    			platform.removeEventListener(me, type, listener);
    		});
    	},

    	updateHoverStyle: function(elements, mode, enabled) {
    		var prefix = enabled ? 'set' : 'remove';
    		var element, i, ilen;

    		for (i = 0, ilen = elements.length; i < ilen; ++i) {
    			element = elements[i];
    			if (element) {
    				this.getDatasetMeta(element._datasetIndex).controller[prefix + 'HoverStyle'](element);
    			}
    		}

    		if (mode === 'dataset') {
    			this.getDatasetMeta(elements[0]._datasetIndex).controller['_' + prefix + 'DatasetHoverStyle']();
    		}
    	},

    	/**
    	 * @private
    	 */
    	eventHandler: function(e) {
    		var me = this;
    		var tooltip = me.tooltip;

    		if (core_plugins.notify(me, 'beforeEvent', [e]) === false) {
    			return;
    		}

    		// Buffer any update calls so that renders do not occur
    		me._bufferedRender = true;
    		me._bufferedRequest = null;

    		var changed = me.handleEvent(e);
    		// for smooth tooltip animations issue #4989
    		// the tooltip should be the source of change
    		// Animation check workaround:
    		// tooltip._start will be null when tooltip isn't animating
    		if (tooltip) {
    			changed = tooltip._start
    				? tooltip.handleEvent(e)
    				: changed | tooltip.handleEvent(e);
    		}

    		core_plugins.notify(me, 'afterEvent', [e]);

    		var bufferedRequest = me._bufferedRequest;
    		if (bufferedRequest) {
    			// If we have an update that was triggered, we need to do a normal render
    			me.render(bufferedRequest);
    		} else if (changed && !me.animating) {
    			// If entering, leaving, or changing elements, animate the change via pivot
    			me.stop();

    			// We only need to render at this point. Updating will cause scales to be
    			// recomputed generating flicker & using more memory than necessary.
    			me.render({
    				duration: me.options.hover.animationDuration,
    				lazy: true
    			});
    		}

    		me._bufferedRender = false;
    		me._bufferedRequest = null;

    		return me;
    	},

    	/**
    	 * Handle an event
    	 * @private
    	 * @param {IEvent} event the event to handle
    	 * @return {boolean} true if the chart needs to re-render
    	 */
    	handleEvent: function(e) {
    		var me = this;
    		var options = me.options || {};
    		var hoverOptions = options.hover;
    		var changed = false;

    		me.lastActive = me.lastActive || [];

    		// Find Active Elements for hover and tooltips
    		if (e.type === 'mouseout') {
    			me.active = [];
    		} else {
    			me.active = me.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions);
    		}

    		// Invoke onHover hook
    		// Need to call with native event here to not break backwards compatibility
    		helpers$1.callback(options.onHover || options.hover.onHover, [e.native, me.active], me);

    		if (e.type === 'mouseup' || e.type === 'click') {
    			if (options.onClick) {
    				// Use e.native here for backwards compatibility
    				options.onClick.call(me, e.native, me.active);
    			}
    		}

    		// Remove styling for last active (even if it may still be active)
    		if (me.lastActive.length) {
    			me.updateHoverStyle(me.lastActive, hoverOptions.mode, false);
    		}

    		// Built in hover styling
    		if (me.active.length && hoverOptions.mode) {
    			me.updateHoverStyle(me.active, hoverOptions.mode, true);
    		}

    		changed = !helpers$1.arrayEquals(me.active, me.lastActive);

    		// Remember Last Actives
    		me.lastActive = me.active;

    		return changed;
    	}
    });

    /**
     * NOTE(SB) We actually don't use this container anymore but we need to keep it
     * for backward compatibility. Though, it can still be useful for plugins that
     * would need to work on multiple charts?!
     */
    Chart.instances = {};

    var core_controller = Chart;

    // DEPRECATIONS

    /**
     * Provided for backward compatibility, use Chart instead.
     * @class Chart.Controller
     * @deprecated since version 2.6
     * @todo remove at version 3
     * @private
     */
    Chart.Controller = Chart;

    /**
     * Provided for backward compatibility, not available anymore.
     * @namespace Chart
     * @deprecated since version 2.8
     * @todo remove at version 3
     * @private
     */
    Chart.types = {};

    /**
     * Provided for backward compatibility, not available anymore.
     * @namespace Chart.helpers.configMerge
     * @deprecated since version 2.8.0
     * @todo remove at version 3
     * @private
     */
    helpers$1.configMerge = mergeConfig;

    /**
     * Provided for backward compatibility, not available anymore.
     * @namespace Chart.helpers.scaleMerge
     * @deprecated since version 2.8.0
     * @todo remove at version 3
     * @private
     */
    helpers$1.scaleMerge = mergeScaleConfig;

    var core_helpers = function() {

    	// -- Basic js utility methods

    	helpers$1.where = function(collection, filterCallback) {
    		if (helpers$1.isArray(collection) && Array.prototype.filter) {
    			return collection.filter(filterCallback);
    		}
    		var filtered = [];

    		helpers$1.each(collection, function(item) {
    			if (filterCallback(item)) {
    				filtered.push(item);
    			}
    		});

    		return filtered;
    	};
    	helpers$1.findIndex = Array.prototype.findIndex ?
    		function(array, callback, scope) {
    			return array.findIndex(callback, scope);
    		} :
    		function(array, callback, scope) {
    			scope = scope === undefined ? array : scope;
    			for (var i = 0, ilen = array.length; i < ilen; ++i) {
    				if (callback.call(scope, array[i], i, array)) {
    					return i;
    				}
    			}
    			return -1;
    		};
    	helpers$1.findNextWhere = function(arrayToSearch, filterCallback, startIndex) {
    		// Default to start of the array
    		if (helpers$1.isNullOrUndef(startIndex)) {
    			startIndex = -1;
    		}
    		for (var i = startIndex + 1; i < arrayToSearch.length; i++) {
    			var currentItem = arrayToSearch[i];
    			if (filterCallback(currentItem)) {
    				return currentItem;
    			}
    		}
    	};
    	helpers$1.findPreviousWhere = function(arrayToSearch, filterCallback, startIndex) {
    		// Default to end of the array
    		if (helpers$1.isNullOrUndef(startIndex)) {
    			startIndex = arrayToSearch.length;
    		}
    		for (var i = startIndex - 1; i >= 0; i--) {
    			var currentItem = arrayToSearch[i];
    			if (filterCallback(currentItem)) {
    				return currentItem;
    			}
    		}
    	};

    	// -- Math methods
    	helpers$1.isNumber = function(n) {
    		return !isNaN(parseFloat(n)) && isFinite(n);
    	};
    	helpers$1.almostEquals = function(x, y, epsilon) {
    		return Math.abs(x - y) < epsilon;
    	};
    	helpers$1.almostWhole = function(x, epsilon) {
    		var rounded = Math.round(x);
    		return ((rounded - epsilon) <= x) && ((rounded + epsilon) >= x);
    	};
    	helpers$1.max = function(array) {
    		return array.reduce(function(max, value) {
    			if (!isNaN(value)) {
    				return Math.max(max, value);
    			}
    			return max;
    		}, Number.NEGATIVE_INFINITY);
    	};
    	helpers$1.min = function(array) {
    		return array.reduce(function(min, value) {
    			if (!isNaN(value)) {
    				return Math.min(min, value);
    			}
    			return min;
    		}, Number.POSITIVE_INFINITY);
    	};
    	helpers$1.sign = Math.sign ?
    		function(x) {
    			return Math.sign(x);
    		} :
    		function(x) {
    			x = +x; // convert to a number
    			if (x === 0 || isNaN(x)) {
    				return x;
    			}
    			return x > 0 ? 1 : -1;
    		};
    	helpers$1.toRadians = function(degrees) {
    		return degrees * (Math.PI / 180);
    	};
    	helpers$1.toDegrees = function(radians) {
    		return radians * (180 / Math.PI);
    	};

    	/**
    	 * Returns the number of decimal places
    	 * i.e. the number of digits after the decimal point, of the value of this Number.
    	 * @param {number} x - A number.
    	 * @returns {number} The number of decimal places.
    	 * @private
    	 */
    	helpers$1._decimalPlaces = function(x) {
    		if (!helpers$1.isFinite(x)) {
    			return;
    		}
    		var e = 1;
    		var p = 0;
    		while (Math.round(x * e) / e !== x) {
    			e *= 10;
    			p++;
    		}
    		return p;
    	};

    	// Gets the angle from vertical upright to the point about a centre.
    	helpers$1.getAngleFromPoint = function(centrePoint, anglePoint) {
    		var distanceFromXCenter = anglePoint.x - centrePoint.x;
    		var distanceFromYCenter = anglePoint.y - centrePoint.y;
    		var radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);

    		var angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);

    		if (angle < (-0.5 * Math.PI)) {
    			angle += 2.0 * Math.PI; // make sure the returned angle is in the range of (-PI/2, 3PI/2]
    		}

    		return {
    			angle: angle,
    			distance: radialDistanceFromCenter
    		};
    	};
    	helpers$1.distanceBetweenPoints = function(pt1, pt2) {
    		return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));
    	};

    	/**
    	 * Provided for backward compatibility, not available anymore
    	 * @function Chart.helpers.aliasPixel
    	 * @deprecated since version 2.8.0
    	 * @todo remove at version 3
    	 */
    	helpers$1.aliasPixel = function(pixelWidth) {
    		return (pixelWidth % 2 === 0) ? 0 : 0.5;
    	};

    	/**
    	 * Returns the aligned pixel value to avoid anti-aliasing blur
    	 * @param {Chart} chart - The chart instance.
    	 * @param {number} pixel - A pixel value.
    	 * @param {number} width - The width of the element.
    	 * @returns {number} The aligned pixel value.
    	 * @private
    	 */
    	helpers$1._alignPixel = function(chart, pixel, width) {
    		var devicePixelRatio = chart.currentDevicePixelRatio;
    		var halfWidth = width / 2;
    		return Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;
    	};

    	helpers$1.splineCurve = function(firstPoint, middlePoint, afterPoint, t) {
    		// Props to Rob Spencer at scaled innovation for his post on splining between points
    		// http://scaledinnovation.com/analytics/splines/aboutSplines.html

    		// This function must also respect "skipped" points

    		var previous = firstPoint.skip ? middlePoint : firstPoint;
    		var current = middlePoint;
    		var next = afterPoint.skip ? middlePoint : afterPoint;

    		var d01 = Math.sqrt(Math.pow(current.x - previous.x, 2) + Math.pow(current.y - previous.y, 2));
    		var d12 = Math.sqrt(Math.pow(next.x - current.x, 2) + Math.pow(next.y - current.y, 2));

    		var s01 = d01 / (d01 + d12);
    		var s12 = d12 / (d01 + d12);

    		// If all points are the same, s01 & s02 will be inf
    		s01 = isNaN(s01) ? 0 : s01;
    		s12 = isNaN(s12) ? 0 : s12;

    		var fa = t * s01; // scaling factor for triangle Ta
    		var fb = t * s12;

    		return {
    			previous: {
    				x: current.x - fa * (next.x - previous.x),
    				y: current.y - fa * (next.y - previous.y)
    			},
    			next: {
    				x: current.x + fb * (next.x - previous.x),
    				y: current.y + fb * (next.y - previous.y)
    			}
    		};
    	};
    	helpers$1.EPSILON = Number.EPSILON || 1e-14;
    	helpers$1.splineCurveMonotone = function(points) {
    		// This function calculates Bézier control points in a similar way than |splineCurve|,
    		// but preserves monotonicity of the provided data and ensures no local extremums are added
    		// between the dataset discrete points due to the interpolation.
    		// See : https://en.wikipedia.org/wiki/Monotone_cubic_interpolation

    		var pointsWithTangents = (points || []).map(function(point) {
    			return {
    				model: point._model,
    				deltaK: 0,
    				mK: 0
    			};
    		});

    		// Calculate slopes (deltaK) and initialize tangents (mK)
    		var pointsLen = pointsWithTangents.length;
    		var i, pointBefore, pointCurrent, pointAfter;
    		for (i = 0; i < pointsLen; ++i) {
    			pointCurrent = pointsWithTangents[i];
    			if (pointCurrent.model.skip) {
    				continue;
    			}

    			pointBefore = i > 0 ? pointsWithTangents[i - 1] : null;
    			pointAfter = i < pointsLen - 1 ? pointsWithTangents[i + 1] : null;
    			if (pointAfter && !pointAfter.model.skip) {
    				var slopeDeltaX = (pointAfter.model.x - pointCurrent.model.x);

    				// In the case of two points that appear at the same x pixel, slopeDeltaX is 0
    				pointCurrent.deltaK = slopeDeltaX !== 0 ? (pointAfter.model.y - pointCurrent.model.y) / slopeDeltaX : 0;
    			}

    			if (!pointBefore || pointBefore.model.skip) {
    				pointCurrent.mK = pointCurrent.deltaK;
    			} else if (!pointAfter || pointAfter.model.skip) {
    				pointCurrent.mK = pointBefore.deltaK;
    			} else if (this.sign(pointBefore.deltaK) !== this.sign(pointCurrent.deltaK)) {
    				pointCurrent.mK = 0;
    			} else {
    				pointCurrent.mK = (pointBefore.deltaK + pointCurrent.deltaK) / 2;
    			}
    		}

    		// Adjust tangents to ensure monotonic properties
    		var alphaK, betaK, tauK, squaredMagnitude;
    		for (i = 0; i < pointsLen - 1; ++i) {
    			pointCurrent = pointsWithTangents[i];
    			pointAfter = pointsWithTangents[i + 1];
    			if (pointCurrent.model.skip || pointAfter.model.skip) {
    				continue;
    			}

    			if (helpers$1.almostEquals(pointCurrent.deltaK, 0, this.EPSILON)) {
    				pointCurrent.mK = pointAfter.mK = 0;
    				continue;
    			}

    			alphaK = pointCurrent.mK / pointCurrent.deltaK;
    			betaK = pointAfter.mK / pointCurrent.deltaK;
    			squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);
    			if (squaredMagnitude <= 9) {
    				continue;
    			}

    			tauK = 3 / Math.sqrt(squaredMagnitude);
    			pointCurrent.mK = alphaK * tauK * pointCurrent.deltaK;
    			pointAfter.mK = betaK * tauK * pointCurrent.deltaK;
    		}

    		// Compute control points
    		var deltaX;
    		for (i = 0; i < pointsLen; ++i) {
    			pointCurrent = pointsWithTangents[i];
    			if (pointCurrent.model.skip) {
    				continue;
    			}

    			pointBefore = i > 0 ? pointsWithTangents[i - 1] : null;
    			pointAfter = i < pointsLen - 1 ? pointsWithTangents[i + 1] : null;
    			if (pointBefore && !pointBefore.model.skip) {
    				deltaX = (pointCurrent.model.x - pointBefore.model.x) / 3;
    				pointCurrent.model.controlPointPreviousX = pointCurrent.model.x - deltaX;
    				pointCurrent.model.controlPointPreviousY = pointCurrent.model.y - deltaX * pointCurrent.mK;
    			}
    			if (pointAfter && !pointAfter.model.skip) {
    				deltaX = (pointAfter.model.x - pointCurrent.model.x) / 3;
    				pointCurrent.model.controlPointNextX = pointCurrent.model.x + deltaX;
    				pointCurrent.model.controlPointNextY = pointCurrent.model.y + deltaX * pointCurrent.mK;
    			}
    		}
    	};
    	helpers$1.nextItem = function(collection, index, loop) {
    		if (loop) {
    			return index >= collection.length - 1 ? collection[0] : collection[index + 1];
    		}
    		return index >= collection.length - 1 ? collection[collection.length - 1] : collection[index + 1];
    	};
    	helpers$1.previousItem = function(collection, index, loop) {
    		if (loop) {
    			return index <= 0 ? collection[collection.length - 1] : collection[index - 1];
    		}
    		return index <= 0 ? collection[0] : collection[index - 1];
    	};
    	// Implementation of the nice number algorithm used in determining where axis labels will go
    	helpers$1.niceNum = function(range, round) {
    		var exponent = Math.floor(helpers$1.log10(range));
    		var fraction = range / Math.pow(10, exponent);
    		var niceFraction;

    		if (round) {
    			if (fraction < 1.5) {
    				niceFraction = 1;
    			} else if (fraction < 3) {
    				niceFraction = 2;
    			} else if (fraction < 7) {
    				niceFraction = 5;
    			} else {
    				niceFraction = 10;
    			}
    		} else if (fraction <= 1.0) {
    			niceFraction = 1;
    		} else if (fraction <= 2) {
    			niceFraction = 2;
    		} else if (fraction <= 5) {
    			niceFraction = 5;
    		} else {
    			niceFraction = 10;
    		}

    		return niceFraction * Math.pow(10, exponent);
    	};
    	// Request animation polyfill - https://www.paulirish.com/2011/requestanimationframe-for-smart-animating/
    	helpers$1.requestAnimFrame = (function() {
    		if (typeof window === 'undefined') {
    			return function(callback) {
    				callback();
    			};
    		}
    		return window.requestAnimationFrame ||
    			window.webkitRequestAnimationFrame ||
    			window.mozRequestAnimationFrame ||
    			window.oRequestAnimationFrame ||
    			window.msRequestAnimationFrame ||
    			function(callback) {
    				return window.setTimeout(callback, 1000 / 60);
    			};
    	}());
    	// -- DOM methods
    	helpers$1.getRelativePosition = function(evt, chart) {
    		var mouseX, mouseY;
    		var e = evt.originalEvent || evt;
    		var canvas = evt.target || evt.srcElement;
    		var boundingRect = canvas.getBoundingClientRect();

    		var touches = e.touches;
    		if (touches && touches.length > 0) {
    			mouseX = touches[0].clientX;
    			mouseY = touches[0].clientY;

    		} else {
    			mouseX = e.clientX;
    			mouseY = e.clientY;
    		}

    		// Scale mouse coordinates into canvas coordinates
    		// by following the pattern laid out by 'jerryj' in the comments of
    		// https://www.html5canvastutorials.com/advanced/html5-canvas-mouse-coordinates/
    		var paddingLeft = parseFloat(helpers$1.getStyle(canvas, 'padding-left'));
    		var paddingTop = parseFloat(helpers$1.getStyle(canvas, 'padding-top'));
    		var paddingRight = parseFloat(helpers$1.getStyle(canvas, 'padding-right'));
    		var paddingBottom = parseFloat(helpers$1.getStyle(canvas, 'padding-bottom'));
    		var width = boundingRect.right - boundingRect.left - paddingLeft - paddingRight;
    		var height = boundingRect.bottom - boundingRect.top - paddingTop - paddingBottom;

    		// We divide by the current device pixel ratio, because the canvas is scaled up by that amount in each direction. However
    		// the backend model is in unscaled coordinates. Since we are going to deal with our model coordinates, we go back here
    		mouseX = Math.round((mouseX - boundingRect.left - paddingLeft) / (width) * canvas.width / chart.currentDevicePixelRatio);
    		mouseY = Math.round((mouseY - boundingRect.top - paddingTop) / (height) * canvas.height / chart.currentDevicePixelRatio);

    		return {
    			x: mouseX,
    			y: mouseY
    		};

    	};

    	// Private helper function to convert max-width/max-height values that may be percentages into a number
    	function parseMaxStyle(styleValue, node, parentProperty) {
    		var valueInPixels;
    		if (typeof styleValue === 'string') {
    			valueInPixels = parseInt(styleValue, 10);

    			if (styleValue.indexOf('%') !== -1) {
    				// percentage * size in dimension
    				valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];
    			}
    		} else {
    			valueInPixels = styleValue;
    		}

    		return valueInPixels;
    	}

    	/**
    	 * Returns if the given value contains an effective constraint.
    	 * @private
    	 */
    	function isConstrainedValue(value) {
    		return value !== undefined && value !== null && value !== 'none';
    	}

    	/**
    	 * Returns the max width or height of the given DOM node in a cross-browser compatible fashion
    	 * @param {HTMLElement} domNode - the node to check the constraint on
    	 * @param {string} maxStyle - the style that defines the maximum for the direction we are using ('max-width' / 'max-height')
    	 * @param {string} percentageProperty - property of parent to use when calculating width as a percentage
    	 * @see {@link https://www.nathanaeljones.com/blog/2013/reading-max-width-cross-browser}
    	 */
    	function getConstraintDimension(domNode, maxStyle, percentageProperty) {
    		var view = document.defaultView;
    		var parentNode = helpers$1._getParentNode(domNode);
    		var constrainedNode = view.getComputedStyle(domNode)[maxStyle];
    		var constrainedContainer = view.getComputedStyle(parentNode)[maxStyle];
    		var hasCNode = isConstrainedValue(constrainedNode);
    		var hasCContainer = isConstrainedValue(constrainedContainer);
    		var infinity = Number.POSITIVE_INFINITY;

    		if (hasCNode || hasCContainer) {
    			return Math.min(
    				hasCNode ? parseMaxStyle(constrainedNode, domNode, percentageProperty) : infinity,
    				hasCContainer ? parseMaxStyle(constrainedContainer, parentNode, percentageProperty) : infinity);
    		}

    		return 'none';
    	}
    	// returns Number or undefined if no constraint
    	helpers$1.getConstraintWidth = function(domNode) {
    		return getConstraintDimension(domNode, 'max-width', 'clientWidth');
    	};
    	// returns Number or undefined if no constraint
    	helpers$1.getConstraintHeight = function(domNode) {
    		return getConstraintDimension(domNode, 'max-height', 'clientHeight');
    	};
    	/**
    	 * @private
     	 */
    	helpers$1._calculatePadding = function(container, padding, parentDimension) {
    		padding = helpers$1.getStyle(container, padding);

    		return padding.indexOf('%') > -1 ? parentDimension * parseInt(padding, 10) / 100 : parseInt(padding, 10);
    	};
    	/**
    	 * @private
    	 */
    	helpers$1._getParentNode = function(domNode) {
    		var parent = domNode.parentNode;
    		if (parent && parent.toString() === '[object ShadowRoot]') {
    			parent = parent.host;
    		}
    		return parent;
    	};
    	helpers$1.getMaximumWidth = function(domNode) {
    		var container = helpers$1._getParentNode(domNode);
    		if (!container) {
    			return domNode.clientWidth;
    		}

    		var clientWidth = container.clientWidth;
    		var paddingLeft = helpers$1._calculatePadding(container, 'padding-left', clientWidth);
    		var paddingRight = helpers$1._calculatePadding(container, 'padding-right', clientWidth);

    		var w = clientWidth - paddingLeft - paddingRight;
    		var cw = helpers$1.getConstraintWidth(domNode);
    		return isNaN(cw) ? w : Math.min(w, cw);
    	};
    	helpers$1.getMaximumHeight = function(domNode) {
    		var container = helpers$1._getParentNode(domNode);
    		if (!container) {
    			return domNode.clientHeight;
    		}

    		var clientHeight = container.clientHeight;
    		var paddingTop = helpers$1._calculatePadding(container, 'padding-top', clientHeight);
    		var paddingBottom = helpers$1._calculatePadding(container, 'padding-bottom', clientHeight);

    		var h = clientHeight - paddingTop - paddingBottom;
    		var ch = helpers$1.getConstraintHeight(domNode);
    		return isNaN(ch) ? h : Math.min(h, ch);
    	};
    	helpers$1.getStyle = function(el, property) {
    		return el.currentStyle ?
    			el.currentStyle[property] :
    			document.defaultView.getComputedStyle(el, null).getPropertyValue(property);
    	};
    	helpers$1.retinaScale = function(chart, forceRatio) {
    		var pixelRatio = chart.currentDevicePixelRatio = forceRatio || (typeof window !== 'undefined' && window.devicePixelRatio) || 1;
    		if (pixelRatio === 1) {
    			return;
    		}

    		var canvas = chart.canvas;
    		var height = chart.height;
    		var width = chart.width;

    		canvas.height = height * pixelRatio;
    		canvas.width = width * pixelRatio;
    		chart.ctx.scale(pixelRatio, pixelRatio);

    		// If no style has been set on the canvas, the render size is used as display size,
    		// making the chart visually bigger, so let's enforce it to the "correct" values.
    		// See https://github.com/chartjs/Chart.js/issues/3575
    		if (!canvas.style.height && !canvas.style.width) {
    			canvas.style.height = height + 'px';
    			canvas.style.width = width + 'px';
    		}
    	};
    	// -- Canvas methods
    	helpers$1.fontString = function(pixelSize, fontStyle, fontFamily) {
    		return fontStyle + ' ' + pixelSize + 'px ' + fontFamily;
    	};
    	helpers$1.longestText = function(ctx, font, arrayOfThings, cache) {
    		cache = cache || {};
    		var data = cache.data = cache.data || {};
    		var gc = cache.garbageCollect = cache.garbageCollect || [];

    		if (cache.font !== font) {
    			data = cache.data = {};
    			gc = cache.garbageCollect = [];
    			cache.font = font;
    		}

    		ctx.font = font;
    		var longest = 0;
    		var ilen = arrayOfThings.length;
    		var i, j, jlen, thing, nestedThing;
    		for (i = 0; i < ilen; i++) {
    			thing = arrayOfThings[i];

    			// Undefined strings and arrays should not be measured
    			if (thing !== undefined && thing !== null && helpers$1.isArray(thing) !== true) {
    				longest = helpers$1.measureText(ctx, data, gc, longest, thing);
    			} else if (helpers$1.isArray(thing)) {
    				// if it is an array lets measure each element
    				// to do maybe simplify this function a bit so we can do this more recursively?
    				for (j = 0, jlen = thing.length; j < jlen; j++) {
    					nestedThing = thing[j];
    					// Undefined strings and arrays should not be measured
    					if (nestedThing !== undefined && nestedThing !== null && !helpers$1.isArray(nestedThing)) {
    						longest = helpers$1.measureText(ctx, data, gc, longest, nestedThing);
    					}
    				}
    			}
    		}

    		var gcLen = gc.length / 2;
    		if (gcLen > arrayOfThings.length) {
    			for (i = 0; i < gcLen; i++) {
    				delete data[gc[i]];
    			}
    			gc.splice(0, gcLen);
    		}
    		return longest;
    	};
    	helpers$1.measureText = function(ctx, data, gc, longest, string) {
    		var textWidth = data[string];
    		if (!textWidth) {
    			textWidth = data[string] = ctx.measureText(string).width;
    			gc.push(string);
    		}
    		if (textWidth > longest) {
    			longest = textWidth;
    		}
    		return longest;
    	};

    	/**
    	 * @deprecated
    	 */
    	helpers$1.numberOfLabelLines = function(arrayOfThings) {
    		var numberOfLines = 1;
    		helpers$1.each(arrayOfThings, function(thing) {
    			if (helpers$1.isArray(thing)) {
    				if (thing.length > numberOfLines) {
    					numberOfLines = thing.length;
    				}
    			}
    		});
    		return numberOfLines;
    	};

    	helpers$1.color = !chartjsColor ?
    		function(value) {
    			console.error('Color.js not found!');
    			return value;
    		} :
    		function(value) {
    			/* global CanvasGradient */
    			if (value instanceof CanvasGradient) {
    				value = core_defaults.global.defaultColor;
    			}

    			return chartjsColor(value);
    		};

    	helpers$1.getHoverColor = function(colorValue) {
    		/* global CanvasPattern */
    		return (colorValue instanceof CanvasPattern || colorValue instanceof CanvasGradient) ?
    			colorValue :
    			helpers$1.color(colorValue).saturate(0.5).darken(0.1).rgbString();
    	};
    };

    function abstract() {
    	throw new Error(
    		'This method is not implemented: either no adapter can ' +
    		'be found or an incomplete integration was provided.'
    	);
    }

    /**
     * Date adapter (current used by the time scale)
     * @namespace Chart._adapters._date
     * @memberof Chart._adapters
     * @private
     */

    /**
     * Currently supported unit string values.
     * @typedef {('millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year')}
     * @memberof Chart._adapters._date
     * @name Unit
     */

    /**
     * @class
     */
    function DateAdapter(options) {
    	this.options = options || {};
    }

    helpers$1.extend(DateAdapter.prototype, /** @lends DateAdapter */ {
    	/**
    	 * Returns a map of time formats for the supported formatting units defined
    	 * in Unit as well as 'datetime' representing a detailed date/time string.
    	 * @returns {{string: string}}
    	 */
    	formats: abstract,

    	/**
    	 * Parses the given `value` and return the associated timestamp.
    	 * @param {any} value - the value to parse (usually comes from the data)
    	 * @param {string} [format] - the expected data format
    	 * @returns {(number|null)}
    	 * @function
    	 */
    	parse: abstract,

    	/**
    	 * Returns the formatted date in the specified `format` for a given `timestamp`.
    	 * @param {number} timestamp - the timestamp to format
    	 * @param {string} format - the date/time token
    	 * @return {string}
    	 * @function
    	 */
    	format: abstract,

    	/**
    	 * Adds the specified `amount` of `unit` to the given `timestamp`.
    	 * @param {number} timestamp - the input timestamp
    	 * @param {number} amount - the amount to add
    	 * @param {Unit} unit - the unit as string
    	 * @return {number}
    	 * @function
    	 */
    	add: abstract,

    	/**
    	 * Returns the number of `unit` between the given timestamps.
    	 * @param {number} max - the input timestamp (reference)
    	 * @param {number} min - the timestamp to substract
    	 * @param {Unit} unit - the unit as string
    	 * @return {number}
    	 * @function
    	 */
    	diff: abstract,

    	/**
    	 * Returns start of `unit` for the given `timestamp`.
    	 * @param {number} timestamp - the input timestamp
    	 * @param {Unit} unit - the unit as string
    	 * @param {number} [weekday] - the ISO day of the week with 1 being Monday
    	 * and 7 being Sunday (only needed if param *unit* is `isoWeek`).
    	 * @function
    	 */
    	startOf: abstract,

    	/**
    	 * Returns end of `unit` for the given `timestamp`.
    	 * @param {number} timestamp - the input timestamp
    	 * @param {Unit} unit - the unit as string
    	 * @function
    	 */
    	endOf: abstract,

    	// DEPRECATIONS

    	/**
    	 * Provided for backward compatibility for scale.getValueForPixel(),
    	 * this method should be overridden only by the moment adapter.
    	 * @deprecated since version 2.8.0
    	 * @todo remove at version 3
    	 * @private
    	 */
    	_create: function(value) {
    		return value;
    	}
    });

    DateAdapter.override = function(members) {
    	helpers$1.extend(DateAdapter.prototype, members);
    };

    var _date = DateAdapter;

    var core_adapters = {
    	_date: _date
    };

    /**
     * Namespace to hold static tick generation functions
     * @namespace Chart.Ticks
     */
    var core_ticks = {
    	/**
    	 * Namespace to hold formatters for different types of ticks
    	 * @namespace Chart.Ticks.formatters
    	 */
    	formatters: {
    		/**
    		 * Formatter for value labels
    		 * @method Chart.Ticks.formatters.values
    		 * @param value the value to display
    		 * @return {string|string[]} the label to display
    		 */
    		values: function(value) {
    			return helpers$1.isArray(value) ? value : '' + value;
    		},

    		/**
    		 * Formatter for linear numeric ticks
    		 * @method Chart.Ticks.formatters.linear
    		 * @param tickValue {number} the value to be formatted
    		 * @param index {number} the position of the tickValue parameter in the ticks array
    		 * @param ticks {number[]} the list of ticks being converted
    		 * @return {string} string representation of the tickValue parameter
    		 */
    		linear: function(tickValue, index, ticks) {
    			// If we have lots of ticks, don't use the ones
    			var delta = ticks.length > 3 ? ticks[2] - ticks[1] : ticks[1] - ticks[0];

    			// If we have a number like 2.5 as the delta, figure out how many decimal places we need
    			if (Math.abs(delta) > 1) {
    				if (tickValue !== Math.floor(tickValue)) {
    					// not an integer
    					delta = tickValue - Math.floor(tickValue);
    				}
    			}

    			var logDelta = helpers$1.log10(Math.abs(delta));
    			var tickString = '';

    			if (tickValue !== 0) {
    				var maxTick = Math.max(Math.abs(ticks[0]), Math.abs(ticks[ticks.length - 1]));
    				if (maxTick < 1e-4) { // all ticks are small numbers; use scientific notation
    					var logTick = helpers$1.log10(Math.abs(tickValue));
    					var numExponential = Math.floor(logTick) - Math.floor(logDelta);
    					numExponential = Math.max(Math.min(numExponential, 20), 0);
    					tickString = tickValue.toExponential(numExponential);
    				} else {
    					var numDecimal = -1 * Math.floor(logDelta);
    					numDecimal = Math.max(Math.min(numDecimal, 20), 0); // toFixed has a max of 20 decimal places
    					tickString = tickValue.toFixed(numDecimal);
    				}
    			} else {
    				tickString = '0'; // never show decimal places for 0
    			}

    			return tickString;
    		},

    		logarithmic: function(tickValue, index, ticks) {
    			var remain = tickValue / (Math.pow(10, Math.floor(helpers$1.log10(tickValue))));

    			if (tickValue === 0) {
    				return '0';
    			} else if (remain === 1 || remain === 2 || remain === 5 || index === 0 || index === ticks.length - 1) {
    				return tickValue.toExponential();
    			}
    			return '';
    		}
    	}
    };

    var isArray = helpers$1.isArray;
    var isNullOrUndef = helpers$1.isNullOrUndef;
    var valueOrDefault$a = helpers$1.valueOrDefault;
    var valueAtIndexOrDefault = helpers$1.valueAtIndexOrDefault;

    core_defaults._set('scale', {
    	display: true,
    	position: 'left',
    	offset: false,

    	// grid line settings
    	gridLines: {
    		display: true,
    		color: 'rgba(0,0,0,0.1)',
    		lineWidth: 1,
    		drawBorder: true,
    		drawOnChartArea: true,
    		drawTicks: true,
    		tickMarkLength: 10,
    		zeroLineWidth: 1,
    		zeroLineColor: 'rgba(0,0,0,0.25)',
    		zeroLineBorderDash: [],
    		zeroLineBorderDashOffset: 0.0,
    		offsetGridLines: false,
    		borderDash: [],
    		borderDashOffset: 0.0
    	},

    	// scale label
    	scaleLabel: {
    		// display property
    		display: false,

    		// actual label
    		labelString: '',

    		// top/bottom padding
    		padding: {
    			top: 4,
    			bottom: 4
    		}
    	},

    	// label settings
    	ticks: {
    		beginAtZero: false,
    		minRotation: 0,
    		maxRotation: 50,
    		mirror: false,
    		padding: 0,
    		reverse: false,
    		display: true,
    		autoSkip: true,
    		autoSkipPadding: 0,
    		labelOffset: 0,
    		// We pass through arrays to be rendered as multiline labels, we convert Others to strings here.
    		callback: core_ticks.formatters.values,
    		minor: {},
    		major: {}
    	}
    });

    /** Returns a new array containing numItems from arr */
    function sample(arr, numItems) {
    	var result = [];
    	var increment = arr.length / numItems;
    	var i = 0;
    	var len = arr.length;

    	for (; i < len; i += increment) {
    		result.push(arr[Math.floor(i)]);
    	}
    	return result;
    }

    function getPixelForGridLine(scale, index, offsetGridLines) {
    	var length = scale.getTicks().length;
    	var validIndex = Math.min(index, length - 1);
    	var lineValue = scale.getPixelForTick(validIndex);
    	var start = scale._startPixel;
    	var end = scale._endPixel;
    	var epsilon = 1e-6; // 1e-6 is margin in pixels for accumulated error.
    	var offset;

    	if (offsetGridLines) {
    		if (length === 1) {
    			offset = Math.max(lineValue - start, end - lineValue);
    		} else if (index === 0) {
    			offset = (scale.getPixelForTick(1) - lineValue) / 2;
    		} else {
    			offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;
    		}
    		lineValue += validIndex < index ? offset : -offset;

    		// Return undefined if the pixel is out of the range
    		if (lineValue < start - epsilon || lineValue > end + epsilon) {
    			return;
    		}
    	}
    	return lineValue;
    }

    function garbageCollect(caches, length) {
    	helpers$1.each(caches, function(cache) {
    		var gc = cache.gc;
    		var gcLen = gc.length / 2;
    		var i;
    		if (gcLen > length) {
    			for (i = 0; i < gcLen; ++i) {
    				delete cache.data[gc[i]];
    			}
    			gc.splice(0, gcLen);
    		}
    	});
    }

    /**
     * Returns {width, height, offset} objects for the first, last, widest, highest tick
     * labels where offset indicates the anchor point offset from the top in pixels.
     */
    function computeLabelSizes(ctx, tickFonts, ticks, caches) {
    	var length = ticks.length;
    	var widths = [];
    	var heights = [];
    	var offsets = [];
    	var widestLabelSize = 0;
    	var highestLabelSize = 0;
    	var i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel, widest, highest;

    	for (i = 0; i < length; ++i) {
    		label = ticks[i].label;
    		tickFont = ticks[i].major ? tickFonts.major : tickFonts.minor;
    		ctx.font = fontString = tickFont.string;
    		cache = caches[fontString] = caches[fontString] || {data: {}, gc: []};
    		lineHeight = tickFont.lineHeight;
    		width = height = 0;
    		// Undefined labels and arrays should not be measured
    		if (!isNullOrUndef(label) && !isArray(label)) {
    			width = helpers$1.measureText(ctx, cache.data, cache.gc, width, label);
    			height = lineHeight;
    		} else if (isArray(label)) {
    			// if it is an array let's measure each element
    			for (j = 0, jlen = label.length; j < jlen; ++j) {
    				nestedLabel = label[j];
    				// Undefined labels and arrays should not be measured
    				if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {
    					width = helpers$1.measureText(ctx, cache.data, cache.gc, width, nestedLabel);
    					height += lineHeight;
    				}
    			}
    		}
    		widths.push(width);
    		heights.push(height);
    		offsets.push(lineHeight / 2);
    		widestLabelSize = Math.max(width, widestLabelSize);
    		highestLabelSize = Math.max(height, highestLabelSize);
    	}
    	garbageCollect(caches, length);

    	widest = widths.indexOf(widestLabelSize);
    	highest = heights.indexOf(highestLabelSize);

    	function valueAt(idx) {
    		return {
    			width: widths[idx] || 0,
    			height: heights[idx] || 0,
    			offset: offsets[idx] || 0
    		};
    	}

    	return {
    		first: valueAt(0),
    		last: valueAt(length - 1),
    		widest: valueAt(widest),
    		highest: valueAt(highest)
    	};
    }

    function getTickMarkLength(options) {
    	return options.drawTicks ? options.tickMarkLength : 0;
    }

    function getScaleLabelHeight(options) {
    	var font, padding;

    	if (!options.display) {
    		return 0;
    	}

    	font = helpers$1.options._parseFont(options);
    	padding = helpers$1.options.toPadding(options.padding);

    	return font.lineHeight + padding.height;
    }

    function parseFontOptions(options, nestedOpts) {
    	return helpers$1.extend(helpers$1.options._parseFont({
    		fontFamily: valueOrDefault$a(nestedOpts.fontFamily, options.fontFamily),
    		fontSize: valueOrDefault$a(nestedOpts.fontSize, options.fontSize),
    		fontStyle: valueOrDefault$a(nestedOpts.fontStyle, options.fontStyle),
    		lineHeight: valueOrDefault$a(nestedOpts.lineHeight, options.lineHeight)
    	}), {
    		color: helpers$1.options.resolve([nestedOpts.fontColor, options.fontColor, core_defaults.global.defaultFontColor])
    	});
    }

    function parseTickFontOptions(options) {
    	var minor = parseFontOptions(options, options.minor);
    	var major = options.major.enabled ? parseFontOptions(options, options.major) : minor;

    	return {minor: minor, major: major};
    }

    function nonSkipped(ticksToFilter) {
    	var filtered = [];
    	var item, index, len;
    	for (index = 0, len = ticksToFilter.length; index < len; ++index) {
    		item = ticksToFilter[index];
    		if (typeof item._index !== 'undefined') {
    			filtered.push(item);
    		}
    	}
    	return filtered;
    }

    function getEvenSpacing(arr) {
    	var len = arr.length;
    	var i, diff;

    	if (len < 2) {
    		return false;
    	}

    	for (diff = arr[0], i = 1; i < len; ++i) {
    		if (arr[i] - arr[i - 1] !== diff) {
    			return false;
    		}
    	}
    	return diff;
    }

    function calculateSpacing(majorIndices, ticks, axisLength, ticksLimit) {
    	var evenMajorSpacing = getEvenSpacing(majorIndices);
    	var spacing = (ticks.length - 1) / ticksLimit;
    	var factors, factor, i, ilen;

    	// If the major ticks are evenly spaced apart, place the minor ticks
    	// so that they divide the major ticks into even chunks
    	if (!evenMajorSpacing) {
    		return Math.max(spacing, 1);
    	}

    	factors = helpers$1.math._factorize(evenMajorSpacing);
    	for (i = 0, ilen = factors.length - 1; i < ilen; i++) {
    		factor = factors[i];
    		if (factor > spacing) {
    			return factor;
    		}
    	}
    	return Math.max(spacing, 1);
    }

    function getMajorIndices(ticks) {
    	var result = [];
    	var i, ilen;
    	for (i = 0, ilen = ticks.length; i < ilen; i++) {
    		if (ticks[i].major) {
    			result.push(i);
    		}
    	}
    	return result;
    }

    function skipMajors(ticks, majorIndices, spacing) {
    	var count = 0;
    	var next = majorIndices[0];
    	var i, tick;

    	spacing = Math.ceil(spacing);
    	for (i = 0; i < ticks.length; i++) {
    		tick = ticks[i];
    		if (i === next) {
    			tick._index = i;
    			count++;
    			next = majorIndices[count * spacing];
    		} else {
    			delete tick.label;
    		}
    	}
    }

    function skip(ticks, spacing, majorStart, majorEnd) {
    	var start = valueOrDefault$a(majorStart, 0);
    	var end = Math.min(valueOrDefault$a(majorEnd, ticks.length), ticks.length);
    	var count = 0;
    	var length, i, tick, next;

    	spacing = Math.ceil(spacing);
    	if (majorEnd) {
    		length = majorEnd - majorStart;
    		spacing = length / Math.floor(length / spacing);
    	}

    	next = start;

    	while (next < 0) {
    		count++;
    		next = Math.round(start + count * spacing);
    	}

    	for (i = Math.max(start, 0); i < end; i++) {
    		tick = ticks[i];
    		if (i === next) {
    			tick._index = i;
    			count++;
    			next = Math.round(start + count * spacing);
    		} else {
    			delete tick.label;
    		}
    	}
    }

    var Scale = core_element.extend({

    	zeroLineIndex: 0,

    	/**
    	 * Get the padding needed for the scale
    	 * @method getPadding
    	 * @private
    	 * @returns {Padding} the necessary padding
    	 */
    	getPadding: function() {
    		var me = this;
    		return {
    			left: me.paddingLeft || 0,
    			top: me.paddingTop || 0,
    			right: me.paddingRight || 0,
    			bottom: me.paddingBottom || 0
    		};
    	},

    	/**
    	 * Returns the scale tick objects ({label, major})
    	 * @since 2.7
    	 */
    	getTicks: function() {
    		return this._ticks;
    	},

    	/**
    	* @private
    	*/
    	_getLabels: function() {
    		var data = this.chart.data;
    		return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];
    	},

    	// These methods are ordered by lifecyle. Utilities then follow.
    	// Any function defined here is inherited by all scale types.
    	// Any function can be extended by the scale type

    	/**
    	 * Provided for backward compatibility, not available anymore
    	 * @function Chart.Scale.mergeTicksOptions
    	 * @deprecated since version 2.8.0
    	 * @todo remove at version 3
    	 */
    	mergeTicksOptions: function() {
    		// noop
    	},

    	beforeUpdate: function() {
    		helpers$1.callback(this.options.beforeUpdate, [this]);
    	},

    	/**
    	 * @param {number} maxWidth - the max width in pixels
    	 * @param {number} maxHeight - the max height in pixels
    	 * @param {object} margins - the space between the edge of the other scales and edge of the chart
    	 *   This space comes from two sources:
    	 *     - padding - space that's required to show the labels at the edges of the scale
    	 *     - thickness of scales or legends in another orientation
    	 */
    	update: function(maxWidth, maxHeight, margins) {
    		var me = this;
    		var tickOpts = me.options.ticks;
    		var sampleSize = tickOpts.sampleSize;
    		var i, ilen, labels, ticks, samplingEnabled;

    		// Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)
    		me.beforeUpdate();

    		// Absorb the master measurements
    		me.maxWidth = maxWidth;
    		me.maxHeight = maxHeight;
    		me.margins = helpers$1.extend({
    			left: 0,
    			right: 0,
    			top: 0,
    			bottom: 0
    		}, margins);

    		me._ticks = null;
    		me.ticks = null;
    		me._labelSizes = null;
    		me._maxLabelLines = 0;
    		me.longestLabelWidth = 0;
    		me.longestTextCache = me.longestTextCache || {};
    		me._gridLineItems = null;
    		me._labelItems = null;

    		// Dimensions
    		me.beforeSetDimensions();
    		me.setDimensions();
    		me.afterSetDimensions();

    		// Data min/max
    		me.beforeDataLimits();
    		me.determineDataLimits();
    		me.afterDataLimits();

    		// Ticks - `this.ticks` is now DEPRECATED!
    		// Internal ticks are now stored as objects in the PRIVATE `this._ticks` member
    		// and must not be accessed directly from outside this class. `this.ticks` being
    		// around for long time and not marked as private, we can't change its structure
    		// without unexpected breaking changes. If you need to access the scale ticks,
    		// use scale.getTicks() instead.

    		me.beforeBuildTicks();

    		// New implementations should return an array of objects but for BACKWARD COMPAT,
    		// we still support no return (`this.ticks` internally set by calling this method).
    		ticks = me.buildTicks() || [];

    		// Allow modification of ticks in callback.
    		ticks = me.afterBuildTicks(ticks) || ticks;

    		// Ensure ticks contains ticks in new tick format
    		if ((!ticks || !ticks.length) && me.ticks) {
    			ticks = [];
    			for (i = 0, ilen = me.ticks.length; i < ilen; ++i) {
    				ticks.push({
    					value: me.ticks[i],
    					major: false
    				});
    			}
    		}

    		me._ticks = ticks;

    		// Compute tick rotation and fit using a sampled subset of labels
    		// We generally don't need to compute the size of every single label for determining scale size
    		samplingEnabled = sampleSize < ticks.length;
    		labels = me._convertTicksToLabels(samplingEnabled ? sample(ticks, sampleSize) : ticks);

    		// _configure is called twice, once here, once from core.controller.updateLayout.
    		// Here we haven't been positioned yet, but dimensions are correct.
    		// Variables set in _configure are needed for calculateTickRotation, and
    		// it's ok that coordinates are not correct there, only dimensions matter.
    		me._configure();

    		// Tick Rotation
    		me.beforeCalculateTickRotation();
    		me.calculateTickRotation();
    		me.afterCalculateTickRotation();

    		me.beforeFit();
    		me.fit();
    		me.afterFit();

    		// Auto-skip
    		me._ticksToDraw = tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto') ? me._autoSkip(ticks) : ticks;

    		if (samplingEnabled) {
    			// Generate labels using all non-skipped ticks
    			labels = me._convertTicksToLabels(me._ticksToDraw);
    		}

    		me.ticks = labels;   // BACKWARD COMPATIBILITY

    		// IMPORTANT: after this point, we consider that `this.ticks` will NEVER change!

    		me.afterUpdate();

    		// TODO(v3): remove minSize as a public property and return value from all layout boxes. It is unused
    		// make maxWidth and maxHeight private
    		return me.minSize;
    	},

    	/**
    	 * @private
    	 */
    	_configure: function() {
    		var me = this;
    		var reversePixels = me.options.ticks.reverse;
    		var startPixel, endPixel;

    		if (me.isHorizontal()) {
    			startPixel = me.left;
    			endPixel = me.right;
    		} else {
    			startPixel = me.top;
    			endPixel = me.bottom;
    			// by default vertical scales are from bottom to top, so pixels are reversed
    			reversePixels = !reversePixels;
    		}
    		me._startPixel = startPixel;
    		me._endPixel = endPixel;
    		me._reversePixels = reversePixels;
    		me._length = endPixel - startPixel;
    	},

    	afterUpdate: function() {
    		helpers$1.callback(this.options.afterUpdate, [this]);
    	},

    	//

    	beforeSetDimensions: function() {
    		helpers$1.callback(this.options.beforeSetDimensions, [this]);
    	},
    	setDimensions: function() {
    		var me = this;
    		// Set the unconstrained dimension before label rotation
    		if (me.isHorizontal()) {
    			// Reset position before calculating rotation
    			me.width = me.maxWidth;
    			me.left = 0;
    			me.right = me.width;
    		} else {
    			me.height = me.maxHeight;

    			// Reset position before calculating rotation
    			me.top = 0;
    			me.bottom = me.height;
    		}

    		// Reset padding
    		me.paddingLeft = 0;
    		me.paddingTop = 0;
    		me.paddingRight = 0;
    		me.paddingBottom = 0;
    	},
    	afterSetDimensions: function() {
    		helpers$1.callback(this.options.afterSetDimensions, [this]);
    	},

    	// Data limits
    	beforeDataLimits: function() {
    		helpers$1.callback(this.options.beforeDataLimits, [this]);
    	},
    	determineDataLimits: helpers$1.noop,
    	afterDataLimits: function() {
    		helpers$1.callback(this.options.afterDataLimits, [this]);
    	},

    	//
    	beforeBuildTicks: function() {
    		helpers$1.callback(this.options.beforeBuildTicks, [this]);
    	},
    	buildTicks: helpers$1.noop,
    	afterBuildTicks: function(ticks) {
    		var me = this;
    		// ticks is empty for old axis implementations here
    		if (isArray(ticks) && ticks.length) {
    			return helpers$1.callback(me.options.afterBuildTicks, [me, ticks]);
    		}
    		// Support old implementations (that modified `this.ticks` directly in buildTicks)
    		me.ticks = helpers$1.callback(me.options.afterBuildTicks, [me, me.ticks]) || me.ticks;
    		return ticks;
    	},

    	beforeTickToLabelConversion: function() {
    		helpers$1.callback(this.options.beforeTickToLabelConversion, [this]);
    	},
    	convertTicksToLabels: function() {
    		var me = this;
    		// Convert ticks to strings
    		var tickOpts = me.options.ticks;
    		me.ticks = me.ticks.map(tickOpts.userCallback || tickOpts.callback, this);
    	},
    	afterTickToLabelConversion: function() {
    		helpers$1.callback(this.options.afterTickToLabelConversion, [this]);
    	},

    	//

    	beforeCalculateTickRotation: function() {
    		helpers$1.callback(this.options.beforeCalculateTickRotation, [this]);
    	},
    	calculateTickRotation: function() {
    		var me = this;
    		var options = me.options;
    		var tickOpts = options.ticks;
    		var numTicks = me.getTicks().length;
    		var minRotation = tickOpts.minRotation || 0;
    		var maxRotation = tickOpts.maxRotation;
    		var labelRotation = minRotation;
    		var labelSizes, maxLabelWidth, maxLabelHeight, maxWidth, tickWidth, maxHeight, maxLabelDiagonal;

    		if (!me._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !me.isHorizontal()) {
    			me.labelRotation = minRotation;
    			return;
    		}

    		labelSizes = me._getLabelSizes();
    		maxLabelWidth = labelSizes.widest.width;
    		maxLabelHeight = labelSizes.highest.height - labelSizes.highest.offset;

    		// Estimate the width of each grid based on the canvas width, the maximum
    		// label width and the number of tick intervals
    		maxWidth = Math.min(me.maxWidth, me.chart.width - maxLabelWidth);
    		tickWidth = options.offset ? me.maxWidth / numTicks : maxWidth / (numTicks - 1);

    		// Allow 3 pixels x2 padding either side for label readability
    		if (maxLabelWidth + 6 > tickWidth) {
    			tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));
    			maxHeight = me.maxHeight - getTickMarkLength(options.gridLines)
    				- tickOpts.padding - getScaleLabelHeight(options.scaleLabel);
    			maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);
    			labelRotation = helpers$1.toDegrees(Math.min(
    				Math.asin(Math.min((labelSizes.highest.height + 6) / tickWidth, 1)),
    				Math.asin(Math.min(maxHeight / maxLabelDiagonal, 1)) - Math.asin(maxLabelHeight / maxLabelDiagonal)
    			));
    			labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));
    		}

    		me.labelRotation = labelRotation;
    	},
    	afterCalculateTickRotation: function() {
    		helpers$1.callback(this.options.afterCalculateTickRotation, [this]);
    	},

    	//

    	beforeFit: function() {
    		helpers$1.callback(this.options.beforeFit, [this]);
    	},
    	fit: function() {
    		var me = this;
    		// Reset
    		var minSize = me.minSize = {
    			width: 0,
    			height: 0
    		};

    		var chart = me.chart;
    		var opts = me.options;
    		var tickOpts = opts.ticks;
    		var scaleLabelOpts = opts.scaleLabel;
    		var gridLineOpts = opts.gridLines;
    		var display = me._isVisible();
    		var isBottom = opts.position === 'bottom';
    		var isHorizontal = me.isHorizontal();

    		// Width
    		if (isHorizontal) {
    			minSize.width = me.maxWidth;
    		} else if (display) {
    			minSize.width = getTickMarkLength(gridLineOpts) + getScaleLabelHeight(scaleLabelOpts);
    		}

    		// height
    		if (!isHorizontal) {
    			minSize.height = me.maxHeight; // fill all the height
    		} else if (display) {
    			minSize.height = getTickMarkLength(gridLineOpts) + getScaleLabelHeight(scaleLabelOpts);
    		}

    		// Don't bother fitting the ticks if we are not showing the labels
    		if (tickOpts.display && display) {
    			var tickFonts = parseTickFontOptions(tickOpts);
    			var labelSizes = me._getLabelSizes();
    			var firstLabelSize = labelSizes.first;
    			var lastLabelSize = labelSizes.last;
    			var widestLabelSize = labelSizes.widest;
    			var highestLabelSize = labelSizes.highest;
    			var lineSpace = tickFonts.minor.lineHeight * 0.4;
    			var tickPadding = tickOpts.padding;

    			if (isHorizontal) {
    				// A horizontal axis is more constrained by the height.
    				var isRotated = me.labelRotation !== 0;
    				var angleRadians = helpers$1.toRadians(me.labelRotation);
    				var cosRotation = Math.cos(angleRadians);
    				var sinRotation = Math.sin(angleRadians);

    				var labelHeight = sinRotation * widestLabelSize.width
    					+ cosRotation * (highestLabelSize.height - (isRotated ? highestLabelSize.offset : 0))
    					+ (isRotated ? 0 : lineSpace); // padding

    				minSize.height = Math.min(me.maxHeight, minSize.height + labelHeight + tickPadding);

    				var offsetLeft = me.getPixelForTick(0) - me.left;
    				var offsetRight = me.right - me.getPixelForTick(me.getTicks().length - 1);
    				var paddingLeft, paddingRight;

    				// Ensure that our ticks are always inside the canvas. When rotated, ticks are right aligned
    				// which means that the right padding is dominated by the font height
    				if (isRotated) {
    					paddingLeft = isBottom ?
    						cosRotation * firstLabelSize.width + sinRotation * firstLabelSize.offset :
    						sinRotation * (firstLabelSize.height - firstLabelSize.offset);
    					paddingRight = isBottom ?
    						sinRotation * (lastLabelSize.height - lastLabelSize.offset) :
    						cosRotation * lastLabelSize.width + sinRotation * lastLabelSize.offset;
    				} else {
    					paddingLeft = firstLabelSize.width / 2;
    					paddingRight = lastLabelSize.width / 2;
    				}

    				// Adjust padding taking into account changes in offsets
    				// and add 3 px to move away from canvas edges
    				me.paddingLeft = Math.max((paddingLeft - offsetLeft) * me.width / (me.width - offsetLeft), 0) + 3;
    				me.paddingRight = Math.max((paddingRight - offsetRight) * me.width / (me.width - offsetRight), 0) + 3;
    			} else {
    				// A vertical axis is more constrained by the width. Labels are the
    				// dominant factor here, so get that length first and account for padding
    				var labelWidth = tickOpts.mirror ? 0 :
    					// use lineSpace for consistency with horizontal axis
    					// tickPadding is not implemented for horizontal
    					widestLabelSize.width + tickPadding + lineSpace;

    				minSize.width = Math.min(me.maxWidth, minSize.width + labelWidth);

    				me.paddingTop = firstLabelSize.height / 2;
    				me.paddingBottom = lastLabelSize.height / 2;
    			}
    		}

    		me.handleMargins();

    		if (isHorizontal) {
    			me.width = me._length = chart.width - me.margins.left - me.margins.right;
    			me.height = minSize.height;
    		} else {
    			me.width = minSize.width;
    			me.height = me._length = chart.height - me.margins.top - me.margins.bottom;
    		}
    	},

    	/**
    	 * Handle margins and padding interactions
    	 * @private
    	 */
    	handleMargins: function() {
    		var me = this;
    		if (me.margins) {
    			me.margins.left = Math.max(me.paddingLeft, me.margins.left);
    			me.margins.top = Math.max(me.paddingTop, me.margins.top);
    			me.margins.right = Math.max(me.paddingRight, me.margins.right);
    			me.margins.bottom = Math.max(me.paddingBottom, me.margins.bottom);
    		}
    	},

    	afterFit: function() {
    		helpers$1.callback(this.options.afterFit, [this]);
    	},

    	// Shared Methods
    	isHorizontal: function() {
    		var pos = this.options.position;
    		return pos === 'top' || pos === 'bottom';
    	},
    	isFullWidth: function() {
    		return this.options.fullWidth;
    	},

    	// Get the correct value. NaN bad inputs, If the value type is object get the x or y based on whether we are horizontal or not
    	getRightValue: function(rawValue) {
    		// Null and undefined values first
    		if (isNullOrUndef(rawValue)) {
    			return NaN;
    		}
    		// isNaN(object) returns true, so make sure NaN is checking for a number; Discard Infinite values
    		if ((typeof rawValue === 'number' || rawValue instanceof Number) && !isFinite(rawValue)) {
    			return NaN;
    		}

    		// If it is in fact an object, dive in one more level
    		if (rawValue) {
    			if (this.isHorizontal()) {
    				if (rawValue.x !== undefined) {
    					return this.getRightValue(rawValue.x);
    				}
    			} else if (rawValue.y !== undefined) {
    				return this.getRightValue(rawValue.y);
    			}
    		}

    		// Value is good, return it
    		return rawValue;
    	},

    	_convertTicksToLabels: function(ticks) {
    		var me = this;
    		var labels, i, ilen;

    		me.ticks = ticks.map(function(tick) {
    			return tick.value;
    		});

    		me.beforeTickToLabelConversion();

    		// New implementations should return the formatted tick labels but for BACKWARD
    		// COMPAT, we still support no return (`this.ticks` internally changed by calling
    		// this method and supposed to contain only string values).
    		labels = me.convertTicksToLabels(ticks) || me.ticks;

    		me.afterTickToLabelConversion();

    		// BACKWARD COMPAT: synchronize `_ticks` with labels (so potentially `this.ticks`)
    		for (i = 0, ilen = ticks.length; i < ilen; ++i) {
    			ticks[i].label = labels[i];
    		}

    		return labels;
    	},

    	/**
    	 * @private
    	 */
    	_getLabelSizes: function() {
    		var me = this;
    		var labelSizes = me._labelSizes;

    		if (!labelSizes) {
    			me._labelSizes = labelSizes = computeLabelSizes(me.ctx, parseTickFontOptions(me.options.ticks), me.getTicks(), me.longestTextCache);
    			me.longestLabelWidth = labelSizes.widest.width;
    		}

    		return labelSizes;
    	},

    	/**
    	 * @private
    	 */
    	_parseValue: function(value) {
    		var start, end, min, max;

    		if (isArray(value)) {
    			start = +this.getRightValue(value[0]);
    			end = +this.getRightValue(value[1]);
    			min = Math.min(start, end);
    			max = Math.max(start, end);
    		} else {
    			value = +this.getRightValue(value);
    			start = undefined;
    			end = value;
    			min = value;
    			max = value;
    		}

    		return {
    			min: min,
    			max: max,
    			start: start,
    			end: end
    		};
    	},

    	/**
    	* @private
    	*/
    	_getScaleLabel: function(rawValue) {
    		var v = this._parseValue(rawValue);
    		if (v.start !== undefined) {
    			return '[' + v.start + ', ' + v.end + ']';
    		}

    		return +this.getRightValue(rawValue);
    	},

    	/**
    	 * Used to get the value to display in the tooltip for the data at the given index
    	 * @param index
    	 * @param datasetIndex
    	 */
    	getLabelForIndex: helpers$1.noop,

    	/**
    	 * Returns the location of the given data point. Value can either be an index or a numerical value
    	 * The coordinate (0, 0) is at the upper-left corner of the canvas
    	 * @param value
    	 * @param index
    	 * @param datasetIndex
    	 */
    	getPixelForValue: helpers$1.noop,

    	/**
    	 * Used to get the data value from a given pixel. This is the inverse of getPixelForValue
    	 * The coordinate (0, 0) is at the upper-left corner of the canvas
    	 * @param pixel
    	 */
    	getValueForPixel: helpers$1.noop,

    	/**
    	 * Returns the location of the tick at the given index
    	 * The coordinate (0, 0) is at the upper-left corner of the canvas
    	 */
    	getPixelForTick: function(index) {
    		var me = this;
    		var offset = me.options.offset;
    		var numTicks = me._ticks.length;
    		var tickWidth = 1 / Math.max(numTicks - (offset ? 0 : 1), 1);

    		return index < 0 || index > numTicks - 1
    			? null
    			: me.getPixelForDecimal(index * tickWidth + (offset ? tickWidth / 2 : 0));
    	},

    	/**
    	 * Utility for getting the pixel location of a percentage of scale
    	 * The coordinate (0, 0) is at the upper-left corner of the canvas
    	 */
    	getPixelForDecimal: function(decimal) {
    		var me = this;

    		if (me._reversePixels) {
    			decimal = 1 - decimal;
    		}

    		return me._startPixel + decimal * me._length;
    	},

    	getDecimalForPixel: function(pixel) {
    		var decimal = (pixel - this._startPixel) / this._length;
    		return this._reversePixels ? 1 - decimal : decimal;
    	},

    	/**
    	 * Returns the pixel for the minimum chart value
    	 * The coordinate (0, 0) is at the upper-left corner of the canvas
    	 */
    	getBasePixel: function() {
    		return this.getPixelForValue(this.getBaseValue());
    	},

    	getBaseValue: function() {
    		var me = this;
    		var min = me.min;
    		var max = me.max;

    		return me.beginAtZero ? 0 :
    			min < 0 && max < 0 ? max :
    			min > 0 && max > 0 ? min :
    			0;
    	},

    	/**
    	 * Returns a subset of ticks to be plotted to avoid overlapping labels.
    	 * @private
    	 */
    	_autoSkip: function(ticks) {
    		var me = this;
    		var tickOpts = me.options.ticks;
    		var axisLength = me._length;
    		var ticksLimit = tickOpts.maxTicksLimit || axisLength / me._tickSize() + 1;
    		var majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];
    		var numMajorIndices = majorIndices.length;
    		var first = majorIndices[0];
    		var last = majorIndices[numMajorIndices - 1];
    		var i, ilen, spacing, avgMajorSpacing;

    		// If there are too many major ticks to display them all
    		if (numMajorIndices > ticksLimit) {
    			skipMajors(ticks, majorIndices, numMajorIndices / ticksLimit);
    			return nonSkipped(ticks);
    		}

    		spacing = calculateSpacing(majorIndices, ticks, axisLength, ticksLimit);

    		if (numMajorIndices > 0) {
    			for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {
    				skip(ticks, spacing, majorIndices[i], majorIndices[i + 1]);
    			}
    			avgMajorSpacing = numMajorIndices > 1 ? (last - first) / (numMajorIndices - 1) : null;
    			skip(ticks, spacing, helpers$1.isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);
    			skip(ticks, spacing, last, helpers$1.isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);
    			return nonSkipped(ticks);
    		}
    		skip(ticks, spacing);
    		return nonSkipped(ticks);
    	},

    	/**
    	 * @private
    	 */
    	_tickSize: function() {
    		var me = this;
    		var optionTicks = me.options.ticks;

    		// Calculate space needed by label in axis direction.
    		var rot = helpers$1.toRadians(me.labelRotation);
    		var cos = Math.abs(Math.cos(rot));
    		var sin = Math.abs(Math.sin(rot));

    		var labelSizes = me._getLabelSizes();
    		var padding = optionTicks.autoSkipPadding || 0;
    		var w = labelSizes ? labelSizes.widest.width + padding : 0;
    		var h = labelSizes ? labelSizes.highest.height + padding : 0;

    		// Calculate space needed for 1 tick in axis direction.
    		return me.isHorizontal()
    			? h * cos > w * sin ? w / cos : h / sin
    			: h * sin < w * cos ? h / cos : w / sin;
    	},

    	/**
    	 * @private
    	 */
    	_isVisible: function() {
    		var me = this;
    		var chart = me.chart;
    		var display = me.options.display;
    		var i, ilen, meta;

    		if (display !== 'auto') {
    			return !!display;
    		}

    		// When 'auto', the scale is visible if at least one associated dataset is visible.
    		for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {
    			if (chart.isDatasetVisible(i)) {
    				meta = chart.getDatasetMeta(i);
    				if (meta.xAxisID === me.id || meta.yAxisID === me.id) {
    					return true;
    				}
    			}
    		}

    		return false;
    	},

    	/**
    	 * @private
    	 */
    	_computeGridLineItems: function(chartArea) {
    		var me = this;
    		var chart = me.chart;
    		var options = me.options;
    		var gridLines = options.gridLines;
    		var position = options.position;
    		var offsetGridLines = gridLines.offsetGridLines;
    		var isHorizontal = me.isHorizontal();
    		var ticks = me._ticksToDraw;
    		var ticksLength = ticks.length + (offsetGridLines ? 1 : 0);

    		var tl = getTickMarkLength(gridLines);
    		var items = [];
    		var axisWidth = gridLines.drawBorder ? valueAtIndexOrDefault(gridLines.lineWidth, 0, 0) : 0;
    		var axisHalfWidth = axisWidth / 2;
    		var alignPixel = helpers$1._alignPixel;
    		var alignBorderValue = function(pixel) {
    			return alignPixel(chart, pixel, axisWidth);
    		};
    		var borderValue, i, tick, lineValue, alignedLineValue;
    		var tx1, ty1, tx2, ty2, x1, y1, x2, y2, lineWidth, lineColor, borderDash, borderDashOffset;

    		if (position === 'top') {
    			borderValue = alignBorderValue(me.bottom);
    			ty1 = me.bottom - tl;
    			ty2 = borderValue - axisHalfWidth;
    			y1 = alignBorderValue(chartArea.top) + axisHalfWidth;
    			y2 = chartArea.bottom;
    		} else if (position === 'bottom') {
    			borderValue = alignBorderValue(me.top);
    			y1 = chartArea.top;
    			y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;
    			ty1 = borderValue + axisHalfWidth;
    			ty2 = me.top + tl;
    		} else if (position === 'left') {
    			borderValue = alignBorderValue(me.right);
    			tx1 = me.right - tl;
    			tx2 = borderValue - axisHalfWidth;
    			x1 = alignBorderValue(chartArea.left) + axisHalfWidth;
    			x2 = chartArea.right;
    		} else {
    			borderValue = alignBorderValue(me.left);
    			x1 = chartArea.left;
    			x2 = alignBorderValue(chartArea.right) - axisHalfWidth;
    			tx1 = borderValue + axisHalfWidth;
    			tx2 = me.left + tl;
    		}

    		for (i = 0; i < ticksLength; ++i) {
    			tick = ticks[i] || {};

    			// autoskipper skipped this tick (#4635)
    			if (isNullOrUndef(tick.label) && i < ticks.length) {
    				continue;
    			}

    			if (i === me.zeroLineIndex && options.offset === offsetGridLines) {
    				// Draw the first index specially
    				lineWidth = gridLines.zeroLineWidth;
    				lineColor = gridLines.zeroLineColor;
    				borderDash = gridLines.zeroLineBorderDash || [];
    				borderDashOffset = gridLines.zeroLineBorderDashOffset || 0.0;
    			} else {
    				lineWidth = valueAtIndexOrDefault(gridLines.lineWidth, i, 1);
    				lineColor = valueAtIndexOrDefault(gridLines.color, i, 'rgba(0,0,0,0.1)');
    				borderDash = gridLines.borderDash || [];
    				borderDashOffset = gridLines.borderDashOffset || 0.0;
    			}

    			lineValue = getPixelForGridLine(me, tick._index || i, offsetGridLines);

    			// Skip if the pixel is out of the range
    			if (lineValue === undefined) {
    				continue;
    			}

    			alignedLineValue = alignPixel(chart, lineValue, lineWidth);

    			if (isHorizontal) {
    				tx1 = tx2 = x1 = x2 = alignedLineValue;
    			} else {
    				ty1 = ty2 = y1 = y2 = alignedLineValue;
    			}

    			items.push({
    				tx1: tx1,
    				ty1: ty1,
    				tx2: tx2,
    				ty2: ty2,
    				x1: x1,
    				y1: y1,
    				x2: x2,
    				y2: y2,
    				width: lineWidth,
    				color: lineColor,
    				borderDash: borderDash,
    				borderDashOffset: borderDashOffset,
    			});
    		}

    		items.ticksLength = ticksLength;
    		items.borderValue = borderValue;

    		return items;
    	},

    	/**
    	 * @private
    	 */
    	_computeLabelItems: function() {
    		var me = this;
    		var options = me.options;
    		var optionTicks = options.ticks;
    		var position = options.position;
    		var isMirrored = optionTicks.mirror;
    		var isHorizontal = me.isHorizontal();
    		var ticks = me._ticksToDraw;
    		var fonts = parseTickFontOptions(optionTicks);
    		var tickPadding = optionTicks.padding;
    		var tl = getTickMarkLength(options.gridLines);
    		var rotation = -helpers$1.toRadians(me.labelRotation);
    		var items = [];
    		var i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;

    		if (position === 'top') {
    			y = me.bottom - tl - tickPadding;
    			textAlign = !rotation ? 'center' : 'left';
    		} else if (position === 'bottom') {
    			y = me.top + tl + tickPadding;
    			textAlign = !rotation ? 'center' : 'right';
    		} else if (position === 'left') {
    			x = me.right - (isMirrored ? 0 : tl) - tickPadding;
    			textAlign = isMirrored ? 'left' : 'right';
    		} else {
    			x = me.left + (isMirrored ? 0 : tl) + tickPadding;
    			textAlign = isMirrored ? 'right' : 'left';
    		}

    		for (i = 0, ilen = ticks.length; i < ilen; ++i) {
    			tick = ticks[i];
    			label = tick.label;

    			// autoskipper skipped this tick (#4635)
    			if (isNullOrUndef(label)) {
    				continue;
    			}

    			pixel = me.getPixelForTick(tick._index || i) + optionTicks.labelOffset;
    			font = tick.major ? fonts.major : fonts.minor;
    			lineHeight = font.lineHeight;
    			lineCount = isArray(label) ? label.length : 1;

    			if (isHorizontal) {
    				x = pixel;
    				textOffset = position === 'top'
    					? ((!rotation ? 0.5 : 1) - lineCount) * lineHeight
    					: (!rotation ? 0.5 : 0) * lineHeight;
    			} else {
    				y = pixel;
    				textOffset = (1 - lineCount) * lineHeight / 2;
    			}

    			items.push({
    				x: x,
    				y: y,
    				rotation: rotation,
    				label: label,
    				font: font,
    				textOffset: textOffset,
    				textAlign: textAlign
    			});
    		}

    		return items;
    	},

    	/**
    	 * @private
    	 */
    	_drawGrid: function(chartArea) {
    		var me = this;
    		var gridLines = me.options.gridLines;

    		if (!gridLines.display) {
    			return;
    		}

    		var ctx = me.ctx;
    		var chart = me.chart;
    		var alignPixel = helpers$1._alignPixel;
    		var axisWidth = gridLines.drawBorder ? valueAtIndexOrDefault(gridLines.lineWidth, 0, 0) : 0;
    		var items = me._gridLineItems || (me._gridLineItems = me._computeGridLineItems(chartArea));
    		var width, color, i, ilen, item;

    		for (i = 0, ilen = items.length; i < ilen; ++i) {
    			item = items[i];
    			width = item.width;
    			color = item.color;

    			if (width && color) {
    				ctx.save();
    				ctx.lineWidth = width;
    				ctx.strokeStyle = color;
    				if (ctx.setLineDash) {
    					ctx.setLineDash(item.borderDash);
    					ctx.lineDashOffset = item.borderDashOffset;
    				}

    				ctx.beginPath();

    				if (gridLines.drawTicks) {
    					ctx.moveTo(item.tx1, item.ty1);
    					ctx.lineTo(item.tx2, item.ty2);
    				}

    				if (gridLines.drawOnChartArea) {
    					ctx.moveTo(item.x1, item.y1);
    					ctx.lineTo(item.x2, item.y2);
    				}

    				ctx.stroke();
    				ctx.restore();
    			}
    		}

    		if (axisWidth) {
    			// Draw the line at the edge of the axis
    			var firstLineWidth = axisWidth;
    			var lastLineWidth = valueAtIndexOrDefault(gridLines.lineWidth, items.ticksLength - 1, 1);
    			var borderValue = items.borderValue;
    			var x1, x2, y1, y2;

    			if (me.isHorizontal()) {
    				x1 = alignPixel(chart, me.left, firstLineWidth) - firstLineWidth / 2;
    				x2 = alignPixel(chart, me.right, lastLineWidth) + lastLineWidth / 2;
    				y1 = y2 = borderValue;
    			} else {
    				y1 = alignPixel(chart, me.top, firstLineWidth) - firstLineWidth / 2;
    				y2 = alignPixel(chart, me.bottom, lastLineWidth) + lastLineWidth / 2;
    				x1 = x2 = borderValue;
    			}

    			ctx.lineWidth = axisWidth;
    			ctx.strokeStyle = valueAtIndexOrDefault(gridLines.color, 0);
    			ctx.beginPath();
    			ctx.moveTo(x1, y1);
    			ctx.lineTo(x2, y2);
    			ctx.stroke();
    		}
    	},

    	/**
    	 * @private
    	 */
    	_drawLabels: function() {
    		var me = this;
    		var optionTicks = me.options.ticks;

    		if (!optionTicks.display) {
    			return;
    		}

    		var ctx = me.ctx;
    		var items = me._labelItems || (me._labelItems = me._computeLabelItems());
    		var i, j, ilen, jlen, item, tickFont, label, y;

    		for (i = 0, ilen = items.length; i < ilen; ++i) {
    			item = items[i];
    			tickFont = item.font;

    			// Make sure we draw text in the correct color and font
    			ctx.save();
    			ctx.translate(item.x, item.y);
    			ctx.rotate(item.rotation);
    			ctx.font = tickFont.string;
    			ctx.fillStyle = tickFont.color;
    			ctx.textBaseline = 'middle';
    			ctx.textAlign = item.textAlign;

    			label = item.label;
    			y = item.textOffset;
    			if (isArray(label)) {
    				for (j = 0, jlen = label.length; j < jlen; ++j) {
    					// We just make sure the multiline element is a string here..
    					ctx.fillText('' + label[j], 0, y);
    					y += tickFont.lineHeight;
    				}
    			} else {
    				ctx.fillText(label, 0, y);
    			}
    			ctx.restore();
    		}
    	},

    	/**
    	 * @private
    	 */
    	_drawTitle: function() {
    		var me = this;
    		var ctx = me.ctx;
    		var options = me.options;
    		var scaleLabel = options.scaleLabel;

    		if (!scaleLabel.display) {
    			return;
    		}

    		var scaleLabelFontColor = valueOrDefault$a(scaleLabel.fontColor, core_defaults.global.defaultFontColor);
    		var scaleLabelFont = helpers$1.options._parseFont(scaleLabel);
    		var scaleLabelPadding = helpers$1.options.toPadding(scaleLabel.padding);
    		var halfLineHeight = scaleLabelFont.lineHeight / 2;
    		var position = options.position;
    		var rotation = 0;
    		var scaleLabelX, scaleLabelY;

    		if (me.isHorizontal()) {
    			scaleLabelX = me.left + me.width / 2; // midpoint of the width
    			scaleLabelY = position === 'bottom'
    				? me.bottom - halfLineHeight - scaleLabelPadding.bottom
    				: me.top + halfLineHeight + scaleLabelPadding.top;
    		} else {
    			var isLeft = position === 'left';
    			scaleLabelX = isLeft
    				? me.left + halfLineHeight + scaleLabelPadding.top
    				: me.right - halfLineHeight - scaleLabelPadding.top;
    			scaleLabelY = me.top + me.height / 2;
    			rotation = isLeft ? -0.5 * Math.PI : 0.5 * Math.PI;
    		}

    		ctx.save();
    		ctx.translate(scaleLabelX, scaleLabelY);
    		ctx.rotate(rotation);
    		ctx.textAlign = 'center';
    		ctx.textBaseline = 'middle';
    		ctx.fillStyle = scaleLabelFontColor; // render in correct colour
    		ctx.font = scaleLabelFont.string;
    		ctx.fillText(scaleLabel.labelString, 0, 0);
    		ctx.restore();
    	},

    	draw: function(chartArea) {
    		var me = this;

    		if (!me._isVisible()) {
    			return;
    		}

    		me._drawGrid(chartArea);
    		me._drawTitle();
    		me._drawLabels();
    	},

    	/**
    	 * @private
    	 */
    	_layers: function() {
    		var me = this;
    		var opts = me.options;
    		var tz = opts.ticks && opts.ticks.z || 0;
    		var gz = opts.gridLines && opts.gridLines.z || 0;

    		if (!me._isVisible() || tz === gz || me.draw !== me._draw) {
    			// backward compatibility: draw has been overridden by custom scale
    			return [{
    				z: tz,
    				draw: function() {
    					me.draw.apply(me, arguments);
    				}
    			}];
    		}

    		return [{
    			z: gz,
    			draw: function() {
    				me._drawGrid.apply(me, arguments);
    				me._drawTitle.apply(me, arguments);
    			}
    		}, {
    			z: tz,
    			draw: function() {
    				me._drawLabels.apply(me, arguments);
    			}
    		}];
    	},

    	/**
    	 * @private
    	 */
    	_getMatchingVisibleMetas: function(type) {
    		var me = this;
    		var isHorizontal = me.isHorizontal();
    		return me.chart._getSortedVisibleDatasetMetas()
    			.filter(function(meta) {
    				return (!type || meta.type === type)
    					&& (isHorizontal ? meta.xAxisID === me.id : meta.yAxisID === me.id);
    			});
    	}
    });

    Scale.prototype._draw = Scale.prototype.draw;

    var core_scale = Scale;

    var isNullOrUndef$1 = helpers$1.isNullOrUndef;

    var defaultConfig = {
    	position: 'bottom'
    };

    var scale_category = core_scale.extend({
    	determineDataLimits: function() {
    		var me = this;
    		var labels = me._getLabels();
    		var ticksOpts = me.options.ticks;
    		var min = ticksOpts.min;
    		var max = ticksOpts.max;
    		var minIndex = 0;
    		var maxIndex = labels.length - 1;
    		var findIndex;

    		if (min !== undefined) {
    			// user specified min value
    			findIndex = labels.indexOf(min);
    			if (findIndex >= 0) {
    				minIndex = findIndex;
    			}
    		}

    		if (max !== undefined) {
    			// user specified max value
    			findIndex = labels.indexOf(max);
    			if (findIndex >= 0) {
    				maxIndex = findIndex;
    			}
    		}

    		me.minIndex = minIndex;
    		me.maxIndex = maxIndex;
    		me.min = labels[minIndex];
    		me.max = labels[maxIndex];
    	},

    	buildTicks: function() {
    		var me = this;
    		var labels = me._getLabels();
    		var minIndex = me.minIndex;
    		var maxIndex = me.maxIndex;

    		// If we are viewing some subset of labels, slice the original array
    		me.ticks = (minIndex === 0 && maxIndex === labels.length - 1) ? labels : labels.slice(minIndex, maxIndex + 1);
    	},

    	getLabelForIndex: function(index, datasetIndex) {
    		var me = this;
    		var chart = me.chart;

    		if (chart.getDatasetMeta(datasetIndex).controller._getValueScaleId() === me.id) {
    			return me.getRightValue(chart.data.datasets[datasetIndex].data[index]);
    		}

    		return me._getLabels()[index];
    	},

    	_configure: function() {
    		var me = this;
    		var offset = me.options.offset;
    		var ticks = me.ticks;

    		core_scale.prototype._configure.call(me);

    		if (!me.isHorizontal()) {
    			// For backward compatibility, vertical category scale reverse is inverted.
    			me._reversePixels = !me._reversePixels;
    		}

    		if (!ticks) {
    			return;
    		}

    		me._startValue = me.minIndex - (offset ? 0.5 : 0);
    		me._valueRange = Math.max(ticks.length - (offset ? 0 : 1), 1);
    	},

    	// Used to get data value locations.  Value can either be an index or a numerical value
    	getPixelForValue: function(value, index, datasetIndex) {
    		var me = this;
    		var valueCategory, labels, idx;

    		if (!isNullOrUndef$1(index) && !isNullOrUndef$1(datasetIndex)) {
    			value = me.chart.data.datasets[datasetIndex].data[index];
    		}

    		// If value is a data object, then index is the index in the data array,
    		// not the index of the scale. We need to change that.
    		if (!isNullOrUndef$1(value)) {
    			valueCategory = me.isHorizontal() ? value.x : value.y;
    		}
    		if (valueCategory !== undefined || (value !== undefined && isNaN(index))) {
    			labels = me._getLabels();
    			value = helpers$1.valueOrDefault(valueCategory, value);
    			idx = labels.indexOf(value);
    			index = idx !== -1 ? idx : index;
    			if (isNaN(index)) {
    				index = value;
    			}
    		}
    		return me.getPixelForDecimal((index - me._startValue) / me._valueRange);
    	},

    	getPixelForTick: function(index) {
    		var ticks = this.ticks;
    		return index < 0 || index > ticks.length - 1
    			? null
    			: this.getPixelForValue(ticks[index], index + this.minIndex);
    	},

    	getValueForPixel: function(pixel) {
    		var me = this;
    		var value = Math.round(me._startValue + me.getDecimalForPixel(pixel) * me._valueRange);
    		return Math.min(Math.max(value, 0), me.ticks.length - 1);
    	},

    	getBasePixel: function() {
    		return this.bottom;
    	}
    });

    // INTERNAL: static default options, registered in src/index.js
    var _defaults = defaultConfig;
    scale_category._defaults = _defaults;

    var noop = helpers$1.noop;
    var isNullOrUndef$2 = helpers$1.isNullOrUndef;

    /**
     * Generate a set of linear ticks
     * @param generationOptions the options used to generate the ticks
     * @param dataRange the range of the data
     * @returns {number[]} array of tick values
     */
    function generateTicks(generationOptions, dataRange) {
    	var ticks = [];
    	// To get a "nice" value for the tick spacing, we will use the appropriately named
    	// "nice number" algorithm. See https://stackoverflow.com/questions/8506881/nice-label-algorithm-for-charts-with-minimum-ticks
    	// for details.

    	var MIN_SPACING = 1e-14;
    	var stepSize = generationOptions.stepSize;
    	var unit = stepSize || 1;
    	var maxNumSpaces = generationOptions.maxTicks - 1;
    	var min = generationOptions.min;
    	var max = generationOptions.max;
    	var precision = generationOptions.precision;
    	var rmin = dataRange.min;
    	var rmax = dataRange.max;
    	var spacing = helpers$1.niceNum((rmax - rmin) / maxNumSpaces / unit) * unit;
    	var factor, niceMin, niceMax, numSpaces;

    	// Beyond MIN_SPACING floating point numbers being to lose precision
    	// such that we can't do the math necessary to generate ticks
    	if (spacing < MIN_SPACING && isNullOrUndef$2(min) && isNullOrUndef$2(max)) {
    		return [rmin, rmax];
    	}

    	numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);
    	if (numSpaces > maxNumSpaces) {
    		// If the calculated num of spaces exceeds maxNumSpaces, recalculate it
    		spacing = helpers$1.niceNum(numSpaces * spacing / maxNumSpaces / unit) * unit;
    	}

    	if (stepSize || isNullOrUndef$2(precision)) {
    		// If a precision is not specified, calculate factor based on spacing
    		factor = Math.pow(10, helpers$1._decimalPlaces(spacing));
    	} else {
    		// If the user specified a precision, round to that number of decimal places
    		factor = Math.pow(10, precision);
    		spacing = Math.ceil(spacing * factor) / factor;
    	}

    	niceMin = Math.floor(rmin / spacing) * spacing;
    	niceMax = Math.ceil(rmax / spacing) * spacing;

    	// If min, max and stepSize is set and they make an evenly spaced scale use it.
    	if (stepSize) {
    		// If very close to our whole number, use it.
    		if (!isNullOrUndef$2(min) && helpers$1.almostWhole(min / spacing, spacing / 1000)) {
    			niceMin = min;
    		}
    		if (!isNullOrUndef$2(max) && helpers$1.almostWhole(max / spacing, spacing / 1000)) {
    			niceMax = max;
    		}
    	}

    	numSpaces = (niceMax - niceMin) / spacing;
    	// If very close to our rounded value, use it.
    	if (helpers$1.almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {
    		numSpaces = Math.round(numSpaces);
    	} else {
    		numSpaces = Math.ceil(numSpaces);
    	}

    	niceMin = Math.round(niceMin * factor) / factor;
    	niceMax = Math.round(niceMax * factor) / factor;
    	ticks.push(isNullOrUndef$2(min) ? niceMin : min);
    	for (var j = 1; j < numSpaces; ++j) {
    		ticks.push(Math.round((niceMin + j * spacing) * factor) / factor);
    	}
    	ticks.push(isNullOrUndef$2(max) ? niceMax : max);

    	return ticks;
    }

    var scale_linearbase = core_scale.extend({
    	getRightValue: function(value) {
    		if (typeof value === 'string') {
    			return +value;
    		}
    		return core_scale.prototype.getRightValue.call(this, value);
    	},

    	handleTickRangeOptions: function() {
    		var me = this;
    		var opts = me.options;
    		var tickOpts = opts.ticks;

    		// If we are forcing it to begin at 0, but 0 will already be rendered on the chart,
    		// do nothing since that would make the chart weird. If the user really wants a weird chart
    		// axis, they can manually override it
    		if (tickOpts.beginAtZero) {
    			var minSign = helpers$1.sign(me.min);
    			var maxSign = helpers$1.sign(me.max);

    			if (minSign < 0 && maxSign < 0) {
    				// move the top up to 0
    				me.max = 0;
    			} else if (minSign > 0 && maxSign > 0) {
    				// move the bottom down to 0
    				me.min = 0;
    			}
    		}

    		var setMin = tickOpts.min !== undefined || tickOpts.suggestedMin !== undefined;
    		var setMax = tickOpts.max !== undefined || tickOpts.suggestedMax !== undefined;

    		if (tickOpts.min !== undefined) {
    			me.min = tickOpts.min;
    		} else if (tickOpts.suggestedMin !== undefined) {
    			if (me.min === null) {
    				me.min = tickOpts.suggestedMin;
    			} else {
    				me.min = Math.min(me.min, tickOpts.suggestedMin);
    			}
    		}

    		if (tickOpts.max !== undefined) {
    			me.max = tickOpts.max;
    		} else if (tickOpts.suggestedMax !== undefined) {
    			if (me.max === null) {
    				me.max = tickOpts.suggestedMax;
    			} else {
    				me.max = Math.max(me.max, tickOpts.suggestedMax);
    			}
    		}

    		if (setMin !== setMax) {
    			// We set the min or the max but not both.
    			// So ensure that our range is good
    			// Inverted or 0 length range can happen when
    			// ticks.min is set, and no datasets are visible
    			if (me.min >= me.max) {
    				if (setMin) {
    					me.max = me.min + 1;
    				} else {
    					me.min = me.max - 1;
    				}
    			}
    		}

    		if (me.min === me.max) {
    			me.max++;

    			if (!tickOpts.beginAtZero) {
    				me.min--;
    			}
    		}
    	},

    	getTickLimit: function() {
    		var me = this;
    		var tickOpts = me.options.ticks;
    		var stepSize = tickOpts.stepSize;
    		var maxTicksLimit = tickOpts.maxTicksLimit;
    		var maxTicks;

    		if (stepSize) {
    			maxTicks = Math.ceil(me.max / stepSize) - Math.floor(me.min / stepSize) + 1;
    		} else {
    			maxTicks = me._computeTickLimit();
    			maxTicksLimit = maxTicksLimit || 11;
    		}

    		if (maxTicksLimit) {
    			maxTicks = Math.min(maxTicksLimit, maxTicks);
    		}

    		return maxTicks;
    	},

    	_computeTickLimit: function() {
    		return Number.POSITIVE_INFINITY;
    	},

    	handleDirectionalChanges: noop,

    	buildTicks: function() {
    		var me = this;
    		var opts = me.options;
    		var tickOpts = opts.ticks;

    		// Figure out what the max number of ticks we can support it is based on the size of
    		// the axis area. For now, we say that the minimum tick spacing in pixels must be 40
    		// We also limit the maximum number of ticks to 11 which gives a nice 10 squares on
    		// the graph. Make sure we always have at least 2 ticks
    		var maxTicks = me.getTickLimit();
    		maxTicks = Math.max(2, maxTicks);

    		var numericGeneratorOptions = {
    			maxTicks: maxTicks,
    			min: tickOpts.min,
    			max: tickOpts.max,
    			precision: tickOpts.precision,
    			stepSize: helpers$1.valueOrDefault(tickOpts.fixedStepSize, tickOpts.stepSize)
    		};
    		var ticks = me.ticks = generateTicks(numericGeneratorOptions, me);

    		me.handleDirectionalChanges();

    		// At this point, we need to update our max and min given the tick values since we have expanded the
    		// range of the scale
    		me.max = helpers$1.max(ticks);
    		me.min = helpers$1.min(ticks);

    		if (tickOpts.reverse) {
    			ticks.reverse();

    			me.start = me.max;
    			me.end = me.min;
    		} else {
    			me.start = me.min;
    			me.end = me.max;
    		}
    	},

    	convertTicksToLabels: function() {
    		var me = this;
    		me.ticksAsNumbers = me.ticks.slice();
    		me.zeroLineIndex = me.ticks.indexOf(0);

    		core_scale.prototype.convertTicksToLabels.call(me);
    	},

    	_configure: function() {
    		var me = this;
    		var ticks = me.getTicks();
    		var start = me.min;
    		var end = me.max;
    		var offset;

    		core_scale.prototype._configure.call(me);

    		if (me.options.offset && ticks.length) {
    			offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;
    			start -= offset;
    			end += offset;
    		}
    		me._startValue = start;
    		me._endValue = end;
    		me._valueRange = end - start;
    	}
    });

    var defaultConfig$1 = {
    	position: 'left',
    	ticks: {
    		callback: core_ticks.formatters.linear
    	}
    };

    var DEFAULT_MIN = 0;
    var DEFAULT_MAX = 1;

    function getOrCreateStack(stacks, stacked, meta) {
    	var key = [
    		meta.type,
    		// we have a separate stack for stack=undefined datasets when the opts.stacked is undefined
    		stacked === undefined && meta.stack === undefined ? meta.index : '',
    		meta.stack
    	].join('.');

    	if (stacks[key] === undefined) {
    		stacks[key] = {
    			pos: [],
    			neg: []
    		};
    	}

    	return stacks[key];
    }

    function stackData(scale, stacks, meta, data) {
    	var opts = scale.options;
    	var stacked = opts.stacked;
    	var stack = getOrCreateStack(stacks, stacked, meta);
    	var pos = stack.pos;
    	var neg = stack.neg;
    	var ilen = data.length;
    	var i, value;

    	for (i = 0; i < ilen; ++i) {
    		value = scale._parseValue(data[i]);
    		if (isNaN(value.min) || isNaN(value.max) || meta.data[i].hidden) {
    			continue;
    		}

    		pos[i] = pos[i] || 0;
    		neg[i] = neg[i] || 0;

    		if (opts.relativePoints) {
    			pos[i] = 100;
    		} else if (value.min < 0 || value.max < 0) {
    			neg[i] += value.min;
    		} else {
    			pos[i] += value.max;
    		}
    	}
    }

    function updateMinMax(scale, meta, data) {
    	var ilen = data.length;
    	var i, value;

    	for (i = 0; i < ilen; ++i) {
    		value = scale._parseValue(data[i]);
    		if (isNaN(value.min) || isNaN(value.max) || meta.data[i].hidden) {
    			continue;
    		}

    		scale.min = Math.min(scale.min, value.min);
    		scale.max = Math.max(scale.max, value.max);
    	}
    }

    var scale_linear = scale_linearbase.extend({
    	determineDataLimits: function() {
    		var me = this;
    		var opts = me.options;
    		var chart = me.chart;
    		var datasets = chart.data.datasets;
    		var metasets = me._getMatchingVisibleMetas();
    		var hasStacks = opts.stacked;
    		var stacks = {};
    		var ilen = metasets.length;
    		var i, meta, data, values;

    		me.min = Number.POSITIVE_INFINITY;
    		me.max = Number.NEGATIVE_INFINITY;

    		if (hasStacks === undefined) {
    			for (i = 0; !hasStacks && i < ilen; ++i) {
    				meta = metasets[i];
    				hasStacks = meta.stack !== undefined;
    			}
    		}

    		for (i = 0; i < ilen; ++i) {
    			meta = metasets[i];
    			data = datasets[meta.index].data;
    			if (hasStacks) {
    				stackData(me, stacks, meta, data);
    			} else {
    				updateMinMax(me, meta, data);
    			}
    		}

    		helpers$1.each(stacks, function(stackValues) {
    			values = stackValues.pos.concat(stackValues.neg);
    			me.min = Math.min(me.min, helpers$1.min(values));
    			me.max = Math.max(me.max, helpers$1.max(values));
    		});

    		me.min = helpers$1.isFinite(me.min) && !isNaN(me.min) ? me.min : DEFAULT_MIN;
    		me.max = helpers$1.isFinite(me.max) && !isNaN(me.max) ? me.max : DEFAULT_MAX;

    		// Common base implementation to handle ticks.min, ticks.max, ticks.beginAtZero
    		me.handleTickRangeOptions();
    	},

    	// Returns the maximum number of ticks based on the scale dimension
    	_computeTickLimit: function() {
    		var me = this;
    		var tickFont;

    		if (me.isHorizontal()) {
    			return Math.ceil(me.width / 40);
    		}
    		tickFont = helpers$1.options._parseFont(me.options.ticks);
    		return Math.ceil(me.height / tickFont.lineHeight);
    	},

    	// Called after the ticks are built. We need
    	handleDirectionalChanges: function() {
    		if (!this.isHorizontal()) {
    			// We are in a vertical orientation. The top value is the highest. So reverse the array
    			this.ticks.reverse();
    		}
    	},

    	getLabelForIndex: function(index, datasetIndex) {
    		return this._getScaleLabel(this.chart.data.datasets[datasetIndex].data[index]);
    	},

    	// Utils
    	getPixelForValue: function(value) {
    		var me = this;
    		return me.getPixelForDecimal((+me.getRightValue(value) - me._startValue) / me._valueRange);
    	},

    	getValueForPixel: function(pixel) {
    		return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;
    	},

    	getPixelForTick: function(index) {
    		var ticks = this.ticksAsNumbers;
    		if (index < 0 || index > ticks.length - 1) {
    			return null;
    		}
    		return this.getPixelForValue(ticks[index]);
    	}
    });

    // INTERNAL: static default options, registered in src/index.js
    var _defaults$1 = defaultConfig$1;
    scale_linear._defaults = _defaults$1;

    var valueOrDefault$b = helpers$1.valueOrDefault;
    var log10 = helpers$1.math.log10;

    /**
     * Generate a set of logarithmic ticks
     * @param generationOptions the options used to generate the ticks
     * @param dataRange the range of the data
     * @returns {number[]} array of tick values
     */
    function generateTicks$1(generationOptions, dataRange) {
    	var ticks = [];

    	var tickVal = valueOrDefault$b(generationOptions.min, Math.pow(10, Math.floor(log10(dataRange.min))));

    	var endExp = Math.floor(log10(dataRange.max));
    	var endSignificand = Math.ceil(dataRange.max / Math.pow(10, endExp));
    	var exp, significand;

    	if (tickVal === 0) {
    		exp = Math.floor(log10(dataRange.minNotZero));
    		significand = Math.floor(dataRange.minNotZero / Math.pow(10, exp));

    		ticks.push(tickVal);
    		tickVal = significand * Math.pow(10, exp);
    	} else {
    		exp = Math.floor(log10(tickVal));
    		significand = Math.floor(tickVal / Math.pow(10, exp));
    	}
    	var precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;

    	do {
    		ticks.push(tickVal);

    		++significand;
    		if (significand === 10) {
    			significand = 1;
    			++exp;
    			precision = exp >= 0 ? 1 : precision;
    		}

    		tickVal = Math.round(significand * Math.pow(10, exp) * precision) / precision;
    	} while (exp < endExp || (exp === endExp && significand < endSignificand));

    	var lastTick = valueOrDefault$b(generationOptions.max, tickVal);
    	ticks.push(lastTick);

    	return ticks;
    }

    var defaultConfig$2 = {
    	position: 'left',

    	// label settings
    	ticks: {
    		callback: core_ticks.formatters.logarithmic
    	}
    };

    // TODO(v3): change this to positiveOrDefault
    function nonNegativeOrDefault(value, defaultValue) {
    	return helpers$1.isFinite(value) && value >= 0 ? value : defaultValue;
    }

    var scale_logarithmic = core_scale.extend({
    	determineDataLimits: function() {
    		var me = this;
    		var opts = me.options;
    		var chart = me.chart;
    		var datasets = chart.data.datasets;
    		var isHorizontal = me.isHorizontal();
    		function IDMatches(meta) {
    			return isHorizontal ? meta.xAxisID === me.id : meta.yAxisID === me.id;
    		}
    		var datasetIndex, meta, value, data, i, ilen;

    		// Calculate Range
    		me.min = Number.POSITIVE_INFINITY;
    		me.max = Number.NEGATIVE_INFINITY;
    		me.minNotZero = Number.POSITIVE_INFINITY;

    		var hasStacks = opts.stacked;
    		if (hasStacks === undefined) {
    			for (datasetIndex = 0; datasetIndex < datasets.length; datasetIndex++) {
    				meta = chart.getDatasetMeta(datasetIndex);
    				if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta) &&
    					meta.stack !== undefined) {
    					hasStacks = true;
    					break;
    				}
    			}
    		}

    		if (opts.stacked || hasStacks) {
    			var valuesPerStack = {};

    			for (datasetIndex = 0; datasetIndex < datasets.length; datasetIndex++) {
    				meta = chart.getDatasetMeta(datasetIndex);
    				var key = [
    					meta.type,
    					// we have a separate stack for stack=undefined datasets when the opts.stacked is undefined
    					((opts.stacked === undefined && meta.stack === undefined) ? datasetIndex : ''),
    					meta.stack
    				].join('.');

    				if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {
    					if (valuesPerStack[key] === undefined) {
    						valuesPerStack[key] = [];
    					}

    					data = datasets[datasetIndex].data;
    					for (i = 0, ilen = data.length; i < ilen; i++) {
    						var values = valuesPerStack[key];
    						value = me._parseValue(data[i]);
    						// invalid, hidden and negative values are ignored
    						if (isNaN(value.min) || isNaN(value.max) || meta.data[i].hidden || value.min < 0 || value.max < 0) {
    							continue;
    						}
    						values[i] = values[i] || 0;
    						values[i] += value.max;
    					}
    				}
    			}

    			helpers$1.each(valuesPerStack, function(valuesForType) {
    				if (valuesForType.length > 0) {
    					var minVal = helpers$1.min(valuesForType);
    					var maxVal = helpers$1.max(valuesForType);
    					me.min = Math.min(me.min, minVal);
    					me.max = Math.max(me.max, maxVal);
    				}
    			});

    		} else {
    			for (datasetIndex = 0; datasetIndex < datasets.length; datasetIndex++) {
    				meta = chart.getDatasetMeta(datasetIndex);
    				if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {
    					data = datasets[datasetIndex].data;
    					for (i = 0, ilen = data.length; i < ilen; i++) {
    						value = me._parseValue(data[i]);
    						// invalid, hidden and negative values are ignored
    						if (isNaN(value.min) || isNaN(value.max) || meta.data[i].hidden || value.min < 0 || value.max < 0) {
    							continue;
    						}

    						me.min = Math.min(value.min, me.min);
    						me.max = Math.max(value.max, me.max);

    						if (value.min !== 0) {
    							me.minNotZero = Math.min(value.min, me.minNotZero);
    						}
    					}
    				}
    			}
    		}

    		me.min = helpers$1.isFinite(me.min) ? me.min : null;
    		me.max = helpers$1.isFinite(me.max) ? me.max : null;
    		me.minNotZero = helpers$1.isFinite(me.minNotZero) ? me.minNotZero : null;

    		// Common base implementation to handle ticks.min, ticks.max
    		this.handleTickRangeOptions();
    	},

    	handleTickRangeOptions: function() {
    		var me = this;
    		var tickOpts = me.options.ticks;
    		var DEFAULT_MIN = 1;
    		var DEFAULT_MAX = 10;

    		me.min = nonNegativeOrDefault(tickOpts.min, me.min);
    		me.max = nonNegativeOrDefault(tickOpts.max, me.max);

    		if (me.min === me.max) {
    			if (me.min !== 0 && me.min !== null) {
    				me.min = Math.pow(10, Math.floor(log10(me.min)) - 1);
    				me.max = Math.pow(10, Math.floor(log10(me.max)) + 1);
    			} else {
    				me.min = DEFAULT_MIN;
    				me.max = DEFAULT_MAX;
    			}
    		}
    		if (me.min === null) {
    			me.min = Math.pow(10, Math.floor(log10(me.max)) - 1);
    		}
    		if (me.max === null) {
    			me.max = me.min !== 0
    				? Math.pow(10, Math.floor(log10(me.min)) + 1)
    				: DEFAULT_MAX;
    		}
    		if (me.minNotZero === null) {
    			if (me.min > 0) {
    				me.minNotZero = me.min;
    			} else if (me.max < 1) {
    				me.minNotZero = Math.pow(10, Math.floor(log10(me.max)));
    			} else {
    				me.minNotZero = DEFAULT_MIN;
    			}
    		}
    	},

    	buildTicks: function() {
    		var me = this;
    		var tickOpts = me.options.ticks;
    		var reverse = !me.isHorizontal();

    		var generationOptions = {
    			min: nonNegativeOrDefault(tickOpts.min),
    			max: nonNegativeOrDefault(tickOpts.max)
    		};
    		var ticks = me.ticks = generateTicks$1(generationOptions, me);

    		// At this point, we need to update our max and min given the tick values since we have expanded the
    		// range of the scale
    		me.max = helpers$1.max(ticks);
    		me.min = helpers$1.min(ticks);

    		if (tickOpts.reverse) {
    			reverse = !reverse;
    			me.start = me.max;
    			me.end = me.min;
    		} else {
    			me.start = me.min;
    			me.end = me.max;
    		}
    		if (reverse) {
    			ticks.reverse();
    		}
    	},

    	convertTicksToLabels: function() {
    		this.tickValues = this.ticks.slice();

    		core_scale.prototype.convertTicksToLabels.call(this);
    	},

    	// Get the correct tooltip label
    	getLabelForIndex: function(index, datasetIndex) {
    		return this._getScaleLabel(this.chart.data.datasets[datasetIndex].data[index]);
    	},

    	getPixelForTick: function(index) {
    		var ticks = this.tickValues;
    		if (index < 0 || index > ticks.length - 1) {
    			return null;
    		}
    		return this.getPixelForValue(ticks[index]);
    	},

    	/**
    	 * Returns the value of the first tick.
    	 * @param {number} value - The minimum not zero value.
    	 * @return {number} The first tick value.
    	 * @private
    	 */
    	_getFirstTickValue: function(value) {
    		var exp = Math.floor(log10(value));
    		var significand = Math.floor(value / Math.pow(10, exp));

    		return significand * Math.pow(10, exp);
    	},

    	_configure: function() {
    		var me = this;
    		var start = me.min;
    		var offset = 0;

    		core_scale.prototype._configure.call(me);

    		if (start === 0) {
    			start = me._getFirstTickValue(me.minNotZero);
    			offset = valueOrDefault$b(me.options.ticks.fontSize, core_defaults.global.defaultFontSize) / me._length;
    		}

    		me._startValue = log10(start);
    		me._valueOffset = offset;
    		me._valueRange = (log10(me.max) - log10(start)) / (1 - offset);
    	},

    	getPixelForValue: function(value) {
    		var me = this;
    		var decimal = 0;

    		value = +me.getRightValue(value);

    		if (value > me.min && value > 0) {
    			decimal = (log10(value) - me._startValue) / me._valueRange + me._valueOffset;
    		}
    		return me.getPixelForDecimal(decimal);
    	},

    	getValueForPixel: function(pixel) {
    		var me = this;
    		var decimal = me.getDecimalForPixel(pixel);
    		return decimal === 0 && me.min === 0
    			? 0
    			: Math.pow(10, me._startValue + (decimal - me._valueOffset) * me._valueRange);
    	}
    });

    // INTERNAL: static default options, registered in src/index.js
    var _defaults$2 = defaultConfig$2;
    scale_logarithmic._defaults = _defaults$2;

    var valueOrDefault$c = helpers$1.valueOrDefault;
    var valueAtIndexOrDefault$1 = helpers$1.valueAtIndexOrDefault;
    var resolve$4 = helpers$1.options.resolve;

    var defaultConfig$3 = {
    	display: true,

    	// Boolean - Whether to animate scaling the chart from the centre
    	animate: true,
    	position: 'chartArea',

    	angleLines: {
    		display: true,
    		color: 'rgba(0,0,0,0.1)',
    		lineWidth: 1,
    		borderDash: [],
    		borderDashOffset: 0.0
    	},

    	gridLines: {
    		circular: false
    	},

    	// label settings
    	ticks: {
    		// Boolean - Show a backdrop to the scale label
    		showLabelBackdrop: true,

    		// String - The colour of the label backdrop
    		backdropColor: 'rgba(255,255,255,0.75)',

    		// Number - The backdrop padding above & below the label in pixels
    		backdropPaddingY: 2,

    		// Number - The backdrop padding to the side of the label in pixels
    		backdropPaddingX: 2,

    		callback: core_ticks.formatters.linear
    	},

    	pointLabels: {
    		// Boolean - if true, show point labels
    		display: true,

    		// Number - Point label font size in pixels
    		fontSize: 10,

    		// Function - Used to convert point labels
    		callback: function(label) {
    			return label;
    		}
    	}
    };

    function getTickBackdropHeight(opts) {
    	var tickOpts = opts.ticks;

    	if (tickOpts.display && opts.display) {
    		return valueOrDefault$c(tickOpts.fontSize, core_defaults.global.defaultFontSize) + tickOpts.backdropPaddingY * 2;
    	}
    	return 0;
    }

    function measureLabelSize(ctx, lineHeight, label) {
    	if (helpers$1.isArray(label)) {
    		return {
    			w: helpers$1.longestText(ctx, ctx.font, label),
    			h: label.length * lineHeight
    		};
    	}

    	return {
    		w: ctx.measureText(label).width,
    		h: lineHeight
    	};
    }

    function determineLimits(angle, pos, size, min, max) {
    	if (angle === min || angle === max) {
    		return {
    			start: pos - (size / 2),
    			end: pos + (size / 2)
    		};
    	} else if (angle < min || angle > max) {
    		return {
    			start: pos - size,
    			end: pos
    		};
    	}

    	return {
    		start: pos,
    		end: pos + size
    	};
    }

    /**
     * Helper function to fit a radial linear scale with point labels
     */
    function fitWithPointLabels(scale) {

    	// Right, this is really confusing and there is a lot of maths going on here
    	// The gist of the problem is here: https://gist.github.com/nnnick/696cc9c55f4b0beb8fe9
    	//
    	// Reaction: https://dl.dropboxusercontent.com/u/34601363/toomuchscience.gif
    	//
    	// Solution:
    	//
    	// We assume the radius of the polygon is half the size of the canvas at first
    	// at each index we check if the text overlaps.
    	//
    	// Where it does, we store that angle and that index.
    	//
    	// After finding the largest index and angle we calculate how much we need to remove
    	// from the shape radius to move the point inwards by that x.
    	//
    	// We average the left and right distances to get the maximum shape radius that can fit in the box
    	// along with labels.
    	//
    	// Once we have that, we can find the centre point for the chart, by taking the x text protrusion
    	// on each side, removing that from the size, halving it and adding the left x protrusion width.
    	//
    	// This will mean we have a shape fitted to the canvas, as large as it can be with the labels
    	// and position it in the most space efficient manner
    	//
    	// https://dl.dropboxusercontent.com/u/34601363/yeahscience.gif

    	var plFont = helpers$1.options._parseFont(scale.options.pointLabels);

    	// Get maximum radius of the polygon. Either half the height (minus the text width) or half the width.
    	// Use this to calculate the offset + change. - Make sure L/R protrusion is at least 0 to stop issues with centre points
    	var furthestLimits = {
    		l: 0,
    		r: scale.width,
    		t: 0,
    		b: scale.height - scale.paddingTop
    	};
    	var furthestAngles = {};
    	var i, textSize, pointPosition;

    	scale.ctx.font = plFont.string;
    	scale._pointLabelSizes = [];

    	var valueCount = scale.chart.data.labels.length;
    	for (i = 0; i < valueCount; i++) {
    		pointPosition = scale.getPointPosition(i, scale.drawingArea + 5);
    		textSize = measureLabelSize(scale.ctx, plFont.lineHeight, scale.pointLabels[i]);
    		scale._pointLabelSizes[i] = textSize;

    		// Add quarter circle to make degree 0 mean top of circle
    		var angleRadians = scale.getIndexAngle(i);
    		var angle = helpers$1.toDegrees(angleRadians) % 360;
    		var hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);
    		var vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);

    		if (hLimits.start < furthestLimits.l) {
    			furthestLimits.l = hLimits.start;
    			furthestAngles.l = angleRadians;
    		}

    		if (hLimits.end > furthestLimits.r) {
    			furthestLimits.r = hLimits.end;
    			furthestAngles.r = angleRadians;
    		}

    		if (vLimits.start < furthestLimits.t) {
    			furthestLimits.t = vLimits.start;
    			furthestAngles.t = angleRadians;
    		}

    		if (vLimits.end > furthestLimits.b) {
    			furthestLimits.b = vLimits.end;
    			furthestAngles.b = angleRadians;
    		}
    	}

    	scale.setReductions(scale.drawingArea, furthestLimits, furthestAngles);
    }

    function getTextAlignForAngle(angle) {
    	if (angle === 0 || angle === 180) {
    		return 'center';
    	} else if (angle < 180) {
    		return 'left';
    	}

    	return 'right';
    }

    function fillText(ctx, text, position, lineHeight) {
    	var y = position.y + lineHeight / 2;
    	var i, ilen;

    	if (helpers$1.isArray(text)) {
    		for (i = 0, ilen = text.length; i < ilen; ++i) {
    			ctx.fillText(text[i], position.x, y);
    			y += lineHeight;
    		}
    	} else {
    		ctx.fillText(text, position.x, y);
    	}
    }

    function adjustPointPositionForLabelHeight(angle, textSize, position) {
    	if (angle === 90 || angle === 270) {
    		position.y -= (textSize.h / 2);
    	} else if (angle > 270 || angle < 90) {
    		position.y -= textSize.h;
    	}
    }

    function drawPointLabels(scale) {
    	var ctx = scale.ctx;
    	var opts = scale.options;
    	var pointLabelOpts = opts.pointLabels;
    	var tickBackdropHeight = getTickBackdropHeight(opts);
    	var outerDistance = scale.getDistanceFromCenterForValue(opts.ticks.reverse ? scale.min : scale.max);
    	var plFont = helpers$1.options._parseFont(pointLabelOpts);

    	ctx.save();

    	ctx.font = plFont.string;
    	ctx.textBaseline = 'middle';

    	for (var i = scale.chart.data.labels.length - 1; i >= 0; i--) {
    		// Extra pixels out for some label spacing
    		var extra = (i === 0 ? tickBackdropHeight / 2 : 0);
    		var pointLabelPosition = scale.getPointPosition(i, outerDistance + extra + 5);

    		// Keep this in loop since we may support array properties here
    		var pointLabelFontColor = valueAtIndexOrDefault$1(pointLabelOpts.fontColor, i, core_defaults.global.defaultFontColor);
    		ctx.fillStyle = pointLabelFontColor;

    		var angleRadians = scale.getIndexAngle(i);
    		var angle = helpers$1.toDegrees(angleRadians);
    		ctx.textAlign = getTextAlignForAngle(angle);
    		adjustPointPositionForLabelHeight(angle, scale._pointLabelSizes[i], pointLabelPosition);
    		fillText(ctx, scale.pointLabels[i], pointLabelPosition, plFont.lineHeight);
    	}
    	ctx.restore();
    }

    function drawRadiusLine(scale, gridLineOpts, radius, index) {
    	var ctx = scale.ctx;
    	var circular = gridLineOpts.circular;
    	var valueCount = scale.chart.data.labels.length;
    	var lineColor = valueAtIndexOrDefault$1(gridLineOpts.color, index - 1);
    	var lineWidth = valueAtIndexOrDefault$1(gridLineOpts.lineWidth, index - 1);
    	var pointPosition;

    	if ((!circular && !valueCount) || !lineColor || !lineWidth) {
    		return;
    	}

    	ctx.save();
    	ctx.strokeStyle = lineColor;
    	ctx.lineWidth = lineWidth;
    	if (ctx.setLineDash) {
    		ctx.setLineDash(gridLineOpts.borderDash || []);
    		ctx.lineDashOffset = gridLineOpts.borderDashOffset || 0.0;
    	}

    	ctx.beginPath();
    	if (circular) {
    		// Draw circular arcs between the points
    		ctx.arc(scale.xCenter, scale.yCenter, radius, 0, Math.PI * 2);
    	} else {
    		// Draw straight lines connecting each index
    		pointPosition = scale.getPointPosition(0, radius);
    		ctx.moveTo(pointPosition.x, pointPosition.y);

    		for (var i = 1; i < valueCount; i++) {
    			pointPosition = scale.getPointPosition(i, radius);
    			ctx.lineTo(pointPosition.x, pointPosition.y);
    		}
    	}
    	ctx.closePath();
    	ctx.stroke();
    	ctx.restore();
    }

    function numberOrZero(param) {
    	return helpers$1.isNumber(param) ? param : 0;
    }

    var scale_radialLinear = scale_linearbase.extend({
    	setDimensions: function() {
    		var me = this;

    		// Set the unconstrained dimension before label rotation
    		me.width = me.maxWidth;
    		me.height = me.maxHeight;
    		me.paddingTop = getTickBackdropHeight(me.options) / 2;
    		me.xCenter = Math.floor(me.width / 2);
    		me.yCenter = Math.floor((me.height - me.paddingTop) / 2);
    		me.drawingArea = Math.min(me.height - me.paddingTop, me.width) / 2;
    	},

    	determineDataLimits: function() {
    		var me = this;
    		var chart = me.chart;
    		var min = Number.POSITIVE_INFINITY;
    		var max = Number.NEGATIVE_INFINITY;

    		helpers$1.each(chart.data.datasets, function(dataset, datasetIndex) {
    			if (chart.isDatasetVisible(datasetIndex)) {
    				var meta = chart.getDatasetMeta(datasetIndex);

    				helpers$1.each(dataset.data, function(rawValue, index) {
    					var value = +me.getRightValue(rawValue);
    					if (isNaN(value) || meta.data[index].hidden) {
    						return;
    					}

    					min = Math.min(value, min);
    					max = Math.max(value, max);
    				});
    			}
    		});

    		me.min = (min === Number.POSITIVE_INFINITY ? 0 : min);
    		me.max = (max === Number.NEGATIVE_INFINITY ? 0 : max);

    		// Common base implementation to handle ticks.min, ticks.max, ticks.beginAtZero
    		me.handleTickRangeOptions();
    	},

    	// Returns the maximum number of ticks based on the scale dimension
    	_computeTickLimit: function() {
    		return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));
    	},

    	convertTicksToLabels: function() {
    		var me = this;

    		scale_linearbase.prototype.convertTicksToLabels.call(me);

    		// Point labels
    		me.pointLabels = me.chart.data.labels.map(function() {
    			var label = helpers$1.callback(me.options.pointLabels.callback, arguments, me);
    			return label || label === 0 ? label : '';
    		});
    	},

    	getLabelForIndex: function(index, datasetIndex) {
    		return +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);
    	},

    	fit: function() {
    		var me = this;
    		var opts = me.options;

    		if (opts.display && opts.pointLabels.display) {
    			fitWithPointLabels(me);
    		} else {
    			me.setCenterPoint(0, 0, 0, 0);
    		}
    	},

    	/**
    	 * Set radius reductions and determine new radius and center point
    	 * @private
    	 */
    	setReductions: function(largestPossibleRadius, furthestLimits, furthestAngles) {
    		var me = this;
    		var radiusReductionLeft = furthestLimits.l / Math.sin(furthestAngles.l);
    		var radiusReductionRight = Math.max(furthestLimits.r - me.width, 0) / Math.sin(furthestAngles.r);
    		var radiusReductionTop = -furthestLimits.t / Math.cos(furthestAngles.t);
    		var radiusReductionBottom = -Math.max(furthestLimits.b - (me.height - me.paddingTop), 0) / Math.cos(furthestAngles.b);

    		radiusReductionLeft = numberOrZero(radiusReductionLeft);
    		radiusReductionRight = numberOrZero(radiusReductionRight);
    		radiusReductionTop = numberOrZero(radiusReductionTop);
    		radiusReductionBottom = numberOrZero(radiusReductionBottom);

    		me.drawingArea = Math.min(
    			Math.floor(largestPossibleRadius - (radiusReductionLeft + radiusReductionRight) / 2),
    			Math.floor(largestPossibleRadius - (radiusReductionTop + radiusReductionBottom) / 2));
    		me.setCenterPoint(radiusReductionLeft, radiusReductionRight, radiusReductionTop, radiusReductionBottom);
    	},

    	setCenterPoint: function(leftMovement, rightMovement, topMovement, bottomMovement) {
    		var me = this;
    		var maxRight = me.width - rightMovement - me.drawingArea;
    		var maxLeft = leftMovement + me.drawingArea;
    		var maxTop = topMovement + me.drawingArea;
    		var maxBottom = (me.height - me.paddingTop) - bottomMovement - me.drawingArea;

    		me.xCenter = Math.floor(((maxLeft + maxRight) / 2) + me.left);
    		me.yCenter = Math.floor(((maxTop + maxBottom) / 2) + me.top + me.paddingTop);
    	},

    	getIndexAngle: function(index) {
    		var chart = this.chart;
    		var angleMultiplier = 360 / chart.data.labels.length;
    		var options = chart.options || {};
    		var startAngle = options.startAngle || 0;

    		// Start from the top instead of right, so remove a quarter of the circle
    		var angle = (index * angleMultiplier + startAngle) % 360;

    		return (angle < 0 ? angle + 360 : angle) * Math.PI * 2 / 360;
    	},

    	getDistanceFromCenterForValue: function(value) {
    		var me = this;

    		if (helpers$1.isNullOrUndef(value)) {
    			return NaN;
    		}

    		// Take into account half font size + the yPadding of the top value
    		var scalingFactor = me.drawingArea / (me.max - me.min);
    		if (me.options.ticks.reverse) {
    			return (me.max - value) * scalingFactor;
    		}
    		return (value - me.min) * scalingFactor;
    	},

    	getPointPosition: function(index, distanceFromCenter) {
    		var me = this;
    		var thisAngle = me.getIndexAngle(index) - (Math.PI / 2);
    		return {
    			x: Math.cos(thisAngle) * distanceFromCenter + me.xCenter,
    			y: Math.sin(thisAngle) * distanceFromCenter + me.yCenter
    		};
    	},

    	getPointPositionForValue: function(index, value) {
    		return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));
    	},

    	getBasePosition: function(index) {
    		var me = this;
    		var min = me.min;
    		var max = me.max;

    		return me.getPointPositionForValue(index || 0,
    			me.beginAtZero ? 0 :
    			min < 0 && max < 0 ? max :
    			min > 0 && max > 0 ? min :
    			0);
    	},

    	/**
    	 * @private
    	 */
    	_drawGrid: function() {
    		var me = this;
    		var ctx = me.ctx;
    		var opts = me.options;
    		var gridLineOpts = opts.gridLines;
    		var angleLineOpts = opts.angleLines;
    		var lineWidth = valueOrDefault$c(angleLineOpts.lineWidth, gridLineOpts.lineWidth);
    		var lineColor = valueOrDefault$c(angleLineOpts.color, gridLineOpts.color);
    		var i, offset, position;

    		if (opts.pointLabels.display) {
    			drawPointLabels(me);
    		}

    		if (gridLineOpts.display) {
    			helpers$1.each(me.ticks, function(label, index) {
    				if (index !== 0) {
    					offset = me.getDistanceFromCenterForValue(me.ticksAsNumbers[index]);
    					drawRadiusLine(me, gridLineOpts, offset, index);
    				}
    			});
    		}

    		if (angleLineOpts.display && lineWidth && lineColor) {
    			ctx.save();
    			ctx.lineWidth = lineWidth;
    			ctx.strokeStyle = lineColor;
    			if (ctx.setLineDash) {
    				ctx.setLineDash(resolve$4([angleLineOpts.borderDash, gridLineOpts.borderDash, []]));
    				ctx.lineDashOffset = resolve$4([angleLineOpts.borderDashOffset, gridLineOpts.borderDashOffset, 0.0]);
    			}

    			for (i = me.chart.data.labels.length - 1; i >= 0; i--) {
    				offset = me.getDistanceFromCenterForValue(opts.ticks.reverse ? me.min : me.max);
    				position = me.getPointPosition(i, offset);
    				ctx.beginPath();
    				ctx.moveTo(me.xCenter, me.yCenter);
    				ctx.lineTo(position.x, position.y);
    				ctx.stroke();
    			}

    			ctx.restore();
    		}
    	},

    	/**
    	 * @private
    	 */
    	_drawLabels: function() {
    		var me = this;
    		var ctx = me.ctx;
    		var opts = me.options;
    		var tickOpts = opts.ticks;

    		if (!tickOpts.display) {
    			return;
    		}

    		var startAngle = me.getIndexAngle(0);
    		var tickFont = helpers$1.options._parseFont(tickOpts);
    		var tickFontColor = valueOrDefault$c(tickOpts.fontColor, core_defaults.global.defaultFontColor);
    		var offset, width;

    		ctx.save();
    		ctx.font = tickFont.string;
    		ctx.translate(me.xCenter, me.yCenter);
    		ctx.rotate(startAngle);
    		ctx.textAlign = 'center';
    		ctx.textBaseline = 'middle';

    		helpers$1.each(me.ticks, function(label, index) {
    			if (index === 0 && !tickOpts.reverse) {
    				return;
    			}

    			offset = me.getDistanceFromCenterForValue(me.ticksAsNumbers[index]);

    			if (tickOpts.showLabelBackdrop) {
    				width = ctx.measureText(label).width;
    				ctx.fillStyle = tickOpts.backdropColor;

    				ctx.fillRect(
    					-width / 2 - tickOpts.backdropPaddingX,
    					-offset - tickFont.size / 2 - tickOpts.backdropPaddingY,
    					width + tickOpts.backdropPaddingX * 2,
    					tickFont.size + tickOpts.backdropPaddingY * 2
    				);
    			}

    			ctx.fillStyle = tickFontColor;
    			ctx.fillText(label, 0, -offset);
    		});

    		ctx.restore();
    	},

    	/**
    	 * @private
    	 */
    	_drawTitle: helpers$1.noop
    });

    // INTERNAL: static default options, registered in src/index.js
    var _defaults$3 = defaultConfig$3;
    scale_radialLinear._defaults = _defaults$3;

    var deprecated$1 = helpers$1._deprecated;
    var resolve$5 = helpers$1.options.resolve;
    var valueOrDefault$d = helpers$1.valueOrDefault;

    // Integer constants are from the ES6 spec.
    var MIN_INTEGER = Number.MIN_SAFE_INTEGER || -9007199254740991;
    var MAX_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;

    var INTERVALS = {
    	millisecond: {
    		common: true,
    		size: 1,
    		steps: 1000
    	},
    	second: {
    		common: true,
    		size: 1000,
    		steps: 60
    	},
    	minute: {
    		common: true,
    		size: 60000,
    		steps: 60
    	},
    	hour: {
    		common: true,
    		size: 3600000,
    		steps: 24
    	},
    	day: {
    		common: true,
    		size: 86400000,
    		steps: 30
    	},
    	week: {
    		common: false,
    		size: 604800000,
    		steps: 4
    	},
    	month: {
    		common: true,
    		size: 2.628e9,
    		steps: 12
    	},
    	quarter: {
    		common: false,
    		size: 7.884e9,
    		steps: 4
    	},
    	year: {
    		common: true,
    		size: 3.154e10
    	}
    };

    var UNITS = Object.keys(INTERVALS);

    function sorter(a, b) {
    	return a - b;
    }

    function arrayUnique(items) {
    	var hash = {};
    	var out = [];
    	var i, ilen, item;

    	for (i = 0, ilen = items.length; i < ilen; ++i) {
    		item = items[i];
    		if (!hash[item]) {
    			hash[item] = true;
    			out.push(item);
    		}
    	}

    	return out;
    }

    function getMin(options) {
    	return helpers$1.valueOrDefault(options.time.min, options.ticks.min);
    }

    function getMax(options) {
    	return helpers$1.valueOrDefault(options.time.max, options.ticks.max);
    }

    /**
     * Returns an array of {time, pos} objects used to interpolate a specific `time` or position
     * (`pos`) on the scale, by searching entries before and after the requested value. `pos` is
     * a decimal between 0 and 1: 0 being the start of the scale (left or top) and 1 the other
     * extremity (left + width or top + height). Note that it would be more optimized to directly
     * store pre-computed pixels, but the scale dimensions are not guaranteed at the time we need
     * to create the lookup table. The table ALWAYS contains at least two items: min and max.
     *
     * @param {number[]} timestamps - timestamps sorted from lowest to highest.
     * @param {string} distribution - If 'linear', timestamps will be spread linearly along the min
     * and max range, so basically, the table will contains only two items: {min, 0} and {max, 1}.
     * If 'series', timestamps will be positioned at the same distance from each other. In this
     * case, only timestamps that break the time linearity are registered, meaning that in the
     * best case, all timestamps are linear, the table contains only min and max.
     */
    function buildLookupTable(timestamps, min, max, distribution) {
    	if (distribution === 'linear' || !timestamps.length) {
    		return [
    			{time: min, pos: 0},
    			{time: max, pos: 1}
    		];
    	}

    	var table = [];
    	var items = [min];
    	var i, ilen, prev, curr, next;

    	for (i = 0, ilen = timestamps.length; i < ilen; ++i) {
    		curr = timestamps[i];
    		if (curr > min && curr < max) {
    			items.push(curr);
    		}
    	}

    	items.push(max);

    	for (i = 0, ilen = items.length; i < ilen; ++i) {
    		next = items[i + 1];
    		prev = items[i - 1];
    		curr = items[i];

    		// only add points that breaks the scale linearity
    		if (prev === undefined || next === undefined || Math.round((next + prev) / 2) !== curr) {
    			table.push({time: curr, pos: i / (ilen - 1)});
    		}
    	}

    	return table;
    }

    // @see adapted from https://www.anujgakhar.com/2014/03/01/binary-search-in-javascript/
    function lookup(table, key, value) {
    	var lo = 0;
    	var hi = table.length - 1;
    	var mid, i0, i1;

    	while (lo >= 0 && lo <= hi) {
    		mid = (lo + hi) >> 1;
    		i0 = table[mid - 1] || null;
    		i1 = table[mid];

    		if (!i0) {
    			// given value is outside table (before first item)
    			return {lo: null, hi: i1};
    		} else if (i1[key] < value) {
    			lo = mid + 1;
    		} else if (i0[key] > value) {
    			hi = mid - 1;
    		} else {
    			return {lo: i0, hi: i1};
    		}
    	}

    	// given value is outside table (after last item)
    	return {lo: i1, hi: null};
    }

    /**
     * Linearly interpolates the given source `value` using the table items `skey` values and
     * returns the associated `tkey` value. For example, interpolate(table, 'time', 42, 'pos')
     * returns the position for a timestamp equal to 42. If value is out of bounds, values at
     * index [0, 1] or [n - 1, n] are used for the interpolation.
     */
    function interpolate$1(table, skey, sval, tkey) {
    	var range = lookup(table, skey, sval);

    	// Note: the lookup table ALWAYS contains at least 2 items (min and max)
    	var prev = !range.lo ? table[0] : !range.hi ? table[table.length - 2] : range.lo;
    	var next = !range.lo ? table[1] : !range.hi ? table[table.length - 1] : range.hi;

    	var span = next[skey] - prev[skey];
    	var ratio = span ? (sval - prev[skey]) / span : 0;
    	var offset = (next[tkey] - prev[tkey]) * ratio;

    	return prev[tkey] + offset;
    }

    function toTimestamp(scale, input) {
    	var adapter = scale._adapter;
    	var options = scale.options.time;
    	var parser = options.parser;
    	var format = parser || options.format;
    	var value = input;

    	if (typeof parser === 'function') {
    		value = parser(value);
    	}

    	// Only parse if its not a timestamp already
    	if (!helpers$1.isFinite(value)) {
    		value = typeof format === 'string'
    			? adapter.parse(value, format)
    			: adapter.parse(value);
    	}

    	if (value !== null) {
    		return +value;
    	}

    	// Labels are in an incompatible format and no `parser` has been provided.
    	// The user might still use the deprecated `format` option for parsing.
    	if (!parser && typeof format === 'function') {
    		value = format(input);

    		// `format` could return something else than a timestamp, if so, parse it
    		if (!helpers$1.isFinite(value)) {
    			value = adapter.parse(value);
    		}
    	}

    	return value;
    }

    function parse(scale, input) {
    	if (helpers$1.isNullOrUndef(input)) {
    		return null;
    	}

    	var options = scale.options.time;
    	var value = toTimestamp(scale, scale.getRightValue(input));
    	if (value === null) {
    		return value;
    	}

    	if (options.round) {
    		value = +scale._adapter.startOf(value, options.round);
    	}

    	return value;
    }

    /**
     * Figures out what unit results in an appropriate number of auto-generated ticks
     */
    function determineUnitForAutoTicks(minUnit, min, max, capacity) {
    	var ilen = UNITS.length;
    	var i, interval, factor;

    	for (i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {
    		interval = INTERVALS[UNITS[i]];
    		factor = interval.steps ? interval.steps : MAX_INTEGER;

    		if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {
    			return UNITS[i];
    		}
    	}

    	return UNITS[ilen - 1];
    }

    /**
     * Figures out what unit to format a set of ticks with
     */
    function determineUnitForFormatting(scale, numTicks, minUnit, min, max) {
    	var i, unit;

    	for (i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {
    		unit = UNITS[i];
    		if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {
    			return unit;
    		}
    	}

    	return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];
    }

    function determineMajorUnit(unit) {
    	for (var i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {
    		if (INTERVALS[UNITS[i]].common) {
    			return UNITS[i];
    		}
    	}
    }

    /**
     * Generates a maximum of `capacity` timestamps between min and max, rounded to the
     * `minor` unit using the given scale time `options`.
     * Important: this method can return ticks outside the min and max range, it's the
     * responsibility of the calling code to clamp values if needed.
     */
    function generate(scale, min, max, capacity) {
    	var adapter = scale._adapter;
    	var options = scale.options;
    	var timeOpts = options.time;
    	var minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, capacity);
    	var stepSize = resolve$5([timeOpts.stepSize, timeOpts.unitStepSize, 1]);
    	var weekday = minor === 'week' ? timeOpts.isoWeekday : false;
    	var first = min;
    	var ticks = [];
    	var time;

    	// For 'week' unit, handle the first day of week option
    	if (weekday) {
    		first = +adapter.startOf(first, 'isoWeek', weekday);
    	}

    	// Align first ticks on unit
    	first = +adapter.startOf(first, weekday ? 'day' : minor);

    	// Prevent browser from freezing in case user options request millions of milliseconds
    	if (adapter.diff(max, min, minor) > 100000 * stepSize) {
    		throw min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor;
    	}

    	for (time = first; time < max; time = +adapter.add(time, stepSize, minor)) {
    		ticks.push(time);
    	}

    	if (time === max || options.bounds === 'ticks') {
    		ticks.push(time);
    	}

    	return ticks;
    }

    /**
     * Returns the start and end offsets from edges in the form of {start, end}
     * where each value is a relative width to the scale and ranges between 0 and 1.
     * They add extra margins on the both sides by scaling down the original scale.
     * Offsets are added when the `offset` option is true.
     */
    function computeOffsets(table, ticks, min, max, options) {
    	var start = 0;
    	var end = 0;
    	var first, last;

    	if (options.offset && ticks.length) {
    		first = interpolate$1(table, 'time', ticks[0], 'pos');
    		if (ticks.length === 1) {
    			start = 1 - first;
    		} else {
    			start = (interpolate$1(table, 'time', ticks[1], 'pos') - first) / 2;
    		}
    		last = interpolate$1(table, 'time', ticks[ticks.length - 1], 'pos');
    		if (ticks.length === 1) {
    			end = last;
    		} else {
    			end = (last - interpolate$1(table, 'time', ticks[ticks.length - 2], 'pos')) / 2;
    		}
    	}

    	return {start: start, end: end, factor: 1 / (start + 1 + end)};
    }

    function setMajorTicks(scale, ticks, map, majorUnit) {
    	var adapter = scale._adapter;
    	var first = +adapter.startOf(ticks[0].value, majorUnit);
    	var last = ticks[ticks.length - 1].value;
    	var major, index;

    	for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {
    		index = map[major];
    		if (index >= 0) {
    			ticks[index].major = true;
    		}
    	}
    	return ticks;
    }

    function ticksFromTimestamps(scale, values, majorUnit) {
    	var ticks = [];
    	var map = {};
    	var ilen = values.length;
    	var i, value;

    	for (i = 0; i < ilen; ++i) {
    		value = values[i];
    		map[value] = i;

    		ticks.push({
    			value: value,
    			major: false
    		});
    	}

    	// We set the major ticks separately from the above loop because calling startOf for every tick
    	// is expensive when there is a large number of ticks
    	return (ilen === 0 || !majorUnit) ? ticks : setMajorTicks(scale, ticks, map, majorUnit);
    }

    var defaultConfig$4 = {
    	position: 'bottom',

    	/**
    	 * Data distribution along the scale:
    	 * - 'linear': data are spread according to their time (distances can vary),
    	 * - 'series': data are spread at the same distance from each other.
    	 * @see https://github.com/chartjs/Chart.js/pull/4507
    	 * @since 2.7.0
    	 */
    	distribution: 'linear',

    	/**
    	 * Scale boundary strategy (bypassed by min/max time options)
    	 * - `data`: make sure data are fully visible, ticks outside are removed
    	 * - `ticks`: make sure ticks are fully visible, data outside are truncated
    	 * @see https://github.com/chartjs/Chart.js/pull/4556
    	 * @since 2.7.0
    	 */
    	bounds: 'data',

    	adapters: {},
    	time: {
    		parser: false, // false == a pattern string from https://momentjs.com/docs/#/parsing/string-format/ or a custom callback that converts its argument to a moment
    		unit: false, // false == automatic or override with week, month, year, etc.
    		round: false, // none, or override with week, month, year, etc.
    		displayFormat: false, // DEPRECATED
    		isoWeekday: false, // override week start day - see https://momentjs.com/docs/#/get-set/iso-weekday/
    		minUnit: 'millisecond',
    		displayFormats: {}
    	},
    	ticks: {
    		autoSkip: false,

    		/**
    		 * Ticks generation input values:
    		 * - 'auto': generates "optimal" ticks based on scale size and time options.
    		 * - 'data': generates ticks from data (including labels from data {t|x|y} objects).
    		 * - 'labels': generates ticks from user given `data.labels` values ONLY.
    		 * @see https://github.com/chartjs/Chart.js/pull/4507
    		 * @since 2.7.0
    		 */
    		source: 'auto',

    		major: {
    			enabled: false
    		}
    	}
    };

    var scale_time = core_scale.extend({
    	initialize: function() {
    		this.mergeTicksOptions();
    		core_scale.prototype.initialize.call(this);
    	},

    	update: function() {
    		var me = this;
    		var options = me.options;
    		var time = options.time || (options.time = {});
    		var adapter = me._adapter = new core_adapters._date(options.adapters.date);

    		// DEPRECATIONS: output a message only one time per update
    		deprecated$1('time scale', time.format, 'time.format', 'time.parser');
    		deprecated$1('time scale', time.min, 'time.min', 'ticks.min');
    		deprecated$1('time scale', time.max, 'time.max', 'ticks.max');

    		// Backward compatibility: before introducing adapter, `displayFormats` was
    		// supposed to contain *all* unit/string pairs but this can't be resolved
    		// when loading the scale (adapters are loaded afterward), so let's populate
    		// missing formats on update
    		helpers$1.mergeIf(time.displayFormats, adapter.formats());

    		return core_scale.prototype.update.apply(me, arguments);
    	},

    	/**
    	 * Allows data to be referenced via 't' attribute
    	 */
    	getRightValue: function(rawValue) {
    		if (rawValue && rawValue.t !== undefined) {
    			rawValue = rawValue.t;
    		}
    		return core_scale.prototype.getRightValue.call(this, rawValue);
    	},

    	determineDataLimits: function() {
    		var me = this;
    		var chart = me.chart;
    		var adapter = me._adapter;
    		var options = me.options;
    		var unit = options.time.unit || 'day';
    		var min = MAX_INTEGER;
    		var max = MIN_INTEGER;
    		var timestamps = [];
    		var datasets = [];
    		var labels = [];
    		var i, j, ilen, jlen, data, timestamp, labelsAdded;
    		var dataLabels = me._getLabels();

    		for (i = 0, ilen = dataLabels.length; i < ilen; ++i) {
    			labels.push(parse(me, dataLabels[i]));
    		}

    		for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {
    			if (chart.isDatasetVisible(i)) {
    				data = chart.data.datasets[i].data;

    				// Let's consider that all data have the same format.
    				if (helpers$1.isObject(data[0])) {
    					datasets[i] = [];

    					for (j = 0, jlen = data.length; j < jlen; ++j) {
    						timestamp = parse(me, data[j]);
    						timestamps.push(timestamp);
    						datasets[i][j] = timestamp;
    					}
    				} else {
    					datasets[i] = labels.slice(0);
    					if (!labelsAdded) {
    						timestamps = timestamps.concat(labels);
    						labelsAdded = true;
    					}
    				}
    			} else {
    				datasets[i] = [];
    			}
    		}

    		if (labels.length) {
    			min = Math.min(min, labels[0]);
    			max = Math.max(max, labels[labels.length - 1]);
    		}

    		if (timestamps.length) {
    			timestamps = ilen > 1 ? arrayUnique(timestamps).sort(sorter) : timestamps.sort(sorter);
    			min = Math.min(min, timestamps[0]);
    			max = Math.max(max, timestamps[timestamps.length - 1]);
    		}

    		min = parse(me, getMin(options)) || min;
    		max = parse(me, getMax(options)) || max;

    		// In case there is no valid min/max, set limits based on unit time option
    		min = min === MAX_INTEGER ? +adapter.startOf(Date.now(), unit) : min;
    		max = max === MIN_INTEGER ? +adapter.endOf(Date.now(), unit) + 1 : max;

    		// Make sure that max is strictly higher than min (required by the lookup table)
    		me.min = Math.min(min, max);
    		me.max = Math.max(min + 1, max);

    		// PRIVATE
    		me._table = [];
    		me._timestamps = {
    			data: timestamps,
    			datasets: datasets,
    			labels: labels
    		};
    	},

    	buildTicks: function() {
    		var me = this;
    		var min = me.min;
    		var max = me.max;
    		var options = me.options;
    		var tickOpts = options.ticks;
    		var timeOpts = options.time;
    		var timestamps = me._timestamps;
    		var ticks = [];
    		var capacity = me.getLabelCapacity(min);
    		var source = tickOpts.source;
    		var distribution = options.distribution;
    		var i, ilen, timestamp;

    		if (source === 'data' || (source === 'auto' && distribution === 'series')) {
    			timestamps = timestamps.data;
    		} else if (source === 'labels') {
    			timestamps = timestamps.labels;
    		} else {
    			timestamps = generate(me, min, max, capacity);
    		}

    		if (options.bounds === 'ticks' && timestamps.length) {
    			min = timestamps[0];
    			max = timestamps[timestamps.length - 1];
    		}

    		// Enforce limits with user min/max options
    		min = parse(me, getMin(options)) || min;
    		max = parse(me, getMax(options)) || max;

    		// Remove ticks outside the min/max range
    		for (i = 0, ilen = timestamps.length; i < ilen; ++i) {
    			timestamp = timestamps[i];
    			if (timestamp >= min && timestamp <= max) {
    				ticks.push(timestamp);
    			}
    		}

    		me.min = min;
    		me.max = max;

    		// PRIVATE
    		// determineUnitForFormatting relies on the number of ticks so we don't use it when
    		// autoSkip is enabled because we don't yet know what the final number of ticks will be
    		me._unit = timeOpts.unit || (tickOpts.autoSkip
    			? determineUnitForAutoTicks(timeOpts.minUnit, me.min, me.max, capacity)
    			: determineUnitForFormatting(me, ticks.length, timeOpts.minUnit, me.min, me.max));
    		me._majorUnit = !tickOpts.major.enabled || me._unit === 'year' ? undefined
    			: determineMajorUnit(me._unit);
    		me._table = buildLookupTable(me._timestamps.data, min, max, distribution);
    		me._offsets = computeOffsets(me._table, ticks, min, max, options);

    		if (tickOpts.reverse) {
    			ticks.reverse();
    		}

    		return ticksFromTimestamps(me, ticks, me._majorUnit);
    	},

    	getLabelForIndex: function(index, datasetIndex) {
    		var me = this;
    		var adapter = me._adapter;
    		var data = me.chart.data;
    		var timeOpts = me.options.time;
    		var label = data.labels && index < data.labels.length ? data.labels[index] : '';
    		var value = data.datasets[datasetIndex].data[index];

    		if (helpers$1.isObject(value)) {
    			label = me.getRightValue(value);
    		}
    		if (timeOpts.tooltipFormat) {
    			return adapter.format(toTimestamp(me, label), timeOpts.tooltipFormat);
    		}
    		if (typeof label === 'string') {
    			return label;
    		}
    		return adapter.format(toTimestamp(me, label), timeOpts.displayFormats.datetime);
    	},

    	/**
    	 * Function to format an individual tick mark
    	 * @private
    	 */
    	tickFormatFunction: function(time, index, ticks, format) {
    		var me = this;
    		var adapter = me._adapter;
    		var options = me.options;
    		var formats = options.time.displayFormats;
    		var minorFormat = formats[me._unit];
    		var majorUnit = me._majorUnit;
    		var majorFormat = formats[majorUnit];
    		var tick = ticks[index];
    		var tickOpts = options.ticks;
    		var major = majorUnit && majorFormat && tick && tick.major;
    		var label = adapter.format(time, format ? format : major ? majorFormat : minorFormat);
    		var nestedTickOpts = major ? tickOpts.major : tickOpts.minor;
    		var formatter = resolve$5([
    			nestedTickOpts.callback,
    			nestedTickOpts.userCallback,
    			tickOpts.callback,
    			tickOpts.userCallback
    		]);

    		return formatter ? formatter(label, index, ticks) : label;
    	},

    	convertTicksToLabels: function(ticks) {
    		var labels = [];
    		var i, ilen;

    		for (i = 0, ilen = ticks.length; i < ilen; ++i) {
    			labels.push(this.tickFormatFunction(ticks[i].value, i, ticks));
    		}

    		return labels;
    	},

    	/**
    	 * @private
    	 */
    	getPixelForOffset: function(time) {
    		var me = this;
    		var offsets = me._offsets;
    		var pos = interpolate$1(me._table, 'time', time, 'pos');
    		return me.getPixelForDecimal((offsets.start + pos) * offsets.factor);
    	},

    	getPixelForValue: function(value, index, datasetIndex) {
    		var me = this;
    		var time = null;

    		if (index !== undefined && datasetIndex !== undefined) {
    			time = me._timestamps.datasets[datasetIndex][index];
    		}

    		if (time === null) {
    			time = parse(me, value);
    		}

    		if (time !== null) {
    			return me.getPixelForOffset(time);
    		}
    	},

    	getPixelForTick: function(index) {
    		var ticks = this.getTicks();
    		return index >= 0 && index < ticks.length ?
    			this.getPixelForOffset(ticks[index].value) :
    			null;
    	},

    	getValueForPixel: function(pixel) {
    		var me = this;
    		var offsets = me._offsets;
    		var pos = me.getDecimalForPixel(pixel) / offsets.factor - offsets.end;
    		var time = interpolate$1(me._table, 'pos', pos, 'time');

    		// DEPRECATION, we should return time directly
    		return me._adapter._create(time);
    	},

    	/**
    	 * @private
    	 */
    	_getLabelSize: function(label) {
    		var me = this;
    		var ticksOpts = me.options.ticks;
    		var tickLabelWidth = me.ctx.measureText(label).width;
    		var angle = helpers$1.toRadians(me.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);
    		var cosRotation = Math.cos(angle);
    		var sinRotation = Math.sin(angle);
    		var tickFontSize = valueOrDefault$d(ticksOpts.fontSize, core_defaults.global.defaultFontSize);

    		return {
    			w: (tickLabelWidth * cosRotation) + (tickFontSize * sinRotation),
    			h: (tickLabelWidth * sinRotation) + (tickFontSize * cosRotation)
    		};
    	},

    	/**
    	 * Crude approximation of what the label width might be
    	 * @private
    	 */
    	getLabelWidth: function(label) {
    		return this._getLabelSize(label).w;
    	},

    	/**
    	 * @private
    	 */
    	getLabelCapacity: function(exampleTime) {
    		var me = this;
    		var timeOpts = me.options.time;
    		var displayFormats = timeOpts.displayFormats;

    		// pick the longest format (milliseconds) for guestimation
    		var format = displayFormats[timeOpts.unit] || displayFormats.millisecond;
    		var exampleLabel = me.tickFormatFunction(exampleTime, 0, ticksFromTimestamps(me, [exampleTime], me._majorUnit), format);
    		var size = me._getLabelSize(exampleLabel);
    		var capacity = Math.floor(me.isHorizontal() ? me.width / size.w : me.height / size.h);

    		if (me.options.offset) {
    			capacity--;
    		}

    		return capacity > 0 ? capacity : 1;
    	}
    });

    // INTERNAL: static default options, registered in src/index.js
    var _defaults$4 = defaultConfig$4;
    scale_time._defaults = _defaults$4;

    var scales = {
    	category: scale_category,
    	linear: scale_linear,
    	logarithmic: scale_logarithmic,
    	radialLinear: scale_radialLinear,
    	time: scale_time
    };

    var FORMATS = {
    	datetime: 'MMM D, YYYY, h:mm:ss a',
    	millisecond: 'h:mm:ss.SSS a',
    	second: 'h:mm:ss a',
    	minute: 'h:mm a',
    	hour: 'hA',
    	day: 'MMM D',
    	week: 'll',
    	month: 'MMM YYYY',
    	quarter: '[Q]Q - YYYY',
    	year: 'YYYY'
    };

    core_adapters._date.override(typeof moment === 'function' ? {
    	_id: 'moment', // DEBUG ONLY

    	formats: function() {
    		return FORMATS;
    	},

    	parse: function(value, format) {
    		if (typeof value === 'string' && typeof format === 'string') {
    			value = moment(value, format);
    		} else if (!(value instanceof moment)) {
    			value = moment(value);
    		}
    		return value.isValid() ? value.valueOf() : null;
    	},

    	format: function(time, format) {
    		return moment(time).format(format);
    	},

    	add: function(time, amount, unit) {
    		return moment(time).add(amount, unit).valueOf();
    	},

    	diff: function(max, min, unit) {
    		return moment(max).diff(moment(min), unit);
    	},

    	startOf: function(time, unit, weekday) {
    		time = moment(time);
    		if (unit === 'isoWeek') {
    			return time.isoWeekday(weekday).valueOf();
    		}
    		return time.startOf(unit).valueOf();
    	},

    	endOf: function(time, unit) {
    		return moment(time).endOf(unit).valueOf();
    	},

    	// DEPRECATIONS

    	/**
    	 * Provided for backward compatibility with scale.getValueForPixel().
    	 * @deprecated since version 2.8.0
    	 * @todo remove at version 3
    	 * @private
    	 */
    	_create: function(time) {
    		return moment(time);
    	},
    } : {});

    core_defaults._set('global', {
    	plugins: {
    		filler: {
    			propagate: true
    		}
    	}
    });

    var mappers = {
    	dataset: function(source) {
    		var index = source.fill;
    		var chart = source.chart;
    		var meta = chart.getDatasetMeta(index);
    		var visible = meta && chart.isDatasetVisible(index);
    		var points = (visible && meta.dataset._children) || [];
    		var length = points.length || 0;

    		return !length ? null : function(point, i) {
    			return (i < length && points[i]._view) || null;
    		};
    	},

    	boundary: function(source) {
    		var boundary = source.boundary;
    		var x = boundary ? boundary.x : null;
    		var y = boundary ? boundary.y : null;

    		if (helpers$1.isArray(boundary)) {
    			return function(point, i) {
    				return boundary[i];
    			};
    		}

    		return function(point) {
    			return {
    				x: x === null ? point.x : x,
    				y: y === null ? point.y : y,
    			};
    		};
    	}
    };

    // @todo if (fill[0] === '#')
    function decodeFill(el, index, count) {
    	var model = el._model || {};
    	var fill = model.fill;
    	var target;

    	if (fill === undefined) {
    		fill = !!model.backgroundColor;
    	}

    	if (fill === false || fill === null) {
    		return false;
    	}

    	if (fill === true) {
    		return 'origin';
    	}

    	target = parseFloat(fill, 10);
    	if (isFinite(target) && Math.floor(target) === target) {
    		if (fill[0] === '-' || fill[0] === '+') {
    			target = index + target;
    		}

    		if (target === index || target < 0 || target >= count) {
    			return false;
    		}

    		return target;
    	}

    	switch (fill) {
    	// compatibility
    	case 'bottom':
    		return 'start';
    	case 'top':
    		return 'end';
    	case 'zero':
    		return 'origin';
    	// supported boundaries
    	case 'origin':
    	case 'start':
    	case 'end':
    		return fill;
    	// invalid fill values
    	default:
    		return false;
    	}
    }

    function computeLinearBoundary(source) {
    	var model = source.el._model || {};
    	var scale = source.el._scale || {};
    	var fill = source.fill;
    	var target = null;
    	var horizontal;

    	if (isFinite(fill)) {
    		return null;
    	}

    	// Backward compatibility: until v3, we still need to support boundary values set on
    	// the model (scaleTop, scaleBottom and scaleZero) because some external plugins and
    	// controllers might still use it (e.g. the Smith chart).

    	if (fill === 'start') {
    		target = model.scaleBottom === undefined ? scale.bottom : model.scaleBottom;
    	} else if (fill === 'end') {
    		target = model.scaleTop === undefined ? scale.top : model.scaleTop;
    	} else if (model.scaleZero !== undefined) {
    		target = model.scaleZero;
    	} else if (scale.getBasePixel) {
    		target = scale.getBasePixel();
    	}

    	if (target !== undefined && target !== null) {
    		if (target.x !== undefined && target.y !== undefined) {
    			return target;
    		}

    		if (helpers$1.isFinite(target)) {
    			horizontal = scale.isHorizontal();
    			return {
    				x: horizontal ? target : null,
    				y: horizontal ? null : target
    			};
    		}
    	}

    	return null;
    }

    function computeCircularBoundary(source) {
    	var scale = source.el._scale;
    	var options = scale.options;
    	var length = scale.chart.data.labels.length;
    	var fill = source.fill;
    	var target = [];
    	var start, end, center, i, point;

    	if (!length) {
    		return null;
    	}

    	start = options.ticks.reverse ? scale.max : scale.min;
    	end = options.ticks.reverse ? scale.min : scale.max;
    	center = scale.getPointPositionForValue(0, start);
    	for (i = 0; i < length; ++i) {
    		point = fill === 'start' || fill === 'end'
    			? scale.getPointPositionForValue(i, fill === 'start' ? start : end)
    			: scale.getBasePosition(i);
    		if (options.gridLines.circular) {
    			point.cx = center.x;
    			point.cy = center.y;
    			point.angle = scale.getIndexAngle(i) - Math.PI / 2;
    		}
    		target.push(point);
    	}
    	return target;
    }

    function computeBoundary(source) {
    	var scale = source.el._scale || {};

    	if (scale.getPointPositionForValue) {
    		return computeCircularBoundary(source);
    	}
    	return computeLinearBoundary(source);
    }

    function resolveTarget(sources, index, propagate) {
    	var source = sources[index];
    	var fill = source.fill;
    	var visited = [index];
    	var target;

    	if (!propagate) {
    		return fill;
    	}

    	while (fill !== false && visited.indexOf(fill) === -1) {
    		if (!isFinite(fill)) {
    			return fill;
    		}

    		target = sources[fill];
    		if (!target) {
    			return false;
    		}

    		if (target.visible) {
    			return fill;
    		}

    		visited.push(fill);
    		fill = target.fill;
    	}

    	return false;
    }

    function createMapper(source) {
    	var fill = source.fill;
    	var type = 'dataset';

    	if (fill === false) {
    		return null;
    	}

    	if (!isFinite(fill)) {
    		type = 'boundary';
    	}

    	return mappers[type](source);
    }

    function isDrawable(point) {
    	return point && !point.skip;
    }

    function drawArea(ctx, curve0, curve1, len0, len1) {
    	var i, cx, cy, r;

    	if (!len0 || !len1) {
    		return;
    	}

    	// building first area curve (normal)
    	ctx.moveTo(curve0[0].x, curve0[0].y);
    	for (i = 1; i < len0; ++i) {
    		helpers$1.canvas.lineTo(ctx, curve0[i - 1], curve0[i]);
    	}

    	if (curve1[0].angle !== undefined) {
    		cx = curve1[0].cx;
    		cy = curve1[0].cy;
    		r = Math.sqrt(Math.pow(curve1[0].x - cx, 2) + Math.pow(curve1[0].y - cy, 2));
    		for (i = len1 - 1; i > 0; --i) {
    			ctx.arc(cx, cy, r, curve1[i].angle, curve1[i - 1].angle, true);
    		}
    		return;
    	}

    	// joining the two area curves
    	ctx.lineTo(curve1[len1 - 1].x, curve1[len1 - 1].y);

    	// building opposite area curve (reverse)
    	for (i = len1 - 1; i > 0; --i) {
    		helpers$1.canvas.lineTo(ctx, curve1[i], curve1[i - 1], true);
    	}
    }

    function doFill(ctx, points, mapper, view, color, loop) {
    	var count = points.length;
    	var span = view.spanGaps;
    	var curve0 = [];
    	var curve1 = [];
    	var len0 = 0;
    	var len1 = 0;
    	var i, ilen, index, p0, p1, d0, d1, loopOffset;

    	ctx.beginPath();

    	for (i = 0, ilen = count; i < ilen; ++i) {
    		index = i % count;
    		p0 = points[index]._view;
    		p1 = mapper(p0, index, view);
    		d0 = isDrawable(p0);
    		d1 = isDrawable(p1);

    		if (loop && loopOffset === undefined && d0) {
    			loopOffset = i + 1;
    			ilen = count + loopOffset;
    		}

    		if (d0 && d1) {
    			len0 = curve0.push(p0);
    			len1 = curve1.push(p1);
    		} else if (len0 && len1) {
    			if (!span) {
    				drawArea(ctx, curve0, curve1, len0, len1);
    				len0 = len1 = 0;
    				curve0 = [];
    				curve1 = [];
    			} else {
    				if (d0) {
    					curve0.push(p0);
    				}
    				if (d1) {
    					curve1.push(p1);
    				}
    			}
    		}
    	}

    	drawArea(ctx, curve0, curve1, len0, len1);

    	ctx.closePath();
    	ctx.fillStyle = color;
    	ctx.fill();
    }

    var plugin_filler = {
    	id: 'filler',

    	afterDatasetsUpdate: function(chart, options) {
    		var count = (chart.data.datasets || []).length;
    		var propagate = options.propagate;
    		var sources = [];
    		var meta, i, el, source;

    		for (i = 0; i < count; ++i) {
    			meta = chart.getDatasetMeta(i);
    			el = meta.dataset;
    			source = null;

    			if (el && el._model && el instanceof elements.Line) {
    				source = {
    					visible: chart.isDatasetVisible(i),
    					fill: decodeFill(el, i, count),
    					chart: chart,
    					el: el
    				};
    			}

    			meta.$filler = source;
    			sources.push(source);
    		}

    		for (i = 0; i < count; ++i) {
    			source = sources[i];
    			if (!source) {
    				continue;
    			}

    			source.fill = resolveTarget(sources, i, propagate);
    			source.boundary = computeBoundary(source);
    			source.mapper = createMapper(source);
    		}
    	},

    	beforeDatasetsDraw: function(chart) {
    		var metasets = chart._getSortedVisibleDatasetMetas();
    		var ctx = chart.ctx;
    		var meta, i, el, view, points, mapper, color;

    		for (i = metasets.length - 1; i >= 0; --i) {
    			meta = metasets[i].$filler;

    			if (!meta || !meta.visible) {
    				continue;
    			}

    			el = meta.el;
    			view = el._view;
    			points = el._children || [];
    			mapper = meta.mapper;
    			color = view.backgroundColor || core_defaults.global.defaultColor;

    			if (mapper && color && points.length) {
    				helpers$1.canvas.clipArea(ctx, chart.chartArea);
    				doFill(ctx, points, mapper, view, color, el._loop);
    				helpers$1.canvas.unclipArea(ctx);
    			}
    		}
    	}
    };

    var getRtlHelper$1 = helpers$1.rtl.getRtlAdapter;
    var noop$1 = helpers$1.noop;
    var valueOrDefault$e = helpers$1.valueOrDefault;

    core_defaults._set('global', {
    	legend: {
    		display: true,
    		position: 'top',
    		align: 'center',
    		fullWidth: true,
    		reverse: false,
    		weight: 1000,

    		// a callback that will handle
    		onClick: function(e, legendItem) {
    			var index = legendItem.datasetIndex;
    			var ci = this.chart;
    			var meta = ci.getDatasetMeta(index);

    			// See controller.isDatasetVisible comment
    			meta.hidden = meta.hidden === null ? !ci.data.datasets[index].hidden : null;

    			// We hid a dataset ... rerender the chart
    			ci.update();
    		},

    		onHover: null,
    		onLeave: null,

    		labels: {
    			boxWidth: 40,
    			padding: 10,
    			// Generates labels shown in the legend
    			// Valid properties to return:
    			// text : text to display
    			// fillStyle : fill of coloured box
    			// strokeStyle: stroke of coloured box
    			// hidden : if this legend item refers to a hidden item
    			// lineCap : cap style for line
    			// lineDash
    			// lineDashOffset :
    			// lineJoin :
    			// lineWidth :
    			generateLabels: function(chart) {
    				var datasets = chart.data.datasets;
    				var options = chart.options.legend || {};
    				var usePointStyle = options.labels && options.labels.usePointStyle;

    				return chart._getSortedDatasetMetas().map(function(meta) {
    					var style = meta.controller.getStyle(usePointStyle ? 0 : undefined);

    					return {
    						text: datasets[meta.index].label,
    						fillStyle: style.backgroundColor,
    						hidden: !chart.isDatasetVisible(meta.index),
    						lineCap: style.borderCapStyle,
    						lineDash: style.borderDash,
    						lineDashOffset: style.borderDashOffset,
    						lineJoin: style.borderJoinStyle,
    						lineWidth: style.borderWidth,
    						strokeStyle: style.borderColor,
    						pointStyle: style.pointStyle,
    						rotation: style.rotation,

    						// Below is extra data used for toggling the datasets
    						datasetIndex: meta.index
    					};
    				}, this);
    			}
    		}
    	},

    	legendCallback: function(chart) {
    		var list = document.createElement('ul');
    		var datasets = chart.data.datasets;
    		var i, ilen, listItem, listItemSpan;

    		list.setAttribute('class', chart.id + '-legend');

    		for (i = 0, ilen = datasets.length; i < ilen; i++) {
    			listItem = list.appendChild(document.createElement('li'));
    			listItemSpan = listItem.appendChild(document.createElement('span'));
    			listItemSpan.style.backgroundColor = datasets[i].backgroundColor;
    			if (datasets[i].label) {
    				listItem.appendChild(document.createTextNode(datasets[i].label));
    			}
    		}

    		return list.outerHTML;
    	}
    });

    /**
     * Helper function to get the box width based on the usePointStyle option
     * @param {object} labelopts - the label options on the legend
     * @param {number} fontSize - the label font size
     * @return {number} width of the color box area
     */
    function getBoxWidth(labelOpts, fontSize) {
    	return labelOpts.usePointStyle && labelOpts.boxWidth > fontSize ?
    		fontSize :
    		labelOpts.boxWidth;
    }

    /**
     * IMPORTANT: this class is exposed publicly as Chart.Legend, backward compatibility required!
     */
    var Legend = core_element.extend({

    	initialize: function(config) {
    		var me = this;
    		helpers$1.extend(me, config);

    		// Contains hit boxes for each dataset (in dataset order)
    		me.legendHitBoxes = [];

    		/**
     		 * @private
     		 */
    		me._hoveredItem = null;

    		// Are we in doughnut mode which has a different data type
    		me.doughnutMode = false;
    	},

    	// These methods are ordered by lifecycle. Utilities then follow.
    	// Any function defined here is inherited by all legend types.
    	// Any function can be extended by the legend type

    	beforeUpdate: noop$1,
    	update: function(maxWidth, maxHeight, margins) {
    		var me = this;

    		// Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)
    		me.beforeUpdate();

    		// Absorb the master measurements
    		me.maxWidth = maxWidth;
    		me.maxHeight = maxHeight;
    		me.margins = margins;

    		// Dimensions
    		me.beforeSetDimensions();
    		me.setDimensions();
    		me.afterSetDimensions();
    		// Labels
    		me.beforeBuildLabels();
    		me.buildLabels();
    		me.afterBuildLabels();

    		// Fit
    		me.beforeFit();
    		me.fit();
    		me.afterFit();
    		//
    		me.afterUpdate();

    		return me.minSize;
    	},
    	afterUpdate: noop$1,

    	//

    	beforeSetDimensions: noop$1,
    	setDimensions: function() {
    		var me = this;
    		// Set the unconstrained dimension before label rotation
    		if (me.isHorizontal()) {
    			// Reset position before calculating rotation
    			me.width = me.maxWidth;
    			me.left = 0;
    			me.right = me.width;
    		} else {
    			me.height = me.maxHeight;

    			// Reset position before calculating rotation
    			me.top = 0;
    			me.bottom = me.height;
    		}

    		// Reset padding
    		me.paddingLeft = 0;
    		me.paddingTop = 0;
    		me.paddingRight = 0;
    		me.paddingBottom = 0;

    		// Reset minSize
    		me.minSize = {
    			width: 0,
    			height: 0
    		};
    	},
    	afterSetDimensions: noop$1,

    	//

    	beforeBuildLabels: noop$1,
    	buildLabels: function() {
    		var me = this;
    		var labelOpts = me.options.labels || {};
    		var legendItems = helpers$1.callback(labelOpts.generateLabels, [me.chart], me) || [];

    		if (labelOpts.filter) {
    			legendItems = legendItems.filter(function(item) {
    				return labelOpts.filter(item, me.chart.data);
    			});
    		}

    		if (me.options.reverse) {
    			legendItems.reverse();
    		}

    		me.legendItems = legendItems;
    	},
    	afterBuildLabels: noop$1,

    	//

    	beforeFit: noop$1,
    	fit: function() {
    		var me = this;
    		var opts = me.options;
    		var labelOpts = opts.labels;
    		var display = opts.display;

    		var ctx = me.ctx;

    		var labelFont = helpers$1.options._parseFont(labelOpts);
    		var fontSize = labelFont.size;

    		// Reset hit boxes
    		var hitboxes = me.legendHitBoxes = [];

    		var minSize = me.minSize;
    		var isHorizontal = me.isHorizontal();

    		if (isHorizontal) {
    			minSize.width = me.maxWidth; // fill all the width
    			minSize.height = display ? 10 : 0;
    		} else {
    			minSize.width = display ? 10 : 0;
    			minSize.height = me.maxHeight; // fill all the height
    		}

    		// Increase sizes here
    		if (!display) {
    			me.width = minSize.width = me.height = minSize.height = 0;
    			return;
    		}
    		ctx.font = labelFont.string;

    		if (isHorizontal) {
    			// Labels

    			// Width of each line of legend boxes. Labels wrap onto multiple lines when there are too many to fit on one
    			var lineWidths = me.lineWidths = [0];
    			var totalHeight = 0;

    			ctx.textAlign = 'left';
    			ctx.textBaseline = 'middle';

    			helpers$1.each(me.legendItems, function(legendItem, i) {
    				var boxWidth = getBoxWidth(labelOpts, fontSize);
    				var width = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;

    				if (i === 0 || lineWidths[lineWidths.length - 1] + width + 2 * labelOpts.padding > minSize.width) {
    					totalHeight += fontSize + labelOpts.padding;
    					lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;
    				}

    				// Store the hitbox width and height here. Final position will be updated in `draw`
    				hitboxes[i] = {
    					left: 0,
    					top: 0,
    					width: width,
    					height: fontSize
    				};

    				lineWidths[lineWidths.length - 1] += width + labelOpts.padding;
    			});

    			minSize.height += totalHeight;

    		} else {
    			var vPadding = labelOpts.padding;
    			var columnWidths = me.columnWidths = [];
    			var columnHeights = me.columnHeights = [];
    			var totalWidth = labelOpts.padding;
    			var currentColWidth = 0;
    			var currentColHeight = 0;

    			helpers$1.each(me.legendItems, function(legendItem, i) {
    				var boxWidth = getBoxWidth(labelOpts, fontSize);
    				var itemWidth = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;

    				// If too tall, go to new column
    				if (i > 0 && currentColHeight + fontSize + 2 * vPadding > minSize.height) {
    					totalWidth += currentColWidth + labelOpts.padding;
    					columnWidths.push(currentColWidth); // previous column width
    					columnHeights.push(currentColHeight);
    					currentColWidth = 0;
    					currentColHeight = 0;
    				}

    				// Get max width
    				currentColWidth = Math.max(currentColWidth, itemWidth);
    				currentColHeight += fontSize + vPadding;

    				// Store the hitbox width and height here. Final position will be updated in `draw`
    				hitboxes[i] = {
    					left: 0,
    					top: 0,
    					width: itemWidth,
    					height: fontSize
    				};
    			});

    			totalWidth += currentColWidth;
    			columnWidths.push(currentColWidth);
    			columnHeights.push(currentColHeight);
    			minSize.width += totalWidth;
    		}

    		me.width = minSize.width;
    		me.height = minSize.height;
    	},
    	afterFit: noop$1,

    	// Shared Methods
    	isHorizontal: function() {
    		return this.options.position === 'top' || this.options.position === 'bottom';
    	},

    	// Actually draw the legend on the canvas
    	draw: function() {
    		var me = this;
    		var opts = me.options;
    		var labelOpts = opts.labels;
    		var globalDefaults = core_defaults.global;
    		var defaultColor = globalDefaults.defaultColor;
    		var lineDefault = globalDefaults.elements.line;
    		var legendHeight = me.height;
    		var columnHeights = me.columnHeights;
    		var legendWidth = me.width;
    		var lineWidths = me.lineWidths;

    		if (!opts.display) {
    			return;
    		}

    		var rtlHelper = getRtlHelper$1(opts.rtl, me.left, me.minSize.width);
    		var ctx = me.ctx;
    		var fontColor = valueOrDefault$e(labelOpts.fontColor, globalDefaults.defaultFontColor);
    		var labelFont = helpers$1.options._parseFont(labelOpts);
    		var fontSize = labelFont.size;
    		var cursor;

    		// Canvas setup
    		ctx.textAlign = rtlHelper.textAlign('left');
    		ctx.textBaseline = 'middle';
    		ctx.lineWidth = 0.5;
    		ctx.strokeStyle = fontColor; // for strikethrough effect
    		ctx.fillStyle = fontColor; // render in correct colour
    		ctx.font = labelFont.string;

    		var boxWidth = getBoxWidth(labelOpts, fontSize);
    		var hitboxes = me.legendHitBoxes;

    		// current position
    		var drawLegendBox = function(x, y, legendItem) {
    			if (isNaN(boxWidth) || boxWidth <= 0) {
    				return;
    			}

    			// Set the ctx for the box
    			ctx.save();

    			var lineWidth = valueOrDefault$e(legendItem.lineWidth, lineDefault.borderWidth);
    			ctx.fillStyle = valueOrDefault$e(legendItem.fillStyle, defaultColor);
    			ctx.lineCap = valueOrDefault$e(legendItem.lineCap, lineDefault.borderCapStyle);
    			ctx.lineDashOffset = valueOrDefault$e(legendItem.lineDashOffset, lineDefault.borderDashOffset);
    			ctx.lineJoin = valueOrDefault$e(legendItem.lineJoin, lineDefault.borderJoinStyle);
    			ctx.lineWidth = lineWidth;
    			ctx.strokeStyle = valueOrDefault$e(legendItem.strokeStyle, defaultColor);

    			if (ctx.setLineDash) {
    				// IE 9 and 10 do not support line dash
    				ctx.setLineDash(valueOrDefault$e(legendItem.lineDash, lineDefault.borderDash));
    			}

    			if (labelOpts && labelOpts.usePointStyle) {
    				// Recalculate x and y for drawPoint() because its expecting
    				// x and y to be center of figure (instead of top left)
    				var radius = boxWidth * Math.SQRT2 / 2;
    				var centerX = rtlHelper.xPlus(x, boxWidth / 2);
    				var centerY = y + fontSize / 2;

    				// Draw pointStyle as legend symbol
    				helpers$1.canvas.drawPoint(ctx, legendItem.pointStyle, radius, centerX, centerY, legendItem.rotation);
    			} else {
    				// Draw box as legend symbol
    				ctx.fillRect(rtlHelper.leftForLtr(x, boxWidth), y, boxWidth, fontSize);
    				if (lineWidth !== 0) {
    					ctx.strokeRect(rtlHelper.leftForLtr(x, boxWidth), y, boxWidth, fontSize);
    				}
    			}

    			ctx.restore();
    		};

    		var fillText = function(x, y, legendItem, textWidth) {
    			var halfFontSize = fontSize / 2;
    			var xLeft = rtlHelper.xPlus(x, boxWidth + halfFontSize);
    			var yMiddle = y + halfFontSize;

    			ctx.fillText(legendItem.text, xLeft, yMiddle);

    			if (legendItem.hidden) {
    				// Strikethrough the text if hidden
    				ctx.beginPath();
    				ctx.lineWidth = 2;
    				ctx.moveTo(xLeft, yMiddle);
    				ctx.lineTo(rtlHelper.xPlus(xLeft, textWidth), yMiddle);
    				ctx.stroke();
    			}
    		};

    		var alignmentOffset = function(dimension, blockSize) {
    			switch (opts.align) {
    			case 'start':
    				return labelOpts.padding;
    			case 'end':
    				return dimension - blockSize;
    			default: // center
    				return (dimension - blockSize + labelOpts.padding) / 2;
    			}
    		};

    		// Horizontal
    		var isHorizontal = me.isHorizontal();
    		if (isHorizontal) {
    			cursor = {
    				x: me.left + alignmentOffset(legendWidth, lineWidths[0]),
    				y: me.top + labelOpts.padding,
    				line: 0
    			};
    		} else {
    			cursor = {
    				x: me.left + labelOpts.padding,
    				y: me.top + alignmentOffset(legendHeight, columnHeights[0]),
    				line: 0
    			};
    		}

    		helpers$1.rtl.overrideTextDirection(me.ctx, opts.textDirection);

    		var itemHeight = fontSize + labelOpts.padding;
    		helpers$1.each(me.legendItems, function(legendItem, i) {
    			var textWidth = ctx.measureText(legendItem.text).width;
    			var width = boxWidth + (fontSize / 2) + textWidth;
    			var x = cursor.x;
    			var y = cursor.y;

    			rtlHelper.setWidth(me.minSize.width);

    			// Use (me.left + me.minSize.width) and (me.top + me.minSize.height)
    			// instead of me.right and me.bottom because me.width and me.height
    			// may have been changed since me.minSize was calculated
    			if (isHorizontal) {
    				if (i > 0 && x + width + labelOpts.padding > me.left + me.minSize.width) {
    					y = cursor.y += itemHeight;
    					cursor.line++;
    					x = cursor.x = me.left + alignmentOffset(legendWidth, lineWidths[cursor.line]);
    				}
    			} else if (i > 0 && y + itemHeight > me.top + me.minSize.height) {
    				x = cursor.x = x + me.columnWidths[cursor.line] + labelOpts.padding;
    				cursor.line++;
    				y = cursor.y = me.top + alignmentOffset(legendHeight, columnHeights[cursor.line]);
    			}

    			var realX = rtlHelper.x(x);

    			drawLegendBox(realX, y, legendItem);

    			hitboxes[i].left = rtlHelper.leftForLtr(realX, hitboxes[i].width);
    			hitboxes[i].top = y;

    			// Fill the actual label
    			fillText(realX, y, legendItem, textWidth);

    			if (isHorizontal) {
    				cursor.x += width + labelOpts.padding;
    			} else {
    				cursor.y += itemHeight;
    			}
    		});

    		helpers$1.rtl.restoreTextDirection(me.ctx, opts.textDirection);
    	},

    	/**
    	 * @private
    	 */
    	_getLegendItemAt: function(x, y) {
    		var me = this;
    		var i, hitBox, lh;

    		if (x >= me.left && x <= me.right && y >= me.top && y <= me.bottom) {
    			// See if we are touching one of the dataset boxes
    			lh = me.legendHitBoxes;
    			for (i = 0; i < lh.length; ++i) {
    				hitBox = lh[i];

    				if (x >= hitBox.left && x <= hitBox.left + hitBox.width && y >= hitBox.top && y <= hitBox.top + hitBox.height) {
    					// Touching an element
    					return me.legendItems[i];
    				}
    			}
    		}

    		return null;
    	},

    	/**
    	 * Handle an event
    	 * @private
    	 * @param {IEvent} event - The event to handle
    	 */
    	handleEvent: function(e) {
    		var me = this;
    		var opts = me.options;
    		var type = e.type === 'mouseup' ? 'click' : e.type;
    		var hoveredItem;

    		if (type === 'mousemove') {
    			if (!opts.onHover && !opts.onLeave) {
    				return;
    			}
    		} else if (type === 'click') {
    			if (!opts.onClick) {
    				return;
    			}
    		} else {
    			return;
    		}

    		// Chart event already has relative position in it
    		hoveredItem = me._getLegendItemAt(e.x, e.y);

    		if (type === 'click') {
    			if (hoveredItem && opts.onClick) {
    				// use e.native for backwards compatibility
    				opts.onClick.call(me, e.native, hoveredItem);
    			}
    		} else {
    			if (opts.onLeave && hoveredItem !== me._hoveredItem) {
    				if (me._hoveredItem) {
    					opts.onLeave.call(me, e.native, me._hoveredItem);
    				}
    				me._hoveredItem = hoveredItem;
    			}

    			if (opts.onHover && hoveredItem) {
    				// use e.native for backwards compatibility
    				opts.onHover.call(me, e.native, hoveredItem);
    			}
    		}
    	}
    });

    function createNewLegendAndAttach(chart, legendOpts) {
    	var legend = new Legend({
    		ctx: chart.ctx,
    		options: legendOpts,
    		chart: chart
    	});

    	core_layouts.configure(chart, legend, legendOpts);
    	core_layouts.addBox(chart, legend);
    	chart.legend = legend;
    }

    var plugin_legend = {
    	id: 'legend',

    	/**
    	 * Backward compatibility: since 2.1.5, the legend is registered as a plugin, making
    	 * Chart.Legend obsolete. To avoid a breaking change, we export the Legend as part of
    	 * the plugin, which one will be re-exposed in the chart.js file.
    	 * https://github.com/chartjs/Chart.js/pull/2640
    	 * @private
    	 */
    	_element: Legend,

    	beforeInit: function(chart) {
    		var legendOpts = chart.options.legend;

    		if (legendOpts) {
    			createNewLegendAndAttach(chart, legendOpts);
    		}
    	},

    	beforeUpdate: function(chart) {
    		var legendOpts = chart.options.legend;
    		var legend = chart.legend;

    		if (legendOpts) {
    			helpers$1.mergeIf(legendOpts, core_defaults.global.legend);

    			if (legend) {
    				core_layouts.configure(chart, legend, legendOpts);
    				legend.options = legendOpts;
    			} else {
    				createNewLegendAndAttach(chart, legendOpts);
    			}
    		} else if (legend) {
    			core_layouts.removeBox(chart, legend);
    			delete chart.legend;
    		}
    	},

    	afterEvent: function(chart, e) {
    		var legend = chart.legend;
    		if (legend) {
    			legend.handleEvent(e);
    		}
    	}
    };

    var noop$2 = helpers$1.noop;

    core_defaults._set('global', {
    	title: {
    		display: false,
    		fontStyle: 'bold',
    		fullWidth: true,
    		padding: 10,
    		position: 'top',
    		text: '',
    		weight: 2000         // by default greater than legend (1000) to be above
    	}
    });

    /**
     * IMPORTANT: this class is exposed publicly as Chart.Legend, backward compatibility required!
     */
    var Title = core_element.extend({
    	initialize: function(config) {
    		var me = this;
    		helpers$1.extend(me, config);

    		// Contains hit boxes for each dataset (in dataset order)
    		me.legendHitBoxes = [];
    	},

    	// These methods are ordered by lifecycle. Utilities then follow.

    	beforeUpdate: noop$2,
    	update: function(maxWidth, maxHeight, margins) {
    		var me = this;

    		// Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)
    		me.beforeUpdate();

    		// Absorb the master measurements
    		me.maxWidth = maxWidth;
    		me.maxHeight = maxHeight;
    		me.margins = margins;

    		// Dimensions
    		me.beforeSetDimensions();
    		me.setDimensions();
    		me.afterSetDimensions();
    		// Labels
    		me.beforeBuildLabels();
    		me.buildLabels();
    		me.afterBuildLabels();

    		// Fit
    		me.beforeFit();
    		me.fit();
    		me.afterFit();
    		//
    		me.afterUpdate();

    		return me.minSize;

    	},
    	afterUpdate: noop$2,

    	//

    	beforeSetDimensions: noop$2,
    	setDimensions: function() {
    		var me = this;
    		// Set the unconstrained dimension before label rotation
    		if (me.isHorizontal()) {
    			// Reset position before calculating rotation
    			me.width = me.maxWidth;
    			me.left = 0;
    			me.right = me.width;
    		} else {
    			me.height = me.maxHeight;

    			// Reset position before calculating rotation
    			me.top = 0;
    			me.bottom = me.height;
    		}

    		// Reset padding
    		me.paddingLeft = 0;
    		me.paddingTop = 0;
    		me.paddingRight = 0;
    		me.paddingBottom = 0;

    		// Reset minSize
    		me.minSize = {
    			width: 0,
    			height: 0
    		};
    	},
    	afterSetDimensions: noop$2,

    	//

    	beforeBuildLabels: noop$2,
    	buildLabels: noop$2,
    	afterBuildLabels: noop$2,

    	//

    	beforeFit: noop$2,
    	fit: function() {
    		var me = this;
    		var opts = me.options;
    		var minSize = me.minSize = {};
    		var isHorizontal = me.isHorizontal();
    		var lineCount, textSize;

    		if (!opts.display) {
    			me.width = minSize.width = me.height = minSize.height = 0;
    			return;
    		}

    		lineCount = helpers$1.isArray(opts.text) ? opts.text.length : 1;
    		textSize = lineCount * helpers$1.options._parseFont(opts).lineHeight + opts.padding * 2;

    		me.width = minSize.width = isHorizontal ? me.maxWidth : textSize;
    		me.height = minSize.height = isHorizontal ? textSize : me.maxHeight;
    	},
    	afterFit: noop$2,

    	// Shared Methods
    	isHorizontal: function() {
    		var pos = this.options.position;
    		return pos === 'top' || pos === 'bottom';
    	},

    	// Actually draw the title block on the canvas
    	draw: function() {
    		var me = this;
    		var ctx = me.ctx;
    		var opts = me.options;

    		if (!opts.display) {
    			return;
    		}

    		var fontOpts = helpers$1.options._parseFont(opts);
    		var lineHeight = fontOpts.lineHeight;
    		var offset = lineHeight / 2 + opts.padding;
    		var rotation = 0;
    		var top = me.top;
    		var left = me.left;
    		var bottom = me.bottom;
    		var right = me.right;
    		var maxWidth, titleX, titleY;

    		ctx.fillStyle = helpers$1.valueOrDefault(opts.fontColor, core_defaults.global.defaultFontColor); // render in correct colour
    		ctx.font = fontOpts.string;

    		// Horizontal
    		if (me.isHorizontal()) {
    			titleX = left + ((right - left) / 2); // midpoint of the width
    			titleY = top + offset;
    			maxWidth = right - left;
    		} else {
    			titleX = opts.position === 'left' ? left + offset : right - offset;
    			titleY = top + ((bottom - top) / 2);
    			maxWidth = bottom - top;
    			rotation = Math.PI * (opts.position === 'left' ? -0.5 : 0.5);
    		}

    		ctx.save();
    		ctx.translate(titleX, titleY);
    		ctx.rotate(rotation);
    		ctx.textAlign = 'center';
    		ctx.textBaseline = 'middle';

    		var text = opts.text;
    		if (helpers$1.isArray(text)) {
    			var y = 0;
    			for (var i = 0; i < text.length; ++i) {
    				ctx.fillText(text[i], 0, y, maxWidth);
    				y += lineHeight;
    			}
    		} else {
    			ctx.fillText(text, 0, 0, maxWidth);
    		}

    		ctx.restore();
    	}
    });

    function createNewTitleBlockAndAttach(chart, titleOpts) {
    	var title = new Title({
    		ctx: chart.ctx,
    		options: titleOpts,
    		chart: chart
    	});

    	core_layouts.configure(chart, title, titleOpts);
    	core_layouts.addBox(chart, title);
    	chart.titleBlock = title;
    }

    var plugin_title = {
    	id: 'title',

    	/**
    	 * Backward compatibility: since 2.1.5, the title is registered as a plugin, making
    	 * Chart.Title obsolete. To avoid a breaking change, we export the Title as part of
    	 * the plugin, which one will be re-exposed in the chart.js file.
    	 * https://github.com/chartjs/Chart.js/pull/2640
    	 * @private
    	 */
    	_element: Title,

    	beforeInit: function(chart) {
    		var titleOpts = chart.options.title;

    		if (titleOpts) {
    			createNewTitleBlockAndAttach(chart, titleOpts);
    		}
    	},

    	beforeUpdate: function(chart) {
    		var titleOpts = chart.options.title;
    		var titleBlock = chart.titleBlock;

    		if (titleOpts) {
    			helpers$1.mergeIf(titleOpts, core_defaults.global.title);

    			if (titleBlock) {
    				core_layouts.configure(chart, titleBlock, titleOpts);
    				titleBlock.options = titleOpts;
    			} else {
    				createNewTitleBlockAndAttach(chart, titleOpts);
    			}
    		} else if (titleBlock) {
    			core_layouts.removeBox(chart, titleBlock);
    			delete chart.titleBlock;
    		}
    	}
    };

    var plugins = {};
    var filler = plugin_filler;
    var legend = plugin_legend;
    var title = plugin_title;
    plugins.filler = filler;
    plugins.legend = legend;
    plugins.title = title;

    /**
     * @namespace Chart
     */


    core_controller.helpers = helpers$1;

    // @todo dispatch these helpers into appropriated helpers/helpers.* file and write unit tests!
    core_helpers();

    core_controller._adapters = core_adapters;
    core_controller.Animation = core_animation;
    core_controller.animationService = core_animations;
    core_controller.controllers = controllers;
    core_controller.DatasetController = core_datasetController;
    core_controller.defaults = core_defaults;
    core_controller.Element = core_element;
    core_controller.elements = elements;
    core_controller.Interaction = core_interaction;
    core_controller.layouts = core_layouts;
    core_controller.platform = platform;
    core_controller.plugins = core_plugins;
    core_controller.Scale = core_scale;
    core_controller.scaleService = core_scaleService;
    core_controller.Ticks = core_ticks;
    core_controller.Tooltip = core_tooltip;

    // Register built-in scales

    core_controller.helpers.each(scales, function(scale, type) {
    	core_controller.scaleService.registerScaleType(type, scale, scale._defaults);
    });

    // Load to register built-in adapters (as side effects)


    // Loading built-in plugins

    for (var k in plugins) {
    	if (plugins.hasOwnProperty(k)) {
    		core_controller.plugins.register(plugins[k]);
    	}
    }

    core_controller.platform.initialize();

    var src = core_controller;
    if (typeof window !== 'undefined') {
    	window.Chart = core_controller;
    }

    // DEPRECATIONS

    /**
     * Provided for backward compatibility, not available anymore
     * @namespace Chart.Chart
     * @deprecated since version 2.8.0
     * @todo remove at version 3
     * @private
     */
    core_controller.Chart = core_controller;

    /**
     * Provided for backward compatibility, not available anymore
     * @namespace Chart.Legend
     * @deprecated since version 2.1.5
     * @todo remove at version 3
     * @private
     */
    core_controller.Legend = plugins.legend._element;

    /**
     * Provided for backward compatibility, not available anymore
     * @namespace Chart.Title
     * @deprecated since version 2.1.5
     * @todo remove at version 3
     * @private
     */
    core_controller.Title = plugins.title._element;

    /**
     * Provided for backward compatibility, use Chart.plugins instead
     * @namespace Chart.pluginService
     * @deprecated since version 2.1.5
     * @todo remove at version 3
     * @private
     */
    core_controller.pluginService = core_controller.plugins;

    /**
     * Provided for backward compatibility, inheriting from Chart.PlugingBase has no
     * effect, instead simply create/register plugins via plain JavaScript objects.
     * @interface Chart.PluginBase
     * @deprecated since version 2.5.0
     * @todo remove at version 3
     * @private
     */
    core_controller.PluginBase = core_controller.Element.extend({});

    /**
     * Provided for backward compatibility, use Chart.helpers.canvas instead.
     * @namespace Chart.canvasHelpers
     * @deprecated since version 2.6.0
     * @todo remove at version 3
     * @private
     */
    core_controller.canvasHelpers = core_controller.helpers.canvas;

    /**
     * Provided for backward compatibility, use Chart.layouts instead.
     * @namespace Chart.layoutService
     * @deprecated since version 2.7.3
     * @todo remove at version 3
     * @private
     */
    core_controller.layoutService = core_controller.layouts;

    /**
     * Provided for backward compatibility, not available anymore.
     * @namespace Chart.LinearScaleBase
     * @deprecated since version 2.8
     * @todo remove at version 3
     * @private
     */
    core_controller.LinearScaleBase = scale_linearbase;

    /**
     * Provided for backward compatibility, instead we should create a new Chart
     * by setting the type in the config (`new Chart(id, {type: '{chart-type}'}`).
     * @deprecated since version 2.8.0
     * @todo remove at version 3
     */
    core_controller.helpers.each(
    	[
    		'Bar',
    		'Bubble',
    		'Doughnut',
    		'Line',
    		'PolarArea',
    		'Radar',
    		'Scatter'
    	],
    	function(klass) {
    		core_controller[klass] = function(ctx, cfg) {
    			return new core_controller(ctx, core_controller.helpers.merge(cfg || {}, {
    				type: klass.charAt(0).toLowerCase() + klass.slice(1)
    			}));
    		};
    	}
    );

    return src;

    })));
    });

    /*!
     * @kurkle/color v0.3.2
     * https://github.com/kurkle/color#readme
     * (c) 2023 Jukka Kurkela
     * Released under the MIT License
     */
    function round(v) {
      return v + 0.5 | 0;
    }
    const lim = (v, l, h) => Math.max(Math.min(v, h), l);
    function p2b(v) {
      return lim(round(v * 2.55), 0, 255);
    }
    function n2b(v) {
      return lim(round(v * 255), 0, 255);
    }
    function b2n(v) {
      return lim(round(v / 2.55) / 100, 0, 1);
    }
    function n2p(v) {
      return lim(round(v * 100), 0, 100);
    }

    const map$1 = {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, A: 10, B: 11, C: 12, D: 13, E: 14, F: 15, a: 10, b: 11, c: 12, d: 13, e: 14, f: 15};
    const hex = [...'0123456789ABCDEF'];
    const h1 = b => hex[b & 0xF];
    const h2 = b => hex[(b & 0xF0) >> 4] + hex[b & 0xF];
    const eq = b => ((b & 0xF0) >> 4) === (b & 0xF);
    const isShort = v => eq(v.r) && eq(v.g) && eq(v.b) && eq(v.a);
    function hexParse(str) {
      var len = str.length;
      var ret;
      if (str[0] === '#') {
        if (len === 4 || len === 5) {
          ret = {
            r: 255 & map$1[str[1]] * 17,
            g: 255 & map$1[str[2]] * 17,
            b: 255 & map$1[str[3]] * 17,
            a: len === 5 ? map$1[str[4]] * 17 : 255
          };
        } else if (len === 7 || len === 9) {
          ret = {
            r: map$1[str[1]] << 4 | map$1[str[2]],
            g: map$1[str[3]] << 4 | map$1[str[4]],
            b: map$1[str[5]] << 4 | map$1[str[6]],
            a: len === 9 ? (map$1[str[7]] << 4 | map$1[str[8]]) : 255
          };
        }
      }
      return ret;
    }
    const alpha = (a, f) => a < 255 ? f(a) : '';
    function hexString(v) {
      var f = isShort(v) ? h1 : h2;
      return v
        ? '#' + f(v.r) + f(v.g) + f(v.b) + alpha(v.a, f)
        : undefined;
    }

    const HUE_RE = /^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;
    function hsl2rgbn(h, s, l) {
      const a = s * Math.min(l, 1 - l);
      const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
      return [f(0), f(8), f(4)];
    }
    function hsv2rgbn(h, s, v) {
      const f = (n, k = (n + h / 60) % 6) => v - v * s * Math.max(Math.min(k, 4 - k, 1), 0);
      return [f(5), f(3), f(1)];
    }
    function hwb2rgbn(h, w, b) {
      const rgb = hsl2rgbn(h, 1, 0.5);
      let i;
      if (w + b > 1) {
        i = 1 / (w + b);
        w *= i;
        b *= i;
      }
      for (i = 0; i < 3; i++) {
        rgb[i] *= 1 - w - b;
        rgb[i] += w;
      }
      return rgb;
    }
    function hueValue(r, g, b, d, max) {
      if (r === max) {
        return ((g - b) / d) + (g < b ? 6 : 0);
      }
      if (g === max) {
        return (b - r) / d + 2;
      }
      return (r - g) / d + 4;
    }
    function rgb2hsl(v) {
      const range = 255;
      const r = v.r / range;
      const g = v.g / range;
      const b = v.b / range;
      const max = Math.max(r, g, b);
      const min = Math.min(r, g, b);
      const l = (max + min) / 2;
      let h, s, d;
      if (max !== min) {
        d = max - min;
        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
        h = hueValue(r, g, b, d, max);
        h = h * 60 + 0.5;
      }
      return [h | 0, s || 0, l];
    }
    function calln(f, a, b, c) {
      return (
        Array.isArray(a)
          ? f(a[0], a[1], a[2])
          : f(a, b, c)
      ).map(n2b);
    }
    function hsl2rgb(h, s, l) {
      return calln(hsl2rgbn, h, s, l);
    }
    function hwb2rgb(h, w, b) {
      return calln(hwb2rgbn, h, w, b);
    }
    function hsv2rgb(h, s, v) {
      return calln(hsv2rgbn, h, s, v);
    }
    function hue(h) {
      return (h % 360 + 360) % 360;
    }
    function hueParse(str) {
      const m = HUE_RE.exec(str);
      let a = 255;
      let v;
      if (!m) {
        return;
      }
      if (m[5] !== v) {
        a = m[6] ? p2b(+m[5]) : n2b(+m[5]);
      }
      const h = hue(+m[2]);
      const p1 = +m[3] / 100;
      const p2 = +m[4] / 100;
      if (m[1] === 'hwb') {
        v = hwb2rgb(h, p1, p2);
      } else if (m[1] === 'hsv') {
        v = hsv2rgb(h, p1, p2);
      } else {
        v = hsl2rgb(h, p1, p2);
      }
      return {
        r: v[0],
        g: v[1],
        b: v[2],
        a: a
      };
    }
    function rotate(v, deg) {
      var h = rgb2hsl(v);
      h[0] = hue(h[0] + deg);
      h = hsl2rgb(h);
      v.r = h[0];
      v.g = h[1];
      v.b = h[2];
    }
    function hslString(v) {
      if (!v) {
        return;
      }
      const a = rgb2hsl(v);
      const h = a[0];
      const s = n2p(a[1]);
      const l = n2p(a[2]);
      return v.a < 255
        ? `hsla(${h}, ${s}%, ${l}%, ${b2n(v.a)})`
        : `hsl(${h}, ${s}%, ${l}%)`;
    }

    const map = {
      x: 'dark',
      Z: 'light',
      Y: 're',
      X: 'blu',
      W: 'gr',
      V: 'medium',
      U: 'slate',
      A: 'ee',
      T: 'ol',
      S: 'or',
      B: 'ra',
      C: 'lateg',
      D: 'ights',
      R: 'in',
      Q: 'turquois',
      E: 'hi',
      P: 'ro',
      O: 'al',
      N: 'le',
      M: 'de',
      L: 'yello',
      F: 'en',
      K: 'ch',
      G: 'arks',
      H: 'ea',
      I: 'ightg',
      J: 'wh'
    };
    const names$1 = {
      OiceXe: 'f0f8ff',
      antiquewEte: 'faebd7',
      aqua: 'ffff',
      aquamarRe: '7fffd4',
      azuY: 'f0ffff',
      beige: 'f5f5dc',
      bisque: 'ffe4c4',
      black: '0',
      blanKedOmond: 'ffebcd',
      Xe: 'ff',
      XeviTet: '8a2be2',
      bPwn: 'a52a2a',
      burlywood: 'deb887',
      caMtXe: '5f9ea0',
      KartYuse: '7fff00',
      KocTate: 'd2691e',
      cSO: 'ff7f50',
      cSnflowerXe: '6495ed',
      cSnsilk: 'fff8dc',
      crimson: 'dc143c',
      cyan: 'ffff',
      xXe: '8b',
      xcyan: '8b8b',
      xgTMnPd: 'b8860b',
      xWay: 'a9a9a9',
      xgYF: '6400',
      xgYy: 'a9a9a9',
      xkhaki: 'bdb76b',
      xmagFta: '8b008b',
      xTivegYF: '556b2f',
      xSange: 'ff8c00',
      xScEd: '9932cc',
      xYd: '8b0000',
      xsOmon: 'e9967a',
      xsHgYF: '8fbc8f',
      xUXe: '483d8b',
      xUWay: '2f4f4f',
      xUgYy: '2f4f4f',
      xQe: 'ced1',
      xviTet: '9400d3',
      dAppRk: 'ff1493',
      dApskyXe: 'bfff',
      dimWay: '696969',
      dimgYy: '696969',
      dodgerXe: '1e90ff',
      fiYbrick: 'b22222',
      flSOwEte: 'fffaf0',
      foYstWAn: '228b22',
      fuKsia: 'ff00ff',
      gaRsbSo: 'dcdcdc',
      ghostwEte: 'f8f8ff',
      gTd: 'ffd700',
      gTMnPd: 'daa520',
      Way: '808080',
      gYF: '8000',
      gYFLw: 'adff2f',
      gYy: '808080',
      honeyMw: 'f0fff0',
      hotpRk: 'ff69b4',
      RdianYd: 'cd5c5c',
      Rdigo: '4b0082',
      ivSy: 'fffff0',
      khaki: 'f0e68c',
      lavFMr: 'e6e6fa',
      lavFMrXsh: 'fff0f5',
      lawngYF: '7cfc00',
      NmoncEffon: 'fffacd',
      ZXe: 'add8e6',
      ZcSO: 'f08080',
      Zcyan: 'e0ffff',
      ZgTMnPdLw: 'fafad2',
      ZWay: 'd3d3d3',
      ZgYF: '90ee90',
      ZgYy: 'd3d3d3',
      ZpRk: 'ffb6c1',
      ZsOmon: 'ffa07a',
      ZsHgYF: '20b2aa',
      ZskyXe: '87cefa',
      ZUWay: '778899',
      ZUgYy: '778899',
      ZstAlXe: 'b0c4de',
      ZLw: 'ffffe0',
      lime: 'ff00',
      limegYF: '32cd32',
      lRF: 'faf0e6',
      magFta: 'ff00ff',
      maPon: '800000',
      VaquamarRe: '66cdaa',
      VXe: 'cd',
      VScEd: 'ba55d3',
      VpurpN: '9370db',
      VsHgYF: '3cb371',
      VUXe: '7b68ee',
      VsprRggYF: 'fa9a',
      VQe: '48d1cc',
      VviTetYd: 'c71585',
      midnightXe: '191970',
      mRtcYam: 'f5fffa',
      mistyPse: 'ffe4e1',
      moccasR: 'ffe4b5',
      navajowEte: 'ffdead',
      navy: '80',
      Tdlace: 'fdf5e6',
      Tive: '808000',
      TivedBb: '6b8e23',
      Sange: 'ffa500',
      SangeYd: 'ff4500',
      ScEd: 'da70d6',
      pOegTMnPd: 'eee8aa',
      pOegYF: '98fb98',
      pOeQe: 'afeeee',
      pOeviTetYd: 'db7093',
      papayawEp: 'ffefd5',
      pHKpuff: 'ffdab9',
      peru: 'cd853f',
      pRk: 'ffc0cb',
      plum: 'dda0dd',
      powMrXe: 'b0e0e6',
      purpN: '800080',
      YbeccapurpN: '663399',
      Yd: 'ff0000',
      Psybrown: 'bc8f8f',
      PyOXe: '4169e1',
      saddNbPwn: '8b4513',
      sOmon: 'fa8072',
      sandybPwn: 'f4a460',
      sHgYF: '2e8b57',
      sHshell: 'fff5ee',
      siFna: 'a0522d',
      silver: 'c0c0c0',
      skyXe: '87ceeb',
      UXe: '6a5acd',
      UWay: '708090',
      UgYy: '708090',
      snow: 'fffafa',
      sprRggYF: 'ff7f',
      stAlXe: '4682b4',
      tan: 'd2b48c',
      teO: '8080',
      tEstN: 'd8bfd8',
      tomato: 'ff6347',
      Qe: '40e0d0',
      viTet: 'ee82ee',
      JHt: 'f5deb3',
      wEte: 'ffffff',
      wEtesmoke: 'f5f5f5',
      Lw: 'ffff00',
      LwgYF: '9acd32'
    };
    function unpack() {
      const unpacked = {};
      const keys = Object.keys(names$1);
      const tkeys = Object.keys(map);
      let i, j, k, ok, nk;
      for (i = 0; i < keys.length; i++) {
        ok = nk = keys[i];
        for (j = 0; j < tkeys.length; j++) {
          k = tkeys[j];
          nk = nk.replace(k, map[k]);
        }
        k = parseInt(names$1[ok], 16);
        unpacked[nk] = [k >> 16 & 0xFF, k >> 8 & 0xFF, k & 0xFF];
      }
      return unpacked;
    }

    let names;
    function nameParse(str) {
      if (!names) {
        names = unpack();
        names.transparent = [0, 0, 0, 0];
      }
      const a = names[str.toLowerCase()];
      return a && {
        r: a[0],
        g: a[1],
        b: a[2],
        a: a.length === 4 ? a[3] : 255
      };
    }

    const RGB_RE = /^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/;
    function rgbParse(str) {
      const m = RGB_RE.exec(str);
      let a = 255;
      let r, g, b;
      if (!m) {
        return;
      }
      if (m[7] !== r) {
        const v = +m[7];
        a = m[8] ? p2b(v) : lim(v * 255, 0, 255);
      }
      r = +m[1];
      g = +m[3];
      b = +m[5];
      r = 255 & (m[2] ? p2b(r) : lim(r, 0, 255));
      g = 255 & (m[4] ? p2b(g) : lim(g, 0, 255));
      b = 255 & (m[6] ? p2b(b) : lim(b, 0, 255));
      return {
        r: r,
        g: g,
        b: b,
        a: a
      };
    }
    function rgbString(v) {
      return v && (
        v.a < 255
          ? `rgba(${v.r}, ${v.g}, ${v.b}, ${b2n(v.a)})`
          : `rgb(${v.r}, ${v.g}, ${v.b})`
      );
    }

    const to = v => v <= 0.0031308 ? v * 12.92 : Math.pow(v, 1.0 / 2.4) * 1.055 - 0.055;
    const from = v => v <= 0.04045 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4);
    function interpolate(rgb1, rgb2, t) {
      const r = from(b2n(rgb1.r));
      const g = from(b2n(rgb1.g));
      const b = from(b2n(rgb1.b));
      return {
        r: n2b(to(r + t * (from(b2n(rgb2.r)) - r))),
        g: n2b(to(g + t * (from(b2n(rgb2.g)) - g))),
        b: n2b(to(b + t * (from(b2n(rgb2.b)) - b))),
        a: rgb1.a + t * (rgb2.a - rgb1.a)
      };
    }

    function modHSL(v, i, ratio) {
      if (v) {
        let tmp = rgb2hsl(v);
        tmp[i] = Math.max(0, Math.min(tmp[i] + tmp[i] * ratio, i === 0 ? 360 : 1));
        tmp = hsl2rgb(tmp);
        v.r = tmp[0];
        v.g = tmp[1];
        v.b = tmp[2];
      }
    }
    function clone$1(v, proto) {
      return v ? Object.assign(proto || {}, v) : v;
    }
    function fromObject(input) {
      var v = {r: 0, g: 0, b: 0, a: 255};
      if (Array.isArray(input)) {
        if (input.length >= 3) {
          v = {r: input[0], g: input[1], b: input[2], a: 255};
          if (input.length > 3) {
            v.a = n2b(input[3]);
          }
        }
      } else {
        v = clone$1(input, {r: 0, g: 0, b: 0, a: 1});
        v.a = n2b(v.a);
      }
      return v;
    }
    function functionParse(str) {
      if (str.charAt(0) === 'r') {
        return rgbParse(str);
      }
      return hueParse(str);
    }
    class Color {
      constructor(input) {
        if (input instanceof Color) {
          return input;
        }
        const type = typeof input;
        let v;
        if (type === 'object') {
          v = fromObject(input);
        } else if (type === 'string') {
          v = hexParse(input) || nameParse(input) || functionParse(input);
        }
        this._rgb = v;
        this._valid = !!v;
      }
      get valid() {
        return this._valid;
      }
      get rgb() {
        var v = clone$1(this._rgb);
        if (v) {
          v.a = b2n(v.a);
        }
        return v;
      }
      set rgb(obj) {
        this._rgb = fromObject(obj);
      }
      rgbString() {
        return this._valid ? rgbString(this._rgb) : undefined;
      }
      hexString() {
        return this._valid ? hexString(this._rgb) : undefined;
      }
      hslString() {
        return this._valid ? hslString(this._rgb) : undefined;
      }
      mix(color, weight) {
        if (color) {
          const c1 = this.rgb;
          const c2 = color.rgb;
          let w2;
          const p = weight === w2 ? 0.5 : weight;
          const w = 2 * p - 1;
          const a = c1.a - c2.a;
          const w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0;
          w2 = 1 - w1;
          c1.r = 0xFF & w1 * c1.r + w2 * c2.r + 0.5;
          c1.g = 0xFF & w1 * c1.g + w2 * c2.g + 0.5;
          c1.b = 0xFF & w1 * c1.b + w2 * c2.b + 0.5;
          c1.a = p * c1.a + (1 - p) * c2.a;
          this.rgb = c1;
        }
        return this;
      }
      interpolate(color, t) {
        if (color) {
          this._rgb = interpolate(this._rgb, color._rgb, t);
        }
        return this;
      }
      clone() {
        return new Color(this.rgb);
      }
      alpha(a) {
        this._rgb.a = n2b(a);
        return this;
      }
      clearer(ratio) {
        const rgb = this._rgb;
        rgb.a *= 1 - ratio;
        return this;
      }
      greyscale() {
        const rgb = this._rgb;
        const val = round(rgb.r * 0.3 + rgb.g * 0.59 + rgb.b * 0.11);
        rgb.r = rgb.g = rgb.b = val;
        return this;
      }
      opaquer(ratio) {
        const rgb = this._rgb;
        rgb.a *= 1 + ratio;
        return this;
      }
      negate() {
        const v = this._rgb;
        v.r = 255 - v.r;
        v.g = 255 - v.g;
        v.b = 255 - v.b;
        return this;
      }
      lighten(ratio) {
        modHSL(this._rgb, 2, ratio);
        return this;
      }
      darken(ratio) {
        modHSL(this._rgb, 2, -ratio);
        return this;
      }
      saturate(ratio) {
        modHSL(this._rgb, 1, ratio);
        return this;
      }
      desaturate(ratio) {
        modHSL(this._rgb, 1, -ratio);
        return this;
      }
      rotate(deg) {
        rotate(this._rgb, deg);
        return this;
      }
    }

    /*!
     * Chart.js v4.4.1
     * https://www.chartjs.org
     * (c) 2023 Chart.js Contributors
     * Released under the MIT License
     */
    /**
     * Returns true if `value` is neither null nor undefined, else returns false.
     * @param value - The value to test.
     * @since 2.7.0
     */ function isNullOrUndef(value) {
        return value === null || typeof value === 'undefined';
    }
    /**
     * Returns true if `value` is an array (including typed arrays), else returns false.
     * @param value - The value to test.
     * @function
     */ function isArray(value) {
        if (Array.isArray && Array.isArray(value)) {
            return true;
        }
        const type = Object.prototype.toString.call(value);
        if (type.slice(0, 7) === '[object' && type.slice(-6) === 'Array]') {
            return true;
        }
        return false;
    }
    /**
     * Returns true if `value` is an object (excluding null), else returns false.
     * @param value - The value to test.
     * @since 2.7.0
     */ function isObject(value) {
        return value !== null && Object.prototype.toString.call(value) === '[object Object]';
    }
    /**
     * Returns `value` if defined, else returns `defaultValue`.
     * @param value - The value to return if defined.
     * @param defaultValue - The value to return if `value` is undefined.
     */ function valueOrDefault(value, defaultValue) {
        return typeof value === 'undefined' ? defaultValue : value;
    }
    /**
     * Calls `fn` with the given `args` in the scope defined by `thisArg` and returns the
     * value returned by `fn`. If `fn` is not a function, this method returns undefined.
     * @param fn - The function to call.
     * @param args - The arguments with which `fn` should be called.
     * @param [thisArg] - The value of `this` provided for the call to `fn`.
     */ function callback(fn, args, thisArg) {
        if (fn && typeof fn.call === 'function') {
            return fn.apply(thisArg, args);
        }
    }
    /**
     * Returns a deep copy of `source` without keeping references on objects and arrays.
     * @param source - The value to clone.
     */ function clone(source) {
        if (isArray(source)) {
            return source.map(clone);
        }
        if (isObject(source)) {
            const target = Object.create(null);
            const keys = Object.keys(source);
            const klen = keys.length;
            let k = 0;
            for(; k < klen; ++k){
                target[keys[k]] = clone(source[keys[k]]);
            }
            return target;
        }
        return source;
    }
    function isValidKey(key) {
        return [
            '__proto__',
            'prototype',
            'constructor'
        ].indexOf(key) === -1;
    }
    /**
     * The default merger when Chart.helpers.merge is called without merger option.
     * Note(SB): also used by mergeConfig and mergeScaleConfig as fallback.
     * @private
     */ function _merger(key, target, source, options) {
        if (!isValidKey(key)) {
            return;
        }
        const tval = target[key];
        const sval = source[key];
        if (isObject(tval) && isObject(sval)) {
            // eslint-disable-next-line @typescript-eslint/no-use-before-define
            merge(tval, sval, options);
        } else {
            target[key] = clone(sval);
        }
    }
    function merge(target, source, options) {
        const sources = isArray(source) ? source : [
            source
        ];
        const ilen = sources.length;
        if (!isObject(target)) {
            return target;
        }
        options = options || {};
        const merger = options.merger || _merger;
        let current;
        for(let i = 0; i < ilen; ++i){
            current = sources[i];
            if (!isObject(current)) {
                continue;
            }
            const keys = Object.keys(current);
            for(let k = 0, klen = keys.length; k < klen; ++k){
                merger(keys[k], target, current, options);
            }
        }
        return target;
    }

    /**
     * @alias Chart.helpers.math
     * @namespace
     */ const PI = Math.PI;
    const TAU = 2 * PI;
    const RAD_PER_DEG = PI / 180;
    const HALF_PI = PI / 2;
    const QUARTER_PI = PI / 4;
    const TWO_THIRDS_PI = PI * 2 / 3;
    const log10 = Math.log10;
    function isNumber(n) {
        return !isNaN(parseFloat(n)) && isFinite(n);
    }
    // Gets the angle from vertical upright to the point about a centre.
    function getAngleFromPoint(centrePoint, anglePoint) {
        const distanceFromXCenter = anglePoint.x - centrePoint.x;
        const distanceFromYCenter = anglePoint.y - centrePoint.y;
        const radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);
        let angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);
        if (angle < -0.5 * PI) {
            angle += TAU; // make sure the returned angle is in the range of (-PI/2, 3PI/2]
        }
        return {
            angle,
            distance: radialDistanceFromCenter
        };
    }
    /**
     * Normalize angle to be between 0 and 2*PI
     * @private
     */ function _normalizeAngle(a) {
        return (a % TAU + TAU) % TAU;
    }
    /**
     * @private
     */ function _angleBetween(angle, start, end, sameAngleIsFullCircle) {
        const a = _normalizeAngle(angle);
        const s = _normalizeAngle(start);
        const e = _normalizeAngle(end);
        const angleToStart = _normalizeAngle(s - a);
        const angleToEnd = _normalizeAngle(e - a);
        const startToAngle = _normalizeAngle(a - s);
        const endToAngle = _normalizeAngle(a - e);
        return a === s || a === e || sameAngleIsFullCircle && s === e || angleToStart > angleToEnd && startToAngle < endToAngle;
    }
    /**
     * Limit `value` between `min` and `max`
     * @param value
     * @param min
     * @param max
     * @private
     */ function _limitValue(value, min, max) {
        return Math.max(min, Math.min(max, value));
    }
    /**
     * @param value
     * @param start
     * @param end
     * @param [epsilon]
     * @private
     */ function _isBetween(value, start, end, epsilon = 1e-6) {
        return value >= Math.min(start, end) - epsilon && value <= Math.max(start, end) + epsilon;
    }

    function isPatternOrGradient(value) {
        if (value && typeof value === 'object') {
            const type = value.toString();
            return type === '[object CanvasPattern]' || type === '[object CanvasGradient]';
        }
        return false;
    }
    function getHoverColor(value) {
        return isPatternOrGradient(value) ? value : new Color(value).saturate(0.5).darken(0.1).hexString();
    }

    const numbers = [
        'x',
        'y',
        'borderWidth',
        'radius',
        'tension'
    ];
    const colors = [
        'color',
        'borderColor',
        'backgroundColor'
    ];
    function applyAnimationsDefaults(defaults) {
        defaults.set('animation', {
            delay: undefined,
            duration: 1000,
            easing: 'easeOutQuart',
            fn: undefined,
            from: undefined,
            loop: undefined,
            to: undefined,
            type: undefined
        });
        defaults.describe('animation', {
            _fallback: false,
            _indexable: false,
            _scriptable: (name)=>name !== 'onProgress' && name !== 'onComplete' && name !== 'fn'
        });
        defaults.set('animations', {
            colors: {
                type: 'color',
                properties: colors
            },
            numbers: {
                type: 'number',
                properties: numbers
            }
        });
        defaults.describe('animations', {
            _fallback: 'animation'
        });
        defaults.set('transitions', {
            active: {
                animation: {
                    duration: 400
                }
            },
            resize: {
                animation: {
                    duration: 0
                }
            },
            show: {
                animations: {
                    colors: {
                        from: 'transparent'
                    },
                    visible: {
                        type: 'boolean',
                        duration: 0
                    }
                }
            },
            hide: {
                animations: {
                    colors: {
                        to: 'transparent'
                    },
                    visible: {
                        type: 'boolean',
                        easing: 'linear',
                        fn: (v)=>v | 0
                    }
                }
            }
        });
    }

    function applyLayoutsDefaults(defaults) {
        defaults.set('layout', {
            autoPadding: true,
            padding: {
                top: 0,
                right: 0,
                bottom: 0,
                left: 0
            }
        });
    }

    const intlCache = new Map();
    function getNumberFormat(locale, options) {
        options = options || {};
        const cacheKey = locale + JSON.stringify(options);
        let formatter = intlCache.get(cacheKey);
        if (!formatter) {
            formatter = new Intl.NumberFormat(locale, options);
            intlCache.set(cacheKey, formatter);
        }
        return formatter;
    }
    function formatNumber(num, locale, options) {
        return getNumberFormat(locale, options).format(num);
    }

    const formatters = {
     values (value) {
            return isArray(value) ?  value : '' + value;
        },
     numeric (tickValue, index, ticks) {
            if (tickValue === 0) {
                return '0';
            }
            const locale = this.chart.options.locale;
            let notation;
            let delta = tickValue;
            if (ticks.length > 1) {
                const maxTick = Math.max(Math.abs(ticks[0].value), Math.abs(ticks[ticks.length - 1].value));
                if (maxTick < 1e-4 || maxTick > 1e+15) {
                    notation = 'scientific';
                }
                delta = calculateDelta(tickValue, ticks);
            }
            const logDelta = log10(Math.abs(delta));
            const numDecimal = isNaN(logDelta) ? 1 : Math.max(Math.min(-1 * Math.floor(logDelta), 20), 0);
            const options = {
                notation,
                minimumFractionDigits: numDecimal,
                maximumFractionDigits: numDecimal
            };
            Object.assign(options, this.options.ticks.format);
            return formatNumber(tickValue, locale, options);
        },
     logarithmic (tickValue, index, ticks) {
            if (tickValue === 0) {
                return '0';
            }
            const remain = ticks[index].significand || tickValue / Math.pow(10, Math.floor(log10(tickValue)));
            if ([
                1,
                2,
                3,
                5,
                10,
                15
            ].includes(remain) || index > 0.8 * ticks.length) {
                return formatters.numeric.call(this, tickValue, index, ticks);
            }
            return '';
        }
    };
    function calculateDelta(tickValue, ticks) {
        let delta = ticks.length > 3 ? ticks[2].value - ticks[1].value : ticks[1].value - ticks[0].value;
        if (Math.abs(delta) >= 1 && tickValue !== Math.floor(tickValue)) {
            delta = tickValue - Math.floor(tickValue);
        }
        return delta;
    }
     var Ticks = {
        formatters
    };

    function applyScaleDefaults(defaults) {
        defaults.set('scale', {
            display: true,
            offset: false,
            reverse: false,
            beginAtZero: false,
     bounds: 'ticks',
            clip: true,
     grace: 0,
            grid: {
                display: true,
                lineWidth: 1,
                drawOnChartArea: true,
                drawTicks: true,
                tickLength: 8,
                tickWidth: (_ctx, options)=>options.lineWidth,
                tickColor: (_ctx, options)=>options.color,
                offset: false
            },
            border: {
                display: true,
                dash: [],
                dashOffset: 0.0,
                width: 1
            },
            title: {
                display: false,
                text: '',
                padding: {
                    top: 4,
                    bottom: 4
                }
            },
            ticks: {
                minRotation: 0,
                maxRotation: 50,
                mirror: false,
                textStrokeWidth: 0,
                textStrokeColor: '',
                padding: 3,
                display: true,
                autoSkip: true,
                autoSkipPadding: 3,
                labelOffset: 0,
                callback: Ticks.formatters.values,
                minor: {},
                major: {},
                align: 'center',
                crossAlign: 'near',
                showLabelBackdrop: false,
                backdropColor: 'rgba(255, 255, 255, 0.75)',
                backdropPadding: 2
            }
        });
        defaults.route('scale.ticks', 'color', '', 'color');
        defaults.route('scale.grid', 'color', '', 'borderColor');
        defaults.route('scale.border', 'color', '', 'borderColor');
        defaults.route('scale.title', 'color', '', 'color');
        defaults.describe('scale', {
            _fallback: false,
            _scriptable: (name)=>!name.startsWith('before') && !name.startsWith('after') && name !== 'callback' && name !== 'parser',
            _indexable: (name)=>name !== 'borderDash' && name !== 'tickBorderDash' && name !== 'dash'
        });
        defaults.describe('scales', {
            _fallback: 'scale'
        });
        defaults.describe('scale.ticks', {
            _scriptable: (name)=>name !== 'backdropPadding' && name !== 'callback',
            _indexable: (name)=>name !== 'backdropPadding'
        });
    }

    const overrides = Object.create(null);
    const descriptors = Object.create(null);
     function getScope$1(node, key) {
        if (!key) {
            return node;
        }
        const keys = key.split('.');
        for(let i = 0, n = keys.length; i < n; ++i){
            const k = keys[i];
            node = node[k] || (node[k] = Object.create(null));
        }
        return node;
    }
    function set(root, scope, values) {
        if (typeof scope === 'string') {
            return merge(getScope$1(root, scope), values);
        }
        return merge(getScope$1(root, ''), scope);
    }
     class Defaults {
        constructor(_descriptors, _appliers){
            this.animation = undefined;
            this.backgroundColor = 'rgba(0,0,0,0.1)';
            this.borderColor = 'rgba(0,0,0,0.1)';
            this.color = '#666';
            this.datasets = {};
            this.devicePixelRatio = (context)=>context.chart.platform.getDevicePixelRatio();
            this.elements = {};
            this.events = [
                'mousemove',
                'mouseout',
                'click',
                'touchstart',
                'touchmove'
            ];
            this.font = {
                family: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
                size: 12,
                style: 'normal',
                lineHeight: 1.2,
                weight: null
            };
            this.hover = {};
            this.hoverBackgroundColor = (ctx, options)=>getHoverColor(options.backgroundColor);
            this.hoverBorderColor = (ctx, options)=>getHoverColor(options.borderColor);
            this.hoverColor = (ctx, options)=>getHoverColor(options.color);
            this.indexAxis = 'x';
            this.interaction = {
                mode: 'nearest',
                intersect: true,
                includeInvisible: false
            };
            this.maintainAspectRatio = true;
            this.onHover = null;
            this.onClick = null;
            this.parsing = true;
            this.plugins = {};
            this.responsive = true;
            this.scale = undefined;
            this.scales = {};
            this.showLine = true;
            this.drawActiveElementsOnTop = true;
            this.describe(_descriptors);
            this.apply(_appliers);
        }
     set(scope, values) {
            return set(this, scope, values);
        }
     get(scope) {
            return getScope$1(this, scope);
        }
     describe(scope, values) {
            return set(descriptors, scope, values);
        }
        override(scope, values) {
            return set(overrides, scope, values);
        }
     route(scope, name, targetScope, targetName) {
            const scopeObject = getScope$1(this, scope);
            const targetScopeObject = getScope$1(this, targetScope);
            const privateName = '_' + name;
            Object.defineProperties(scopeObject, {
                [privateName]: {
                    value: scopeObject[name],
                    writable: true
                },
                [name]: {
                    enumerable: true,
                    get () {
                        const local = this[privateName];
                        const target = targetScopeObject[targetName];
                        if (isObject(local)) {
                            return Object.assign({}, target, local);
                        }
                        return valueOrDefault(local, target);
                    },
                    set (value) {
                        this[privateName] = value;
                    }
                }
            });
        }
        apply(appliers) {
            appliers.forEach((apply)=>apply(this));
        }
    }
    var defaults = /* #__PURE__ */ new Defaults({
        _scriptable: (name)=>!name.startsWith('on'),
        _indexable: (name)=>name !== 'events',
        hover: {
            _fallback: 'interaction'
        },
        interaction: {
            _scriptable: false,
            _indexable: false
        }
    }, [
        applyAnimationsDefaults,
        applyLayoutsDefaults,
        applyScaleDefaults
    ]);

    /**
     * Converts the given font object into a CSS font string.
     * @param font - A font object.
     * @return The CSS font string. See https://developer.mozilla.org/en-US/docs/Web/CSS/font
     * @private
     */ function toFontString(font) {
        if (!font || isNullOrUndef(font.size) || isNullOrUndef(font.family)) {
            return null;
        }
        return (font.style ? font.style + ' ' : '') + (font.weight ? font.weight + ' ' : '') + font.size + 'px ' + font.family;
    }
    function drawPoint(ctx, options, x, y) {
        // eslint-disable-next-line @typescript-eslint/no-use-before-define
        drawPointLegend(ctx, options, x, y, null);
    }
    // eslint-disable-next-line complexity
    function drawPointLegend(ctx, options, x, y, w) {
        let type, xOffset, yOffset, size, cornerRadius, width, xOffsetW, yOffsetW;
        const style = options.pointStyle;
        const rotation = options.rotation;
        const radius = options.radius;
        let rad = (rotation || 0) * RAD_PER_DEG;
        if (style && typeof style === 'object') {
            type = style.toString();
            if (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {
                ctx.save();
                ctx.translate(x, y);
                ctx.rotate(rad);
                ctx.drawImage(style, -style.width / 2, -style.height / 2, style.width, style.height);
                ctx.restore();
                return;
            }
        }
        if (isNaN(radius) || radius <= 0) {
            return;
        }
        ctx.beginPath();
        switch(style){
            // Default includes circle
            default:
                if (w) {
                    ctx.ellipse(x, y, w / 2, radius, 0, 0, TAU);
                } else {
                    ctx.arc(x, y, radius, 0, TAU);
                }
                ctx.closePath();
                break;
            case 'triangle':
                width = w ? w / 2 : radius;
                ctx.moveTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);
                rad += TWO_THIRDS_PI;
                ctx.lineTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);
                rad += TWO_THIRDS_PI;
                ctx.lineTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);
                ctx.closePath();
                break;
            case 'rectRounded':
                // NOTE: the rounded rect implementation changed to use `arc` instead of
                // `quadraticCurveTo` since it generates better results when rect is
                // almost a circle. 0.516 (instead of 0.5) produces results with visually
                // closer proportion to the previous impl and it is inscribed in the
                // circle with `radius`. For more details, see the following PRs:
                // https://github.com/chartjs/Chart.js/issues/5597
                // https://github.com/chartjs/Chart.js/issues/5858
                cornerRadius = radius * 0.516;
                size = radius - cornerRadius;
                xOffset = Math.cos(rad + QUARTER_PI) * size;
                xOffsetW = Math.cos(rad + QUARTER_PI) * (w ? w / 2 - cornerRadius : size);
                yOffset = Math.sin(rad + QUARTER_PI) * size;
                yOffsetW = Math.sin(rad + QUARTER_PI) * (w ? w / 2 - cornerRadius : size);
                ctx.arc(x - xOffsetW, y - yOffset, cornerRadius, rad - PI, rad - HALF_PI);
                ctx.arc(x + yOffsetW, y - xOffset, cornerRadius, rad - HALF_PI, rad);
                ctx.arc(x + xOffsetW, y + yOffset, cornerRadius, rad, rad + HALF_PI);
                ctx.arc(x - yOffsetW, y + xOffset, cornerRadius, rad + HALF_PI, rad + PI);
                ctx.closePath();
                break;
            case 'rect':
                if (!rotation) {
                    size = Math.SQRT1_2 * radius;
                    width = w ? w / 2 : size;
                    ctx.rect(x - width, y - size, 2 * width, 2 * size);
                    break;
                }
                rad += QUARTER_PI;
            /* falls through */ case 'rectRot':
                xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);
                xOffset = Math.cos(rad) * radius;
                yOffset = Math.sin(rad) * radius;
                yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);
                ctx.moveTo(x - xOffsetW, y - yOffset);
                ctx.lineTo(x + yOffsetW, y - xOffset);
                ctx.lineTo(x + xOffsetW, y + yOffset);
                ctx.lineTo(x - yOffsetW, y + xOffset);
                ctx.closePath();
                break;
            case 'crossRot':
                rad += QUARTER_PI;
            /* falls through */ case 'cross':
                xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);
                xOffset = Math.cos(rad) * radius;
                yOffset = Math.sin(rad) * radius;
                yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);
                ctx.moveTo(x - xOffsetW, y - yOffset);
                ctx.lineTo(x + xOffsetW, y + yOffset);
                ctx.moveTo(x + yOffsetW, y - xOffset);
                ctx.lineTo(x - yOffsetW, y + xOffset);
                break;
            case 'star':
                xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);
                xOffset = Math.cos(rad) * radius;
                yOffset = Math.sin(rad) * radius;
                yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);
                ctx.moveTo(x - xOffsetW, y - yOffset);
                ctx.lineTo(x + xOffsetW, y + yOffset);
                ctx.moveTo(x + yOffsetW, y - xOffset);
                ctx.lineTo(x - yOffsetW, y + xOffset);
                rad += QUARTER_PI;
                xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);
                xOffset = Math.cos(rad) * radius;
                yOffset = Math.sin(rad) * radius;
                yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);
                ctx.moveTo(x - xOffsetW, y - yOffset);
                ctx.lineTo(x + xOffsetW, y + yOffset);
                ctx.moveTo(x + yOffsetW, y - xOffset);
                ctx.lineTo(x - yOffsetW, y + xOffset);
                break;
            case 'line':
                xOffset = w ? w / 2 : Math.cos(rad) * radius;
                yOffset = Math.sin(rad) * radius;
                ctx.moveTo(x - xOffset, y - yOffset);
                ctx.lineTo(x + xOffset, y + yOffset);
                break;
            case 'dash':
                ctx.moveTo(x, y);
                ctx.lineTo(x + Math.cos(rad) * (w ? w / 2 : radius), y + Math.sin(rad) * radius);
                break;
            case false:
                ctx.closePath();
                break;
        }
        ctx.fill();
        if (options.borderWidth > 0) {
            ctx.stroke();
        }
    }
    /**
     * Returns true if the point is inside the rectangle
     * @param point - The point to test
     * @param area - The rectangle
     * @param margin - allowed margin
     * @private
     */ function _isPointInArea(point, area, margin) {
        margin = margin || 0.5; // margin - default is to match rounded decimals
        return !area || point && point.x > area.left - margin && point.x < area.right + margin && point.y > area.top - margin && point.y < area.bottom + margin;
    }
    /**
     * Add a path of a rectangle with rounded corners to the current sub-path
     * @param ctx - Context
     * @param rect - Bounding rect
     */ function addRoundedRectPath(ctx, rect) {
        const { x , y , w , h , radius  } = rect;
        // top left arc
        ctx.arc(x + radius.topLeft, y + radius.topLeft, radius.topLeft, 1.5 * PI, PI, true);
        // line from top left to bottom left
        ctx.lineTo(x, y + h - radius.bottomLeft);
        // bottom left arc
        ctx.arc(x + radius.bottomLeft, y + h - radius.bottomLeft, radius.bottomLeft, PI, HALF_PI, true);
        // line from bottom left to bottom right
        ctx.lineTo(x + w - radius.bottomRight, y + h);
        // bottom right arc
        ctx.arc(x + w - radius.bottomRight, y + h - radius.bottomRight, radius.bottomRight, HALF_PI, 0, true);
        // line from bottom right to top right
        ctx.lineTo(x + w, y + radius.topRight);
        // top right arc
        ctx.arc(x + w - radius.topRight, y + radius.topRight, radius.topRight, 0, -HALF_PI, true);
        // line from top right to top left
        ctx.lineTo(x + radius.topLeft, y);
    }

    const LINE_HEIGHT = /^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/;
    const FONT_STYLE = /^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/;
    /**
     * @alias Chart.helpers.options
     * @namespace
     */ /**
     * Converts the given line height `value` in pixels for a specific font `size`.
     * @param value - The lineHeight to parse (eg. 1.6, '14px', '75%', '1.6em').
     * @param size - The font size (in pixels) used to resolve relative `value`.
     * @returns The effective line height in pixels (size * 1.2 if value is invalid).
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/line-height
     * @since 2.7.0
     */ function toLineHeight(value, size) {
        const matches = ('' + value).match(LINE_HEIGHT);
        if (!matches || matches[1] === 'normal') {
            return size * 1.2;
        }
        value = +matches[2];
        switch(matches[3]){
            case 'px':
                return value;
            case '%':
                value /= 100;
                break;
        }
        return size * value;
    }
    const numberOrZero = (v)=>+v || 0;
    function _readValueToProps(value, props) {
        const ret = {};
        const objProps = isObject(props);
        const keys = objProps ? Object.keys(props) : props;
        const read = isObject(value) ? objProps ? (prop)=>valueOrDefault(value[prop], value[props[prop]]) : (prop)=>value[prop] : ()=>value;
        for (const prop of keys){
            ret[prop] = numberOrZero(read(prop));
        }
        return ret;
    }
    /**
     * Converts the given value into a TRBL object.
     * @param value - If a number, set the value to all TRBL component,
     *  else, if an object, use defined properties and sets undefined ones to 0.
     *  x / y are shorthands for same value for left/right and top/bottom.
     * @returns The padding values (top, right, bottom, left)
     * @since 3.0.0
     */ function toTRBL(value) {
        return _readValueToProps(value, {
            top: 'y',
            right: 'x',
            bottom: 'y',
            left: 'x'
        });
    }
    /**
     * Converts the given value into a TRBL corners object (similar with css border-radius).
     * @param value - If a number, set the value to all TRBL corner components,
     *  else, if an object, use defined properties and sets undefined ones to 0.
     * @returns The TRBL corner values (topLeft, topRight, bottomLeft, bottomRight)
     * @since 3.0.0
     */ function toTRBLCorners(value) {
        return _readValueToProps(value, [
            'topLeft',
            'topRight',
            'bottomLeft',
            'bottomRight'
        ]);
    }
    /**
     * Converts the given value into a padding object with pre-computed width/height.
     * @param value - If a number, set the value to all TRBL component,
     *  else, if an object, use defined properties and sets undefined ones to 0.
     *  x / y are shorthands for same value for left/right and top/bottom.
     * @returns The padding values (top, right, bottom, left, width, height)
     * @since 2.7.0
     */ function toPadding(value) {
        const obj = toTRBL(value);
        obj.width = obj.left + obj.right;
        obj.height = obj.top + obj.bottom;
        return obj;
    }
    /**
     * Parses font options and returns the font object.
     * @param options - A object that contains font options to be parsed.
     * @param fallback - A object that contains fallback font options.
     * @return The font object.
     * @private
     */ function toFont(options, fallback) {
        options = options || {};
        fallback = fallback || defaults.font;
        let size = valueOrDefault(options.size, fallback.size);
        if (typeof size === 'string') {
            size = parseInt(size, 10);
        }
        let style = valueOrDefault(options.style, fallback.style);
        if (style && !('' + style).match(FONT_STYLE)) {
            console.warn('Invalid font style specified: "' + style + '"');
            style = undefined;
        }
        const font = {
            family: valueOrDefault(options.family, fallback.family),
            lineHeight: toLineHeight(valueOrDefault(options.lineHeight, fallback.lineHeight), size),
            size,
            style,
            weight: valueOrDefault(options.weight, fallback.weight),
            string: ''
        };
        font.string = toFontString(font);
        return font;
    }
    /**
     * Evaluates the given `inputs` sequentially and returns the first defined value.
     * @param inputs - An array of values, falling back to the last value.
     * @param context - If defined and the current value is a function, the value
     * is called with `context` as first argument and the result becomes the new input.
     * @param index - If defined and the current value is an array, the value
     * at `index` become the new input.
     * @param info - object to return information about resolution in
     * @param info.cacheable - Will be set to `false` if option is not cacheable.
     * @since 2.7.0
     */ function resolve(inputs, context, index, info) {
        let cacheable = true;
        let i, ilen, value;
        for(i = 0, ilen = inputs.length; i < ilen; ++i){
            value = inputs[i];
            if (value === undefined) {
                continue;
            }
            if (context !== undefined && typeof value === 'function') {
                value = value(context);
                cacheable = false;
            }
            if (index !== undefined && isArray(value)) {
                value = value[index % value.length];
                cacheable = false;
            }
            if (value !== undefined) {
                if (info && !cacheable) {
                    info.cacheable = false;
                }
                return value;
            }
        }
    }

    /**
     * Note: typedefs are auto-exported, so use a made-up `dom` namespace where
     * necessary to avoid duplicates with `export * from './helpers`; see
     * https://github.com/microsoft/TypeScript/issues/46011
     * @typedef { import('../core/core.controller.js').default } dom.Chart
     * @typedef { import('../../types').ChartEvent } ChartEvent
     */ /**
     * @private
     */ function _isDomSupported() {
        return typeof window !== 'undefined' && typeof document !== 'undefined';
    }
    /**
     * Detects support for options object argument in addEventListener.
     * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support
     * @private
     */ (function() {
        let passiveSupported = false;
        try {
            const options = {
                get passive () {
                    passiveSupported = true;
                    return false;
                }
            };
            if (_isDomSupported()) {
                window.addEventListener('test', null, options);
                window.removeEventListener('test', null, options);
            }
        } catch (e) {
        // continue regardless of error
        }
        return passiveSupported;
    })();

    /*!
     * Chart.js v4.4.1
     * https://www.chartjs.org
     * (c) 2023 Chart.js Contributors
     * Released under the MIT License
     */

    class Element {
        static defaults = {};
        static defaultRoutes = undefined;
        x;
        y;
        active = false;
        options;
        $animations;
        tooltipPosition(useFinalPosition) {
            const { x , y  } = this.getProps([
                'x',
                'y'
            ], useFinalPosition);
            return {
                x,
                y
            };
        }
        hasValue() {
            return isNumber(this.x) && isNumber(this.y);
        }
        getProps(props, final) {
            const anims = this.$animations;
            if (!final || !anims) {
                // let's not create an object, if not needed
                return this;
            }
            const ret = {};
            props.forEach((prop)=>{
                ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop];
            });
            return ret;
        }
    }

    function clipArc(ctx, element, endAngle) {
        const { startAngle , pixelMargin , x , y , outerRadius , innerRadius  } = element;
        let angleMargin = pixelMargin / outerRadius;
        // Draw an inner border by clipping the arc and drawing a double-width border
        // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders
        ctx.beginPath();
        ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);
        if (innerRadius > pixelMargin) {
            angleMargin = pixelMargin / innerRadius;
            ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);
        } else {
            ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);
        }
        ctx.closePath();
        ctx.clip();
    }
    function toRadiusCorners(value) {
        return _readValueToProps(value, [
            'outerStart',
            'outerEnd',
            'innerStart',
            'innerEnd'
        ]);
    }
    /**
     * Parse border radius from the provided options
     */ function parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {
        const o = toRadiusCorners(arc.options.borderRadius);
        const halfThickness = (outerRadius - innerRadius) / 2;
        const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);
        // Outer limits are complicated. We want to compute the available angular distance at
        // a radius of outerRadius - borderRadius because for small angular distances, this term limits.
        // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.
        //
        // If the borderRadius is large, that value can become negative.
        // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius
        // we know that the thickness term will dominate and compute the limits at that point
        const computeOuterLimit = (val)=>{
            const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;
            return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));
        };
        return {
            outerStart: computeOuterLimit(o.outerStart),
            outerEnd: computeOuterLimit(o.outerEnd),
            innerStart: _limitValue(o.innerStart, 0, innerLimit),
            innerEnd: _limitValue(o.innerEnd, 0, innerLimit)
        };
    }
    /**
     * Convert (r, 𝜃) to (x, y)
     */ function rThetaToXY(r, theta, x, y) {
        return {
            x: x + r * Math.cos(theta),
            y: y + r * Math.sin(theta)
        };
    }
    /**
     * Path the arc, respecting border radius by separating into left and right halves.
     *
     *   Start      End
     *
     *    1--->a--->2    Outer
     *   /           \
     *   8           3
     *   |           |
     *   |           |
     *   7           4
     *   \           /
     *    6<---b<---5    Inner
     */ function pathArc(ctx, element, offset, spacing, end, circular) {
        const { x , y , startAngle: start , pixelMargin , innerRadius: innerR  } = element;
        const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);
        const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;
        let spacingOffset = 0;
        const alpha = end - start;
        if (spacing) {
            // When spacing is present, it is the same for all items
            // So we adjust the start and end angle of the arc such that
            // the distance is the same as it would be without the spacing
            const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;
            const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;
            const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;
            const adjustedAngle = avNogSpacingRadius !== 0 ? alpha * avNogSpacingRadius / (avNogSpacingRadius + spacing) : alpha;
            spacingOffset = (alpha - adjustedAngle) / 2;
        }
        const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;
        const angleOffset = (alpha - beta) / 2;
        const startAngle = start + angleOffset + spacingOffset;
        const endAngle = end - angleOffset - spacingOffset;
        const { outerStart , outerEnd , innerStart , innerEnd  } = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle);
        const outerStartAdjustedRadius = outerRadius - outerStart;
        const outerEndAdjustedRadius = outerRadius - outerEnd;
        const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;
        const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;
        const innerStartAdjustedRadius = innerRadius + innerStart;
        const innerEndAdjustedRadius = innerRadius + innerEnd;
        const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;
        const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;
        ctx.beginPath();
        if (circular) {
            // The first arc segments from point 1 to point a to point 2
            const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;
            ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);
            ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);
            // The corner segment from point 2 to point 3
            if (outerEnd > 0) {
                const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);
                ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);
            }
            // The line from point 3 to point 4
            const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);
            ctx.lineTo(p4.x, p4.y);
            // The corner segment from point 4 to point 5
            if (innerEnd > 0) {
                const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);
                ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);
            }
            // The inner arc from point 5 to point b to point 6
            const innerMidAdjustedAngle = (endAngle - innerEnd / innerRadius + (startAngle + innerStart / innerRadius)) / 2;
            ctx.arc(x, y, innerRadius, endAngle - innerEnd / innerRadius, innerMidAdjustedAngle, true);
            ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + innerStart / innerRadius, true);
            // The corner segment from point 6 to point 7
            if (innerStart > 0) {
                const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);
                ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);
            }
            // The line from point 7 to point 8
            const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);
            ctx.lineTo(p8.x, p8.y);
            // The corner segment from point 8 to point 1
            if (outerStart > 0) {
                const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);
                ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);
            }
        } else {
            ctx.moveTo(x, y);
            const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;
            const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;
            ctx.lineTo(outerStartX, outerStartY);
            const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;
            const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;
            ctx.lineTo(outerEndX, outerEndY);
        }
        ctx.closePath();
    }
    function drawArc(ctx, element, offset, spacing, circular) {
        const { fullCircles , startAngle , circumference  } = element;
        let endAngle = element.endAngle;
        if (fullCircles) {
            pathArc(ctx, element, offset, spacing, endAngle, circular);
            for(let i = 0; i < fullCircles; ++i){
                ctx.fill();
            }
            if (!isNaN(circumference)) {
                endAngle = startAngle + (circumference % TAU || TAU);
            }
        }
        pathArc(ctx, element, offset, spacing, endAngle, circular);
        ctx.fill();
        return endAngle;
    }
    function drawBorder(ctx, element, offset, spacing, circular) {
        const { fullCircles , startAngle , circumference , options  } = element;
        const { borderWidth , borderJoinStyle , borderDash , borderDashOffset  } = options;
        const inner = options.borderAlign === 'inner';
        if (!borderWidth) {
            return;
        }
        ctx.setLineDash(borderDash || []);
        ctx.lineDashOffset = borderDashOffset;
        if (inner) {
            ctx.lineWidth = borderWidth * 2;
            ctx.lineJoin = borderJoinStyle || 'round';
        } else {
            ctx.lineWidth = borderWidth;
            ctx.lineJoin = borderJoinStyle || 'bevel';
        }
        let endAngle = element.endAngle;
        if (fullCircles) {
            pathArc(ctx, element, offset, spacing, endAngle, circular);
            for(let i = 0; i < fullCircles; ++i){
                ctx.stroke();
            }
            if (!isNaN(circumference)) {
                endAngle = startAngle + (circumference % TAU || TAU);
            }
        }
        if (inner) {
            clipArc(ctx, element, endAngle);
        }
        if (!fullCircles) {
            pathArc(ctx, element, offset, spacing, endAngle, circular);
            ctx.stroke();
        }
    }
    class ArcElement extends Element {
        static id = 'arc';
        static defaults = {
            borderAlign: 'center',
            borderColor: '#fff',
            borderDash: [],
            borderDashOffset: 0,
            borderJoinStyle: undefined,
            borderRadius: 0,
            borderWidth: 2,
            offset: 0,
            spacing: 0,
            angle: undefined,
            circular: true
        };
        static defaultRoutes = {
            backgroundColor: 'backgroundColor'
        };
        static descriptors = {
            _scriptable: true,
            _indexable: (name)=>name !== 'borderDash'
        };
        circumference;
        endAngle;
        fullCircles;
        innerRadius;
        outerRadius;
        pixelMargin;
        startAngle;
        constructor(cfg){
            super();
            this.options = undefined;
            this.circumference = undefined;
            this.startAngle = undefined;
            this.endAngle = undefined;
            this.innerRadius = undefined;
            this.outerRadius = undefined;
            this.pixelMargin = 0;
            this.fullCircles = 0;
            if (cfg) {
                Object.assign(this, cfg);
            }
        }
        inRange(chartX, chartY, useFinalPosition) {
            const point = this.getProps([
                'x',
                'y'
            ], useFinalPosition);
            const { angle , distance  } = getAngleFromPoint(point, {
                x: chartX,
                y: chartY
            });
            const { startAngle , endAngle , innerRadius , outerRadius , circumference  } = this.getProps([
                'startAngle',
                'endAngle',
                'innerRadius',
                'outerRadius',
                'circumference'
            ], useFinalPosition);
            const rAdjust = (this.options.spacing + this.options.borderWidth) / 2;
            const _circumference = valueOrDefault(circumference, endAngle - startAngle);
            const betweenAngles = _circumference >= TAU || _angleBetween(angle, startAngle, endAngle);
            const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);
            return betweenAngles && withinRadius;
        }
        getCenterPoint(useFinalPosition) {
            const { x , y , startAngle , endAngle , innerRadius , outerRadius  } = this.getProps([
                'x',
                'y',
                'startAngle',
                'endAngle',
                'innerRadius',
                'outerRadius'
            ], useFinalPosition);
            const { offset , spacing  } = this.options;
            const halfAngle = (startAngle + endAngle) / 2;
            const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;
            return {
                x: x + Math.cos(halfAngle) * halfRadius,
                y: y + Math.sin(halfAngle) * halfRadius
            };
        }
        tooltipPosition(useFinalPosition) {
            return this.getCenterPoint(useFinalPosition);
        }
        draw(ctx) {
            const { options , circumference  } = this;
            const offset = (options.offset || 0) / 4;
            const spacing = (options.spacing || 0) / 2;
            const circular = options.circular;
            this.pixelMargin = options.borderAlign === 'inner' ? 0.33 : 0;
            this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;
            if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {
                return;
            }
            ctx.save();
            const halfAngle = (this.startAngle + this.endAngle) / 2;
            ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);
            const fix = 1 - Math.sin(Math.min(PI, circumference || 0));
            const radiusOffset = offset * fix;
            ctx.fillStyle = options.backgroundColor;
            ctx.strokeStyle = options.borderColor;
            drawArc(ctx, this, radiusOffset, spacing, circular);
            drawBorder(ctx, this, radiusOffset, spacing, circular);
            ctx.restore();
        }
    }

    function inRange$1(el, pos, axis, useFinalPosition) {
        const options = el.options;
        const { [axis]: value  } = el.getProps([
            axis
        ], useFinalPosition);
        return Math.abs(pos - value) < options.radius + options.hitRadius;
    }
    class PointElement extends Element {
        static id = 'point';
        parsed;
        skip;
        stop;
        /**
       * @type {any}
       */ static defaults = {
            borderWidth: 1,
            hitRadius: 1,
            hoverBorderWidth: 1,
            hoverRadius: 4,
            pointStyle: 'circle',
            radius: 3,
            rotation: 0
        };
        /**
       * @type {any}
       */ static defaultRoutes = {
            backgroundColor: 'backgroundColor',
            borderColor: 'borderColor'
        };
        constructor(cfg){
            super();
            this.options = undefined;
            this.parsed = undefined;
            this.skip = undefined;
            this.stop = undefined;
            if (cfg) {
                Object.assign(this, cfg);
            }
        }
        inRange(mouseX, mouseY, useFinalPosition) {
            const options = this.options;
            const { x , y  } = this.getProps([
                'x',
                'y'
            ], useFinalPosition);
            return Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2) < Math.pow(options.hitRadius + options.radius, 2);
        }
        inXRange(mouseX, useFinalPosition) {
            return inRange$1(this, mouseX, 'x', useFinalPosition);
        }
        inYRange(mouseY, useFinalPosition) {
            return inRange$1(this, mouseY, 'y', useFinalPosition);
        }
        getCenterPoint(useFinalPosition) {
            const { x , y  } = this.getProps([
                'x',
                'y'
            ], useFinalPosition);
            return {
                x,
                y
            };
        }
        size(options) {
            options = options || this.options || {};
            let radius = options.radius || 0;
            radius = Math.max(radius, radius && options.hoverRadius || 0);
            const borderWidth = radius && options.borderWidth || 0;
            return (radius + borderWidth) * 2;
        }
        draw(ctx, area) {
            const options = this.options;
            if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {
                return;
            }
            ctx.strokeStyle = options.borderColor;
            ctx.lineWidth = options.borderWidth;
            ctx.fillStyle = options.backgroundColor;
            drawPoint(ctx, options, this.x, this.y);
        }
        getRange() {
            const options = this.options || {};
            // @ts-expect-error Fallbacks should never be hit in practice
            return options.radius + options.hitRadius;
        }
    }

    function getBarBounds(bar, useFinalPosition) {
        const { x , y , base , width , height  } =  bar.getProps([
            'x',
            'y',
            'base',
            'width',
            'height'
        ], useFinalPosition);
        let left, right, top, bottom, half;
        if (bar.horizontal) {
            half = height / 2;
            left = Math.min(x, base);
            right = Math.max(x, base);
            top = y - half;
            bottom = y + half;
        } else {
            half = width / 2;
            left = x - half;
            right = x + half;
            top = Math.min(y, base);
            bottom = Math.max(y, base);
        }
        return {
            left,
            top,
            right,
            bottom
        };
    }
    function skipOrLimit(skip, value, min, max) {
        return skip ? 0 : _limitValue(value, min, max);
    }
    function parseBorderWidth(bar, maxW, maxH) {
        const value = bar.options.borderWidth;
        const skip = bar.borderSkipped;
        const o = toTRBL(value);
        return {
            t: skipOrLimit(skip.top, o.top, 0, maxH),
            r: skipOrLimit(skip.right, o.right, 0, maxW),
            b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),
            l: skipOrLimit(skip.left, o.left, 0, maxW)
        };
    }
    function parseBorderRadius(bar, maxW, maxH) {
        const { enableBorderRadius  } = bar.getProps([
            'enableBorderRadius'
        ]);
        const value = bar.options.borderRadius;
        const o = toTRBLCorners(value);
        const maxR = Math.min(maxW, maxH);
        const skip = bar.borderSkipped;
        const enableBorder = enableBorderRadius || isObject(value);
        return {
            topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),
            topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),
            bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),
            bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)
        };
    }
    function boundingRects$1(bar) {
        const bounds = getBarBounds(bar);
        const width = bounds.right - bounds.left;
        const height = bounds.bottom - bounds.top;
        const border = parseBorderWidth(bar, width / 2, height / 2);
        const radius = parseBorderRadius(bar, width / 2, height / 2);
        return {
            outer: {
                x: bounds.left,
                y: bounds.top,
                w: width,
                h: height,
                radius
            },
            inner: {
                x: bounds.left + border.l,
                y: bounds.top + border.t,
                w: width - border.l - border.r,
                h: height - border.t - border.b,
                radius: {
                    topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),
                    topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),
                    bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),
                    bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r))
                }
            }
        };
    }
    function inRange(bar, x, y, useFinalPosition) {
        const skipX = x === null;
        const skipY = y === null;
        const skipBoth = skipX && skipY;
        const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);
        return bounds && (skipX || _isBetween(x, bounds.left, bounds.right)) && (skipY || _isBetween(y, bounds.top, bounds.bottom));
    }
    function hasRadius(radius) {
        return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;
    }
     function addNormalRectPath(ctx, rect) {
        ctx.rect(rect.x, rect.y, rect.w, rect.h);
    }
    function inflateRect(rect, amount, refRect = {}) {
        const x = rect.x !== refRect.x ? -amount : 0;
        const y = rect.y !== refRect.y ? -amount : 0;
        const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;
        const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;
        return {
            x: rect.x + x,
            y: rect.y + y,
            w: rect.w + w,
            h: rect.h + h,
            radius: rect.radius
        };
    }
    class BarElement extends Element {
        static id = 'bar';
     static defaults = {
            borderSkipped: 'start',
            borderWidth: 0,
            borderRadius: 0,
            inflateAmount: 'auto',
            pointStyle: undefined
        };
     static defaultRoutes = {
            backgroundColor: 'backgroundColor',
            borderColor: 'borderColor'
        };
        constructor(cfg){
            super();
            this.options = undefined;
            this.horizontal = undefined;
            this.base = undefined;
            this.width = undefined;
            this.height = undefined;
            this.inflateAmount = undefined;
            if (cfg) {
                Object.assign(this, cfg);
            }
        }
        draw(ctx) {
            const { inflateAmount , options: { borderColor , backgroundColor  }  } = this;
            const { inner , outer  } = boundingRects$1(this);
            const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;
            ctx.save();
            if (outer.w !== inner.w || outer.h !== inner.h) {
                ctx.beginPath();
                addRectPath(ctx, inflateRect(outer, inflateAmount, inner));
                ctx.clip();
                addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));
                ctx.fillStyle = borderColor;
                ctx.fill('evenodd');
            }
            ctx.beginPath();
            addRectPath(ctx, inflateRect(inner, inflateAmount));
            ctx.fillStyle = backgroundColor;
            ctx.fill();
            ctx.restore();
        }
        inRange(mouseX, mouseY, useFinalPosition) {
            return inRange(this, mouseX, mouseY, useFinalPosition);
        }
        inXRange(mouseX, useFinalPosition) {
            return inRange(this, mouseX, null, useFinalPosition);
        }
        inYRange(mouseY, useFinalPosition) {
            return inRange(this, null, mouseY, useFinalPosition);
        }
        getCenterPoint(useFinalPosition) {
            const { x , y , base , horizontal  } =  this.getProps([
                'x',
                'y',
                'base',
                'horizontal'
            ], useFinalPosition);
            return {
                x: horizontal ? (x + base) / 2 : x,
                y: horizontal ? y : (y + base) / 2
            };
        }
        getRange(axis) {
            return axis === 'x' ? this.width / 2 : this.height / 2;
        }
    }

    /*!
     * chartjs-plugin-datalabels v2.2.0
     * https://chartjs-plugin-datalabels.netlify.app
     * (c) 2017-2022 chartjs-plugin-datalabels contributors
     * Released under the MIT license
     */

    var devicePixelRatio = (function() {
      if (typeof window !== 'undefined') {
        if (window.devicePixelRatio) {
          return window.devicePixelRatio;
        }

        // devicePixelRatio is undefined on IE10
        // https://stackoverflow.com/a/20204180/8837887
        // https://github.com/chartjs/chartjs-plugin-datalabels/issues/85
        var screen = window.screen;
        if (screen) {
          return (screen.deviceXDPI || 1) / (screen.logicalXDPI || 1);
        }
      }

      return 1;
    }());

    var utils$1 = {
      // @todo move this in Chart.helpers.toTextLines
      toTextLines: function(inputs) {
        var lines = [];
        var input;

        inputs = [].concat(inputs);
        while (inputs.length) {
          input = inputs.pop();
          if (typeof input === 'string') {
            lines.unshift.apply(lines, input.split('\n'));
          } else if (Array.isArray(input)) {
            inputs.push.apply(inputs, input);
          } else if (!isNullOrUndef(inputs)) {
            lines.unshift('' + input);
          }
        }

        return lines;
      },

      // @todo move this in Chart.helpers.canvas.textSize
      // @todo cache calls of measureText if font doesn't change?!
      textSize: function(ctx, lines, font) {
        var items = [].concat(lines);
        var ilen = items.length;
        var prev = ctx.font;
        var width = 0;
        var i;

        ctx.font = font.string;

        for (i = 0; i < ilen; ++i) {
          width = Math.max(ctx.measureText(items[i]).width, width);
        }

        ctx.font = prev;

        return {
          height: ilen * font.lineHeight,
          width: width
        };
      },

      /**
       * Returns value bounded by min and max. This is equivalent to max(min, min(value, max)).
       * @todo move this method in Chart.helpers.bound
       * https://doc.qt.io/qt-5/qtglobal.html#qBound
       */
      bound: function(min, value, max) {
        return Math.max(min, Math.min(value, max));
      },

      /**
       * Returns an array of pair [value, state] where state is:
       * * -1: value is only in a0 (removed)
       * *  1: value is only in a1 (added)
       */
      arrayDiff: function(a0, a1) {
        var prev = a0.slice();
        var updates = [];
        var i, j, ilen, v;

        for (i = 0, ilen = a1.length; i < ilen; ++i) {
          v = a1[i];
          j = prev.indexOf(v);

          if (j === -1) {
            updates.push([v, 1]);
          } else {
            prev.splice(j, 1);
          }
        }

        for (i = 0, ilen = prev.length; i < ilen; ++i) {
          updates.push([prev[i], -1]);
        }

        return updates;
      },

      /**
       * https://github.com/chartjs/chartjs-plugin-datalabels/issues/70
       */
      rasterize: function(v) {
        return Math.round(v * devicePixelRatio) / devicePixelRatio;
      }
    };

    function orient(point, origin) {
      var x0 = origin.x;
      var y0 = origin.y;

      if (x0 === null) {
        return {x: 0, y: -1};
      }
      if (y0 === null) {
        return {x: 1, y: 0};
      }

      var dx = point.x - x0;
      var dy = point.y - y0;
      var ln = Math.sqrt(dx * dx + dy * dy);

      return {
        x: ln ? dx / ln : 0,
        y: ln ? dy / ln : -1
      };
    }

    function aligned(x, y, vx, vy, align) {
      switch (align) {
      case 'center':
        vx = vy = 0;
        break;
      case 'bottom':
        vx = 0;
        vy = 1;
        break;
      case 'right':
        vx = 1;
        vy = 0;
        break;
      case 'left':
        vx = -1;
        vy = 0;
        break;
      case 'top':
        vx = 0;
        vy = -1;
        break;
      case 'start':
        vx = -vx;
        vy = -vy;
        break;
      case 'end':
        // keep natural orientation
        break;
      default:
        // clockwise rotation (in degree)
        align *= (Math.PI / 180);
        vx = Math.cos(align);
        vy = Math.sin(align);
        break;
      }

      return {
        x: x,
        y: y,
        vx: vx,
        vy: vy
      };
    }

    // Line clipping (Cohen–Sutherland algorithm)
    // https://en.wikipedia.org/wiki/Cohen–Sutherland_algorithm

    var R_INSIDE = 0;
    var R_LEFT = 1;
    var R_RIGHT = 2;
    var R_BOTTOM = 4;
    var R_TOP = 8;

    function region(x, y, rect) {
      var res = R_INSIDE;

      if (x < rect.left) {
        res |= R_LEFT;
      } else if (x > rect.right) {
        res |= R_RIGHT;
      }
      if (y < rect.top) {
        res |= R_TOP;
      } else if (y > rect.bottom) {
        res |= R_BOTTOM;
      }

      return res;
    }

    function clipped(segment, area) {
      var x0 = segment.x0;
      var y0 = segment.y0;
      var x1 = segment.x1;
      var y1 = segment.y1;
      var r0 = region(x0, y0, area);
      var r1 = region(x1, y1, area);
      var r, x, y;

      // eslint-disable-next-line no-constant-condition
      while (true) {
        if (!(r0 | r1) || (r0 & r1)) {
          // both points inside or on the same side: no clipping
          break;
        }

        // at least one point is outside
        r = r0 || r1;

        if (r & R_TOP) {
          x = x0 + (x1 - x0) * (area.top - y0) / (y1 - y0);
          y = area.top;
        } else if (r & R_BOTTOM) {
          x = x0 + (x1 - x0) * (area.bottom - y0) / (y1 - y0);
          y = area.bottom;
        } else if (r & R_RIGHT) {
          y = y0 + (y1 - y0) * (area.right - x0) / (x1 - x0);
          x = area.right;
        } else if (r & R_LEFT) {
          y = y0 + (y1 - y0) * (area.left - x0) / (x1 - x0);
          x = area.left;
        }

        if (r === r0) {
          x0 = x;
          y0 = y;
          r0 = region(x0, y0, area);
        } else {
          x1 = x;
          y1 = y;
          r1 = region(x1, y1, area);
        }
      }

      return {
        x0: x0,
        x1: x1,
        y0: y0,
        y1: y1
      };
    }

    function compute$1(range, config) {
      var anchor = config.anchor;
      var segment = range;
      var x, y;

      if (config.clamp) {
        segment = clipped(segment, config.area);
      }

      if (anchor === 'start') {
        x = segment.x0;
        y = segment.y0;
      } else if (anchor === 'end') {
        x = segment.x1;
        y = segment.y1;
      } else {
        x = (segment.x0 + segment.x1) / 2;
        y = (segment.y0 + segment.y1) / 2;
      }

      return aligned(x, y, range.vx, range.vy, config.align);
    }

    var positioners = {
      arc: function(el, config) {
        var angle = (el.startAngle + el.endAngle) / 2;
        var vx = Math.cos(angle);
        var vy = Math.sin(angle);
        var r0 = el.innerRadius;
        var r1 = el.outerRadius;

        return compute$1({
          x0: el.x + vx * r0,
          y0: el.y + vy * r0,
          x1: el.x + vx * r1,
          y1: el.y + vy * r1,
          vx: vx,
          vy: vy
        }, config);
      },

      point: function(el, config) {
        var v = orient(el, config.origin);
        var rx = v.x * el.options.radius;
        var ry = v.y * el.options.radius;

        return compute$1({
          x0: el.x - rx,
          y0: el.y - ry,
          x1: el.x + rx,
          y1: el.y + ry,
          vx: v.x,
          vy: v.y
        }, config);
      },

      bar: function(el, config) {
        var v = orient(el, config.origin);
        var x = el.x;
        var y = el.y;
        var sx = 0;
        var sy = 0;

        if (el.horizontal) {
          x = Math.min(el.x, el.base);
          sx = Math.abs(el.base - el.x);
        } else {
          y = Math.min(el.y, el.base);
          sy = Math.abs(el.base - el.y);
        }

        return compute$1({
          x0: x,
          y0: y + sy,
          x1: x + sx,
          y1: y,
          vx: v.x,
          vy: v.y
        }, config);
      },

      fallback: function(el, config) {
        var v = orient(el, config.origin);

        return compute$1({
          x0: el.x,
          y0: el.y,
          x1: el.x + (el.width || 0),
          y1: el.y + (el.height || 0),
          vx: v.x,
          vy: v.y
        }, config);
      }
    };

    var rasterize = utils$1.rasterize;

    function boundingRects(model) {
      var borderWidth = model.borderWidth || 0;
      var padding = model.padding;
      var th = model.size.height;
      var tw = model.size.width;
      var tx = -tw / 2;
      var ty = -th / 2;

      return {
        frame: {
          x: tx - padding.left - borderWidth,
          y: ty - padding.top - borderWidth,
          w: tw + padding.width + borderWidth * 2,
          h: th + padding.height + borderWidth * 2
        },
        text: {
          x: tx,
          y: ty,
          w: tw,
          h: th
        }
      };
    }

    function getScaleOrigin(el, context) {
      var scale = context.chart.getDatasetMeta(context.datasetIndex).vScale;

      if (!scale) {
        return null;
      }

      if (scale.xCenter !== undefined && scale.yCenter !== undefined) {
        return {x: scale.xCenter, y: scale.yCenter};
      }

      var pixel = scale.getBasePixel();
      return el.horizontal ?
        {x: pixel, y: null} :
        {x: null, y: pixel};
    }

    function getPositioner(el) {
      if (el instanceof ArcElement) {
        return positioners.arc;
      }
      if (el instanceof PointElement) {
        return positioners.point;
      }
      if (el instanceof BarElement) {
        return positioners.bar;
      }
      return positioners.fallback;
    }

    function drawRoundedRect(ctx, x, y, w, h, radius) {
      var HALF_PI = Math.PI / 2;

      if (radius) {
        var r = Math.min(radius, h / 2, w / 2);
        var left = x + r;
        var top = y + r;
        var right = x + w - r;
        var bottom = y + h - r;

        ctx.moveTo(x, top);
        if (left < right && top < bottom) {
          ctx.arc(left, top, r, -Math.PI, -HALF_PI);
          ctx.arc(right, top, r, -HALF_PI, 0);
          ctx.arc(right, bottom, r, 0, HALF_PI);
          ctx.arc(left, bottom, r, HALF_PI, Math.PI);
        } else if (left < right) {
          ctx.moveTo(left, y);
          ctx.arc(right, top, r, -HALF_PI, HALF_PI);
          ctx.arc(left, top, r, HALF_PI, Math.PI + HALF_PI);
        } else if (top < bottom) {
          ctx.arc(left, top, r, -Math.PI, 0);
          ctx.arc(left, bottom, r, 0, Math.PI);
        } else {
          ctx.arc(left, top, r, -Math.PI, Math.PI);
        }
        ctx.closePath();
        ctx.moveTo(x, y);
      } else {
        ctx.rect(x, y, w, h);
      }
    }

    function drawFrame(ctx, rect, model) {
      var bgColor = model.backgroundColor;
      var borderColor = model.borderColor;
      var borderWidth = model.borderWidth;

      if (!bgColor && (!borderColor || !borderWidth)) {
        return;
      }

      ctx.beginPath();

      drawRoundedRect(
        ctx,
        rasterize(rect.x) + borderWidth / 2,
        rasterize(rect.y) + borderWidth / 2,
        rasterize(rect.w) - borderWidth,
        rasterize(rect.h) - borderWidth,
        model.borderRadius);

      ctx.closePath();

      if (bgColor) {
        ctx.fillStyle = bgColor;
        ctx.fill();
      }

      if (borderColor && borderWidth) {
        ctx.strokeStyle = borderColor;
        ctx.lineWidth = borderWidth;
        ctx.lineJoin = 'miter';
        ctx.stroke();
      }
    }

    function textGeometry(rect, align, font) {
      var h = font.lineHeight;
      var w = rect.w;
      var x = rect.x;
      var y = rect.y + h / 2;

      if (align === 'center') {
        x += w / 2;
      } else if (align === 'end' || align === 'right') {
        x += w;
      }

      return {
        h: h,
        w: w,
        x: x,
        y: y
      };
    }

    function drawTextLine(ctx, text, cfg) {
      var shadow = ctx.shadowBlur;
      var stroked = cfg.stroked;
      var x = rasterize(cfg.x);
      var y = rasterize(cfg.y);
      var w = rasterize(cfg.w);

      if (stroked) {
        ctx.strokeText(text, x, y, w);
      }

      if (cfg.filled) {
        if (shadow && stroked) {
          // Prevent drawing shadow on both the text stroke and fill, so
          // if the text is stroked, remove the shadow for the text fill.
          ctx.shadowBlur = 0;
        }

        ctx.fillText(text, x, y, w);

        if (shadow && stroked) {
          ctx.shadowBlur = shadow;
        }
      }
    }

    function drawText(ctx, lines, rect, model) {
      var align = model.textAlign;
      var color = model.color;
      var filled = !!color;
      var font = model.font;
      var ilen = lines.length;
      var strokeColor = model.textStrokeColor;
      var strokeWidth = model.textStrokeWidth;
      var stroked = strokeColor && strokeWidth;
      var i;

      if (!ilen || (!filled && !stroked)) {
        return;
      }

      // Adjust coordinates based on text alignment and line height
      rect = textGeometry(rect, align, font);

      ctx.font = font.string;
      ctx.textAlign = align;
      ctx.textBaseline = 'middle';
      ctx.shadowBlur = model.textShadowBlur;
      ctx.shadowColor = model.textShadowColor;

      if (filled) {
        ctx.fillStyle = color;
      }
      if (stroked) {
        ctx.lineJoin = 'round';
        ctx.lineWidth = strokeWidth;
        ctx.strokeStyle = strokeColor;
      }

      for (i = 0, ilen = lines.length; i < ilen; ++i) {
        drawTextLine(ctx, lines[i], {
          stroked: stroked,
          filled: filled,
          w: rect.w,
          x: rect.x,
          y: rect.y + rect.h * i
        });
      }
    }

    var Label = function(config, ctx, el, index) {
      var me = this;

      me._config = config;
      me._index = index;
      me._model = null;
      me._rects = null;
      me._ctx = ctx;
      me._el = el;
    };

    merge(Label.prototype, {
      /**
       * @private
       */
      _modelize: function(display, lines, config, context) {
        var me = this;
        var index = me._index;
        var font = toFont(resolve([config.font, {}], context, index));
        var color = resolve([config.color, defaults.color], context, index);

        return {
          align: resolve([config.align, 'center'], context, index),
          anchor: resolve([config.anchor, 'center'], context, index),
          area: context.chart.chartArea,
          backgroundColor: resolve([config.backgroundColor, null], context, index),
          borderColor: resolve([config.borderColor, null], context, index),
          borderRadius: resolve([config.borderRadius, 0], context, index),
          borderWidth: resolve([config.borderWidth, 0], context, index),
          clamp: resolve([config.clamp, false], context, index),
          clip: resolve([config.clip, false], context, index),
          color: color,
          display: display,
          font: font,
          lines: lines,
          offset: resolve([config.offset, 4], context, index),
          opacity: resolve([config.opacity, 1], context, index),
          origin: getScaleOrigin(me._el, context),
          padding: toPadding(resolve([config.padding, 4], context, index)),
          positioner: getPositioner(me._el),
          rotation: resolve([config.rotation, 0], context, index) * (Math.PI / 180),
          size: utils$1.textSize(me._ctx, lines, font),
          textAlign: resolve([config.textAlign, 'start'], context, index),
          textShadowBlur: resolve([config.textShadowBlur, 0], context, index),
          textShadowColor: resolve([config.textShadowColor, color], context, index),
          textStrokeColor: resolve([config.textStrokeColor, color], context, index),
          textStrokeWidth: resolve([config.textStrokeWidth, 0], context, index)
        };
      },

      update: function(context) {
        var me = this;
        var model = null;
        var rects = null;
        var index = me._index;
        var config = me._config;
        var value, label, lines;

        // We first resolve the display option (separately) to avoid computing
        // other options in case the label is hidden (i.e. display: false).
        var display = resolve([config.display, true], context, index);

        if (display) {
          value = context.dataset.data[index];
          label = valueOrDefault(callback(config.formatter, [value, context]), value);
          lines = isNullOrUndef(label) ? [] : utils$1.toTextLines(label);

          if (lines.length) {
            model = me._modelize(display, lines, config, context);
            rects = boundingRects(model);
          }
        }

        me._model = model;
        me._rects = rects;
      },

      geometry: function() {
        return this._rects ? this._rects.frame : {};
      },

      rotation: function() {
        return this._model ? this._model.rotation : 0;
      },

      visible: function() {
        return this._model && this._model.opacity;
      },

      model: function() {
        return this._model;
      },

      draw: function(chart, center) {
        var me = this;
        var ctx = chart.ctx;
        var model = me._model;
        var rects = me._rects;
        var area;

        if (!this.visible()) {
          return;
        }

        ctx.save();

        if (model.clip) {
          area = model.area;
          ctx.beginPath();
          ctx.rect(
            area.left,
            area.top,
            area.right - area.left,
            area.bottom - area.top);
          ctx.clip();
        }

        ctx.globalAlpha = utils$1.bound(0, model.opacity, 1);
        ctx.translate(rasterize(center.x), rasterize(center.y));
        ctx.rotate(model.rotation);

        drawFrame(ctx, rects.frame, model);
        drawText(ctx, model.lines, rects.text, model);

        ctx.restore();
      }
    });

    var MIN_INTEGER = Number.MIN_SAFE_INTEGER || -9007199254740991; // eslint-disable-line es/no-number-minsafeinteger
    var MAX_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;  // eslint-disable-line es/no-number-maxsafeinteger

    function rotated(point, center, angle) {
      var cos = Math.cos(angle);
      var sin = Math.sin(angle);
      var cx = center.x;
      var cy = center.y;

      return {
        x: cx + cos * (point.x - cx) - sin * (point.y - cy),
        y: cy + sin * (point.x - cx) + cos * (point.y - cy)
      };
    }

    function projected(points, axis) {
      var min = MAX_INTEGER;
      var max = MIN_INTEGER;
      var origin = axis.origin;
      var i, pt, vx, vy, dp;

      for (i = 0; i < points.length; ++i) {
        pt = points[i];
        vx = pt.x - origin.x;
        vy = pt.y - origin.y;
        dp = axis.vx * vx + axis.vy * vy;
        min = Math.min(min, dp);
        max = Math.max(max, dp);
      }

      return {
        min: min,
        max: max
      };
    }

    function toAxis(p0, p1) {
      var vx = p1.x - p0.x;
      var vy = p1.y - p0.y;
      var ln = Math.sqrt(vx * vx + vy * vy);

      return {
        vx: (p1.x - p0.x) / ln,
        vy: (p1.y - p0.y) / ln,
        origin: p0,
        ln: ln
      };
    }

    var HitBox = function() {
      this._rotation = 0;
      this._rect = {
        x: 0,
        y: 0,
        w: 0,
        h: 0
      };
    };

    merge(HitBox.prototype, {
      center: function() {
        var r = this._rect;
        return {
          x: r.x + r.w / 2,
          y: r.y + r.h / 2
        };
      },

      update: function(center, rect, rotation) {
        this._rotation = rotation;
        this._rect = {
          x: rect.x + center.x,
          y: rect.y + center.y,
          w: rect.w,
          h: rect.h
        };
      },

      contains: function(point) {
        var me = this;
        var margin = 1;
        var rect = me._rect;

        point = rotated(point, me.center(), -me._rotation);

        return !(point.x < rect.x - margin
          || point.y < rect.y - margin
          || point.x > rect.x + rect.w + margin * 2
          || point.y > rect.y + rect.h + margin * 2);
      },

      // Separating Axis Theorem
      // https://gamedevelopment.tutsplus.com/tutorials/collision-detection-using-the-separating-axis-theorem--gamedev-169
      intersects: function(other) {
        var r0 = this._points();
        var r1 = other._points();
        var axes = [
          toAxis(r0[0], r0[1]),
          toAxis(r0[0], r0[3])
        ];
        var i, pr0, pr1;

        if (this._rotation !== other._rotation) {
          // Only separate with r1 axis if the rotation is different,
          // else it's enough to separate r0 and r1 with r0 axis only!
          axes.push(
            toAxis(r1[0], r1[1]),
            toAxis(r1[0], r1[3])
          );
        }

        for (i = 0; i < axes.length; ++i) {
          pr0 = projected(r0, axes[i]);
          pr1 = projected(r1, axes[i]);

          if (pr0.max < pr1.min || pr1.max < pr0.min) {
            return false;
          }
        }

        return true;
      },

      /**
       * @private
       */
      _points: function() {
        var me = this;
        var rect = me._rect;
        var angle = me._rotation;
        var center = me.center();

        return [
          rotated({x: rect.x, y: rect.y}, center, angle),
          rotated({x: rect.x + rect.w, y: rect.y}, center, angle),
          rotated({x: rect.x + rect.w, y: rect.y + rect.h}, center, angle),
          rotated({x: rect.x, y: rect.y + rect.h}, center, angle)
        ];
      }
    });

    /* node_modules\svelte-chartjs\src\Base.svelte generated by Svelte v3.59.2 */
    const file$q = "node_modules\\svelte-chartjs\\src\\Base.svelte";

    function create_fragment$z(ctx) {
    	let canvas;
    	let canvas_levels = [/*props*/ ctx[1]];
    	let canvas_data = {};

    	for (let i = 0; i < canvas_levels.length; i += 1) {
    		canvas_data = assign(canvas_data, canvas_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			canvas = element("canvas");
    			set_attributes(canvas, canvas_data);
    			add_location(canvas, file$q, 35, 0, 704);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, canvas, anchor);
    			/*canvas_binding*/ ctx[6](canvas);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(canvas);
    			/*canvas_binding*/ ctx[6](null);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$z.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$z($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Base', slots, []);

    	let { data = {
    		labels: [],
    		datasets: [{ values: [] }],
    		yMarkers: {},
    		yRegions: []
    	} } = $$props;

    	let { type = 'line' } = $$props;
    	let { options = {} } = $$props;
    	let { plugins = {} } = $$props;
    	let chart = null;
    	let chartRef;
    	let props = clean($$props, ['data', 'type', 'options', 'plugins']);

    	onMount(() => {
    		chart = new Chart$1(chartRef, { type, data, options, plugins });
    	});

    	afterUpdate(() => chart.update(data));

    	onDestroy(() => {
    		chart = null;
    	});

    	function canvas_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			chartRef = $$value;
    			$$invalidate(0, chartRef);
    		});
    	}

    	$$self.$$set = $$new_props => {
    		$$invalidate(8, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ('data' in $$new_props) $$invalidate(2, data = $$new_props.data);
    		if ('type' in $$new_props) $$invalidate(3, type = $$new_props.type);
    		if ('options' in $$new_props) $$invalidate(4, options = $$new_props.options);
    		if ('plugins' in $$new_props) $$invalidate(5, plugins = $$new_props.plugins);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		afterUpdate,
    		onDestroy,
    		clean,
    		Chart: Chart$1,
    		data,
    		type,
    		options,
    		plugins,
    		chart,
    		chartRef,
    		props
    	});

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(8, $$props = assign(assign({}, $$props), $$new_props));
    		if ('data' in $$props) $$invalidate(2, data = $$new_props.data);
    		if ('type' in $$props) $$invalidate(3, type = $$new_props.type);
    		if ('options' in $$props) $$invalidate(4, options = $$new_props.options);
    		if ('plugins' in $$props) $$invalidate(5, plugins = $$new_props.plugins);
    		if ('chart' in $$props) chart = $$new_props.chart;
    		if ('chartRef' in $$props) $$invalidate(0, chartRef = $$new_props.chartRef);
    		if ('props' in $$props) $$invalidate(1, props = $$new_props.props);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [chartRef, props, data, type, options, plugins, canvas_binding];
    }

    class Base extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$z, create_fragment$z, safe_not_equal, { data: 2, type: 3, options: 4, plugins: 5 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Base",
    			options,
    			id: create_fragment$z.name
    		});
    	}

    	get data() {
    		throw new Error("<Base>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set data(value) {
    		throw new Error("<Base>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get type() {
    		throw new Error("<Base>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set type(value) {
    		throw new Error("<Base>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get options() {
    		throw new Error("<Base>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set options(value) {
    		throw new Error("<Base>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get plugins() {
    		throw new Error("<Base>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set plugins(value) {
    		throw new Error("<Base>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\svelte-chartjs\src\Bar.svelte generated by Svelte v3.59.2 */

    function create_fragment$y(ctx) {
    	let base;
    	let current;
    	const base_spread_levels = [/*$$props*/ ctx[0], { type: "bar" }];
    	let base_props = {};

    	for (let i = 0; i < base_spread_levels.length; i += 1) {
    		base_props = assign(base_props, base_spread_levels[i]);
    	}

    	base = new Base({ props: base_props, $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(base.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(base, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const base_changes = (dirty & /*$$props*/ 1)
    			? get_spread_update(base_spread_levels, [get_spread_object(/*$$props*/ ctx[0]), base_spread_levels[1]])
    			: {};

    			base.$set(base_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(base.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(base.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(base, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$y.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$y($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Bar', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$capture_state = () => ({ Base });

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class Bar extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$y, create_fragment$y, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Bar",
    			options,
    			id: create_fragment$y.name
    		});
    	}
    }

    /* node_modules\svelte-chartjs\src\Pie.svelte generated by Svelte v3.59.2 */

    function create_fragment$x(ctx) {
    	let base;
    	let current;
    	const base_spread_levels = [/*$$props*/ ctx[0], { type: "pie" }];
    	let base_props = {};

    	for (let i = 0; i < base_spread_levels.length; i += 1) {
    		base_props = assign(base_props, base_spread_levels[i]);
    	}

    	base = new Base({ props: base_props, $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(base.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(base, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const base_changes = (dirty & /*$$props*/ 1)
    			? get_spread_update(base_spread_levels, [get_spread_object(/*$$props*/ ctx[0]), base_spread_levels[1]])
    			: {};

    			base.$set(base_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(base.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(base.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(base, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$x.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$x($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Pie', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$capture_state = () => ({ Base });

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class Pie extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$x, create_fragment$x, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Pie",
    			options,
    			id: create_fragment$x.name
    		});
    	}
    }

    /* src\components\pages\sections\ChartSection1.svelte generated by Svelte v3.59.2 */

    const { Object: Object_1, console: console_1 } = globals;

    // (260:6) <MDBCardHeader>
    function create_default_slot_8$6(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("客戶設備批數統計圖");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_8$6.name,
    		type: "slot",
    		source: "(260:6) <MDBCardHeader>",
    		ctx
    	});

    	return block;
    }

    // (261:6) <MDBCardBody>
    function create_default_slot_7$7(ctx) {
    	let bar;
    	let current;

    	bar = new Bar({
    			props: {
    				data: /*dataStackedBar*/ ctx[0],
    				height: 580,
    				options: /*stackedBarChartOptions*/ ctx[1]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(bar.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(bar, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(bar.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(bar.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(bar, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_7$7.name,
    		type: "slot",
    		source: "(261:6) <MDBCardBody>",
    		ctx
    	});

    	return block;
    }

    // (259:4) <MDBCard class="mb-4">
    function create_default_slot_6$7(ctx) {
    	let mdbcardheader;
    	let t;
    	let mdbcardbody;
    	let current;

    	mdbcardheader = new MDBCardHeader({
    			props: {
    				$$slots: { default: [create_default_slot_8$6] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbcardbody = new MDBCardBody({
    			props: {
    				$$slots: { default: [create_default_slot_7$7] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbcardheader.$$.fragment);
    			t = space();
    			create_component(mdbcardbody.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbcardheader, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(mdbcardbody, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbcardheader_changes = {};

    			if (dirty & /*$$scope*/ 128) {
    				mdbcardheader_changes.$$scope = { dirty, ctx };
    			}

    			mdbcardheader.$set(mdbcardheader_changes);
    			const mdbcardbody_changes = {};

    			if (dirty & /*$$scope*/ 128) {
    				mdbcardbody_changes.$$scope = { dirty, ctx };
    			}

    			mdbcardbody.$set(mdbcardbody_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbcardheader.$$.fragment, local);
    			transition_in(mdbcardbody.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbcardheader.$$.fragment, local);
    			transition_out(mdbcardbody.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbcardheader, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(mdbcardbody, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_6$7.name,
    		type: "slot",
    		source: "(259:4) <MDBCard class=\\\"mb-4\\\">",
    		ctx
    	});

    	return block;
    }

    // (258:2) <MDBCol md="8" class="mb-4">
    function create_default_slot_5$8(ctx) {
    	let mdbcard;
    	let current;

    	mdbcard = new MDBCard({
    			props: {
    				class: "mb-4",
    				$$slots: { default: [create_default_slot_6$7] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbcard.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbcard, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbcard_changes = {};

    			if (dirty & /*$$scope*/ 128) {
    				mdbcard_changes.$$scope = { dirty, ctx };
    			}

    			mdbcard.$set(mdbcard_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbcard.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbcard.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbcard, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_5$8.name,
    		type: "slot",
    		source: "(258:2) <MDBCol md=\\\"8\\\" class=\\\"mb-4\\\">",
    		ctx
    	});

    	return block;
    }

    // (272:6) <MDBCardHeader>
    function create_default_slot_4$8(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("批數統計圖");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4$8.name,
    		type: "slot",
    		source: "(272:6) <MDBCardHeader>",
    		ctx
    	});

    	return block;
    }

    // (273:6) <MDBCardBody>
    function create_default_slot_3$9(ctx) {
    	let pie;
    	let current;

    	pie = new Pie({
    			props: {
    				data: /*dataPie*/ ctx[2],
    				height: 580,
    				options: /*pieChartOptions*/ ctx[3],
    				plugins: /*pieChartPlugins*/ ctx[4]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(pie.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(pie, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(pie.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(pie.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(pie, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$9.name,
    		type: "slot",
    		source: "(273:6) <MDBCardBody>",
    		ctx
    	});

    	return block;
    }

    // (271:4) <MDBCard class="mb-4">
    function create_default_slot_2$9(ctx) {
    	let mdbcardheader;
    	let t;
    	let mdbcardbody;
    	let current;

    	mdbcardheader = new MDBCardHeader({
    			props: {
    				$$slots: { default: [create_default_slot_4$8] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbcardbody = new MDBCardBody({
    			props: {
    				$$slots: { default: [create_default_slot_3$9] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbcardheader.$$.fragment);
    			t = space();
    			create_component(mdbcardbody.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbcardheader, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(mdbcardbody, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbcardheader_changes = {};

    			if (dirty & /*$$scope*/ 128) {
    				mdbcardheader_changes.$$scope = { dirty, ctx };
    			}

    			mdbcardheader.$set(mdbcardheader_changes);
    			const mdbcardbody_changes = {};

    			if (dirty & /*$$scope*/ 128) {
    				mdbcardbody_changes.$$scope = { dirty, ctx };
    			}

    			mdbcardbody.$set(mdbcardbody_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbcardheader.$$.fragment, local);
    			transition_in(mdbcardbody.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbcardheader.$$.fragment, local);
    			transition_out(mdbcardbody.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbcardheader, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(mdbcardbody, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$9.name,
    		type: "slot",
    		source: "(271:4) <MDBCard class=\\\"mb-4\\\">",
    		ctx
    	});

    	return block;
    }

    // (270:2) <MDBCol md="4" class="mb-4">
    function create_default_slot_1$9(ctx) {
    	let mdbcard;
    	let current;

    	mdbcard = new MDBCard({
    			props: {
    				class: "mb-4",
    				$$slots: { default: [create_default_slot_2$9] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbcard.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbcard, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbcard_changes = {};

    			if (dirty & /*$$scope*/ 128) {
    				mdbcard_changes.$$scope = { dirty, ctx };
    			}

    			mdbcard.$set(mdbcard_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbcard.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbcard.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbcard, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$9.name,
    		type: "slot",
    		source: "(270:2) <MDBCol md=\\\"4\\\" class=\\\"mb-4\\\">",
    		ctx
    	});

    	return block;
    }

    // (257:0) <MDBRow class="mb-4">
    function create_default_slot$b(ctx) {
    	let mdbcol0;
    	let t;
    	let mdbcol1;
    	let current;

    	mdbcol0 = new MDBCol({
    			props: {
    				md: "8",
    				class: "mb-4",
    				$$slots: { default: [create_default_slot_5$8] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbcol1 = new MDBCol({
    			props: {
    				md: "4",
    				class: "mb-4",
    				$$slots: { default: [create_default_slot_1$9] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbcol0.$$.fragment);
    			t = space();
    			create_component(mdbcol1.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbcol0, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(mdbcol1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbcol0_changes = {};

    			if (dirty & /*$$scope*/ 128) {
    				mdbcol0_changes.$$scope = { dirty, ctx };
    			}

    			mdbcol0.$set(mdbcol0_changes);
    			const mdbcol1_changes = {};

    			if (dirty & /*$$scope*/ 128) {
    				mdbcol1_changes.$$scope = { dirty, ctx };
    			}

    			mdbcol1.$set(mdbcol1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbcol0.$$.fragment, local);
    			transition_in(mdbcol1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbcol0.$$.fragment, local);
    			transition_out(mdbcol1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbcol0, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(mdbcol1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$b.name,
    		type: "slot",
    		source: "(257:0) <MDBRow class=\\\"mb-4\\\">",
    		ctx
    	});

    	return block;
    }

    function create_fragment$w(ctx) {
    	let mdbrow;
    	let current;

    	mdbrow = new MDBRow({
    			props: {
    				class: "mb-4",
    				$$slots: { default: [create_default_slot$b] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbrow.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbrow, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const mdbrow_changes = {};

    			if (dirty & /*$$scope*/ 128) {
    				mdbrow_changes.$$scope = { dirty, ctx };
    			}

    			mdbrow.$set(mdbrow_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbrow.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbrow.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbrow, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$w.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$w($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ChartSection1', slots, []);

    	const dataBar = {
    		labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],
    		datasets: [
    			{
    				label: 'On time 批數',
    				data: [12, 39, 3, 50, 2, 32, 84],
    				backgroundColor: 'rgba(245, 74, 85, 0.5)',
    				borderWidth: 1
    			},
    			{
    				label: 'SOD Risk 批數',
    				data: [56, 24, 5, 16, 45, 24, 8],
    				backgroundColor: 'rgba(90, 173, 246, 0.5)',
    				borderWidth: 1
    			},
    			{
    				label: 'Delay 批數',
    				data: [12, 25, 54, 3, 15, 44, 3],
    				backgroundColor: 'rgba(245, 192, 50, 0.5)',
    				borderWidth: 1
    			}
    		]
    	};

    	const barChartOptions = {
    		responsive: true,
    		maintainAspectRatio: false,
    		scales: {
    			xAxes: [
    				{
    					barPercentage: 1,
    					gridLines: {
    						display: true,
    						color: 'rgba(0, 0, 0, 0.1)'
    					}
    				}
    			],
    			yAxes: [
    				{
    					gridLines: {
    						display: true,
    						color: 'rgba(0, 0, 0, 0.1)'
    					},
    					ticks: { beginAtZero: true }
    				}
    			]
    		}
    	};

    	// implemented a stacked bar chart data and options, display inline values in a stacked barchart.
    	const dataStackedBar = {
    		labels: [
    			['BRCM', 'Baily'],
    			['Socionext', 'Taurus'],
    			['MTK', 'A60499'],
    			['BRM', 'JR2-7P7M'],
    			['Qualcomm', 'FO-IL CL L1 DTC'],
    			['BOSCH', 'Maokung'],
    			['Intel', 'BD Wafer'],
    			['WINBOND', 'WTCMF00QSS9E'],
    			['BRCM', 'TH6'],
    			['CISCO', 'LaMP'],
    			['Qualcomm', 'APD1']
    		],
    		datasets: [
    			{
    				label: 'On Time批數',
    				backgroundColor: 'rgba(90, 173, 246, 0.5)',
    				data: [2, 0, 6, 1, 1, 0, 2, 2, 1, 4, 6],
    				hoverBorderWidth: 2,
    				hoverBorderColor: 'lightgrey',
    				textColor: 'black'
    			},
    			{
    				label: 'SOD Risk',
    				backgroundColor: 'rgba(245, 192, 50, 0.5)',
    				data: [0, 2, 0, 2, 1, 0, 0, 0, 1, 0, 0],
    				hoverBorderWidth: 2,
    				hoverBorderColor: 'lightgrey',
    				textColor: 'black'
    			},
    			{
    				label: 'Delay批數',
    				backgroundColor: 'rgba(245, 74, 85, 0.5)',
    				data: [1, 0, 0, 0, 0, 1, 0, 0, 2, 0, 0],
    				hoverBorderWidth: 2,
    				hoverBorderColor: 'lightgrey',
    				textColor: 'black'
    			}
    		]
    	};

    	const stackedBarChartOptions = {
    		responsive: true,
    		maintainAspectRatio: false,
    		scales: {
    			xAxes: [
    				{
    					stacked: true,
    					barPercentage: 0.6,
    					gridLines: {
    						display: true,
    						color: 'rgba(0, 0, 0, 0.1)'
    					},
    					ticks: { fontSize: 9, fontString: 'bold' }
    				}
    			],
    			yAxes: [
    				{
    					stacked: true,
    					display: true,
    					gridLines: {
    						display: true,
    						color: 'rgba(0, 0, 0, 0.1)'
    					},
    					ticks: { beginAtZero: true, max: 8, min: 0 }
    				}
    			]
    		},
    		animation: {
    			onComplete(animation) {
    				const ctx = this.chart.ctx;
    				ctx.font = Chart.helpers.fontString(Chart.defaults.global.defaultFontSize, 'normal', Chart.defaults.global.defaultFontFamily);
    				ctx.fillStyle = this.chart.config.options.defaultFontColor;
    				ctx.textAlign = 'center';
    				ctx.textBaseline = 'bottom';

    				this.data.datasets.forEach(function (dataset) {
    					for (let i = 0; i < dataset.data.length; i++) {
    						console.log(dataset.data[i]);
    						const model = dataset._meta[Object.keys(dataset._meta)[0]].data[i]._model;

    						if (dataset.data[i] > 0) {
    							ctx.fillText(dataset.data[i], model.x, model.y + model.y / 10);
    						}
    					}
    				});
    			}
    		}
    	}; // tooltips: {
    	//   mode: 'index',
    	//   intersect: false

    	// }
    	const dataPie = {
    		labels: [
    			'BRCM Baily',
    			'Socionext Taurus',
    			'MTK A60499',
    			'BRM JR2-7P7M',
    			'Qualcomm FO-IL CL L1 DTC',
    			'BOSCH Maokung',
    			'Intel BD Wafer',
    			'WINBOND WTCMF00QSS9E',
    			'BRCM TH6',
    			'CISCO LaMP',
    			'Qualcomm APD1'
    		],
    		datasets: [
    			{
    				data: [3, 2, 6, 3, 2, 1, 2, 2, 4, 4, 6],
    				backgroundColor: [
    					'#F7464A',
    					'#46BFBD',
    					'#FDB45C',
    					'#949FB1',
    					'#4D5360',
    					'#ac64ad',
    					'#ffff56',
    					'#63ff7a',
    					'#36a2eb',
    					'#cc65fe',
    					'#7b56ff'
    				],
    				hoverBackgroundColor: [
    					'#FF5A5E',
    					'#5AD3D1',
    					'#FFC870',
    					'#A8B3C5',
    					'#616774',
    					'#da92db',
    					'#ffce56',
    					'#73ff63',
    					'#36b2eb',
    					'#dd65fe',
    					'#6756ff'
    				]
    			}
    		]
    	};

    	const pieChartOptions = {
    		responsive: true,
    		maintainAspectRatio: false, // 保持图表原有比例
    		animation: {
    			onComplete() {
    				const ctx = this.chart.ctx;
    				const datasets = this.data.datasets;
    				const meta = this.chart.getDatasetMeta(0);
    				const midX = this.chart.width / 2;
    				const midY = this.chart.height / 2;
    				const radius = this.chart.height / 2;
    				ctx.fillStyle = 'black';
    				const textSize = this.chart.width / 30;
    				ctx.font = textSize + 'px Verdana';

    				meta.data.forEach((segment, i) => {
    					const value = datasets[0].data[i];
    					const startAngle = segment._model.startAngle;
    					const endAngle = segment._model.endAngle;
    					const middleAngle = startAngle + (endAngle - startAngle) / 2;
    					const posX = radius / 2 * Math.cos(middleAngle) + midX;
    					const posY = radius / 2 * Math.sin(middleAngle) + midY;
    					const w_offset = ctx.measureText(value).width;
    					const h_offset = textSize * 4;
    					ctx.fillText(value, posX - w_offset, posY + h_offset);
    				});
    			}
    		}
    	};

    	const pieChartPlugins = {};
    	const writable_props = [];

    	Object_1.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1.warn(`<ChartSection1> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		MDBCard,
    		MDBCardHeader,
    		MDBListGroup,
    		MDBListGroupItem,
    		MDBCardBody,
    		MDBIcon,
    		MDBRow,
    		MDBCol,
    		MDBBadge,
    		Bar,
    		Pie,
    		dataBar,
    		barChartOptions,
    		dataStackedBar,
    		stackedBarChartOptions,
    		dataPie,
    		pieChartOptions,
    		pieChartPlugins
    	});

    	return [
    		dataStackedBar,
    		stackedBarChartOptions,
    		dataPie,
    		pieChartOptions,
    		pieChartPlugins
    	];
    }

    class ChartSection1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$w, create_fragment$w, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ChartSection1",
    			options,
    			id: create_fragment$w.name
    		});
    	}
    }

    /* node_modules\svelte-chartjs\src\Line.svelte generated by Svelte v3.59.2 */

    function create_fragment$v(ctx) {
    	let base;
    	let current;
    	const base_spread_levels = [/*$$props*/ ctx[0], { type: "line" }];
    	let base_props = {};

    	for (let i = 0; i < base_spread_levels.length; i += 1) {
    		base_props = assign(base_props, base_spread_levels[i]);
    	}

    	base = new Base({ props: base_props, $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(base.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(base, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const base_changes = (dirty & /*$$props*/ 1)
    			? get_spread_update(base_spread_levels, [get_spread_object(/*$$props*/ ctx[0]), base_spread_levels[1]])
    			: {};

    			base.$set(base_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(base.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(base.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(base, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$v.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$v($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Line', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$capture_state = () => ({ Base });

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class Line extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$v, create_fragment$v, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Line",
    			options,
    			id: create_fragment$v.name
    		});
    	}
    }

    /* node_modules\svelte-chartjs\src\Radar.svelte generated by Svelte v3.59.2 */

    function create_fragment$u(ctx) {
    	let base;
    	let current;
    	const base_spread_levels = [/*$$props*/ ctx[0], { type: "radar" }];
    	let base_props = {};

    	for (let i = 0; i < base_spread_levels.length; i += 1) {
    		base_props = assign(base_props, base_spread_levels[i]);
    	}

    	base = new Base({ props: base_props, $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(base.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(base, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const base_changes = (dirty & /*$$props*/ 1)
    			? get_spread_update(base_spread_levels, [get_spread_object(/*$$props*/ ctx[0]), base_spread_levels[1]])
    			: {};

    			base.$set(base_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(base.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(base.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(base, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$u.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$u($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Radar', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$capture_state = () => ({ Base });

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class Radar extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$u, create_fragment$u, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Radar",
    			options,
    			id: create_fragment$u.name
    		});
    	}
    }

    /* node_modules\svelte-chartjs\src\Doughnut.svelte generated by Svelte v3.59.2 */

    function create_fragment$t(ctx) {
    	let base;
    	let current;
    	const base_spread_levels = [/*$$props*/ ctx[0], { type: "doughnut" }];
    	let base_props = {};

    	for (let i = 0; i < base_spread_levels.length; i += 1) {
    		base_props = assign(base_props, base_spread_levels[i]);
    	}

    	base = new Base({ props: base_props, $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(base.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(base, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const base_changes = (dirty & /*$$props*/ 1)
    			? get_spread_update(base_spread_levels, [get_spread_object(/*$$props*/ ctx[0]), base_spread_levels[1]])
    			: {};

    			base.$set(base_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(base.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(base.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(base, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$t.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$t($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Doughnut', slots, []);

    	$$self.$$set = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    	};

    	$$self.$capture_state = () => ({ Base });

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(0, $$props = assign(assign({}, $$props), $$new_props));
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);
    	return [$$props];
    }

    class Doughnut extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$t, create_fragment$t, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Doughnut",
    			options,
    			id: create_fragment$t.name
    		});
    	}
    }

    /* src\components\pages\sections\ChartSection2.svelte generated by Svelte v3.59.2 */

    // (72:6) <MDBCardHeader>
    function create_default_slot_12$4(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Line chart");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_12$4.name,
    		type: "slot",
    		source: "(72:6) <MDBCardHeader>",
    		ctx
    	});

    	return block;
    }

    // (73:6) <MDBCardBody>
    function create_default_slot_11$5(ctx) {
    	let line;
    	let current;

    	line = new Line({
    			props: {
    				data: /*dataLine*/ ctx[0],
    				options: { responsive: true }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(line.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(line, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(line.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(line.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(line, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_11$5.name,
    		type: "slot",
    		source: "(73:6) <MDBCardBody>",
    		ctx
    	});

    	return block;
    }

    // (71:4) <MDBCard class="mb-4">
    function create_default_slot_10$5(ctx) {
    	let mdbcardheader;
    	let t;
    	let mdbcardbody;
    	let current;

    	mdbcardheader = new MDBCardHeader({
    			props: {
    				$$slots: { default: [create_default_slot_12$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbcardbody = new MDBCardBody({
    			props: {
    				$$slots: { default: [create_default_slot_11$5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbcardheader.$$.fragment);
    			t = space();
    			create_component(mdbcardbody.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbcardheader, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(mdbcardbody, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbcardheader_changes = {};

    			if (dirty & /*$$scope*/ 8) {
    				mdbcardheader_changes.$$scope = { dirty, ctx };
    			}

    			mdbcardheader.$set(mdbcardheader_changes);
    			const mdbcardbody_changes = {};

    			if (dirty & /*$$scope*/ 8) {
    				mdbcardbody_changes.$$scope = { dirty, ctx };
    			}

    			mdbcardbody.$set(mdbcardbody_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbcardheader.$$.fragment, local);
    			transition_in(mdbcardbody.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbcardheader.$$.fragment, local);
    			transition_out(mdbcardbody.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbcardheader, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(mdbcardbody, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_10$5.name,
    		type: "slot",
    		source: "(71:4) <MDBCard class=\\\"mb-4\\\">",
    		ctx
    	});

    	return block;
    }

    // (70:2) <MDBCol md="12" lg="4" class="mb-4">
    function create_default_slot_9$5(ctx) {
    	let mdbcard;
    	let current;

    	mdbcard = new MDBCard({
    			props: {
    				class: "mb-4",
    				$$slots: { default: [create_default_slot_10$5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbcard.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbcard, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbcard_changes = {};

    			if (dirty & /*$$scope*/ 8) {
    				mdbcard_changes.$$scope = { dirty, ctx };
    			}

    			mdbcard.$set(mdbcard_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbcard.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbcard.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbcard, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_9$5.name,
    		type: "slot",
    		source: "(70:2) <MDBCol md=\\\"12\\\" lg=\\\"4\\\" class=\\\"mb-4\\\">",
    		ctx
    	});

    	return block;
    }

    // (80:6) <MDBCardHeader>
    function create_default_slot_8$5(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Radar chart");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_8$5.name,
    		type: "slot",
    		source: "(80:6) <MDBCardHeader>",
    		ctx
    	});

    	return block;
    }

    // (81:6) <MDBCardBody>
    function create_default_slot_7$6(ctx) {
    	let radar;
    	let current;

    	radar = new Radar({
    			props: {
    				data: /*dataRadar*/ ctx[1],
    				options: { responsive: true }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(radar.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(radar, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(radar.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(radar.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(radar, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_7$6.name,
    		type: "slot",
    		source: "(81:6) <MDBCardBody>",
    		ctx
    	});

    	return block;
    }

    // (79:4) <MDBCard class="mb-4">
    function create_default_slot_6$6(ctx) {
    	let mdbcardheader;
    	let t;
    	let mdbcardbody;
    	let current;

    	mdbcardheader = new MDBCardHeader({
    			props: {
    				$$slots: { default: [create_default_slot_8$5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbcardbody = new MDBCardBody({
    			props: {
    				$$slots: { default: [create_default_slot_7$6] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbcardheader.$$.fragment);
    			t = space();
    			create_component(mdbcardbody.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbcardheader, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(mdbcardbody, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbcardheader_changes = {};

    			if (dirty & /*$$scope*/ 8) {
    				mdbcardheader_changes.$$scope = { dirty, ctx };
    			}

    			mdbcardheader.$set(mdbcardheader_changes);
    			const mdbcardbody_changes = {};

    			if (dirty & /*$$scope*/ 8) {
    				mdbcardbody_changes.$$scope = { dirty, ctx };
    			}

    			mdbcardbody.$set(mdbcardbody_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbcardheader.$$.fragment, local);
    			transition_in(mdbcardbody.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbcardheader.$$.fragment, local);
    			transition_out(mdbcardbody.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbcardheader, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(mdbcardbody, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_6$6.name,
    		type: "slot",
    		source: "(79:4) <MDBCard class=\\\"mb-4\\\">",
    		ctx
    	});

    	return block;
    }

    // (78:2) <MDBCol md="12" lg="4" class="mb-4">
    function create_default_slot_5$7(ctx) {
    	let mdbcard;
    	let current;

    	mdbcard = new MDBCard({
    			props: {
    				class: "mb-4",
    				$$slots: { default: [create_default_slot_6$6] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbcard.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbcard, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbcard_changes = {};

    			if (dirty & /*$$scope*/ 8) {
    				mdbcard_changes.$$scope = { dirty, ctx };
    			}

    			mdbcard.$set(mdbcard_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbcard.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbcard.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbcard, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_5$7.name,
    		type: "slot",
    		source: "(78:2) <MDBCol md=\\\"12\\\" lg=\\\"4\\\" class=\\\"mb-4\\\">",
    		ctx
    	});

    	return block;
    }

    // (88:6) <MDBCardHeader>
    function create_default_slot_4$7(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Doughnut chart");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4$7.name,
    		type: "slot",
    		source: "(88:6) <MDBCardHeader>",
    		ctx
    	});

    	return block;
    }

    // (89:6) <MDBCardBody >
    function create_default_slot_3$8(ctx) {
    	let doughnut;
    	let current;

    	doughnut = new Doughnut({
    			props: {
    				data: /*dataDoughnut*/ ctx[2],
    				options: { responsive: true }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(doughnut.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(doughnut, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(doughnut.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(doughnut.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(doughnut, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$8.name,
    		type: "slot",
    		source: "(89:6) <MDBCardBody >",
    		ctx
    	});

    	return block;
    }

    // (87:4) <MDBCard class="mb-4">
    function create_default_slot_2$8(ctx) {
    	let mdbcardheader;
    	let t;
    	let mdbcardbody;
    	let current;

    	mdbcardheader = new MDBCardHeader({
    			props: {
    				$$slots: { default: [create_default_slot_4$7] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbcardbody = new MDBCardBody({
    			props: {
    				$$slots: { default: [create_default_slot_3$8] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbcardheader.$$.fragment);
    			t = space();
    			create_component(mdbcardbody.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbcardheader, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(mdbcardbody, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbcardheader_changes = {};

    			if (dirty & /*$$scope*/ 8) {
    				mdbcardheader_changes.$$scope = { dirty, ctx };
    			}

    			mdbcardheader.$set(mdbcardheader_changes);
    			const mdbcardbody_changes = {};

    			if (dirty & /*$$scope*/ 8) {
    				mdbcardbody_changes.$$scope = { dirty, ctx };
    			}

    			mdbcardbody.$set(mdbcardbody_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbcardheader.$$.fragment, local);
    			transition_in(mdbcardbody.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbcardheader.$$.fragment, local);
    			transition_out(mdbcardbody.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbcardheader, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(mdbcardbody, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$8.name,
    		type: "slot",
    		source: "(87:4) <MDBCard class=\\\"mb-4\\\">",
    		ctx
    	});

    	return block;
    }

    // (86:2) <MDBCol md="12" lg="4" class="mb-4">
    function create_default_slot_1$8(ctx) {
    	let mdbcard;
    	let current;

    	mdbcard = new MDBCard({
    			props: {
    				class: "mb-4",
    				$$slots: { default: [create_default_slot_2$8] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbcard.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbcard, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbcard_changes = {};

    			if (dirty & /*$$scope*/ 8) {
    				mdbcard_changes.$$scope = { dirty, ctx };
    			}

    			mdbcard.$set(mdbcard_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbcard.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbcard.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbcard, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$8.name,
    		type: "slot",
    		source: "(86:2) <MDBCol md=\\\"12\\\" lg=\\\"4\\\" class=\\\"mb-4\\\">",
    		ctx
    	});

    	return block;
    }

    // (69:0) <MDBRow class="mb-4">
    function create_default_slot$a(ctx) {
    	let mdbcol0;
    	let t0;
    	let mdbcol1;
    	let t1;
    	let mdbcol2;
    	let current;

    	mdbcol0 = new MDBCol({
    			props: {
    				md: "12",
    				lg: "4",
    				class: "mb-4",
    				$$slots: { default: [create_default_slot_9$5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbcol1 = new MDBCol({
    			props: {
    				md: "12",
    				lg: "4",
    				class: "mb-4",
    				$$slots: { default: [create_default_slot_5$7] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbcol2 = new MDBCol({
    			props: {
    				md: "12",
    				lg: "4",
    				class: "mb-4",
    				$$slots: { default: [create_default_slot_1$8] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbcol0.$$.fragment);
    			t0 = space();
    			create_component(mdbcol1.$$.fragment);
    			t1 = space();
    			create_component(mdbcol2.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbcol0, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(mdbcol1, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(mdbcol2, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbcol0_changes = {};

    			if (dirty & /*$$scope*/ 8) {
    				mdbcol0_changes.$$scope = { dirty, ctx };
    			}

    			mdbcol0.$set(mdbcol0_changes);
    			const mdbcol1_changes = {};

    			if (dirty & /*$$scope*/ 8) {
    				mdbcol1_changes.$$scope = { dirty, ctx };
    			}

    			mdbcol1.$set(mdbcol1_changes);
    			const mdbcol2_changes = {};

    			if (dirty & /*$$scope*/ 8) {
    				mdbcol2_changes.$$scope = { dirty, ctx };
    			}

    			mdbcol2.$set(mdbcol2_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbcol0.$$.fragment, local);
    			transition_in(mdbcol1.$$.fragment, local);
    			transition_in(mdbcol2.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbcol0.$$.fragment, local);
    			transition_out(mdbcol1.$$.fragment, local);
    			transition_out(mdbcol2.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbcol0, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(mdbcol1, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(mdbcol2, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$a.name,
    		type: "slot",
    		source: "(69:0) <MDBRow class=\\\"mb-4\\\">",
    		ctx
    	});

    	return block;
    }

    function create_fragment$s(ctx) {
    	let mdbrow;
    	let current;

    	mdbrow = new MDBRow({
    			props: {
    				class: "mb-4",
    				$$slots: { default: [create_default_slot$a] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbrow.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbrow, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const mdbrow_changes = {};

    			if (dirty & /*$$scope*/ 8) {
    				mdbrow_changes.$$scope = { dirty, ctx };
    			}

    			mdbrow.$set(mdbrow_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbrow.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbrow.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbrow, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$s.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$s($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ChartSection2', slots, []);

    	const dataLine = {
    		labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],
    		datasets: [
    			{
    				label: 'My First dataset',
    				fill: false,
    				lineTension: 0.1,
    				backgroundColor: 'rgba(75,192,192,0.4)',
    				borderColor: 'rgba(75,192,192,1)',
    				borderCapStyle: 'butt',
    				borderDash: [],
    				borderDashOffset: 0.0,
    				borderJoinStyle: 'miter',
    				pointBorderColor: 'rgba(75,192,192,1)',
    				pointBackgroundColor: '#fff',
    				pointBorderWidth: 1,
    				pointHoverRadius: 5,
    				pointHoverBackgroundColor: 'rgba(75,192,192,1)',
    				pointHoverBorderColor: 'rgba(220,220,220,1)',
    				pointHoverBorderWidth: 2,
    				pointRadius: 1,
    				pointHitRadius: 10,
    				data: [65, 59, 80, 81, 56, 55, 40]
    			}
    		]
    	};

    	const dataRadar = {
    		labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],
    		datasets: [
    			{
    				label: '#1',
    				backgroundColor: 'rgba(245, 74, 85, 0.5)',
    				data: [65, 59, 80, 81, 56, 55, 40]
    			},
    			{
    				label: '#2',
    				backgroundColor: 'rgba(90, 173, 246, 0.5)',
    				data: [12, 42, 121, 56, 24, 12, 2]
    			},
    			{
    				label: '#3',
    				backgroundColor: 'rgba(245, 192, 50, 0.5)',
    				data: [2, 123, 154, 76, 54, 23, 5]
    			}
    		]
    	};

    	const dataDoughnut = {
    		labels: ["Red", "Green", "Yellow", "Grey", "Dark Grey"],
    		datasets: [
    			{
    				data: [300, 50, 100, 40, 120],
    				backgroundColor: ["#F7464A", "#46BFBD", "#FDB45C", "#949FB1", "#4D5360"],
    				hoverBackgroundColor: ["#FF5A5E", "#5AD3D1", "#FFC870", "#A8B3C5", "#616774"]
    			}
    		]
    	};

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ChartSection2> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		MDBCard,
    		MDBCardHeader,
    		MDBCardBody,
    		MDBRow,
    		MDBCol,
    		Line,
    		Radar,
    		Doughnut,
    		dataLine,
    		dataRadar,
    		dataDoughnut
    	});

    	return [dataLine, dataRadar, dataDoughnut];
    }

    class ChartSection2 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$s, create_fragment$s, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ChartSection2",
    			options,
    			id: create_fragment$s.name
    		});
    	}
    }

    /* node_modules\mdbsvelte\src\MDBTable.svelte generated by Svelte v3.59.2 */
    const file$p = "node_modules\\mdbsvelte\\src\\MDBTable.svelte";

    // (41:0) {:else}
    function create_else_block$5(ctx) {
    	let table;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[14].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[13], null);
    	let table_levels = [/*props*/ ctx[4], { class: /*classes*/ ctx[2] }];
    	let table_data = {};

    	for (let i = 0; i < table_levels.length; i += 1) {
    		table_data = assign(table_data, table_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			table = element("table");
    			if (default_slot) default_slot.c();
    			set_attributes(table, table_data);
    			add_location(table, file$p, 41, 2, 1095);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, table, anchor);

    			if (default_slot) {
    				default_slot.m(table, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = action_destroyer(/*forwardEvents*/ ctx[3].call(null, table));
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 8192)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[13],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[13])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[13], dirty, null),
    						null
    					);
    				}
    			}

    			set_attributes(table, table_data = get_spread_update(table_levels, [
    				/*props*/ ctx[4],
    				(!current || dirty & /*classes*/ 4) && { class: /*classes*/ ctx[2] }
    			]));
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(table);
    			if (default_slot) default_slot.d(detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$5.name,
    		type: "else",
    		source: "(41:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (35:0) {#if responsive}
    function create_if_block$7(ctx) {
    	let div;
    	let table;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[14].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[13], null);
    	let table_levels = [/*props*/ ctx[4], { class: /*classes*/ ctx[2] }];
    	let table_data = {};

    	for (let i = 0; i < table_levels.length; i += 1) {
    		table_data = assign(table_data, table_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			table = element("table");
    			if (default_slot) default_slot.c();
    			set_attributes(table, table_data);
    			add_location(table, file$p, 36, 4, 995);
    			attr_dev(div, "class", /*responsiveClassName*/ ctx[1]);
    			add_location(div, file$p, 35, 2, 957);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, table);

    			if (default_slot) {
    				default_slot.m(table, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = action_destroyer(/*forwardEvents*/ ctx[3].call(null, table));
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 8192)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[13],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[13])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[13], dirty, null),
    						null
    					);
    				}
    			}

    			set_attributes(table, table_data = get_spread_update(table_levels, [
    				/*props*/ ctx[4],
    				(!current || dirty & /*classes*/ 4) && { class: /*classes*/ ctx[2] }
    			]));

    			if (!current || dirty & /*responsiveClassName*/ 2) {
    				attr_dev(div, "class", /*responsiveClassName*/ ctx[1]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$7.name,
    		type: "if",
    		source: "(35:0) {#if responsive}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$r(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block$7, create_else_block$5];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*responsive*/ ctx[0]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$r.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$r($$self, $$props, $$invalidate) {
    	let classes;
    	let responsiveClassName;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('MDBTable', slots, ['default']);
    	const forwardEvents = forwardEventsBuilder(current_component);
    	let { class: className = '' } = $$props;
    	let { size = '' } = $$props;
    	let { bordered = false } = $$props;
    	let { borderless = false } = $$props;
    	let { striped = false } = $$props;
    	let { dark = false } = $$props;
    	let { hover = false } = $$props;
    	let { responsive = false } = $$props;
    	let { small } = $$props;
    	const props = clean$1($$props);

    	$$self.$$.on_mount.push(function () {
    		if (small === undefined && !('small' in $$props || $$self.$$.bound[$$self.$$.props['small']])) {
    			console.warn("<MDBTable> was created without expected prop 'small'");
    		}
    	});

    	$$self.$$set = $$new_props => {
    		$$invalidate(15, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ('class' in $$new_props) $$invalidate(5, className = $$new_props.class);
    		if ('size' in $$new_props) $$invalidate(6, size = $$new_props.size);
    		if ('bordered' in $$new_props) $$invalidate(7, bordered = $$new_props.bordered);
    		if ('borderless' in $$new_props) $$invalidate(8, borderless = $$new_props.borderless);
    		if ('striped' in $$new_props) $$invalidate(9, striped = $$new_props.striped);
    		if ('dark' in $$new_props) $$invalidate(10, dark = $$new_props.dark);
    		if ('hover' in $$new_props) $$invalidate(11, hover = $$new_props.hover);
    		if ('responsive' in $$new_props) $$invalidate(0, responsive = $$new_props.responsive);
    		if ('small' in $$new_props) $$invalidate(12, small = $$new_props.small);
    		if ('$$scope' in $$new_props) $$invalidate(13, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		clean: clean$1,
    		clsx,
    		forwardEventsBuilder,
    		current_component,
    		forwardEvents,
    		className,
    		size,
    		bordered,
    		borderless,
    		striped,
    		dark,
    		hover,
    		responsive,
    		small,
    		props,
    		responsiveClassName,
    		classes
    	});

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(15, $$props = assign(assign({}, $$props), $$new_props));
    		if ('className' in $$props) $$invalidate(5, className = $$new_props.className);
    		if ('size' in $$props) $$invalidate(6, size = $$new_props.size);
    		if ('bordered' in $$props) $$invalidate(7, bordered = $$new_props.bordered);
    		if ('borderless' in $$props) $$invalidate(8, borderless = $$new_props.borderless);
    		if ('striped' in $$props) $$invalidate(9, striped = $$new_props.striped);
    		if ('dark' in $$props) $$invalidate(10, dark = $$new_props.dark);
    		if ('hover' in $$props) $$invalidate(11, hover = $$new_props.hover);
    		if ('responsive' in $$props) $$invalidate(0, responsive = $$new_props.responsive);
    		if ('small' in $$props) $$invalidate(12, small = $$new_props.small);
    		if ('responsiveClassName' in $$props) $$invalidate(1, responsiveClassName = $$new_props.responsiveClassName);
    		if ('classes' in $$props) $$invalidate(2, classes = $$new_props.classes);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*className, size, bordered, borderless, striped, dark, hover, small*/ 8160) {
    			$$invalidate(2, classes = clsx(className, 'table', size ? 'table-' + size : false, bordered ? 'table-bordered' : false, borderless ? 'table-borderless' : false, striped ? 'table-striped' : false, dark ? 'table-dark' : false, hover ? 'table-hover' : false, small ? 'table-sm' : false));
    		}

    		if ($$self.$$.dirty & /*responsive*/ 1) {
    			$$invalidate(1, responsiveClassName = responsive === true
    			? 'table-responsive'
    			: `table-responsive-${responsive}`);
    		}
    	};

    	$$props = exclude_internal_props($$props);

    	return [
    		responsive,
    		responsiveClassName,
    		classes,
    		forwardEvents,
    		props,
    		className,
    		size,
    		bordered,
    		borderless,
    		striped,
    		dark,
    		hover,
    		small,
    		$$scope,
    		slots
    	];
    }

    class MDBTable extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$r, create_fragment$r, safe_not_equal, {
    			class: 5,
    			size: 6,
    			bordered: 7,
    			borderless: 8,
    			striped: 9,
    			dark: 10,
    			hover: 11,
    			responsive: 0,
    			small: 12
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "MDBTable",
    			options,
    			id: create_fragment$r.name
    		});
    	}

    	get class() {
    		throw new Error("<MDBTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<MDBTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get size() {
    		throw new Error("<MDBTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set size(value) {
    		throw new Error("<MDBTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get bordered() {
    		throw new Error("<MDBTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set bordered(value) {
    		throw new Error("<MDBTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get borderless() {
    		throw new Error("<MDBTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set borderless(value) {
    		throw new Error("<MDBTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get striped() {
    		throw new Error("<MDBTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set striped(value) {
    		throw new Error("<MDBTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get dark() {
    		throw new Error("<MDBTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set dark(value) {
    		throw new Error("<MDBTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get hover() {
    		throw new Error("<MDBTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set hover(value) {
    		throw new Error("<MDBTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get responsive() {
    		throw new Error("<MDBTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set responsive(value) {
    		throw new Error("<MDBTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get small() {
    		throw new Error("<MDBTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set small(value) {
    		throw new Error("<MDBTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\mdbsvelte\src\MDBTableHead.svelte generated by Svelte v3.59.2 */
    const file$o = "node_modules\\mdbsvelte\\src\\MDBTableHead.svelte";

    function get_each_context$3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[10] = list[i];
    	return child_ctx;
    }

    // (20:0) {:else}
    function create_else_block$4(ctx) {
    	let tr;
    	let each_value = /*columns*/ ctx[0];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$3(get_each_context$3(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			tr = element("tr");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			add_location(tr, file$o, 20, 2, 543);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, tr, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				if (each_blocks[i]) {
    					each_blocks[i].m(tr, null);
    				}
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*columns*/ 1) {
    				each_value = /*columns*/ ctx[0];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$3(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$3(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(tr, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(tr);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$4.name,
    		type: "else",
    		source: "(20:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (18:0) {#if !columns}
    function create_if_block$6(ctx) {
    	let current;
    	const default_slot_template = /*#slots*/ ctx[8].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[7], null);

    	const block = {
    		c: function create() {
    			if (default_slot) default_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 128)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[7],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[7])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[7], dirty, null),
    						null
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$6.name,
    		type: "if",
    		source: "(18:0) {#if !columns}",
    		ctx
    	});

    	return block;
    }

    // (22:4) {#each columns as col}
    function create_each_block$3(ctx) {
    	let th;
    	let raw_value = /*col*/ ctx[10] + "";

    	const block = {
    		c: function create() {
    			th = element("th");
    			add_location(th, file$o, 22, 6, 581);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, th, anchor);
    			th.innerHTML = raw_value;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*columns*/ 1 && raw_value !== (raw_value = /*col*/ ctx[10] + "")) th.innerHTML = raw_value;		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(th);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$3.name,
    		type: "each",
    		source: "(22:4) {#each columns as col}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$q(ctx) {
    	let thead;
    	let current_block_type_index;
    	let if_block;
    	let current;
    	let mounted;
    	let dispose;
    	const if_block_creators = [create_if_block$6, create_else_block$4];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (!/*columns*/ ctx[0]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	let thead_levels = [/*props*/ ctx[3], { class: /*elementClasses*/ ctx[1] }];
    	let thead_data = {};

    	for (let i = 0; i < thead_levels.length; i += 1) {
    		thead_data = assign(thead_data, thead_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			thead = element("thead");
    			if_block.c();
    			set_attributes(thead, thead_data);
    			add_location(thead, file$o, 16, 0, 448);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, thead, anchor);
    			if_blocks[current_block_type_index].m(thead, null);
    			current = true;

    			if (!mounted) {
    				dispose = action_destroyer(/*forwardEvents*/ ctx[2].call(null, thead));
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(thead, null);
    			}

    			set_attributes(thead, thead_data = get_spread_update(thead_levels, [
    				/*props*/ ctx[3],
    				(!current || dirty & /*elementClasses*/ 2) && { class: /*elementClasses*/ ctx[1] }
    			]));
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(thead);
    			if_blocks[current_block_type_index].d();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$q.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$q($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('MDBTableHead', slots, ['default']);
    	const forwardEvents = forwardEventsBuilder(current_component);
    	let { class: className = '' } = $$props;
    	const props = clean$1($$props, []);
    	let elementClasses;
    	let { color } = $$props;
    	let { textWhite } = $$props;
    	let { columns } = $$props;

    	$$self.$$.on_mount.push(function () {
    		if (color === undefined && !('color' in $$props || $$self.$$.bound[$$self.$$.props['color']])) {
    			console.warn("<MDBTableHead> was created without expected prop 'color'");
    		}

    		if (textWhite === undefined && !('textWhite' in $$props || $$self.$$.bound[$$self.$$.props['textWhite']])) {
    			console.warn("<MDBTableHead> was created without expected prop 'textWhite'");
    		}

    		if (columns === undefined && !('columns' in $$props || $$self.$$.bound[$$self.$$.props['columns']])) {
    			console.warn("<MDBTableHead> was created without expected prop 'columns'");
    		}
    	});

    	$$self.$$set = $$new_props => {
    		$$invalidate(9, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ('class' in $$new_props) $$invalidate(4, className = $$new_props.class);
    		if ('color' in $$new_props) $$invalidate(5, color = $$new_props.color);
    		if ('textWhite' in $$new_props) $$invalidate(6, textWhite = $$new_props.textWhite);
    		if ('columns' in $$new_props) $$invalidate(0, columns = $$new_props.columns);
    		if ('$$scope' in $$new_props) $$invalidate(7, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		clean: clean$1,
    		clsx,
    		forwardEventsBuilder,
    		current_component,
    		forwardEvents,
    		className,
    		props,
    		elementClasses,
    		color,
    		textWhite,
    		columns
    	});

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(9, $$props = assign(assign({}, $$props), $$new_props));
    		if ('className' in $$props) $$invalidate(4, className = $$new_props.className);
    		if ('elementClasses' in $$props) $$invalidate(1, elementClasses = $$new_props.elementClasses);
    		if ('color' in $$props) $$invalidate(5, color = $$new_props.color);
    		if ('textWhite' in $$props) $$invalidate(6, textWhite = $$new_props.textWhite);
    		if ('columns' in $$props) $$invalidate(0, columns = $$new_props.columns);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*className, color, textWhite*/ 112) {
    			$$invalidate(1, elementClasses = clsx(className, color, { 'text-white': textWhite }));
    		}
    	};

    	$$props = exclude_internal_props($$props);

    	return [
    		columns,
    		elementClasses,
    		forwardEvents,
    		props,
    		className,
    		color,
    		textWhite,
    		$$scope,
    		slots
    	];
    }

    class MDBTableHead extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$q, create_fragment$q, safe_not_equal, {
    			class: 4,
    			color: 5,
    			textWhite: 6,
    			columns: 0
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "MDBTableHead",
    			options,
    			id: create_fragment$q.name
    		});
    	}

    	get class() {
    		throw new Error("<MDBTableHead>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<MDBTableHead>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get color() {
    		throw new Error("<MDBTableHead>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set color(value) {
    		throw new Error("<MDBTableHead>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get textWhite() {
    		throw new Error("<MDBTableHead>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set textWhite(value) {
    		throw new Error("<MDBTableHead>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get columns() {
    		throw new Error("<MDBTableHead>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set columns(value) {
    		throw new Error("<MDBTableHead>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\mdbsvelte\src\MDBTableBody.svelte generated by Svelte v3.59.2 */
    const file$n = "node_modules\\mdbsvelte\\src\\MDBTableBody.svelte";

    function get_each_context$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[8] = list[i];
    	return child_ctx;
    }

    function get_each_context_1$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[11] = list[i];
    	return child_ctx;
    }

    // (22:0) {:else}
    function create_else_block$3(ctx) {
    	let current;
    	const default_slot_template = /*#slots*/ ctx[6].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);

    	const block = {
    		c: function create() {
    			if (default_slot) default_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 32)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[5],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[5])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[5], dirty, null),
    						null
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$3.name,
    		type: "else",
    		source: "(22:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (14:0) {#if data}
    function create_if_block$5(ctx) {
    	let each_1_anchor;
    	let each_value = /*data*/ ctx[0];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$2(get_each_context$2(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				if (each_blocks[i]) {
    					each_blocks[i].m(target, anchor);
    				}
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*Object, data*/ 1) {
    				each_value = /*data*/ ctx[0];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$2(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$2(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$5.name,
    		type: "if",
    		source: "(14:0) {#if data}",
    		ctx
    	});

    	return block;
    }

    // (17:6) {#each Object.keys(row) as cell}
    function create_each_block_1$1(ctx) {
    	let td;
    	let raw_value = /*row*/ ctx[8][/*cell*/ ctx[11]] + "";

    	const block = {
    		c: function create() {
    			td = element("td");
    			add_location(td, file$n, 17, 8, 514);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, td, anchor);
    			td.innerHTML = raw_value;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*data*/ 1 && raw_value !== (raw_value = /*row*/ ctx[8][/*cell*/ ctx[11]] + "")) td.innerHTML = raw_value;		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(td);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$1.name,
    		type: "each",
    		source: "(17:6) {#each Object.keys(row) as cell}",
    		ctx
    	});

    	return block;
    }

    // (15:2) {#each data as row}
    function create_each_block$2(ctx) {
    	let tr;
    	let t;
    	let each_value_1 = Object.keys(/*row*/ ctx[8]);
    	validate_each_argument(each_value_1);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1$1(get_each_context_1$1(ctx, each_value_1, i));
    	}

    	const block = {
    		c: function create() {
    			tr = element("tr");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t = space();
    			add_location(tr, file$n, 15, 4, 462);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, tr, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				if (each_blocks[i]) {
    					each_blocks[i].m(tr, null);
    				}
    			}

    			append_dev(tr, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*data, Object*/ 1) {
    				each_value_1 = Object.keys(/*row*/ ctx[8]);
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$1(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_1$1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(tr, t);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_1.length;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(tr);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$2.name,
    		type: "each",
    		source: "(15:2) {#each data as row}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$p(ctx) {
    	let tbody;
    	let current_block_type_index;
    	let if_block;
    	let current;
    	let mounted;
    	let dispose;
    	const if_block_creators = [create_if_block$5, create_else_block$3];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*data*/ ctx[0]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	let tbody_levels = [/*props*/ ctx[3], { class: /*elementClasses*/ ctx[1] }];
    	let tbody_data = {};

    	for (let i = 0; i < tbody_levels.length; i += 1) {
    		tbody_data = assign(tbody_data, tbody_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			tbody = element("tbody");
    			if_block.c();
    			set_attributes(tbody, tbody_data);
    			add_location(tbody, file$n, 12, 0, 365);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, tbody, anchor);
    			if_blocks[current_block_type_index].m(tbody, null);
    			current = true;

    			if (!mounted) {
    				dispose = action_destroyer(/*forwardEvents*/ ctx[2].call(null, tbody));
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(tbody, null);
    			}

    			set_attributes(tbody, tbody_data = get_spread_update(tbody_levels, [
    				/*props*/ ctx[3],
    				(!current || dirty & /*elementClasses*/ 2) && { class: /*elementClasses*/ ctx[1] }
    			]));
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(tbody);
    			if_blocks[current_block_type_index].d();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$p.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$p($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('MDBTableBody', slots, ['default']);
    	const forwardEvents = forwardEventsBuilder(current_component);
    	let { class: className = '' } = $$props;
    	const props = clean$1($$props, []);
    	let elementClasses;
    	let { data } = $$props;

    	$$self.$$.on_mount.push(function () {
    		if (data === undefined && !('data' in $$props || $$self.$$.bound[$$self.$$.props['data']])) {
    			console.warn("<MDBTableBody> was created without expected prop 'data'");
    		}
    	});

    	$$self.$$set = $$new_props => {
    		$$invalidate(7, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ('class' in $$new_props) $$invalidate(4, className = $$new_props.class);
    		if ('data' in $$new_props) $$invalidate(0, data = $$new_props.data);
    		if ('$$scope' in $$new_props) $$invalidate(5, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		clean: clean$1,
    		clsx,
    		forwardEventsBuilder,
    		current_component,
    		forwardEvents,
    		className,
    		props,
    		elementClasses,
    		data
    	});

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(7, $$props = assign(assign({}, $$props), $$new_props));
    		if ('className' in $$props) $$invalidate(4, className = $$new_props.className);
    		if ('elementClasses' in $$props) $$invalidate(1, elementClasses = $$new_props.elementClasses);
    		if ('data' in $$props) $$invalidate(0, data = $$new_props.data);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*className*/ 16) {
    			$$invalidate(1, elementClasses = clsx(className));
    		}
    	};

    	$$props = exclude_internal_props($$props);
    	return [data, elementClasses, forwardEvents, props, className, $$scope, slots];
    }

    class MDBTableBody extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$p, create_fragment$p, safe_not_equal, { class: 4, data: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "MDBTableBody",
    			options,
    			id: create_fragment$p.name
    		});
    	}

    	get class() {
    		throw new Error("<MDBTableBody>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<MDBTableBody>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get data() {
    		throw new Error("<MDBTableBody>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set data(value) {
    		throw new Error("<MDBTableBody>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /*! xlsx.js (C) 2013-present SheetJS -- http://sheetjs.com */
    var current_ansi = 1252;

    var VALID_ANSI = [ 874, 932, 936, 949, 950, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 10000 ];
    /* ECMA-376 Part I 18.4.1 charset to codepage mapping */
    var CS2CP = ({
    	/*::[*/0/*::]*/:    1252, /* ANSI */
    	/*::[*/1/*::]*/:   65001, /* DEFAULT */
    	/*::[*/2/*::]*/:   65001, /* SYMBOL */
    	/*::[*/77/*::]*/:  10000, /* MAC */
    	/*::[*/128/*::]*/:   932, /* SHIFTJIS */
    	/*::[*/129/*::]*/:   949, /* HANGUL */
    	/*::[*/130/*::]*/:  1361, /* JOHAB */
    	/*::[*/134/*::]*/:   936, /* GB2312 */
    	/*::[*/136/*::]*/:   950, /* CHINESEBIG5 */
    	/*::[*/161/*::]*/:  1253, /* GREEK */
    	/*::[*/162/*::]*/:  1254, /* TURKISH */
    	/*::[*/163/*::]*/:  1258, /* VIETNAMESE */
    	/*::[*/177/*::]*/:  1255, /* HEBREW */
    	/*::[*/178/*::]*/:  1256, /* ARABIC */
    	/*::[*/186/*::]*/:  1257, /* BALTIC */
    	/*::[*/204/*::]*/:  1251, /* RUSSIAN */
    	/*::[*/222/*::]*/:   874, /* THAI */
    	/*::[*/238/*::]*/:  1250, /* EASTEUROPE */
    	/*::[*/255/*::]*/:  1252, /* OEM */
    	/*::[*/69/*::]*/:   6969  /* MISC */
    }/*:any*/);

    var set_ansi = function(cp/*:number*/) { if(VALID_ANSI.indexOf(cp) == -1) return; current_ansi = CS2CP[0] = cp; };
    function reset_ansi() { set_ansi(1252); }

    var set_cp = function(cp/*:number*/) { set_ansi(cp); };
    function reset_cp() { set_cp(1200); reset_ansi(); }

    function char_codes(data/*:string*/)/*:Array<number>*/ { var o/*:Array<number>*/ = []; for(var i = 0, len = data.length; i < len; ++i) o[i] = data.charCodeAt(i); return o; }

    function utf16leread(data/*:string*/)/*:string*/ {
    	var o/*:Array<string>*/ = [];
    	for(var i = 0; i < (data.length>>1); ++i) o[i] = String.fromCharCode(data.charCodeAt(2*i) + (data.charCodeAt(2*i+1)<<8));
    	return o.join("");
    }
    function utf16beread(data/*:string*/)/*:string*/ {
    	var o/*:Array<string>*/ = [];
    	for(var i = 0; i < (data.length>>1); ++i) o[i] = String.fromCharCode(data.charCodeAt(2*i+1) + (data.charCodeAt(2*i)<<8));
    	return o.join("");
    }

    var debom = function(data/*:string*/)/*:string*/ {
    	var c1 = data.charCodeAt(0), c2 = data.charCodeAt(1);
    	if(c1 == 0xFF && c2 == 0xFE) return utf16leread(data.slice(2));
    	if(c1 == 0xFE && c2 == 0xFF) return utf16beread(data.slice(2));
    	if(c1 == 0xFEFF) return data.slice(1);
    	return data;
    };

    var _getchar = function _gc1(x/*:number*/)/*:string*/ { return String.fromCharCode(x); };
    var _getansi = function _ga1(x/*:number*/)/*:string*/ { return String.fromCharCode(x); };

    var $cptable;
    var Base64_map = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
    function Base64_encode(input) {
      var o = "";
      var c1 = 0, c2 = 0, c3 = 0, e1 = 0, e2 = 0, e3 = 0, e4 = 0;
      for (var i = 0; i < input.length; ) {
        c1 = input.charCodeAt(i++);
        e1 = c1 >> 2;
        c2 = input.charCodeAt(i++);
        e2 = (c1 & 3) << 4 | c2 >> 4;
        c3 = input.charCodeAt(i++);
        e3 = (c2 & 15) << 2 | c3 >> 6;
        e4 = c3 & 63;
        if (isNaN(c2)) {
          e3 = e4 = 64;
        } else if (isNaN(c3)) {
          e4 = 64;
        }
        o += Base64_map.charAt(e1) + Base64_map.charAt(e2) + Base64_map.charAt(e3) + Base64_map.charAt(e4);
      }
      return o;
    }
    function Base64_decode(input) {
      var o = "";
      var c1 = 0, c2 = 0, c3 = 0, e1 = 0, e2 = 0, e3 = 0, e4 = 0;
      input = input.replace(/[^\w\+\/\=]/g, "");
      for (var i = 0; i < input.length; ) {
        e1 = Base64_map.indexOf(input.charAt(i++));
        e2 = Base64_map.indexOf(input.charAt(i++));
        c1 = e1 << 2 | e2 >> 4;
        o += String.fromCharCode(c1);
        e3 = Base64_map.indexOf(input.charAt(i++));
        c2 = (e2 & 15) << 4 | e3 >> 2;
        if (e3 !== 64) {
          o += String.fromCharCode(c2);
        }
        e4 = Base64_map.indexOf(input.charAt(i++));
        c3 = (e3 & 3) << 6 | e4;
        if (e4 !== 64) {
          o += String.fromCharCode(c3);
        }
      }
      return o;
    }
    var has_buf = /*#__PURE__*/(function() { return typeof Buffer !== 'undefined' && typeof process !== 'undefined' && typeof process.versions !== 'undefined' && !!process.versions.node; })();

    var Buffer_from = /*#__PURE__*/(function() {
    	if(typeof Buffer !== 'undefined') {
    		var nbfs = !Buffer.from;
    		if(!nbfs) try { Buffer.from("foo", "utf8"); } catch(e) { nbfs = true; }
    		return nbfs ? function(buf, enc) { return (enc) ? new Buffer(buf, enc) : new Buffer(buf); } : Buffer.from.bind(Buffer);
    	}
    	return function() {};
    })();


    function new_raw_buf(len/*:number*/) {
    	/* jshint -W056 */
    	if(has_buf) return Buffer.alloc ? Buffer.alloc(len) : new Buffer(len);
    	return typeof Uint8Array != "undefined" ? new Uint8Array(len) : new Array(len);
    	/* jshint +W056 */
    }

    function new_unsafe_buf(len/*:number*/) {
    	/* jshint -W056 */
    	if(has_buf) return Buffer.allocUnsafe ? Buffer.allocUnsafe(len) : new Buffer(len);
    	return typeof Uint8Array != "undefined" ? new Uint8Array(len) : new Array(len);
    	/* jshint +W056 */
    }

    var s2a = function s2a(s/*:string*/)/*:any*/ {
    	if(has_buf) return Buffer_from(s, "binary");
    	return s.split("").map(function(x/*:string*/)/*:number*/{ return x.charCodeAt(0) & 0xff; });
    };

    function a2s(data/*:any*/)/*:string*/ {
    	if(Array.isArray(data)) return data.map(function(c) { return String.fromCharCode(c); }).join("");
    	var o/*:Array<string>*/ = []; for(var i = 0; i < data.length; ++i) o[i] = String.fromCharCode(data[i]); return o.join("");
    }

    function ab2a(data/*:ArrayBuffer|Uint8Array*/)/*:Array<number>*/ {
    	if(typeof ArrayBuffer == 'undefined') throw new Error("Unsupported");
    	if(data instanceof ArrayBuffer) return ab2a(new Uint8Array(data));
    	/*:: if(data instanceof ArrayBuffer) throw new Error("unreachable"); */
    	var o = new Array(data.length);
    	for(var i = 0; i < data.length; ++i) o[i] = data[i];
    	return o;
    }

    var bconcat = has_buf ? function(bufs) { return Buffer.concat(bufs.map(function(buf) { return Buffer.isBuffer(buf) ? buf : Buffer_from(buf); })); } : function(bufs) {
    	if(typeof Uint8Array !== "undefined") {
    		var i = 0, maxlen = 0;
    		for(i = 0; i < bufs.length; ++i) maxlen += bufs[i].length;
    		var o = new Uint8Array(maxlen);
    		var len = 0;
    		for(i = 0, maxlen = 0; i < bufs.length; maxlen += len, ++i) {
    			len = bufs[i].length;
    			if(bufs[i] instanceof Uint8Array) o.set(bufs[i], maxlen);
    			else if(typeof bufs[i] == "string") { throw "wtf"; }
    			else o.set(new Uint8Array(bufs[i]), maxlen);
    		}
    		return o;
    	}
    	return [].concat.apply([], bufs.map(function(buf) { return Array.isArray(buf) ? buf : [].slice.call(buf); }));
    };

    function utf8decode(content/*:string*/) {
    	var out = [], widx = 0, L = content.length + 250;
    	var o = new_raw_buf(content.length + 255);
    	for(var ridx = 0; ridx < content.length; ++ridx) {
    		var c = content.charCodeAt(ridx);
    		if(c < 0x80) o[widx++] = c;
    		else if(c < 0x800) {
    			o[widx++] = (192|((c>>6)&31));
    			o[widx++] = (128|(c&63));
    		} else if(c >= 0xD800 && c < 0xE000) {
    			c = (c&1023)+64;
    			var d = content.charCodeAt(++ridx)&1023;
    			o[widx++] = (240|((c>>8)&7));
    			o[widx++] = (128|((c>>2)&63));
    			o[widx++] = (128|((d>>6)&15)|((c&3)<<4));
    			o[widx++] = (128|(d&63));
    		} else {
    			o[widx++] = (224|((c>>12)&15));
    			o[widx++] = (128|((c>>6)&63));
    			o[widx++] = (128|(c&63));
    		}
    		if(widx > L) {
    			out.push(o.slice(0, widx));
    			widx = 0;
    			o = new_raw_buf(65535);
    			L = 65530;
    		}
    	}
    	out.push(o.slice(0, widx));
    	return bconcat(out);
    }

    var chr0 = /\u0000/g, chr1 = /[\u0001-\u0006]/g;
    /*::
    declare type Block = any;
    declare type BufArray = {
    	newblk(sz:number):Block;
    	next(sz:number):Block;
    	end():any;
    	push(buf:Block):void;
    };

    type RecordHopperCB = {(d:any, Rn:string, RT:number):?boolean;};

    type EvertType = {[string]:string};
    type EvertNumType = {[string]:number};
    type EvertArrType = {[string]:Array<string>};

    type StringConv = {(string):string};

    */
    /* ssf.js (C) 2013-present SheetJS -- http://sheetjs.com */
    /*jshint -W041 */
    function _strrev(x/*:string*/)/*:string*/ { var o = "", i = x.length-1; while(i>=0) o += x.charAt(i--); return o; }
    function pad0(v/*:any*/,d/*:number*/)/*:string*/{var t=""+v; return t.length>=d?t:fill('0',d-t.length)+t;}
    function pad_(v/*:any*/,d/*:number*/)/*:string*/{var t=""+v;return t.length>=d?t:fill(' ',d-t.length)+t;}
    function rpad_(v/*:any*/,d/*:number*/)/*:string*/{var t=""+v; return t.length>=d?t:t+fill(' ',d-t.length);}
    function pad0r1(v/*:any*/,d/*:number*/)/*:string*/{var t=""+Math.round(v); return t.length>=d?t:fill('0',d-t.length)+t;}
    function pad0r2(v/*:any*/,d/*:number*/)/*:string*/{var t=""+v; return t.length>=d?t:fill('0',d-t.length)+t;}
    var p2_32 = /*#__PURE__*/Math.pow(2,32);
    function pad0r(v/*:any*/,d/*:number*/)/*:string*/{if(v>p2_32||v<-p2_32) return pad0r1(v,d); var i = Math.round(v); return pad0r2(i,d); }
    /* yes, in 2022 this is still faster than string compare */
    function SSF_isgeneral(s/*:string*/, i/*:?number*/)/*:boolean*/ { i = i || 0; return s.length >= 7 + i && (s.charCodeAt(i)|32) === 103 && (s.charCodeAt(i+1)|32) === 101 && (s.charCodeAt(i+2)|32) === 110 && (s.charCodeAt(i+3)|32) === 101 && (s.charCodeAt(i+4)|32) === 114 && (s.charCodeAt(i+5)|32) === 97 && (s.charCodeAt(i+6)|32) === 108; }
    var days/*:Array<Array<string> >*/ = [
    	['Sun', 'Sunday'],
    	['Mon', 'Monday'],
    	['Tue', 'Tuesday'],
    	['Wed', 'Wednesday'],
    	['Thu', 'Thursday'],
    	['Fri', 'Friday'],
    	['Sat', 'Saturday']
    ];
    var months/*:Array<Array<string> >*/ = [
    	['J', 'Jan', 'January'],
    	['F', 'Feb', 'February'],
    	['M', 'Mar', 'March'],
    	['A', 'Apr', 'April'],
    	['M', 'May', 'May'],
    	['J', 'Jun', 'June'],
    	['J', 'Jul', 'July'],
    	['A', 'Aug', 'August'],
    	['S', 'Sep', 'September'],
    	['O', 'Oct', 'October'],
    	['N', 'Nov', 'November'],
    	['D', 'Dec', 'December']
    ];
    function SSF_init_table(t/*:any*/) {
    	if(!t) t = {};
    	t[0]=  'General';
    	t[1]=  '0';
    	t[2]=  '0.00';
    	t[3]=  '#,##0';
    	t[4]=  '#,##0.00';
    	t[9]=  '0%';
    	t[10]= '0.00%';
    	t[11]= '0.00E+00';
    	t[12]= '# ?/?';
    	t[13]= '# ??/??';
    	t[14]= 'm/d/yy';
    	t[15]= 'd-mmm-yy';
    	t[16]= 'd-mmm';
    	t[17]= 'mmm-yy';
    	t[18]= 'h:mm AM/PM';
    	t[19]= 'h:mm:ss AM/PM';
    	t[20]= 'h:mm';
    	t[21]= 'h:mm:ss';
    	t[22]= 'm/d/yy h:mm';
    	t[37]= '#,##0 ;(#,##0)';
    	t[38]= '#,##0 ;[Red](#,##0)';
    	t[39]= '#,##0.00;(#,##0.00)';
    	t[40]= '#,##0.00;[Red](#,##0.00)';
    	t[45]= 'mm:ss';
    	t[46]= '[h]:mm:ss';
    	t[47]= 'mmss.0';
    	t[48]= '##0.0E+0';
    	t[49]= '@';
    	t[56]= '"上午/下午 "hh"時"mm"分"ss"秒 "';
    	return t;
    }
    /* repeated to satiate webpack */
    var table_fmt = {
    	0:  'General',
    	1:  '0',
    	2:  '0.00',
    	3:  '#,##0',
    	4:  '#,##0.00',
    	9:  '0%',
    	10: '0.00%',
    	11: '0.00E+00',
    	12: '# ?/?',
    	13: '# ??/??',
    	14: 'm/d/yy',
    	15: 'd-mmm-yy',
    	16: 'd-mmm',
    	17: 'mmm-yy',
    	18: 'h:mm AM/PM',
    	19: 'h:mm:ss AM/PM',
    	20: 'h:mm',
    	21: 'h:mm:ss',
    	22: 'm/d/yy h:mm',
    	37: '#,##0 ;(#,##0)',
    	38: '#,##0 ;[Red](#,##0)',
    	39: '#,##0.00;(#,##0.00)',
    	40: '#,##0.00;[Red](#,##0.00)',
    	45: 'mm:ss',
    	46: '[h]:mm:ss',
    	47: 'mmss.0',
    	48: '##0.0E+0',
    	49: '@',
    	56: '"上午/下午 "hh"時"mm"分"ss"秒 "'
    };

    /* Defaults determined by systematically testing in Excel 2019 */

    /* These formats appear to default to other formats in the table */
    var SSF_default_map = {
    	5:  37, 6:  38, 7:  39, 8:  40,         //  5 -> 37 ...  8 -> 40

    	23:  0, 24:  0, 25:  0, 26:  0,         // 23 ->  0 ... 26 ->  0

    	27: 14, 28: 14, 29: 14, 30: 14, 31: 14, // 27 -> 14 ... 31 -> 14

    	50: 14, 51: 14, 52: 14, 53: 14, 54: 14, // 50 -> 14 ... 58 -> 14
    	55: 14, 56: 14, 57: 14, 58: 14,
    	59:  1, 60:  2, 61:  3, 62:  4,         // 59 ->  1 ... 62 ->  4

    	67:  9, 68: 10,                         // 67 ->  9 ... 68 -> 10
    	69: 12, 70: 13, 71: 14,                 // 69 -> 12 ... 71 -> 14
    	72: 14, 73: 15, 74: 16, 75: 17,         // 72 -> 14 ... 75 -> 17
    	76: 20, 77: 21, 78: 22,                 // 76 -> 20 ... 78 -> 22
    	79: 45, 80: 46, 81: 47,                 // 79 -> 45 ... 81 -> 47
    	82: 0                                   // 82 ->  0 ... 65536 -> 0 (omitted)
    };


    /* These formats technically refer to Accounting formats with no equivalent */
    var SSF_default_str = {
    	//  5 -- Currency,   0 decimal, black negative
    	5:  '"$"#,##0_);\\("$"#,##0\\)',
    	63: '"$"#,##0_);\\("$"#,##0\\)',

    	//  6 -- Currency,   0 decimal, red   negative
    	6:  '"$"#,##0_);[Red]\\("$"#,##0\\)',
    	64: '"$"#,##0_);[Red]\\("$"#,##0\\)',

    	//  7 -- Currency,   2 decimal, black negative
    	7:  '"$"#,##0.00_);\\("$"#,##0.00\\)',
    	65: '"$"#,##0.00_);\\("$"#,##0.00\\)',

    	//  8 -- Currency,   2 decimal, red   negative
    	8:  '"$"#,##0.00_);[Red]\\("$"#,##0.00\\)',
    	66: '"$"#,##0.00_);[Red]\\("$"#,##0.00\\)',

    	// 41 -- Accounting, 0 decimal, No Symbol
    	41: '_(* #,##0_);_(* \\(#,##0\\);_(* "-"_);_(@_)',

    	// 42 -- Accounting, 0 decimal, $  Symbol
    	42: '_("$"* #,##0_);_("$"* \\(#,##0\\);_("$"* "-"_);_(@_)',

    	// 43 -- Accounting, 2 decimal, No Symbol
    	43: '_(* #,##0.00_);_(* \\(#,##0.00\\);_(* "-"??_);_(@_)',

    	// 44 -- Accounting, 2 decimal, $  Symbol
    	44: '_("$"* #,##0.00_);_("$"* \\(#,##0.00\\);_("$"* "-"??_);_(@_)'
    };

    function SSF_frac(x/*:number*/, D/*:number*/, mixed/*:?boolean*/)/*:Array<number>*/ {
    	var sgn = x < 0 ? -1 : 1;
    	var B = x * sgn;
    	var P_2 = 0, P_1 = 1, P = 0;
    	var Q_2 = 1, Q_1 = 0, Q = 0;
    	var A = Math.floor(B);
    	while(Q_1 < D) {
    		A = Math.floor(B);
    		P = A * P_1 + P_2;
    		Q = A * Q_1 + Q_2;
    		if((B - A) < 0.00000005) break;
    		B = 1 / (B - A);
    		P_2 = P_1; P_1 = P;
    		Q_2 = Q_1; Q_1 = Q;
    	}
    	if(Q > D) { if(Q_1 > D) { Q = Q_2; P = P_2; } else { Q = Q_1; P = P_1; } }
    	if(!mixed) return [0, sgn * P, Q];
    	var q = Math.floor(sgn * P/Q);
    	return [q, sgn*P - q*Q, Q];
    }
    function SSF_parse_date_code(v/*:number*/,opts/*:?any*/,b2/*:?boolean*/) {
    	if(v > 2958465 || v < 0) return null;
    	var date = (v|0), time = Math.floor(86400 * (v - date)), dow=0;
    	var dout=[];
    	var out={D:date, T:time, u:86400*(v-date)-time,y:0,m:0,d:0,H:0,M:0,S:0,q:0};
    	if(Math.abs(out.u) < 1e-6) out.u = 0;
    	if(opts && opts.date1904) date += 1462;
    	if(out.u > 0.9999) {
    		out.u = 0;
    		if(++time == 86400) { out.T = time = 0; ++date; ++out.D; }
    	}
    	if(date === 60) {dout = b2 ? [1317,10,29] : [1900,2,29]; dow=3;}
    	else if(date === 0) {dout = b2 ? [1317,8,29] : [1900,1,0]; dow=6;}
    	else {
    		if(date > 60) --date;
    		/* 1 = Jan 1 1900 in Gregorian */
    		var d = new Date(1900, 0, 1);
    		d.setDate(d.getDate() + date - 1);
    		dout = [d.getFullYear(), d.getMonth()+1,d.getDate()];
    		dow = d.getDay();
    		if(date < 60) dow = (dow + 6) % 7;
    		if(b2) dow = SSF_fix_hijri(d, dout);
    	}
    	out.y = dout[0]; out.m = dout[1]; out.d = dout[2];
    	out.S = time % 60; time = Math.floor(time / 60);
    	out.M = time % 60; time = Math.floor(time / 60);
    	out.H = time;
    	out.q = dow;
    	return out;
    }
    var SSFbasedate = /*#__PURE__*/new Date(1899, 11, 31, 0, 0, 0);
    var SSFdnthresh = /*#__PURE__*/SSFbasedate.getTime();
    var SSFbase1904 = /*#__PURE__*/new Date(1900, 2, 1, 0, 0, 0);
    function datenum_local(v/*:Date*/, date1904/*:?boolean*/)/*:number*/ {
    	var epoch = /*#__PURE__*/v.getTime();
    	if(date1904) epoch -= 1461*24*60*60*1000;
    	else if(v >= SSFbase1904) epoch += 24*60*60*1000;
    	return (epoch - (SSFdnthresh + (/*#__PURE__*/v.getTimezoneOffset() - /*#__PURE__*/SSFbasedate.getTimezoneOffset()) * 60000)) / (24 * 60 * 60 * 1000);
    }
    /* ECMA-376 18.8.30 numFmt*/
    /* Note: `toPrecision` uses standard form when prec > E and E >= -6 */
    /* exponent >= -9 and <= 9 */
    function SSF_strip_decimal(o/*:string*/)/*:string*/ {
    	return (o.indexOf(".") == -1) ? o : o.replace(/(?:\.0*|(\.\d*[1-9])0+)$/, "$1");
    }

    /* General Exponential always shows 2 digits exp and trims the mantissa */
    function SSF_normalize_exp(o/*:string*/)/*:string*/ {
    	if(o.indexOf("E") == -1) return o;
    	return o.replace(/(?:\.0*|(\.\d*[1-9])0+)[Ee]/,"$1E").replace(/(E[+-])(\d)$/,"$10$2");
    }

    /* exponent >= -9 and <= 9 */
    function SSF_small_exp(v/*:number*/)/*:string*/ {
    	var w = (v<0?12:11);
    	var o = SSF_strip_decimal(v.toFixed(12)); if(o.length <= w) return o;
    	o = v.toPrecision(10); if(o.length <= w) return o;
    	return v.toExponential(5);
    }

    /* exponent >= 11 or <= -10 likely exponential */
    function SSF_large_exp(v/*:number*/)/*:string*/ {
    	var o = SSF_strip_decimal(v.toFixed(11));
    	return (o.length > (v<0?12:11) || o === "0" || o === "-0") ? v.toPrecision(6) : o;
    }

    function SSF_general_num(v/*:number*/)/*:string*/ {
    	var V = Math.floor(Math.log(Math.abs(v))*Math.LOG10E), o;

    	if(V >= -4 && V <= -1) o = v.toPrecision(10+V);
    	else if(Math.abs(V) <= 9) o = SSF_small_exp(v);
    	else if(V === 10) o = v.toFixed(10).substr(0,12);
    	else o = SSF_large_exp(v);

    	return SSF_strip_decimal(SSF_normalize_exp(o.toUpperCase()));
    }


    /*
    	"General" rules:
    	- text is passed through ("@")
    	- booleans are rendered as TRUE/FALSE
    	- "up to 11 characters" displayed for numbers
    	- Default date format (code 14) used for Dates

    	The longest 32-bit integer text is "-2147483648", exactly 11 chars
    	TODO: technically the display depends on the width of the cell
    */
    function SSF_general(v/*:any*/, opts/*:any*/) {
    	switch(typeof v) {
    		case 'string': return v;
    		case 'boolean': return v ? "TRUE" : "FALSE";
    		case 'number': return (v|0) === v ? v.toString(10) : SSF_general_num(v);
    		case 'undefined': return "";
    		case 'object':
    			if(v == null) return "";
    			if(v instanceof Date) return SSF_format(14, datenum_local(v, opts && opts.date1904), opts);
    	}
    	throw new Error("unsupported value in General format: " + v);
    }

    function SSF_fix_hijri(date/*:Date*/, o/*:[number, number, number]*/) {
      /* TODO: properly adjust y/m/d and  */
      o[0] -= 581;
      var dow = date.getDay();
      if(date < 60) dow = (dow + 6) % 7;
      return dow;
    }
    //var THAI_DIGITS = "\u0E50\u0E51\u0E52\u0E53\u0E54\u0E55\u0E56\u0E57\u0E58\u0E59".split("");
    function SSF_write_date(type/*:number*/, fmt/*:string*/, val, ss0/*:?number*/)/*:string*/ {
    	var o="", ss=0, tt=0, y = val.y, out, outl = 0;
    	switch(type) {
    		case 98: /* 'b' buddhist year */
    			y = val.y + 543;
    			/* falls through */
    		case 121: /* 'y' year */
    		switch(fmt.length) {
    			case 1: case 2: out = y % 100; outl = 2; break;
    			default: out = y % 10000; outl = 4; break;
    		} break;
    		case 109: /* 'm' month */
    		switch(fmt.length) {
    			case 1: case 2: out = val.m; outl = fmt.length; break;
    			case 3: return months[val.m-1][1];
    			case 5: return months[val.m-1][0];
    			default: return months[val.m-1][2];
    		} break;
    		case 100: /* 'd' day */
    		switch(fmt.length) {
    			case 1: case 2: out = val.d; outl = fmt.length; break;
    			case 3: return days[val.q][0];
    			default: return days[val.q][1];
    		} break;
    		case 104: /* 'h' 12-hour */
    		switch(fmt.length) {
    			case 1: case 2: out = 1+(val.H+11)%12; outl = fmt.length; break;
    			default: throw 'bad hour format: ' + fmt;
    		} break;
    		case 72: /* 'H' 24-hour */
    		switch(fmt.length) {
    			case 1: case 2: out = val.H; outl = fmt.length; break;
    			default: throw 'bad hour format: ' + fmt;
    		} break;
    		case 77: /* 'M' minutes */
    		switch(fmt.length) {
    			case 1: case 2: out = val.M; outl = fmt.length; break;
    			default: throw 'bad minute format: ' + fmt;
    		} break;
    		case 115: /* 's' seconds */
    			if(fmt != 's' && fmt != 'ss' && fmt != '.0' && fmt != '.00' && fmt != '.000') throw 'bad second format: ' + fmt;
    			if(val.u === 0 && (fmt == "s" || fmt == "ss")) return pad0(val.S, fmt.length);
    			/*::if(!ss0) ss0 = 0; */
    			if(ss0 >= 2) tt = ss0 === 3 ? 1000 : 100;
    			else tt = ss0 === 1 ? 10 : 1;
    			ss = Math.round((tt)*(val.S + val.u));
    			if(ss >= 60*tt) ss = 0;
    			if(fmt === 's') return ss === 0 ? "0" : ""+ss/tt;
    			o = pad0(ss,2 + ss0);
    			if(fmt === 'ss') return o.substr(0,2);
    			return "." + o.substr(2,fmt.length-1);
    		case 90: /* 'Z' absolute time */
    		switch(fmt) {
    			case '[h]': case '[hh]': out = val.D*24+val.H; break;
    			case '[m]': case '[mm]': out = (val.D*24+val.H)*60+val.M; break;
    			case '[s]': case '[ss]': out = ((val.D*24+val.H)*60+val.M)*60+Math.round(val.S+val.u); break;
    			default: throw 'bad abstime format: ' + fmt;
    		} outl = fmt.length === 3 ? 1 : 2; break;
    		case 101: /* 'e' era */
    			out = y; outl = 1; break;
    	}
    	var outstr = outl > 0 ? pad0(out, outl) : "";
    	return outstr;
    }


    /*jshint -W086 */
    /*jshint +W086 */
    function commaify(s/*:string*/)/*:string*/ {
    	var w = 3;
    	if(s.length <= w) return s;
    	var j = (s.length % w), o = s.substr(0,j);
    	for(; j!=s.length; j+=w) o+=(o.length > 0 ? "," : "") + s.substr(j,w);
    	return o;
    }
    var pct1 = /%/g;
    function write_num_pct(type/*:string*/, fmt/*:string*/, val/*:number*/)/*:string*/{
    	var sfmt = fmt.replace(pct1,""), mul = fmt.length - sfmt.length;
    	return write_num(type, sfmt, val * Math.pow(10,2*mul)) + fill("%",mul);
    }

    function write_num_cm(type/*:string*/, fmt/*:string*/, val/*:number*/)/*:string*/{
    	var idx = fmt.length - 1;
    	while(fmt.charCodeAt(idx-1) === 44) --idx;
    	return write_num(type, fmt.substr(0,idx), val / Math.pow(10,3*(fmt.length-idx)));
    }

    function write_num_exp(fmt/*:string*/, val/*:number*/)/*:string*/{
    	var o/*:string*/;
    	var idx = fmt.indexOf("E") - fmt.indexOf(".") - 1;
    	if(fmt.match(/^#+0.0E\+0$/)) {
    		if(val == 0) return "0.0E+0";
    		else if(val < 0) return "-" + write_num_exp(fmt, -val);
    		var period = fmt.indexOf("."); if(period === -1) period=fmt.indexOf('E');
    		var ee = Math.floor(Math.log(val)*Math.LOG10E)%period;
    		if(ee < 0) ee += period;
    		o = (val/Math.pow(10,ee)).toPrecision(idx+1+(period+ee)%period);
    		if(o.indexOf("e") === -1) {
    			var fakee = Math.floor(Math.log(val)*Math.LOG10E);
    			if(o.indexOf(".") === -1) o = o.charAt(0) + "." + o.substr(1) + "E+" + (fakee - o.length+ee);
    			else o += "E+" + (fakee - ee);
    			while(o.substr(0,2) === "0.") {
    				o = o.charAt(0) + o.substr(2,period) + "." + o.substr(2+period);
    				o = o.replace(/^0+([1-9])/,"$1").replace(/^0+\./,"0.");
    			}
    			o = o.replace(/\+-/,"-");
    		}
    		o = o.replace(/^([+-]?)(\d*)\.(\d*)[Ee]/,function($$,$1,$2,$3) { return $1 + $2 + $3.substr(0,(period+ee)%period) + "." + $3.substr(ee) + "E"; });
    	} else o = val.toExponential(idx);
    	if(fmt.match(/E\+00$/) && o.match(/e[+-]\d$/)) o = o.substr(0,o.length-1) + "0" + o.charAt(o.length-1);
    	if(fmt.match(/E\-/) && o.match(/e\+/)) o = o.replace(/e\+/,"e");
    	return o.replace("e","E");
    }
    var frac1 = /# (\?+)( ?)\/( ?)(\d+)/;
    function write_num_f1(r/*:Array<string>*/, aval/*:number*/, sign/*:string*/)/*:string*/ {
    	var den = parseInt(r[4],10), rr = Math.round(aval * den), base = Math.floor(rr/den);
    	var myn = (rr - base*den), myd = den;
    	return sign + (base === 0 ? "" : ""+base) + " " + (myn === 0 ? fill(" ", r[1].length + 1 + r[4].length) : pad_(myn,r[1].length) + r[2] + "/" + r[3] + pad0(myd,r[4].length));
    }
    function write_num_f2(r/*:Array<string>*/, aval/*:number*/, sign/*:string*/)/*:string*/ {
    	return sign + (aval === 0 ? "" : ""+aval) + fill(" ", r[1].length + 2 + r[4].length);
    }
    var dec1 = /^#*0*\.([0#]+)/;
    var closeparen = /\).*[0#]/;
    var phone = /\(###\) ###\\?-####/;
    function hashq(str/*:string*/)/*:string*/ {
    	var o = "", cc;
    	for(var i = 0; i != str.length; ++i) switch((cc=str.charCodeAt(i))) {
    		case 35: break;
    		case 63: o+= " "; break;
    		case 48: o+= "0"; break;
    		default: o+= String.fromCharCode(cc);
    	}
    	return o;
    }
    function rnd(val/*:number*/, d/*:number*/)/*:string*/ { var dd = Math.pow(10,d); return ""+(Math.round(val * dd)/dd); }
    function dec(val/*:number*/, d/*:number*/)/*:number*/ {
    	var _frac = val - Math.floor(val), dd = Math.pow(10,d);
    	if (d < ('' + Math.round(_frac * dd)).length) return 0;
    	return Math.round(_frac * dd);
    }
    function carry(val/*:number*/, d/*:number*/)/*:number*/ {
    	if (d < ('' + Math.round((val-Math.floor(val))*Math.pow(10,d))).length) {
    		return 1;
    	}
    	return 0;
    }
    function flr(val/*:number*/)/*:string*/ {
    	if(val < 2147483647 && val > -2147483648) return ""+(val >= 0 ? (val|0) : (val-1|0));
    	return ""+Math.floor(val);
    }
    function write_num_flt(type/*:string*/, fmt/*:string*/, val/*:number*/)/*:string*/ {
    	if(type.charCodeAt(0) === 40 && !fmt.match(closeparen)) {
    		var ffmt = fmt.replace(/\( */,"").replace(/ \)/,"").replace(/\)/,"");
    		if(val >= 0) return write_num_flt('n', ffmt, val);
    		return '(' + write_num_flt('n', ffmt, -val) + ')';
    	}
    	if(fmt.charCodeAt(fmt.length - 1) === 44) return write_num_cm(type, fmt, val);
    	if(fmt.indexOf('%') !== -1) return write_num_pct(type, fmt, val);
    	if(fmt.indexOf('E') !== -1) return write_num_exp(fmt, val);
    	if(fmt.charCodeAt(0) === 36) return "$"+write_num_flt(type,fmt.substr(fmt.charAt(1)==' '?2:1),val);
    	var o;
    	var r/*:?Array<string>*/, ri, ff, aval = Math.abs(val), sign = val < 0 ? "-" : "";
    	if(fmt.match(/^00+$/)) return sign + pad0r(aval,fmt.length);
    	if(fmt.match(/^[#?]+$/)) {
    		o = pad0r(val,0); if(o === "0") o = "";
    		return o.length > fmt.length ? o : hashq(fmt.substr(0,fmt.length-o.length)) + o;
    	}
    	if((r = fmt.match(frac1))) return write_num_f1(r, aval, sign);
    	if(fmt.match(/^#+0+$/)) return sign + pad0r(aval,fmt.length - fmt.indexOf("0"));
    	if((r = fmt.match(dec1))) {
    		o = rnd(val, r[1].length).replace(/^([^\.]+)$/,"$1."+hashq(r[1])).replace(/\.$/,"."+hashq(r[1])).replace(/\.(\d*)$/,function($$, $1) { return "." + $1 + fill("0", hashq(/*::(*/r/*::||[""])*/[1]).length-$1.length); });
    		return fmt.indexOf("0.") !== -1 ? o : o.replace(/^0\./,".");
    	}
    	fmt = fmt.replace(/^#+([0.])/, "$1");
    	if((r = fmt.match(/^(0*)\.(#*)$/))) {
    		return sign + rnd(aval, r[2].length).replace(/\.(\d*[1-9])0*$/,".$1").replace(/^(-?\d*)$/,"$1.").replace(/^0\./,r[1].length?"0.":".");
    	}
    	if((r = fmt.match(/^#{1,3},##0(\.?)$/))) return sign + commaify(pad0r(aval,0));
    	if((r = fmt.match(/^#,##0\.([#0]*0)$/))) {
    		return val < 0 ? "-" + write_num_flt(type, fmt, -val) : commaify(""+(Math.floor(val) + carry(val, r[1].length))) + "." + pad0(dec(val, r[1].length),r[1].length);
    	}
    	if((r = fmt.match(/^#,#*,#0/))) return write_num_flt(type,fmt.replace(/^#,#*,/,""),val);
    	if((r = fmt.match(/^([0#]+)(\\?-([0#]+))+$/))) {
    		o = _strrev(write_num_flt(type, fmt.replace(/[\\-]/g,""), val));
    		ri = 0;
    		return _strrev(_strrev(fmt.replace(/\\/g,"")).replace(/[0#]/g,function(x){return ri<o.length?o.charAt(ri++):x==='0'?'0':"";}));
    	}
    	if(fmt.match(phone)) {
    		o = write_num_flt(type, "##########", val);
    		return "(" + o.substr(0,3) + ") " + o.substr(3, 3) + "-" + o.substr(6);
    	}
    	var oa = "";
    	if((r = fmt.match(/^([#0?]+)( ?)\/( ?)([#0?]+)/))) {
    		ri = Math.min(/*::String(*/r[4]/*::)*/.length,7);
    		ff = SSF_frac(aval, Math.pow(10,ri)-1, false);
    		o = "" + sign;
    		oa = write_num("n", /*::String(*/r[1]/*::)*/, ff[1]);
    		if(oa.charAt(oa.length-1) == " ") oa = oa.substr(0,oa.length-1) + "0";
    		o += oa + /*::String(*/r[2]/*::)*/ + "/" + /*::String(*/r[3]/*::)*/;
    		oa = rpad_(ff[2],ri);
    		if(oa.length < r[4].length) oa = hashq(r[4].substr(r[4].length-oa.length)) + oa;
    		o += oa;
    		return o;
    	}
    	if((r = fmt.match(/^# ([#0?]+)( ?)\/( ?)([#0?]+)/))) {
    		ri = Math.min(Math.max(r[1].length, r[4].length),7);
    		ff = SSF_frac(aval, Math.pow(10,ri)-1, true);
    		return sign + (ff[0]||(ff[1] ? "" : "0")) + " " + (ff[1] ? pad_(ff[1],ri) + r[2] + "/" + r[3] + rpad_(ff[2],ri): fill(" ", 2*ri+1 + r[2].length + r[3].length));
    	}
    	if((r = fmt.match(/^[#0?]+$/))) {
    		o = pad0r(val, 0);
    		if(fmt.length <= o.length) return o;
    		return hashq(fmt.substr(0,fmt.length-o.length)) + o;
    	}
    	if((r = fmt.match(/^([#0?]+)\.([#0]+)$/))) {
    		o = "" + val.toFixed(Math.min(r[2].length,10)).replace(/([^0])0+$/,"$1");
    		ri = o.indexOf(".");
    		var lres = fmt.indexOf(".") - ri, rres = fmt.length - o.length - lres;
    		return hashq(fmt.substr(0,lres) + o + fmt.substr(fmt.length-rres));
    	}
    	if((r = fmt.match(/^00,000\.([#0]*0)$/))) {
    		ri = dec(val, r[1].length);
    		return val < 0 ? "-" + write_num_flt(type, fmt, -val) : commaify(flr(val)).replace(/^\d,\d{3}$/,"0$&").replace(/^\d*$/,function($$) { return "00," + ($$.length < 3 ? pad0(0,3-$$.length) : "") + $$; }) + "." + pad0(ri,r[1].length);
    	}
    	switch(fmt) {
    		case "###,##0.00": return write_num_flt(type, "#,##0.00", val);
    		case "###,###":
    		case "##,###":
    		case "#,###": var x = commaify(pad0r(aval,0)); return x !== "0" ? sign + x : "";
    		case "###,###.00": return write_num_flt(type, "###,##0.00",val).replace(/^0\./,".");
    		case "#,###.00": return write_num_flt(type, "#,##0.00",val).replace(/^0\./,".");
    	}
    	throw new Error("unsupported format |" + fmt + "|");
    }
    function write_num_cm2(type/*:string*/, fmt/*:string*/, val/*:number*/)/*:string*/{
    	var idx = fmt.length - 1;
    	while(fmt.charCodeAt(idx-1) === 44) --idx;
    	return write_num(type, fmt.substr(0,idx), val / Math.pow(10,3*(fmt.length-idx)));
    }
    function write_num_pct2(type/*:string*/, fmt/*:string*/, val/*:number*/)/*:string*/{
    	var sfmt = fmt.replace(pct1,""), mul = fmt.length - sfmt.length;
    	return write_num(type, sfmt, val * Math.pow(10,2*mul)) + fill("%",mul);
    }
    function write_num_exp2(fmt/*:string*/, val/*:number*/)/*:string*/{
    	var o/*:string*/;
    	var idx = fmt.indexOf("E") - fmt.indexOf(".") - 1;
    	if(fmt.match(/^#+0.0E\+0$/)) {
    		if(val == 0) return "0.0E+0";
    		else if(val < 0) return "-" + write_num_exp2(fmt, -val);
    		var period = fmt.indexOf("."); if(period === -1) period=fmt.indexOf('E');
    		var ee = Math.floor(Math.log(val)*Math.LOG10E)%period;
    		if(ee < 0) ee += period;
    		o = (val/Math.pow(10,ee)).toPrecision(idx+1+(period+ee)%period);
    		if(!o.match(/[Ee]/)) {
    			var fakee = Math.floor(Math.log(val)*Math.LOG10E);
    			if(o.indexOf(".") === -1) o = o.charAt(0) + "." + o.substr(1) + "E+" + (fakee - o.length+ee);
    			else o += "E+" + (fakee - ee);
    			o = o.replace(/\+-/,"-");
    		}
    		o = o.replace(/^([+-]?)(\d*)\.(\d*)[Ee]/,function($$,$1,$2,$3) { return $1 + $2 + $3.substr(0,(period+ee)%period) + "." + $3.substr(ee) + "E"; });
    	} else o = val.toExponential(idx);
    	if(fmt.match(/E\+00$/) && o.match(/e[+-]\d$/)) o = o.substr(0,o.length-1) + "0" + o.charAt(o.length-1);
    	if(fmt.match(/E\-/) && o.match(/e\+/)) o = o.replace(/e\+/,"e");
    	return o.replace("e","E");
    }
    function write_num_int(type/*:string*/, fmt/*:string*/, val/*:number*/)/*:string*/ {
    	if(type.charCodeAt(0) === 40 && !fmt.match(closeparen)) {
    		var ffmt = fmt.replace(/\( */,"").replace(/ \)/,"").replace(/\)/,"");
    		if(val >= 0) return write_num_int('n', ffmt, val);
    		return '(' + write_num_int('n', ffmt, -val) + ')';
    	}
    	if(fmt.charCodeAt(fmt.length - 1) === 44) return write_num_cm2(type, fmt, val);
    	if(fmt.indexOf('%') !== -1) return write_num_pct2(type, fmt, val);
    	if(fmt.indexOf('E') !== -1) return write_num_exp2(fmt, val);
    	if(fmt.charCodeAt(0) === 36) return "$"+write_num_int(type,fmt.substr(fmt.charAt(1)==' '?2:1),val);
    	var o;
    	var r/*:?Array<string>*/, ri, ff, aval = Math.abs(val), sign = val < 0 ? "-" : "";
    	if(fmt.match(/^00+$/)) return sign + pad0(aval,fmt.length);
    	if(fmt.match(/^[#?]+$/)) {
    		o = (""+val); if(val === 0) o = "";
    		return o.length > fmt.length ? o : hashq(fmt.substr(0,fmt.length-o.length)) + o;
    	}
    	if((r = fmt.match(frac1))) return write_num_f2(r, aval, sign);
    	if(fmt.match(/^#+0+$/)) return sign + pad0(aval,fmt.length - fmt.indexOf("0"));
    	if((r = fmt.match(dec1))) {
    		/*:: if(!Array.isArray(r)) throw new Error("unreachable"); */
    		o = (""+val).replace(/^([^\.]+)$/,"$1."+hashq(r[1])).replace(/\.$/,"."+hashq(r[1]));
    		o = o.replace(/\.(\d*)$/,function($$, $1) {
    		/*:: if(!Array.isArray(r)) throw new Error("unreachable"); */
    			return "." + $1 + fill("0", hashq(r[1]).length-$1.length); });
    		return fmt.indexOf("0.") !== -1 ? o : o.replace(/^0\./,".");
    	}
    	fmt = fmt.replace(/^#+([0.])/, "$1");
    	if((r = fmt.match(/^(0*)\.(#*)$/))) {
    		return sign + (""+aval).replace(/\.(\d*[1-9])0*$/,".$1").replace(/^(-?\d*)$/,"$1.").replace(/^0\./,r[1].length?"0.":".");
    	}
    	if((r = fmt.match(/^#{1,3},##0(\.?)$/))) return sign + commaify((""+aval));
    	if((r = fmt.match(/^#,##0\.([#0]*0)$/))) {
    		return val < 0 ? "-" + write_num_int(type, fmt, -val) : commaify((""+val)) + "." + fill('0',r[1].length);
    	}
    	if((r = fmt.match(/^#,#*,#0/))) return write_num_int(type,fmt.replace(/^#,#*,/,""),val);
    	if((r = fmt.match(/^([0#]+)(\\?-([0#]+))+$/))) {
    		o = _strrev(write_num_int(type, fmt.replace(/[\\-]/g,""), val));
    		ri = 0;
    		return _strrev(_strrev(fmt.replace(/\\/g,"")).replace(/[0#]/g,function(x){return ri<o.length?o.charAt(ri++):x==='0'?'0':"";}));
    	}
    	if(fmt.match(phone)) {
    		o = write_num_int(type, "##########", val);
    		return "(" + o.substr(0,3) + ") " + o.substr(3, 3) + "-" + o.substr(6);
    	}
    	var oa = "";
    	if((r = fmt.match(/^([#0?]+)( ?)\/( ?)([#0?]+)/))) {
    		ri = Math.min(/*::String(*/r[4]/*::)*/.length,7);
    		ff = SSF_frac(aval, Math.pow(10,ri)-1, false);
    		o = "" + sign;
    		oa = write_num("n", /*::String(*/r[1]/*::)*/, ff[1]);
    		if(oa.charAt(oa.length-1) == " ") oa = oa.substr(0,oa.length-1) + "0";
    		o += oa + /*::String(*/r[2]/*::)*/ + "/" + /*::String(*/r[3]/*::)*/;
    		oa = rpad_(ff[2],ri);
    		if(oa.length < r[4].length) oa = hashq(r[4].substr(r[4].length-oa.length)) + oa;
    		o += oa;
    		return o;
    	}
    	if((r = fmt.match(/^# ([#0?]+)( ?)\/( ?)([#0?]+)/))) {
    		ri = Math.min(Math.max(r[1].length, r[4].length),7);
    		ff = SSF_frac(aval, Math.pow(10,ri)-1, true);
    		return sign + (ff[0]||(ff[1] ? "" : "0")) + " " + (ff[1] ? pad_(ff[1],ri) + r[2] + "/" + r[3] + rpad_(ff[2],ri): fill(" ", 2*ri+1 + r[2].length + r[3].length));
    	}
    	if((r = fmt.match(/^[#0?]+$/))) {
    		o = "" + val;
    		if(fmt.length <= o.length) return o;
    		return hashq(fmt.substr(0,fmt.length-o.length)) + o;
    	}
    	if((r = fmt.match(/^([#0]+)\.([#0]+)$/))) {
    		o = "" + val.toFixed(Math.min(r[2].length,10)).replace(/([^0])0+$/,"$1");
    		ri = o.indexOf(".");
    		var lres = fmt.indexOf(".") - ri, rres = fmt.length - o.length - lres;
    		return hashq(fmt.substr(0,lres) + o + fmt.substr(fmt.length-rres));
    	}
    	if((r = fmt.match(/^00,000\.([#0]*0)$/))) {
    		return val < 0 ? "-" + write_num_int(type, fmt, -val) : commaify(""+val).replace(/^\d,\d{3}$/,"0$&").replace(/^\d*$/,function($$) { return "00," + ($$.length < 3 ? pad0(0,3-$$.length) : "") + $$; }) + "." + pad0(0,r[1].length);
    	}
    	switch(fmt) {
    		case "###,###":
    		case "##,###":
    		case "#,###": var x = commaify(""+aval); return x !== "0" ? sign + x : "";
    		default:
    			if(fmt.match(/\.[0#?]*$/)) return write_num_int(type, fmt.slice(0,fmt.lastIndexOf(".")), val) + hashq(fmt.slice(fmt.lastIndexOf(".")));
    	}
    	throw new Error("unsupported format |" + fmt + "|");
    }
    function write_num(type/*:string*/, fmt/*:string*/, val/*:number*/)/*:string*/ {
    	return (val|0) === val ? write_num_int(type, fmt, val) : write_num_flt(type, fmt, val);
    }
    function SSF_split_fmt(fmt/*:string*/)/*:Array<string>*/ {
    	var out/*:Array<string>*/ = [];
    	var in_str = false/*, cc*/;
    	for(var i = 0, j = 0; i < fmt.length; ++i) switch((/*cc=*/fmt.charCodeAt(i))) {
    		case 34: /* '"' */
    			in_str = !in_str; break;
    		case 95: case 42: case 92: /* '_' '*' '\\' */
    			++i; break;
    		case 59: /* ';' */
    			out[out.length] = fmt.substr(j,i-j);
    			j = i+1;
    	}
    	out[out.length] = fmt.substr(j);
    	if(in_str === true) throw new Error("Format |" + fmt + "| unterminated string ");
    	return out;
    }

    var SSF_abstime = /\[[HhMmSs\u0E0A\u0E19\u0E17]*\]/;
    function fmt_is_date(fmt/*:string*/)/*:boolean*/ {
    	var i = 0, /*cc = 0,*/ c = "", o = "";
    	while(i < fmt.length) {
    		switch((c = fmt.charAt(i))) {
    			case 'G': if(SSF_isgeneral(fmt, i)) i+= 6; i++; break;
    			case '"': for(;(/*cc=*/fmt.charCodeAt(++i)) !== 34 && i < fmt.length;){/*empty*/} ++i; break;
    			case '\\': i+=2; break;
    			case '_': i+=2; break;
    			case '@': ++i; break;
    			case 'B': case 'b':
    				if(fmt.charAt(i+1) === "1" || fmt.charAt(i+1) === "2") return true;
    				/* falls through */
    			case 'M': case 'D': case 'Y': case 'H': case 'S': case 'E':
    				/* falls through */
    			case 'm': case 'd': case 'y': case 'h': case 's': case 'e': case 'g': return true;
    			case 'A': case 'a': case '上':
    				if(fmt.substr(i, 3).toUpperCase() === "A/P") return true;
    				if(fmt.substr(i, 5).toUpperCase() === "AM/PM") return true;
    				if(fmt.substr(i, 5).toUpperCase() === "上午/下午") return true;
    				++i; break;
    			case '[':
    				o = c;
    				while(fmt.charAt(i++) !== ']' && i < fmt.length) o += fmt.charAt(i);
    				if(o.match(SSF_abstime)) return true;
    				break;
    			case '.':
    				/* falls through */
    			case '0': case '#':
    				while(i < fmt.length && ("0#?.,E+-%".indexOf(c=fmt.charAt(++i)) > -1 || (c=='\\' && fmt.charAt(i+1) == "-" && "0#".indexOf(fmt.charAt(i+2))>-1))){/* empty */}
    				break;
    			case '?': while(fmt.charAt(++i) === c){/* empty */} break;
    			case '*': ++i; if(fmt.charAt(i) == ' ' || fmt.charAt(i) == '*') ++i; break;
    			case '(': case ')': ++i; break;
    			case '1': case '2': case '3': case '4': case '5': case '6': case '7': case '8': case '9':
    				while(i < fmt.length && "0123456789".indexOf(fmt.charAt(++i)) > -1){/* empty */} break;
    			case ' ': ++i; break;
    			default: ++i; break;
    		}
    	}
    	return false;
    }

    function eval_fmt(fmt/*:string*/, v/*:any*/, opts/*:any*/, flen/*:number*/) {
    	var out = [], o = "", i = 0, c = "", lst='t', dt, j, cc;
    	var hr='H';
    	/* Tokenize */
    	while(i < fmt.length) {
    		switch((c = fmt.charAt(i))) {
    			case 'G': /* General */
    				if(!SSF_isgeneral(fmt, i)) throw new Error('unrecognized character ' + c + ' in ' +fmt);
    				out[out.length] = {t:'G', v:'General'}; i+=7; break;
    			case '"': /* Literal text */
    				for(o="";(cc=fmt.charCodeAt(++i)) !== 34 && i < fmt.length;) o += String.fromCharCode(cc);
    				out[out.length] = {t:'t', v:o}; ++i; break;
    			case '\\': var w = fmt.charAt(++i), t = (w === "(" || w === ")") ? w : 't';
    				out[out.length] = {t:t, v:w}; ++i; break;
    			case '_': out[out.length] = {t:'t', v:" "}; i+=2; break;
    			case '@': /* Text Placeholder */
    				out[out.length] = {t:'T', v:v}; ++i; break;
    			case 'B': case 'b':
    				if(fmt.charAt(i+1) === "1" || fmt.charAt(i+1) === "2") {
    					if(dt==null) { dt=SSF_parse_date_code(v, opts, fmt.charAt(i+1) === "2"); if(dt==null) return ""; }
    					out[out.length] = {t:'X', v:fmt.substr(i,2)}; lst = c; i+=2; break;
    				}
    				/* falls through */
    			case 'M': case 'D': case 'Y': case 'H': case 'S': case 'E':
    				c = c.toLowerCase();
    				/* falls through */
    			case 'm': case 'd': case 'y': case 'h': case 's': case 'e': case 'g':
    				if(v < 0) return "";
    				if(dt==null) { dt=SSF_parse_date_code(v, opts); if(dt==null) return ""; }
    				o = c; while(++i < fmt.length && fmt.charAt(i).toLowerCase() === c) o+=c;
    				if(c === 'm' && lst.toLowerCase() === 'h') c = 'M';
    				if(c === 'h') c = hr;
    				out[out.length] = {t:c, v:o}; lst = c; break;
    			case 'A': case 'a': case '上':
    				var q={t:c, v:c};
    				if(dt==null) dt=SSF_parse_date_code(v, opts);
    				if(fmt.substr(i, 3).toUpperCase() === "A/P") { if(dt!=null) q.v = dt.H >= 12 ? "P" : "A"; q.t = 'T'; hr='h';i+=3;}
    				else if(fmt.substr(i,5).toUpperCase() === "AM/PM") { if(dt!=null) q.v = dt.H >= 12 ? "PM" : "AM"; q.t = 'T'; i+=5; hr='h'; }
    				else if(fmt.substr(i,5).toUpperCase() === "上午/下午") { if(dt!=null) q.v = dt.H >= 12 ? "下午" : "上午"; q.t = 'T'; i+=5; hr='h'; }
    				else { q.t = "t"; ++i; }
    				if(dt==null && q.t === 'T') return "";
    				out[out.length] = q; lst = c; break;
    			case '[':
    				o = c;
    				while(fmt.charAt(i++) !== ']' && i < fmt.length) o += fmt.charAt(i);
    				if(o.slice(-1) !== ']') throw 'unterminated "[" block: |' + o + '|';
    				if(o.match(SSF_abstime)) {
    					if(dt==null) { dt=SSF_parse_date_code(v, opts); if(dt==null) return ""; }
    					out[out.length] = {t:'Z', v:o.toLowerCase()};
    					lst = o.charAt(1);
    				} else if(o.indexOf("$") > -1) {
    					o = (o.match(/\$([^-\[\]]*)/)||[])[1]||"$";
    					if(!fmt_is_date(fmt)) out[out.length] = {t:'t',v:o};
    				}
    				break;
    			/* Numbers */
    			case '.':
    				if(dt != null) {
    					o = c; while(++i < fmt.length && (c=fmt.charAt(i)) === "0") o += c;
    					out[out.length] = {t:'s', v:o}; break;
    				}
    				/* falls through */
    			case '0': case '#':
    				o = c; while(++i < fmt.length && "0#?.,E+-%".indexOf(c=fmt.charAt(i)) > -1) o += c;
    				out[out.length] = {t:'n', v:o}; break;
    			case '?':
    				o = c; while(fmt.charAt(++i) === c) o+=c;
    				out[out.length] = {t:c, v:o}; lst = c; break;
    			case '*': ++i; if(fmt.charAt(i) == ' ' || fmt.charAt(i) == '*') ++i; break; // **
    			case '(': case ')': out[out.length] = {t:(flen===1?'t':c), v:c}; ++i; break;
    			case '1': case '2': case '3': case '4': case '5': case '6': case '7': case '8': case '9':
    				o = c; while(i < fmt.length && "0123456789".indexOf(fmt.charAt(++i)) > -1) o+=fmt.charAt(i);
    				out[out.length] = {t:'D', v:o}; break;
    			case ' ': out[out.length] = {t:c, v:c}; ++i; break;
    			case '$': out[out.length] = {t:'t', v:'$'}; ++i; break;
    			default:
    				if(",$-+/():!^&'~{}<>=€acfijklopqrtuvwxzP".indexOf(c) === -1) throw new Error('unrecognized character ' + c + ' in ' + fmt);
    				out[out.length] = {t:'t', v:c}; ++i; break;
    		}
    	}

    	/* Scan for date/time parts */
    	var bt = 0, ss0 = 0, ssm;
    	for(i=out.length-1, lst='t'; i >= 0; --i) {
    		switch(out[i].t) {
    			case 'h': case 'H': out[i].t = hr; lst='h'; if(bt < 1) bt = 1; break;
    			case 's':
    				if((ssm=out[i].v.match(/\.0+$/))) ss0=Math.max(ss0,ssm[0].length-1);
    				if(bt < 3) bt = 3;
    			/* falls through */
    			case 'd': case 'y': case 'M': case 'e': lst=out[i].t; break;
    			case 'm': if(lst === 's') { out[i].t = 'M'; if(bt < 2) bt = 2; } break;
    			case 'X': /*if(out[i].v === "B2");*/
    				break;
    			case 'Z':
    				if(bt < 1 && out[i].v.match(/[Hh]/)) bt = 1;
    				if(bt < 2 && out[i].v.match(/[Mm]/)) bt = 2;
    				if(bt < 3 && out[i].v.match(/[Ss]/)) bt = 3;
    		}
    	}
    	/* time rounding depends on presence of minute / second / usec fields */
    	switch(bt) {
    		case 0: break;
    		case 1:
    			/*::if(!dt) break;*/
    			if(dt.u >= 0.5) { dt.u = 0; ++dt.S; }
    			if(dt.S >=  60) { dt.S = 0; ++dt.M; }
    			if(dt.M >=  60) { dt.M = 0; ++dt.H; }
    			break;
    		case 2:
    			/*::if(!dt) break;*/
    			if(dt.u >= 0.5) { dt.u = 0; ++dt.S; }
    			if(dt.S >=  60) { dt.S = 0; ++dt.M; }
    			break;
    	}

    	/* replace fields */
    	var nstr = "", jj;
    	for(i=0; i < out.length; ++i) {
    		switch(out[i].t) {
    			case 't': case 'T': case ' ': case 'D': break;
    			case 'X': out[i].v = ""; out[i].t = ";"; break;
    			case 'd': case 'm': case 'y': case 'h': case 'H': case 'M': case 's': case 'e': case 'b': case 'Z':
    				/*::if(!dt) throw "unreachable"; */
    				out[i].v = SSF_write_date(out[i].t.charCodeAt(0), out[i].v, dt, ss0);
    				out[i].t = 't'; break;
    			case 'n': case '?':
    				jj = i+1;
    				while(out[jj] != null && (
    					(c=out[jj].t) === "?" || c === "D" ||
    					((c === " " || c === "t") && out[jj+1] != null && (out[jj+1].t === '?' || out[jj+1].t === "t" && out[jj+1].v === '/')) ||
    					(out[i].t === '(' && (c === ' ' || c === 'n' || c === ')')) ||
    					(c === 't' && (out[jj].v === '/' || out[jj].v === ' ' && out[jj+1] != null && out[jj+1].t == '?'))
    				)) {
    					out[i].v += out[jj].v;
    					out[jj] = {v:"", t:";"}; ++jj;
    				}
    				nstr += out[i].v;
    				i = jj-1; break;
    			case 'G': out[i].t = 't'; out[i].v = SSF_general(v,opts); break;
    		}
    	}
    	var vv = "", myv, ostr;
    	if(nstr.length > 0) {
    		if(nstr.charCodeAt(0) == 40) /* '(' */ {
    			myv = (v<0&&nstr.charCodeAt(0) === 45 ? -v : v);
    			ostr = write_num('n', nstr, myv);
    		} else {
    			myv = (v<0 && flen > 1 ? -v : v);
    			ostr = write_num('n', nstr, myv);
    			if(myv < 0 && out[0] && out[0].t == 't') {
    				ostr = ostr.substr(1);
    				out[0].v = "-" + out[0].v;
    			}
    		}
    		jj=ostr.length-1;
    		var decpt = out.length;
    		for(i=0; i < out.length; ++i) if(out[i] != null && out[i].t != 't' && out[i].v.indexOf(".") > -1) { decpt = i; break; }
    		var lasti=out.length;
    		if(decpt === out.length && ostr.indexOf("E") === -1) {
    			for(i=out.length-1; i>= 0;--i) {
    				if(out[i] == null || 'n?'.indexOf(out[i].t) === -1) continue;
    				if(jj>=out[i].v.length-1) { jj -= out[i].v.length; out[i].v = ostr.substr(jj+1, out[i].v.length); }
    				else if(jj < 0) out[i].v = "";
    				else { out[i].v = ostr.substr(0, jj+1); jj = -1; }
    				out[i].t = 't';
    				lasti = i;
    			}
    			if(jj>=0 && lasti<out.length) out[lasti].v = ostr.substr(0,jj+1) + out[lasti].v;
    		}
    		else if(decpt !== out.length && ostr.indexOf("E") === -1) {
    			jj = ostr.indexOf(".")-1;
    			for(i=decpt; i>= 0; --i) {
    				if(out[i] == null || 'n?'.indexOf(out[i].t) === -1) continue;
    				j=out[i].v.indexOf(".")>-1&&i===decpt?out[i].v.indexOf(".")-1:out[i].v.length-1;
    				vv = out[i].v.substr(j+1);
    				for(; j>=0; --j) {
    					if(jj>=0 && (out[i].v.charAt(j) === "0" || out[i].v.charAt(j) === "#")) vv = ostr.charAt(jj--) + vv;
    				}
    				out[i].v = vv;
    				out[i].t = 't';
    				lasti = i;
    			}
    			if(jj>=0 && lasti<out.length) out[lasti].v = ostr.substr(0,jj+1) + out[lasti].v;
    			jj = ostr.indexOf(".")+1;
    			for(i=decpt; i<out.length; ++i) {
    				if(out[i] == null || ('n?('.indexOf(out[i].t) === -1 && i !== decpt)) continue;
    				j=out[i].v.indexOf(".")>-1&&i===decpt?out[i].v.indexOf(".")+1:0;
    				vv = out[i].v.substr(0,j);
    				for(; j<out[i].v.length; ++j) {
    					if(jj<ostr.length) vv += ostr.charAt(jj++);
    				}
    				out[i].v = vv;
    				out[i].t = 't';
    				lasti = i;
    			}
    		}
    	}
    	for(i=0; i<out.length; ++i) if(out[i] != null && 'n?'.indexOf(out[i].t)>-1) {
    		myv = (flen >1 && v < 0 && i>0 && out[i-1].v === "-" ? -v:v);
    		out[i].v = write_num(out[i].t, out[i].v, myv);
    		out[i].t = 't';
    	}
    	var retval = "";
    	for(i=0; i !== out.length; ++i) if(out[i] != null) retval += out[i].v;
    	return retval;
    }

    var cfregex2 = /\[(=|>[=]?|<[>=]?)(-?\d+(?:\.\d*)?)\]/;
    function chkcond(v, rr) {
    	if(rr == null) return false;
    	var thresh = parseFloat(rr[2]);
    	switch(rr[1]) {
    		case "=":  if(v == thresh) return true; break;
    		case ">":  if(v >  thresh) return true; break;
    		case "<":  if(v <  thresh) return true; break;
    		case "<>": if(v != thresh) return true; break;
    		case ">=": if(v >= thresh) return true; break;
    		case "<=": if(v <= thresh) return true; break;
    	}
    	return false;
    }
    function choose_fmt(f/*:string*/, v/*:any*/) {
    	var fmt = SSF_split_fmt(f);
    	var l = fmt.length, lat = fmt[l-1].indexOf("@");
    	if(l<4 && lat>-1) --l;
    	if(fmt.length > 4) throw new Error("cannot find right format for |" + fmt.join("|") + "|");
    	if(typeof v !== "number") return [4, fmt.length === 4 || lat>-1?fmt[fmt.length-1]:"@"];
    	switch(fmt.length) {
    		case 1: fmt = lat>-1 ? ["General", "General", "General", fmt[0]] : [fmt[0], fmt[0], fmt[0], "@"]; break;
    		case 2: fmt = lat>-1 ? [fmt[0], fmt[0], fmt[0], fmt[1]] : [fmt[0], fmt[1], fmt[0], "@"]; break;
    		case 3: fmt = lat>-1 ? [fmt[0], fmt[1], fmt[0], fmt[2]] : [fmt[0], fmt[1], fmt[2], "@"]; break;
    	}
    	var ff = v > 0 ? fmt[0] : v < 0 ? fmt[1] : fmt[2];
    	if(fmt[0].indexOf("[") === -1 && fmt[1].indexOf("[") === -1) return [l, ff];
    	if(fmt[0].match(/\[[=<>]/) != null || fmt[1].match(/\[[=<>]/) != null) {
    		var m1 = fmt[0].match(cfregex2);
    		var m2 = fmt[1].match(cfregex2);
    		return chkcond(v, m1) ? [l, fmt[0]] : chkcond(v, m2) ? [l, fmt[1]] : [l, fmt[m1 != null && m2 != null ? 2 : 1]];
    	}
    	return [l, ff];
    }
    function SSF_format(fmt/*:string|number*/,v/*:any*/,o/*:?any*/) {
    	if(o == null) o = {};
    	var sfmt = "";
    	switch(typeof fmt) {
    		case "string":
    			if(fmt == "m/d/yy" && o.dateNF) sfmt = o.dateNF;
    			else sfmt = fmt;
    			break;
    		case "number":
    			if(fmt == 14 && o.dateNF) sfmt = o.dateNF;
    			else sfmt = (o.table != null ? (o.table/*:any*/) : table_fmt)[fmt];
    			if(sfmt == null) sfmt = (o.table && o.table[SSF_default_map[fmt]]) || table_fmt[SSF_default_map[fmt]];
    			if(sfmt == null) sfmt = SSF_default_str[fmt] || "General";
    			break;
    	}
    	if(SSF_isgeneral(sfmt,0)) return SSF_general(v, o);
    	if(v instanceof Date) v = datenum_local(v, o.date1904);
    	var f = choose_fmt(sfmt, v);
    	if(SSF_isgeneral(f[1])) return SSF_general(v, o);
    	if(v === true) v = "TRUE"; else if(v === false) v = "FALSE";
    	else if(v === "" || v == null) return "";
    	return eval_fmt(f[1], v, o, f[0]);
    }
    function SSF_load(fmt/*:string*/, idx/*:?number*/)/*:number*/ {
    	if(typeof idx != 'number') {
    		idx = +idx || -1;
    /*::if(typeof idx != 'number') return 0x188; */
    		for(var i = 0; i < 0x0188; ++i) {
    /*::if(typeof idx != 'number') return 0x188; */
    			if(table_fmt[i] == undefined) { if(idx < 0) idx = i; continue; }
    			if(table_fmt[i] == fmt) { idx = i; break; }
    		}
    /*::if(typeof idx != 'number') return 0x188; */
    		if(idx < 0) idx = 0x187;
    	}
    /*::if(typeof idx != 'number') return 0x188; */
    	table_fmt[idx] = fmt;
    	return idx;
    }

    function make_ssf() {
    	table_fmt = SSF_init_table();
    }

    var SSFImplicit/*{[number]:string}*/ = ({
    	"5": '"$"#,##0_);\\("$"#,##0\\)',
    	"6": '"$"#,##0_);[Red]\\("$"#,##0\\)',
    	"7": '"$"#,##0.00_);\\("$"#,##0.00\\)',
    	"8": '"$"#,##0.00_);[Red]\\("$"#,##0.00\\)',
    	"23": 'General', "24": 'General', "25": 'General', "26": 'General',
    	"27": 'm/d/yy', "28": 'm/d/yy', "29": 'm/d/yy', "30": 'm/d/yy', "31": 'm/d/yy',
    	"32": 'h:mm:ss', "33": 'h:mm:ss', "34": 'h:mm:ss', "35": 'h:mm:ss',
    	"36": 'm/d/yy',
    	"41": '_(* #,##0_);_(* \(#,##0\);_(* "-"_);_(@_)',
    	"42": '_("$"* #,##0_);_("$"* \(#,##0\);_("$"* "-"_);_(@_)',
    	"43": '_(* #,##0.00_);_(* \(#,##0.00\);_(* "-"??_);_(@_)',
    	"44": '_("$"* #,##0.00_);_("$"* \(#,##0.00\);_("$"* "-"??_);_(@_)',
    	"50": 'm/d/yy', "51": 'm/d/yy', "52": 'm/d/yy', "53": 'm/d/yy', "54": 'm/d/yy',
    	"55": 'm/d/yy', "56": 'm/d/yy', "57": 'm/d/yy', "58": 'm/d/yy',
    	"59": '0',
    	"60": '0.00',
    	"61": '#,##0',
    	"62": '#,##0.00',
    	"63": '"$"#,##0_);\\("$"#,##0\\)',
    	"64": '"$"#,##0_);[Red]\\("$"#,##0\\)',
    	"65": '"$"#,##0.00_);\\("$"#,##0.00\\)',
    	"66": '"$"#,##0.00_);[Red]\\("$"#,##0.00\\)',
    	"67": '0%',
    	"68": '0.00%',
    	"69": '# ?/?',
    	"70": '# ??/??',
    	"71": 'm/d/yy',
    	"72": 'm/d/yy',
    	"73": 'd-mmm-yy',
    	"74": 'd-mmm',
    	"75": 'mmm-yy',
    	"76": 'h:mm',
    	"77": 'h:mm:ss',
    	"78": 'm/d/yy h:mm',
    	"79": 'mm:ss',
    	"80": '[h]:mm:ss',
    	"81": 'mmss.0'
    }/*:any*/);

    /* dateNF parse TODO: move to SSF */
    var dateNFregex = /[dD]+|[mM]+|[yYeE]+|[Hh]+|[Ss]+/g;
    function dateNF_regex(dateNF/*:string|number*/)/*:RegExp*/ {
    	var fmt = typeof dateNF == "number" ? table_fmt[dateNF] : dateNF;
    	fmt = fmt.replace(dateNFregex, "(\\d+)");
    	return new RegExp("^" + fmt + "$");
    }
    function dateNF_fix(str/*:string*/, dateNF/*:string*/, match/*:Array<string>*/)/*:string*/ {
    	var Y = -1, m = -1, d = -1, H = -1, M = -1, S = -1;
    	(dateNF.match(dateNFregex)||[]).forEach(function(n, i) {
    		var v = parseInt(match[i+1], 10);
    		switch(n.toLowerCase().charAt(0)) {
    			case 'y': Y = v; break; case 'd': d = v; break;
    			case 'h': H = v; break; case 's': S = v; break;
    			case 'm': if(H >= 0) M = v; else m = v; break;
    		}
    	});
    	if(S >= 0 && M == -1 && m >= 0) { M = m; m = -1; }
    	var datestr = (("" + (Y>=0?Y: new Date().getFullYear())).slice(-4) + "-" + ("00" + (m>=1?m:1)).slice(-2) + "-" + ("00" + (d>=1?d:1)).slice(-2));
    	if(datestr.length == 7) datestr = "0" + datestr;
    	if(datestr.length == 8) datestr = "20" + datestr;
    	var timestr = (("00" + (H>=0?H:0)).slice(-2) + ":" + ("00" + (M>=0?M:0)).slice(-2) + ":" + ("00" + (S>=0?S:0)).slice(-2));
    	if(H == -1 && M == -1 && S == -1) return datestr;
    	if(Y == -1 && m == -1 && d == -1) return timestr;
    	return datestr + "T" + timestr;
    }

    /*::
    declare var ReadShift:any;
    declare var CheckField:any;
    declare var prep_blob:any;
    declare var __readUInt32LE:any;
    declare var __readInt32LE:any;
    declare var __toBuffer:any;
    declare var __utf16le:any;
    declare var bconcat:any;
    declare var s2a:any;
    declare var chr0:any;
    declare var chr1:any;
    declare var has_buf:boolean;
    declare var new_buf:any;
    declare var new_raw_buf:any;
    declare var new_unsafe_buf:any;
    declare var Buffer_from:any;
    */
    /* cfb.js (C) 2013-present SheetJS -- http://sheetjs.com */
    /* vim: set ts=2: */
    /*jshint eqnull:true */
    /*exported CFB */
    /*global Uint8Array:false, Uint16Array:false */

    /*::
    type SectorEntry = {
    	name?:string;
    	nodes?:Array<number>;
    	data:RawBytes;
    };
    type SectorList = {
    	[k:string|number]:SectorEntry;
    	name:?string;
    	fat_addrs:Array<number>;
    	ssz:number;
    }
    type CFBFiles = {[n:string]:CFBEntry};
    */
    /* crc32.js (C) 2014-present SheetJS -- http://sheetjs.com */
    /* vim: set ts=2: */
    /*exported CRC32 */
    var CRC32 = /*#__PURE__*/(function() {
    var CRC32 = {};
    CRC32.version = '1.2.0';
    /* see perf/crc32table.js */
    /*global Int32Array */
    function signed_crc_table()/*:any*/ {
    	var c = 0, table/*:Array<number>*/ = new Array(256);

    	for(var n =0; n != 256; ++n){
    		c = n;
    		c = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));
    		c = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));
    		c = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));
    		c = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));
    		c = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));
    		c = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));
    		c = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));
    		c = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));
    		table[n] = c;
    	}

    	return typeof Int32Array !== 'undefined' ? new Int32Array(table) : table;
    }

    var T0 = signed_crc_table();
    function slice_by_16_tables(T) {
    	var c = 0, v = 0, n = 0, table/*:Array<number>*/ = typeof Int32Array !== 'undefined' ? new Int32Array(4096) : new Array(4096) ;

    	for(n = 0; n != 256; ++n) table[n] = T[n];
    	for(n = 0; n != 256; ++n) {
    		v = T[n];
    		for(c = 256 + n; c < 4096; c += 256) v = table[c] = (v >>> 8) ^ T[v & 0xFF];
    	}
    	var out = [];
    	for(n = 1; n != 16; ++n) out[n - 1] = typeof Int32Array !== 'undefined' ? table.subarray(n * 256, n * 256 + 256) : table.slice(n * 256, n * 256 + 256);
    	return out;
    }
    var TT = slice_by_16_tables(T0);
    var T1 = TT[0],  T2 = TT[1],  T3 = TT[2],  T4 = TT[3],  T5 = TT[4];
    var T6 = TT[5],  T7 = TT[6],  T8 = TT[7],  T9 = TT[8],  Ta = TT[9];
    var Tb = TT[10], Tc = TT[11], Td = TT[12], Te = TT[13], Tf = TT[14];
    function crc32_bstr(bstr/*:string*/, seed/*:number*/)/*:number*/ {
    	var C = seed/*:: ? 0 : 0 */ ^ -1;
    	for(var i = 0, L = bstr.length; i < L;) C = (C>>>8) ^ T0[(C^bstr.charCodeAt(i++))&0xFF];
    	return ~C;
    }

    function crc32_buf(B/*:Uint8Array|Array<number>*/, seed/*:number*/)/*:number*/ {
    	var C = seed/*:: ? 0 : 0 */ ^ -1, L = B.length - 15, i = 0;
    	for(; i < L;) C =
    		Tf[B[i++] ^ (C & 255)] ^
    		Te[B[i++] ^ ((C >> 8) & 255)] ^
    		Td[B[i++] ^ ((C >> 16) & 255)] ^
    		Tc[B[i++] ^ (C >>> 24)] ^
    		Tb[B[i++]] ^ Ta[B[i++]] ^ T9[B[i++]] ^ T8[B[i++]] ^
    		T7[B[i++]] ^ T6[B[i++]] ^ T5[B[i++]] ^ T4[B[i++]] ^
    		T3[B[i++]] ^ T2[B[i++]] ^ T1[B[i++]] ^ T0[B[i++]];
    	L += 15;
    	while(i < L) C = (C>>>8) ^ T0[(C^B[i++])&0xFF];
    	return ~C;
    }

    function crc32_str(str/*:string*/, seed/*:number*/)/*:number*/ {
    	var C = seed ^ -1;
    	for(var i = 0, L = str.length, c = 0, d = 0; i < L;) {
    		c = str.charCodeAt(i++);
    		if(c < 0x80) {
    			C = (C>>>8) ^ T0[(C^c)&0xFF];
    		} else if(c < 0x800) {
    			C = (C>>>8) ^ T0[(C ^ (192|((c>>6)&31)))&0xFF];
    			C = (C>>>8) ^ T0[(C ^ (128|(c&63)))&0xFF];
    		} else if(c >= 0xD800 && c < 0xE000) {
    			c = (c&1023)+64; d = str.charCodeAt(i++)&1023;
    			C = (C>>>8) ^ T0[(C ^ (240|((c>>8)&7)))&0xFF];
    			C = (C>>>8) ^ T0[(C ^ (128|((c>>2)&63)))&0xFF];
    			C = (C>>>8) ^ T0[(C ^ (128|((d>>6)&15)|((c&3)<<4)))&0xFF];
    			C = (C>>>8) ^ T0[(C ^ (128|(d&63)))&0xFF];
    		} else {
    			C = (C>>>8) ^ T0[(C ^ (224|((c>>12)&15)))&0xFF];
    			C = (C>>>8) ^ T0[(C ^ (128|((c>>6)&63)))&0xFF];
    			C = (C>>>8) ^ T0[(C ^ (128|(c&63)))&0xFF];
    		}
    	}
    	return ~C;
    }
    CRC32.table = T0;
    CRC32.bstr = crc32_bstr;
    CRC32.buf = crc32_buf;
    CRC32.str = crc32_str;
    return CRC32;
    })();
    /* [MS-CFB] v20171201 */
    var CFB = /*#__PURE__*/(function _CFB(){
    var exports = {};
    exports.version = '1.2.1';
    /* [MS-CFB] 2.6.4 */
    function namecmp(l/*:string*/, r/*:string*/)/*:number*/ {
    	var L = l.split("/"), R = r.split("/");
    	for(var i = 0, c = 0, Z = Math.min(L.length, R.length); i < Z; ++i) {
    		if((c = L[i].length - R[i].length)) return c;
    		if(L[i] != R[i]) return L[i] < R[i] ? -1 : 1;
    	}
    	return L.length - R.length;
    }
    function dirname(p/*:string*/)/*:string*/ {
    	if(p.charAt(p.length - 1) == "/") return (p.slice(0,-1).indexOf("/") === -1) ? p : dirname(p.slice(0, -1));
    	var c = p.lastIndexOf("/");
    	return (c === -1) ? p : p.slice(0, c+1);
    }

    function filename(p/*:string*/)/*:string*/ {
    	if(p.charAt(p.length - 1) == "/") return filename(p.slice(0, -1));
    	var c = p.lastIndexOf("/");
    	return (c === -1) ? p : p.slice(c+1);
    }
    /* -------------------------------------------------------------------------- */
    /* DOS Date format:
       high|YYYYYYYm.mmmddddd.HHHHHMMM.MMMSSSSS|low
       add 1980 to stored year
       stored second should be doubled
    */

    /* write JS date to buf as a DOS date */
    function write_dos_date(buf/*:CFBlob*/, date/*:Date|string*/) {
    	if(typeof date === "string") date = new Date(date);
    	var hms/*:number*/ = date.getHours();
    	hms = hms << 6 | date.getMinutes();
    	hms = hms << 5 | (date.getSeconds()>>>1);
    	buf.write_shift(2, hms);
    	var ymd/*:number*/ = (date.getFullYear() - 1980);
    	ymd = ymd << 4 | (date.getMonth()+1);
    	ymd = ymd << 5 | date.getDate();
    	buf.write_shift(2, ymd);
    }

    /* read four bytes from buf and interpret as a DOS date */
    function parse_dos_date(buf/*:CFBlob*/)/*:Date*/ {
    	var hms = buf.read_shift(2) & 0xFFFF;
    	var ymd = buf.read_shift(2) & 0xFFFF;
    	var val = new Date();
    	var d = ymd & 0x1F; ymd >>>= 5;
    	var m = ymd & 0x0F; ymd >>>= 4;
    	val.setMilliseconds(0);
    	val.setFullYear(ymd + 1980);
    	val.setMonth(m-1);
    	val.setDate(d);
    	var S = hms & 0x1F; hms >>>= 5;
    	var M = hms & 0x3F; hms >>>= 6;
    	val.setHours(hms);
    	val.setMinutes(M);
    	val.setSeconds(S<<1);
    	return val;
    }
    function parse_extra_field(blob/*:CFBlob*/)/*:any*/ {
    	prep_blob(blob, 0);
    	var o = /*::(*/{}/*:: :any)*/;
    	var flags = 0;
    	while(blob.l <= blob.length - 4) {
    		var type = blob.read_shift(2);
    		var sz = blob.read_shift(2), tgt = blob.l + sz;
    		var p = {};
    		switch(type) {
    			/* UNIX-style Timestamps */
    			case 0x5455: {
    				flags = blob.read_shift(1);
    				if(flags & 1) p.mtime = blob.read_shift(4);
    				/* for some reason, CD flag corresponds to LFH */
    				if(sz > 5) {
    					if(flags & 2) p.atime = blob.read_shift(4);
    					if(flags & 4) p.ctime = blob.read_shift(4);
    				}
    				if(p.mtime) p.mt = new Date(p.mtime*1000);
    			}
    			break;
    		}
    		blob.l = tgt;
    		o[type] = p;
    	}
    	return o;
    }
    var fs/*:: = require('fs'); */;
    function get_fs() { return fs || (fs = {}); }
    function parse(file/*:RawBytes*/, options/*:CFBReadOpts*/)/*:CFBContainer*/ {
    if(file[0] == 0x50 && file[1] == 0x4b) return parse_zip(file, options);
    if((file[0] | 0x20) == 0x6d && (file[1]|0x20) == 0x69) return parse_mad(file, options);
    if(file.length < 512) throw new Error("CFB file size " + file.length + " < 512");
    var mver = 3;
    var ssz = 512;
    var nmfs = 0; // number of mini FAT sectors
    var difat_sec_cnt = 0;
    var dir_start = 0;
    var minifat_start = 0;
    var difat_start = 0;

    var fat_addrs/*:Array<number>*/ = []; // locations of FAT sectors

    /* [MS-CFB] 2.2 Compound File Header */
    var blob/*:CFBlob*/ = /*::(*/file.slice(0,512)/*:: :any)*/;
    prep_blob(blob, 0);

    /* major version */
    var mv = check_get_mver(blob);
    mver = mv[0];
    switch(mver) {
    	case 3: ssz = 512; break; case 4: ssz = 4096; break;
    	case 0: if(mv[1] == 0) return parse_zip(file, options);
    	/* falls through */
    	default: throw new Error("Major Version: Expected 3 or 4 saw " + mver);
    }

    /* reprocess header */
    if(ssz !== 512) { blob = /*::(*/file.slice(0,ssz)/*:: :any)*/; prep_blob(blob, 28 /* blob.l */); }
    /* Save header for final object */
    var header/*:RawBytes*/ = file.slice(0,ssz);

    check_shifts(blob, mver);

    // Number of Directory Sectors
    var dir_cnt/*:number*/ = blob.read_shift(4, 'i');
    if(mver === 3 && dir_cnt !== 0) throw new Error('# Directory Sectors: Expected 0 saw ' + dir_cnt);

    // Number of FAT Sectors
    blob.l += 4;

    // First Directory Sector Location
    dir_start = blob.read_shift(4, 'i');

    // Transaction Signature
    blob.l += 4;

    // Mini Stream Cutoff Size
    blob.chk('00100000', 'Mini Stream Cutoff Size: ');

    // First Mini FAT Sector Location
    minifat_start = blob.read_shift(4, 'i');

    // Number of Mini FAT Sectors
    nmfs = blob.read_shift(4, 'i');

    // First DIFAT sector location
    difat_start = blob.read_shift(4, 'i');

    // Number of DIFAT Sectors
    difat_sec_cnt = blob.read_shift(4, 'i');

    // Grab FAT Sector Locations
    for(var q = -1, j = 0; j < 109; ++j) { /* 109 = (512 - blob.l)>>>2; */
    	q = blob.read_shift(4, 'i');
    	if(q<0) break;
    	fat_addrs[j] = q;
    }

    /** Break the file up into sectors */
    var sectors/*:Array<RawBytes>*/ = sectorify(file, ssz);

    sleuth_fat(difat_start, difat_sec_cnt, sectors, ssz, fat_addrs);

    /** Chains */
    var sector_list/*:SectorList*/ = make_sector_list(sectors, dir_start, fat_addrs, ssz);

    sector_list[dir_start].name = "!Directory";
    if(nmfs > 0 && minifat_start !== ENDOFCHAIN) sector_list[minifat_start].name = "!MiniFAT";
    sector_list[fat_addrs[0]].name = "!FAT";
    sector_list.fat_addrs = fat_addrs;
    sector_list.ssz = ssz;

    /* [MS-CFB] 2.6.1 Compound File Directory Entry */
    var files/*:CFBFiles*/ = {}, Paths/*:Array<string>*/ = [], FileIndex/*:CFBFileIndex*/ = [], FullPaths/*:Array<string>*/ = [];
    read_directory(dir_start, sector_list, sectors, Paths, nmfs, files, FileIndex, minifat_start);

    build_full_paths(FileIndex, FullPaths, Paths);
    Paths.shift();

    var o = {
    	FileIndex: FileIndex,
    	FullPaths: FullPaths
    };

    // $FlowIgnore
    if(options && options.raw) o.raw = {header: header, sectors: sectors};
    return o;
    } // parse

    /* [MS-CFB] 2.2 Compound File Header -- read up to major version */
    function check_get_mver(blob/*:CFBlob*/)/*:[number, number]*/ {
    	if(blob[blob.l] == 0x50 && blob[blob.l + 1] == 0x4b) return [0, 0];
    	// header signature 8
    	blob.chk(HEADER_SIGNATURE, 'Header Signature: ');

    	// clsid 16
    	//blob.chk(HEADER_CLSID, 'CLSID: ');
    	blob.l += 16;

    	// minor version 2
    	var mver/*:number*/ = blob.read_shift(2, 'u');

    	return [blob.read_shift(2,'u'), mver];
    }
    function check_shifts(blob/*:CFBlob*/, mver/*:number*/)/*:void*/ {
    	var shift = 0x09;

    	// Byte Order
    	//blob.chk('feff', 'Byte Order: '); // note: some writers put 0xffff
    	blob.l += 2;

    	// Sector Shift
    	switch((shift = blob.read_shift(2))) {
    		case 0x09: if(mver != 3) throw new Error('Sector Shift: Expected 9 saw ' + shift); break;
    		case 0x0c: if(mver != 4) throw new Error('Sector Shift: Expected 12 saw ' + shift); break;
    		default: throw new Error('Sector Shift: Expected 9 or 12 saw ' + shift);
    	}

    	// Mini Sector Shift
    	blob.chk('0600', 'Mini Sector Shift: ');

    	// Reserved
    	blob.chk('000000000000', 'Reserved: ');
    }

    /** Break the file up into sectors */
    function sectorify(file/*:RawBytes*/, ssz/*:number*/)/*:Array<RawBytes>*/ {
    	var nsectors = Math.ceil(file.length/ssz)-1;
    	var sectors/*:Array<RawBytes>*/ = [];
    	for(var i=1; i < nsectors; ++i) sectors[i-1] = file.slice(i*ssz,(i+1)*ssz);
    	sectors[nsectors-1] = file.slice(nsectors*ssz);
    	return sectors;
    }

    /* [MS-CFB] 2.6.4 Red-Black Tree */
    function build_full_paths(FI/*:CFBFileIndex*/, FP/*:Array<string>*/, Paths/*:Array<string>*/)/*:void*/ {
    	var i = 0, L = 0, R = 0, C = 0, j = 0, pl = Paths.length;
    	var dad/*:Array<number>*/ = [], q/*:Array<number>*/ = [];

    	for(; i < pl; ++i) { dad[i]=q[i]=i; FP[i]=Paths[i]; }

    	for(; j < q.length; ++j) {
    		i = q[j];
    		L = FI[i].L; R = FI[i].R; C = FI[i].C;
    		if(dad[i] === i) {
    			if(L !== -1 /*NOSTREAM*/ && dad[L] !== L) dad[i] = dad[L];
    			if(R !== -1 && dad[R] !== R) dad[i] = dad[R];
    		}
    		if(C !== -1 /*NOSTREAM*/) dad[C] = i;
    		if(L !== -1 && i != dad[i]) { dad[L] = dad[i]; if(q.lastIndexOf(L) < j) q.push(L); }
    		if(R !== -1 && i != dad[i]) { dad[R] = dad[i]; if(q.lastIndexOf(R) < j) q.push(R); }
    	}
    	for(i=1; i < pl; ++i) if(dad[i] === i) {
    		if(R !== -1 /*NOSTREAM*/ && dad[R] !== R) dad[i] = dad[R];
    		else if(L !== -1 && dad[L] !== L) dad[i] = dad[L];
    	}

    	for(i=1; i < pl; ++i) {
    		if(FI[i].type === 0 /* unknown */) continue;
    		j = i;
    		if(j != dad[j]) do {
    			j = dad[j];
    			FP[i] = FP[j] + "/" + FP[i];
    		} while (j !== 0 && -1 !== dad[j] && j != dad[j]);
    		dad[i] = -1;
    	}

    	FP[0] += "/";
    	for(i=1; i < pl; ++i) {
    		if(FI[i].type !== 2 /* stream */) FP[i] += "/";
    	}
    }

    function get_mfat_entry(entry/*:CFBEntry*/, payload/*:RawBytes*/, mini/*:?RawBytes*/)/*:CFBlob*/ {
    	var start = entry.start, size = entry.size;
    	//return (payload.slice(start*MSSZ, start*MSSZ + size)/*:any*/);
    	var o = [];
    	var idx = start;
    	while(mini && size > 0 && idx >= 0) {
    		o.push(payload.slice(idx * MSSZ, idx * MSSZ + MSSZ));
    		size -= MSSZ;
    		idx = __readInt32LE(mini, idx * 4);
    	}
    	if(o.length === 0) return (new_buf(0)/*:any*/);
    	return (bconcat(o).slice(0, entry.size)/*:any*/);
    }

    /** Chase down the rest of the DIFAT chain to build a comprehensive list
        DIFAT chains by storing the next sector number as the last 32 bits */
    function sleuth_fat(idx/*:number*/, cnt/*:number*/, sectors/*:Array<RawBytes>*/, ssz/*:number*/, fat_addrs)/*:void*/ {
    	var q/*:number*/ = ENDOFCHAIN;
    	if(idx === ENDOFCHAIN) {
    		if(cnt !== 0) throw new Error("DIFAT chain shorter than expected");
    	} else if(idx !== -1 /*FREESECT*/) {
    		var sector = sectors[idx], m = (ssz>>>2)-1;
    		if(!sector) return;
    		for(var i = 0; i < m; ++i) {
    			if((q = __readInt32LE(sector,i*4)) === ENDOFCHAIN) break;
    			fat_addrs.push(q);
    		}
    		sleuth_fat(__readInt32LE(sector,ssz-4),cnt - 1, sectors, ssz, fat_addrs);
    	}
    }

    /** Follow the linked list of sectors for a given starting point */
    function get_sector_list(sectors/*:Array<RawBytes>*/, start/*:number*/, fat_addrs/*:Array<number>*/, ssz/*:number*/, chkd/*:?Array<boolean>*/)/*:SectorEntry*/ {
    	var buf/*:Array<number>*/ = [], buf_chain/*:Array<any>*/ = [];
    	if(!chkd) chkd = [];
    	var modulus = ssz - 1, j = 0, jj = 0;
    	for(j=start; j>=0;) {
    		chkd[j] = true;
    		buf[buf.length] = j;
    		buf_chain.push(sectors[j]);
    		var addr = fat_addrs[Math.floor(j*4/ssz)];
    		jj = ((j*4) & modulus);
    		if(ssz < 4 + jj) throw new Error("FAT boundary crossed: " + j + " 4 "+ssz);
    		if(!sectors[addr]) break;
    		j = __readInt32LE(sectors[addr], jj);
    	}
    	return {nodes: buf, data:__toBuffer([buf_chain])};
    }

    /** Chase down the sector linked lists */
    function make_sector_list(sectors/*:Array<RawBytes>*/, dir_start/*:number*/, fat_addrs/*:Array<number>*/, ssz/*:number*/)/*:SectorList*/ {
    	var sl = sectors.length, sector_list/*:SectorList*/ = ([]/*:any*/);
    	var chkd/*:Array<boolean>*/ = [], buf/*:Array<number>*/ = [], buf_chain/*:Array<RawBytes>*/ = [];
    	var modulus = ssz - 1, i=0, j=0, k=0, jj=0;
    	for(i=0; i < sl; ++i) {
    		buf = ([]/*:Array<number>*/);
    		k = (i + dir_start); if(k >= sl) k-=sl;
    		if(chkd[k]) continue;
    		buf_chain = [];
    		var seen = [];
    		for(j=k; j>=0;) {
    			seen[j] = true;
    			chkd[j] = true;
    			buf[buf.length] = j;
    			buf_chain.push(sectors[j]);
    			var addr/*:number*/ = fat_addrs[Math.floor(j*4/ssz)];
    			jj = ((j*4) & modulus);
    			if(ssz < 4 + jj) throw new Error("FAT boundary crossed: " + j + " 4 "+ssz);
    			if(!sectors[addr]) break;
    			j = __readInt32LE(sectors[addr], jj);
    			if(seen[j]) break;
    		}
    		sector_list[k] = ({nodes: buf, data:__toBuffer([buf_chain])}/*:SectorEntry*/);
    	}
    	return sector_list;
    }

    /* [MS-CFB] 2.6.1 Compound File Directory Entry */
    function read_directory(dir_start/*:number*/, sector_list/*:SectorList*/, sectors/*:Array<RawBytes>*/, Paths/*:Array<string>*/, nmfs, files, FileIndex, mini) {
    	var minifat_store = 0, pl = (Paths.length?2:0);
    	var sector = sector_list[dir_start].data;
    	var i = 0, namelen = 0, name;
    	for(; i < sector.length; i+= 128) {
    		var blob/*:CFBlob*/ = /*::(*/sector.slice(i, i+128)/*:: :any)*/;
    		prep_blob(blob, 64);
    		namelen = blob.read_shift(2);
    		name = __utf16le(blob,0,namelen-pl);
    		Paths.push(name);
    		var o/*:CFBEntry*/ = ({
    			name:  name,
    			type:  blob.read_shift(1),
    			color: blob.read_shift(1),
    			L:     blob.read_shift(4, 'i'),
    			R:     blob.read_shift(4, 'i'),
    			C:     blob.read_shift(4, 'i'),
    			clsid: blob.read_shift(16),
    			state: blob.read_shift(4, 'i'),
    			start: 0,
    			size: 0
    		});
    		var ctime/*:number*/ = blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2);
    		if(ctime !== 0) o.ct = read_date(blob, blob.l-8);
    		var mtime/*:number*/ = blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2);
    		if(mtime !== 0) o.mt = read_date(blob, blob.l-8);
    		o.start = blob.read_shift(4, 'i');
    		o.size = blob.read_shift(4, 'i');
    		if(o.size < 0 && o.start < 0) { o.size = o.type = 0; o.start = ENDOFCHAIN; o.name = ""; }
    		if(o.type === 5) { /* root */
    			minifat_store = o.start;
    			if(nmfs > 0 && minifat_store !== ENDOFCHAIN) sector_list[minifat_store].name = "!StreamData";
    			/*minifat_size = o.size;*/
    		} else if(o.size >= 4096 /* MSCSZ */) {
    			o.storage = 'fat';
    			if(sector_list[o.start] === undefined) sector_list[o.start] = get_sector_list(sectors, o.start, sector_list.fat_addrs, sector_list.ssz);
    			sector_list[o.start].name = o.name;
    			o.content = (sector_list[o.start].data.slice(0,o.size)/*:any*/);
    		} else {
    			o.storage = 'minifat';
    			if(o.size < 0) o.size = 0;
    			else if(minifat_store !== ENDOFCHAIN && o.start !== ENDOFCHAIN && sector_list[minifat_store]) {
    				o.content = get_mfat_entry(o, sector_list[minifat_store].data, (sector_list[mini]||{}).data);
    			}
    		}
    		if(o.content) prep_blob(o.content, 0);
    		files[name] = o;
    		FileIndex.push(o);
    	}
    }

    function read_date(blob/*:RawBytes|CFBlob*/, offset/*:number*/)/*:Date*/ {
    	return new Date(( ( (__readUInt32LE(blob,offset+4)/1e7)*Math.pow(2,32)+__readUInt32LE(blob,offset)/1e7 ) - 11644473600)*1000);
    }

    function read_file(filename/*:string*/, options/*:CFBReadOpts*/) {
    	get_fs();
    	return parse(fs.readFileSync(filename), options);
    }

    function read(blob/*:RawBytes|string*/, options/*:CFBReadOpts*/) {
    	var type = options && options.type;
    	if(!type) {
    		if(has_buf && Buffer.isBuffer(blob)) type = "buffer";
    	}
    	switch(type || "base64") {
    		case "file": /*:: if(typeof blob !== 'string') throw "Must pass a filename when type='file'"; */return read_file(blob, options);
    		case "base64": /*:: if(typeof blob !== 'string') throw "Must pass a base64-encoded binary string when type='file'"; */return parse(s2a(Base64_decode(blob)), options);
    		case "binary": /*:: if(typeof blob !== 'string') throw "Must pass a binary string when type='file'"; */return parse(s2a(blob), options);
    	}
    	return parse(/*::typeof blob == 'string' ? new Buffer(blob, 'utf-8') : */blob, options);
    }

    function init_cfb(cfb/*:CFBContainer*/, opts/*:?any*/)/*:void*/ {
    	var o = opts || {}, root = o.root || "Root Entry";
    	if(!cfb.FullPaths) cfb.FullPaths = [];
    	if(!cfb.FileIndex) cfb.FileIndex = [];
    	if(cfb.FullPaths.length !== cfb.FileIndex.length) throw new Error("inconsistent CFB structure");
    	if(cfb.FullPaths.length === 0) {
    		cfb.FullPaths[0] = root + "/";
    		cfb.FileIndex[0] = ({ name: root, type: 5 }/*:any*/);
    	}
    	if(o.CLSID) cfb.FileIndex[0].clsid = o.CLSID;
    	seed_cfb(cfb);
    }
    function seed_cfb(cfb/*:CFBContainer*/)/*:void*/ {
    	var nm = "\u0001Sh33tJ5";
    	if(CFB.find(cfb, "/" + nm)) return;
    	var p = new_buf(4); p[0] = 55; p[1] = p[3] = 50; p[2] = 54;
    	cfb.FileIndex.push(({ name: nm, type: 2, content:p, size:4, L:69, R:69, C:69 }/*:any*/));
    	cfb.FullPaths.push(cfb.FullPaths[0] + nm);
    	rebuild_cfb(cfb);
    }
    function rebuild_cfb(cfb/*:CFBContainer*/, f/*:?boolean*/)/*:void*/ {
    	init_cfb(cfb);
    	var gc = false, s = false;
    	for(var i = cfb.FullPaths.length - 1; i >= 0; --i) {
    		var _file = cfb.FileIndex[i];
    		switch(_file.type) {
    			case 0:
    				if(s) gc = true;
    				else { cfb.FileIndex.pop(); cfb.FullPaths.pop(); }
    				break;
    			case 1: case 2: case 5:
    				s = true;
    				if(isNaN(_file.R * _file.L * _file.C)) gc = true;
    				if(_file.R > -1 && _file.L > -1 && _file.R == _file.L) gc = true;
    				break;
    			default: gc = true; break;
    		}
    	}
    	if(!gc && !f) return;

    	var now = new Date(1987, 1, 19), j = 0;
    	// Track which names exist
    	var fullPaths = Object.create ? Object.create(null) : {};
    	var data/*:Array<[string, CFBEntry]>*/ = [];
    	for(i = 0; i < cfb.FullPaths.length; ++i) {
    		fullPaths[cfb.FullPaths[i]] = true;
    		if(cfb.FileIndex[i].type === 0) continue;
    		data.push([cfb.FullPaths[i], cfb.FileIndex[i]]);
    	}
    	for(i = 0; i < data.length; ++i) {
    		var dad = dirname(data[i][0]);
    		s = fullPaths[dad];
    		if(!s) {
    			data.push([dad, ({
    				name: filename(dad).replace("/",""),
    				type: 1,
    				clsid: HEADER_CLSID,
    				ct: now, mt: now,
    				content: null
    			}/*:any*/)]);
    			// Add name to set
    			fullPaths[dad] = true;
    		}
    	}

    	data.sort(function(x,y) { return namecmp(x[0], y[0]); });
    	cfb.FullPaths = []; cfb.FileIndex = [];
    	for(i = 0; i < data.length; ++i) { cfb.FullPaths[i] = data[i][0]; cfb.FileIndex[i] = data[i][1]; }
    	for(i = 0; i < data.length; ++i) {
    		var elt = cfb.FileIndex[i];
    		var nm = cfb.FullPaths[i];

    		elt.name =  filename(nm).replace("/","");
    		elt.L = elt.R = elt.C = -(elt.color = 1);
    		elt.size = elt.content ? elt.content.length : 0;
    		elt.start = 0;
    		elt.clsid = (elt.clsid || HEADER_CLSID);
    		if(i === 0) {
    			elt.C = data.length > 1 ? 1 : -1;
    			elt.size = 0;
    			elt.type = 5;
    		} else if(nm.slice(-1) == "/") {
    			for(j=i+1;j < data.length; ++j) if(dirname(cfb.FullPaths[j])==nm) break;
    			elt.C = j >= data.length ? -1 : j;
    			for(j=i+1;j < data.length; ++j) if(dirname(cfb.FullPaths[j])==dirname(nm)) break;
    			elt.R = j >= data.length ? -1 : j;
    			elt.type = 1;
    		} else {
    			if(dirname(cfb.FullPaths[i+1]||"") == dirname(nm)) elt.R = i + 1;
    			elt.type = 2;
    		}
    	}

    }

    function _write(cfb/*:CFBContainer*/, options/*:CFBWriteOpts*/)/*:RawBytes|string*/ {
    	var _opts = options || {};
    	/* MAD is order-sensitive, skip rebuild and sort */
    	if(_opts.fileType == 'mad') return write_mad(cfb, _opts);
    	rebuild_cfb(cfb);
    	switch(_opts.fileType) {
    		case 'zip': return write_zip(cfb, _opts);
    		//case 'mad': return write_mad(cfb, _opts);
    	}
    	var L = (function(cfb/*:CFBContainer*/)/*:Array<number>*/{
    		var mini_size = 0, fat_size = 0;
    		for(var i = 0; i < cfb.FileIndex.length; ++i) {
    			var file = cfb.FileIndex[i];
    			if(!file.content) continue;
    			/*:: if(file.content == null) throw new Error("unreachable"); */
    			var flen = file.content.length;
    			if(flen > 0){
    				if(flen < 0x1000) mini_size += (flen + 0x3F) >> 6;
    				else fat_size += (flen + 0x01FF) >> 9;
    			}
    		}
    		var dir_cnt = (cfb.FullPaths.length +3) >> 2;
    		var mini_cnt = (mini_size + 7) >> 3;
    		var mfat_cnt = (mini_size + 0x7F) >> 7;
    		var fat_base = mini_cnt + fat_size + dir_cnt + mfat_cnt;
    		var fat_cnt = (fat_base + 0x7F) >> 7;
    		var difat_cnt = fat_cnt <= 109 ? 0 : Math.ceil((fat_cnt-109)/0x7F);
    		while(((fat_base + fat_cnt + difat_cnt + 0x7F) >> 7) > fat_cnt) difat_cnt = ++fat_cnt <= 109 ? 0 : Math.ceil((fat_cnt-109)/0x7F);
    		var L =  [1, difat_cnt, fat_cnt, mfat_cnt, dir_cnt, fat_size, mini_size, 0];
    		cfb.FileIndex[0].size = mini_size << 6;
    		L[7] = (cfb.FileIndex[0].start=L[0]+L[1]+L[2]+L[3]+L[4]+L[5])+((L[6]+7) >> 3);
    		return L;
    	})(cfb);
    	var o = new_buf(L[7] << 9);
    	var i = 0, T = 0;
    	{
    		for(i = 0; i < 8; ++i) o.write_shift(1, HEADER_SIG[i]);
    		for(i = 0; i < 8; ++i) o.write_shift(2, 0);
    		o.write_shift(2, 0x003E);
    		o.write_shift(2, 0x0003);
    		o.write_shift(2, 0xFFFE);
    		o.write_shift(2, 0x0009);
    		o.write_shift(2, 0x0006);
    		for(i = 0; i < 3; ++i) o.write_shift(2, 0);
    		o.write_shift(4, 0);
    		o.write_shift(4, L[2]);
    		o.write_shift(4, L[0] + L[1] + L[2] + L[3] - 1);
    		o.write_shift(4, 0);
    		o.write_shift(4, 1<<12);
    		o.write_shift(4, L[3] ? L[0] + L[1] + L[2] - 1: ENDOFCHAIN);
    		o.write_shift(4, L[3]);
    		o.write_shift(-4, L[1] ? L[0] - 1: ENDOFCHAIN);
    		o.write_shift(4, L[1]);
    		for(i = 0; i < 109; ++i) o.write_shift(-4, i < L[2] ? L[1] + i : -1);
    	}
    	if(L[1]) {
    		for(T = 0; T < L[1]; ++T) {
    			for(; i < 236 + T * 127; ++i) o.write_shift(-4, i < L[2] ? L[1] + i : -1);
    			o.write_shift(-4, T === L[1] - 1 ? ENDOFCHAIN : T + 1);
    		}
    	}
    	var chainit = function(w/*:number*/)/*:void*/ {
    		for(T += w; i<T-1; ++i) o.write_shift(-4, i+1);
    		if(w) { ++i; o.write_shift(-4, ENDOFCHAIN); }
    	};
    	T = i = 0;
    	for(T+=L[1]; i<T; ++i) o.write_shift(-4, consts.DIFSECT);
    	for(T+=L[2]; i<T; ++i) o.write_shift(-4, consts.FATSECT);
    	chainit(L[3]);
    	chainit(L[4]);
    	var j/*:number*/ = 0, flen/*:number*/ = 0;
    	var file/*:CFBEntry*/ = cfb.FileIndex[0];
    	for(; j < cfb.FileIndex.length; ++j) {
    		file = cfb.FileIndex[j];
    		if(!file.content) continue;
    		/*:: if(file.content == null) throw new Error("unreachable"); */
    		flen = file.content.length;
    		if(flen < 0x1000) continue;
    		file.start = T;
    		chainit((flen + 0x01FF) >> 9);
    	}
    	chainit((L[6] + 7) >> 3);
    	while(o.l & 0x1FF) o.write_shift(-4, consts.ENDOFCHAIN);
    	T = i = 0;
    	for(j = 0; j < cfb.FileIndex.length; ++j) {
    		file = cfb.FileIndex[j];
    		if(!file.content) continue;
    		/*:: if(file.content == null) throw new Error("unreachable"); */
    		flen = file.content.length;
    		if(!flen || flen >= 0x1000) continue;
    		file.start = T;
    		chainit((flen + 0x3F) >> 6);
    	}
    	while(o.l & 0x1FF) o.write_shift(-4, consts.ENDOFCHAIN);
    	for(i = 0; i < L[4]<<2; ++i) {
    		var nm = cfb.FullPaths[i];
    		if(!nm || nm.length === 0) {
    			for(j = 0; j < 17; ++j) o.write_shift(4, 0);
    			for(j = 0; j < 3; ++j) o.write_shift(4, -1);
    			for(j = 0; j < 12; ++j) o.write_shift(4, 0);
    			continue;
    		}
    		file = cfb.FileIndex[i];
    		if(i === 0) file.start = file.size ? file.start - 1 : ENDOFCHAIN;
    		var _nm/*:string*/ = (i === 0 && _opts.root) || file.name;
    		flen = 2*(_nm.length+1);
    		o.write_shift(64, _nm, "utf16le");
    		o.write_shift(2, flen);
    		o.write_shift(1, file.type);
    		o.write_shift(1, file.color);
    		o.write_shift(-4, file.L);
    		o.write_shift(-4, file.R);
    		o.write_shift(-4, file.C);
    		if(!file.clsid) for(j = 0; j < 4; ++j) o.write_shift(4, 0);
    		else o.write_shift(16, file.clsid, "hex");
    		o.write_shift(4, file.state || 0);
    		o.write_shift(4, 0); o.write_shift(4, 0);
    		o.write_shift(4, 0); o.write_shift(4, 0);
    		o.write_shift(4, file.start);
    		o.write_shift(4, file.size); o.write_shift(4, 0);
    	}
    	for(i = 1; i < cfb.FileIndex.length; ++i) {
    		file = cfb.FileIndex[i];
    		/*:: if(!file.content) throw new Error("unreachable"); */
    		if(file.size >= 0x1000) {
    			o.l = (file.start+1) << 9;
    			if (has_buf && Buffer.isBuffer(file.content)) {
    				file.content.copy(o, o.l, 0, file.size);
    				// o is a 0-filled Buffer so just set next offset
    				o.l += (file.size + 511) & -512;
    			} else {
    				for(j = 0; j < file.size; ++j) o.write_shift(1, file.content[j]);
    				for(; j & 0x1FF; ++j) o.write_shift(1, 0);
    			}
    		}
    	}
    	for(i = 1; i < cfb.FileIndex.length; ++i) {
    		file = cfb.FileIndex[i];
    		/*:: if(!file.content) throw new Error("unreachable"); */
    		if(file.size > 0 && file.size < 0x1000) {
    			if (has_buf && Buffer.isBuffer(file.content)) {
    				file.content.copy(o, o.l, 0, file.size);
    				// o is a 0-filled Buffer so just set next offset
    				o.l += (file.size + 63) & -64;
    			} else {
    				for(j = 0; j < file.size; ++j) o.write_shift(1, file.content[j]);
    				for(; j & 0x3F; ++j) o.write_shift(1, 0);
    			}
    		}
    	}
    	if (has_buf) {
    		o.l = o.length;
    	} else {
    		// When using Buffer, already 0-filled
    		while(o.l < o.length) o.write_shift(1, 0);
    	}
    	return o;
    }
    /* [MS-CFB] 2.6.4 (Unicode 3.0.1 case conversion) */
    function find(cfb/*:CFBContainer*/, path/*:string*/)/*:?CFBEntry*/ {
    	var UCFullPaths/*:Array<string>*/ = cfb.FullPaths.map(function(x) { return x.toUpperCase(); });
    	var UCPaths/*:Array<string>*/ = UCFullPaths.map(function(x) { var y = x.split("/"); return y[y.length - (x.slice(-1) == "/" ? 2 : 1)]; });
    	var k/*:boolean*/ = false;
    	if(path.charCodeAt(0) === 47 /* "/" */) { k = true; path = UCFullPaths[0].slice(0, -1) + path; }
    	else k = path.indexOf("/") !== -1;
    	var UCPath/*:string*/ = path.toUpperCase();
    	var w/*:number*/ = k === true ? UCFullPaths.indexOf(UCPath) : UCPaths.indexOf(UCPath);
    	if(w !== -1) return cfb.FileIndex[w];

    	var m = !UCPath.match(chr1);
    	UCPath = UCPath.replace(chr0,'');
    	if(m) UCPath = UCPath.replace(chr1,'!');
    	for(w = 0; w < UCFullPaths.length; ++w) {
    		if((m ? UCFullPaths[w].replace(chr1,'!') : UCFullPaths[w]).replace(chr0,'') == UCPath) return cfb.FileIndex[w];
    		if((m ? UCPaths[w].replace(chr1,'!') : UCPaths[w]).replace(chr0,'') == UCPath) return cfb.FileIndex[w];
    	}
    	return null;
    }
    /** CFB Constants */
    var MSSZ = 64; /* Mini Sector Size = 1<<6 */
    //var MSCSZ = 4096; /* Mini Stream Cutoff Size */
    /* 2.1 Compound File Sector Numbers and Types */
    var ENDOFCHAIN = -2;
    /* 2.2 Compound File Header */
    var HEADER_SIGNATURE = 'd0cf11e0a1b11ae1';
    var HEADER_SIG = [0xD0, 0xCF, 0x11, 0xE0, 0xA1, 0xB1, 0x1A, 0xE1];
    var HEADER_CLSID = '00000000000000000000000000000000';
    var consts = {
    	/* 2.1 Compund File Sector Numbers and Types */
    	MAXREGSECT: -6,
    	DIFSECT: -4,
    	FATSECT: -3,
    	ENDOFCHAIN: ENDOFCHAIN,
    	FREESECT: -1,
    	/* 2.2 Compound File Header */
    	HEADER_SIGNATURE: HEADER_SIGNATURE,
    	HEADER_MINOR_VERSION: '3e00',
    	MAXREGSID: -6,
    	NOSTREAM: -1,
    	HEADER_CLSID: HEADER_CLSID,
    	/* 2.6.1 Compound File Directory Entry */
    	EntryTypes: ['unknown','storage','stream','lockbytes','property','root']
    };

    function write_file(cfb/*:CFBContainer*/, filename/*:string*/, options/*:CFBWriteOpts*/)/*:void*/ {
    	get_fs();
    	var o = _write(cfb, options);
    	/*:: if(typeof Buffer == 'undefined' || !Buffer.isBuffer(o) || !(o instanceof Buffer)) throw new Error("unreachable"); */
    	fs.writeFileSync(filename, o);
    }

    function a2s(o/*:RawBytes*/)/*:string*/ {
    	var out = new Array(o.length);
    	for(var i = 0; i < o.length; ++i) out[i] = String.fromCharCode(o[i]);
    	return out.join("");
    }

    function write(cfb/*:CFBContainer*/, options/*:CFBWriteOpts*/)/*:RawBytes|string*/ {
    	var o = _write(cfb, options);
    	switch(options && options.type || "buffer") {
    		case "file": get_fs(); fs.writeFileSync(options.filename, (o/*:any*/)); return o;
    		case "binary": return typeof o == "string" ? o : a2s(o);
    		case "base64": return Base64_encode(typeof o == "string" ? o : a2s(o));
    		case "buffer": if(has_buf) return Buffer.isBuffer(o) ? o : Buffer_from(o);
    			/* falls through */
    		case "array": return typeof o == "string" ? s2a(o) : o;
    	}
    	return o;
    }
    /* node < 8.1 zlib does not expose bytesRead, so default to pure JS */
    var _zlib;
    function use_zlib(zlib) { try {
    	var InflateRaw = zlib.InflateRaw;
    	var InflRaw = new InflateRaw();
    	InflRaw._processChunk(new Uint8Array([3, 0]), InflRaw._finishFlushFlag);
    	if(InflRaw.bytesRead) _zlib = zlib;
    	else throw new Error("zlib does not expose bytesRead");
    } catch(e) {console.error("cannot use native zlib: " + (e.message || e)); } }

    function _inflateRawSync(payload, usz) {
    	if(!_zlib) return _inflate(payload, usz);
    	var InflateRaw = _zlib.InflateRaw;
    	var InflRaw = new InflateRaw();
    	var out = InflRaw._processChunk(payload.slice(payload.l), InflRaw._finishFlushFlag);
    	payload.l += InflRaw.bytesRead;
    	return out;
    }

    function _deflateRawSync(payload) {
    	return _zlib ? _zlib.deflateRawSync(payload) : _deflate(payload);
    }
    var CLEN_ORDER = [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];

    /*  LEN_ID = [ 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285 ]; */
    var LEN_LN = [   3,   4,   5,   6,   7,   8,   9,  10,  11,  13 , 15,  17,  19,  23,  27,  31,  35,  43,  51,  59,  67,  83,  99, 115, 131, 163, 195, 227, 258 ];

    /*  DST_ID = [  0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13,  14,  15,  16,  17,  18,  19,   20,   21,   22,   23,   24,   25,   26,    27,    28,    29 ]; */
    var DST_LN = [  1,  2,  3,  4,  5,  7,  9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577 ];

    function bit_swap_8(n) { var t = (((((n<<1)|(n<<11)) & 0x22110) | (((n<<5)|(n<<15)) & 0x88440))); return ((t>>16) | (t>>8) |t)&0xFF; }

    var use_typed_arrays = typeof Uint8Array !== 'undefined';

    var bitswap8 = use_typed_arrays ? new Uint8Array(1<<8) : [];
    for(var q = 0; q < (1<<8); ++q) bitswap8[q] = bit_swap_8(q);

    function bit_swap_n(n, b) {
    	var rev = bitswap8[n & 0xFF];
    	if(b <= 8) return rev >>> (8-b);
    	rev = (rev << 8) | bitswap8[(n>>8)&0xFF];
    	if(b <= 16) return rev >>> (16-b);
    	rev = (rev << 8) | bitswap8[(n>>16)&0xFF];
    	return rev >>> (24-b);
    }

    /* helpers for unaligned bit reads */
    function read_bits_2(buf, bl) { var w = (bl&7), h = (bl>>>3); return ((buf[h]|(w <= 6 ? 0 : buf[h+1]<<8))>>>w)& 0x03; }
    function read_bits_3(buf, bl) { var w = (bl&7), h = (bl>>>3); return ((buf[h]|(w <= 5 ? 0 : buf[h+1]<<8))>>>w)& 0x07; }
    function read_bits_4(buf, bl) { var w = (bl&7), h = (bl>>>3); return ((buf[h]|(w <= 4 ? 0 : buf[h+1]<<8))>>>w)& 0x0F; }
    function read_bits_5(buf, bl) { var w = (bl&7), h = (bl>>>3); return ((buf[h]|(w <= 3 ? 0 : buf[h+1]<<8))>>>w)& 0x1F; }
    function read_bits_7(buf, bl) { var w = (bl&7), h = (bl>>>3); return ((buf[h]|(w <= 1 ? 0 : buf[h+1]<<8))>>>w)& 0x7F; }

    /* works up to n = 3 * 8 + 1 = 25 */
    function read_bits_n(buf, bl, n) {
    	var w = (bl&7), h = (bl>>>3), f = ((1<<n)-1);
    	var v = buf[h] >>> w;
    	if(n < 8 - w) return v & f;
    	v |= buf[h+1]<<(8-w);
    	if(n < 16 - w) return v & f;
    	v |= buf[h+2]<<(16-w);
    	if(n < 24 - w) return v & f;
    	v |= buf[h+3]<<(24-w);
    	return v & f;
    }

    /* helpers for unaligned bit writes */
    function write_bits_3(buf, bl, v) { var w = bl & 7, h = bl >>> 3;
    	if(w <= 5) buf[h] |= (v & 7) << w;
    	else {
    		buf[h] |= (v << w) & 0xFF;
    		buf[h+1] = (v&7) >> (8-w);
    	}
    	return bl + 3;
    }

    function write_bits_1(buf, bl, v) {
    	var w = bl & 7, h = bl >>> 3;
    	v = (v&1) << w;
    	buf[h] |= v;
    	return bl + 1;
    }
    function write_bits_8(buf, bl, v) {
    	var w = bl & 7, h = bl >>> 3;
    	v <<= w;
    	buf[h] |=  v & 0xFF; v >>>= 8;
    	buf[h+1] = v;
    	return bl + 8;
    }
    function write_bits_16(buf, bl, v) {
    	var w = bl & 7, h = bl >>> 3;
    	v <<= w;
    	buf[h] |=  v & 0xFF; v >>>= 8;
    	buf[h+1] = v & 0xFF;
    	buf[h+2] = v >>> 8;
    	return bl + 16;
    }

    /* until ArrayBuffer#realloc is a thing, fake a realloc */
    function realloc(b, sz/*:number*/) {
    	var L = b.length, M = 2*L > sz ? 2*L : sz + 5, i = 0;
    	if(L >= sz) return b;
    	if(has_buf) {
    		var o = new_unsafe_buf(M);
    		// $FlowIgnore
    		if(b.copy) b.copy(o);
    		else for(; i < b.length; ++i) o[i] = b[i];
    		return o;
    	} else if(use_typed_arrays) {
    		var a = new Uint8Array(M);
    		if(a.set) a.set(b);
    		else for(; i < L; ++i) a[i] = b[i];
    		return a;
    	}
    	b.length = M;
    	return b;
    }

    /* zero-filled arrays for older browsers */
    function zero_fill_array(n) {
    	var o = new Array(n);
    	for(var i = 0; i < n; ++i) o[i] = 0;
    	return o;
    }

    /* build tree (used for literals and lengths) */
    function build_tree(clens, cmap, MAX/*:number*/)/*:number*/ {
    	var maxlen = 1, w = 0, i = 0, j = 0, ccode = 0, L = clens.length;

    	var bl_count  = use_typed_arrays ? new Uint16Array(32) : zero_fill_array(32);
    	for(i = 0; i < 32; ++i) bl_count[i] = 0;

    	for(i = L; i < MAX; ++i) clens[i] = 0;
    	L = clens.length;

    	var ctree = use_typed_arrays ? new Uint16Array(L) : zero_fill_array(L); // []

    	/* build code tree */
    	for(i = 0; i < L; ++i) {
    		bl_count[(w = clens[i])]++;
    		if(maxlen < w) maxlen = w;
    		ctree[i] = 0;
    	}
    	bl_count[0] = 0;
    	for(i = 1; i <= maxlen; ++i) bl_count[i+16] = (ccode = (ccode + bl_count[i-1])<<1);
    	for(i = 0; i < L; ++i) {
    		ccode = clens[i];
    		if(ccode != 0) ctree[i] = bl_count[ccode+16]++;
    	}

    	/* cmap[maxlen + 4 bits] = (off&15) + (lit<<4) reverse mapping */
    	var cleni = 0;
    	for(i = 0; i < L; ++i) {
    		cleni = clens[i];
    		if(cleni != 0) {
    			ccode = bit_swap_n(ctree[i], maxlen)>>(maxlen-cleni);
    			for(j = (1<<(maxlen + 4 - cleni)) - 1; j>=0; --j)
    				cmap[ccode|(j<<cleni)] = (cleni&15) | (i<<4);
    		}
    	}
    	return maxlen;
    }

    /* Fixed Huffman */
    var fix_lmap = use_typed_arrays ? new Uint16Array(512) : zero_fill_array(512);
    var fix_dmap = use_typed_arrays ? new Uint16Array(32)  : zero_fill_array(32);
    if(!use_typed_arrays) {
    	for(var i = 0; i < 512; ++i) fix_lmap[i] = 0;
    	for(i = 0; i < 32; ++i) fix_dmap[i] = 0;
    }
    (function() {
    	var dlens/*:Array<number>*/ = [];
    	var i = 0;
    	for(;i<32; i++) dlens.push(5);
    	build_tree(dlens, fix_dmap, 32);

    	var clens/*:Array<number>*/ = [];
    	i = 0;
    	for(; i<=143; i++) clens.push(8);
    	for(; i<=255; i++) clens.push(9);
    	for(; i<=279; i++) clens.push(7);
    	for(; i<=287; i++) clens.push(8);
    	build_tree(clens, fix_lmap, 288);
    })();var _deflateRaw = /*#__PURE__*/(function _deflateRawIIFE() {
    	var DST_LN_RE = use_typed_arrays ? new Uint8Array(0x8000) : [];
    	var j = 0, k = 0;
    	for(; j < DST_LN.length - 1; ++j) {
    		for(; k < DST_LN[j+1]; ++k) DST_LN_RE[k] = j;
    	}
    	for(;k < 32768; ++k) DST_LN_RE[k] = 29;

    	var LEN_LN_RE = use_typed_arrays ? new Uint8Array(0x103) : [];
    	for(j = 0, k = 0; j < LEN_LN.length - 1; ++j) {
    		for(; k < LEN_LN[j+1]; ++k) LEN_LN_RE[k] = j;
    	}

    	function write_stored(data, out) {
    		var boff = 0;
    		while(boff < data.length) {
    			var L = Math.min(0xFFFF, data.length - boff);
    			var h = boff + L == data.length;
    			out.write_shift(1, +h);
    			out.write_shift(2, L);
    			out.write_shift(2, (~L) & 0xFFFF);
    			while(L-- > 0) out[out.l++] = data[boff++];
    		}
    		return out.l;
    	}

    	/* Fixed Huffman */
    	function write_huff_fixed(data, out) {
    		var bl = 0;
    		var boff = 0;
    		var addrs = use_typed_arrays ? new Uint16Array(0x8000) : [];
    		while(boff < data.length) {
    			var L = /* data.length - boff; */ Math.min(0xFFFF, data.length - boff);

    			/* write a stored block for short data */
    			if(L < 10) {
    				bl = write_bits_3(out, bl, +!!(boff + L == data.length)); // jshint ignore:line
    				if(bl & 7) bl += 8 - (bl & 7);
    				out.l = (bl / 8) | 0;
    				out.write_shift(2, L);
    				out.write_shift(2, (~L) & 0xFFFF);
    				while(L-- > 0) out[out.l++] = data[boff++];
    				bl = out.l * 8;
    				continue;
    			}

    			bl = write_bits_3(out, bl, +!!(boff + L == data.length) + 2); // jshint ignore:line
    			var hash = 0;
    			while(L-- > 0) {
    				var d = data[boff];
    				hash = ((hash << 5) ^ d) & 0x7FFF;

    				var match = -1, mlen = 0;

    				if((match = addrs[hash])) {
    					match |= boff & ~0x7FFF;
    					if(match > boff) match -= 0x8000;
    					if(match < boff) while(data[match + mlen] == data[boff + mlen] && mlen < 250) ++mlen;
    				}

    				if(mlen > 2) {
    					/* Copy Token  */
    					d = LEN_LN_RE[mlen];
    					if(d <= 22) bl = write_bits_8(out, bl, bitswap8[d+1]>>1) - 1;
    					else {
    						write_bits_8(out, bl, 3);
    						bl += 5;
    						write_bits_8(out, bl, bitswap8[d-23]>>5);
    						bl += 3;
    					}
    					var len_eb = (d < 8) ? 0 : ((d - 4)>>2);
    					if(len_eb > 0) {
    						write_bits_16(out, bl, mlen - LEN_LN[d]);
    						bl += len_eb;
    					}

    					d = DST_LN_RE[boff - match];
    					bl = write_bits_8(out, bl, bitswap8[d]>>3);
    					bl -= 3;

    					var dst_eb = d < 4 ? 0 : (d-2)>>1;
    					if(dst_eb > 0) {
    						write_bits_16(out, bl, boff - match - DST_LN[d]);
    						bl += dst_eb;
    					}
    					for(var q = 0; q < mlen; ++q) {
    						addrs[hash] = boff & 0x7FFF;
    						hash = ((hash << 5) ^ data[boff]) & 0x7FFF;
    						++boff;
    					}
    					L-= mlen - 1;
    				} else {
    					/* Literal Token */
    					if(d <= 143) d = d + 48;
    					else bl = write_bits_1(out, bl, 1);
    					bl = write_bits_8(out, bl, bitswap8[d]);
    					addrs[hash] = boff & 0x7FFF;
    					++boff;
    				}
    			}

    			bl = write_bits_8(out, bl, 0) - 1;
    		}
    		out.l = ((bl + 7)/8)|0;
    		return out.l;
    	}
    	return function _deflateRaw(data, out) {
    		if(data.length < 8) return write_stored(data, out);
    		return write_huff_fixed(data, out);
    	};
    })();

    function _deflate(data) {
    	var buf = new_buf(50+Math.floor(data.length*1.1));
    	var off = _deflateRaw(data, buf);
    	return buf.slice(0, off);
    }
    /* modified inflate function also moves original read head */

    var dyn_lmap = use_typed_arrays ? new Uint16Array(32768) : zero_fill_array(32768);
    var dyn_dmap = use_typed_arrays ? new Uint16Array(32768) : zero_fill_array(32768);
    var dyn_cmap = use_typed_arrays ? new Uint16Array(128)   : zero_fill_array(128);
    var dyn_len_1 = 1, dyn_len_2 = 1;

    /* 5.5.3 Expanding Huffman Codes */
    function dyn(data, boff/*:number*/) {
    	/* nomenclature from RFC1951 refers to bit values; these are offset by the implicit constant */
    	var _HLIT = read_bits_5(data, boff) + 257; boff += 5;
    	var _HDIST = read_bits_5(data, boff) + 1; boff += 5;
    	var _HCLEN = read_bits_4(data, boff) + 4; boff += 4;
    	var w = 0;

    	/* grab and store code lengths */
    	var clens = use_typed_arrays ? new Uint8Array(19) : zero_fill_array(19);
    	var ctree = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ];
    	var maxlen = 1;
    	var bl_count =  use_typed_arrays ? new Uint8Array(8) : zero_fill_array(8);
    	var next_code = use_typed_arrays ? new Uint8Array(8) : zero_fill_array(8);
    	var L = clens.length; /* 19 */
    	for(var i = 0; i < _HCLEN; ++i) {
    		clens[CLEN_ORDER[i]] = w = read_bits_3(data, boff);
    		if(maxlen < w) maxlen = w;
    		bl_count[w]++;
    		boff += 3;
    	}

    	/* build code tree */
    	var ccode = 0;
    	bl_count[0] = 0;
    	for(i = 1; i <= maxlen; ++i) next_code[i] = ccode = (ccode + bl_count[i-1])<<1;
    	for(i = 0; i < L; ++i) if((ccode = clens[i]) != 0) ctree[i] = next_code[ccode]++;
    	/* cmap[7 bits from stream] = (off&7) + (lit<<3) */
    	var cleni = 0;
    	for(i = 0; i < L; ++i) {
    		cleni = clens[i];
    		if(cleni != 0) {
    			ccode = bitswap8[ctree[i]]>>(8-cleni);
    			for(var j = (1<<(7-cleni))-1; j>=0; --j) dyn_cmap[ccode|(j<<cleni)] = (cleni&7) | (i<<3);
    		}
    	}

    	/* read literal and dist codes at once */
    	var hcodes/*:Array<number>*/ = [];
    	maxlen = 1;
    	for(; hcodes.length < _HLIT + _HDIST;) {
    		ccode = dyn_cmap[read_bits_7(data, boff)];
    		boff += ccode & 7;
    		switch((ccode >>>= 3)) {
    			case 16:
    				w = 3 + read_bits_2(data, boff); boff += 2;
    				ccode = hcodes[hcodes.length - 1];
    				while(w-- > 0) hcodes.push(ccode);
    				break;
    			case 17:
    				w = 3 + read_bits_3(data, boff); boff += 3;
    				while(w-- > 0) hcodes.push(0);
    				break;
    			case 18:
    				w = 11 + read_bits_7(data, boff); boff += 7;
    				while(w -- > 0) hcodes.push(0);
    				break;
    			default:
    				hcodes.push(ccode);
    				if(maxlen < ccode) maxlen = ccode;
    				break;
    		}
    	}

    	/* build literal / length trees */
    	var h1 = hcodes.slice(0, _HLIT), h2 = hcodes.slice(_HLIT);
    	for(i = _HLIT; i < 286; ++i) h1[i] = 0;
    	for(i = _HDIST; i < 30; ++i) h2[i] = 0;
    	dyn_len_1 = build_tree(h1, dyn_lmap, 286);
    	dyn_len_2 = build_tree(h2, dyn_dmap, 30);
    	return boff;
    }

    /* return [ data, bytesRead ] */
    function inflate(data, usz/*:number*/) {
    	/* shortcircuit for empty buffer [0x03, 0x00] */
    	if(data[0] == 3 && !(data[1] & 0x3)) { return [new_raw_buf(usz), 2]; }

    	/* bit offset */
    	var boff = 0;

    	/* header includes final bit and type bits */
    	var header = 0;

    	var outbuf = new_unsafe_buf(usz ? usz : (1<<18));
    	var woff = 0;
    	var OL = outbuf.length>>>0;
    	var max_len_1 = 0, max_len_2 = 0;

    	while((header&1) == 0) {
    		header = read_bits_3(data, boff); boff += 3;
    		if((header >>> 1) == 0) {
    			/* Stored block */
    			if(boff & 7) boff += 8 - (boff&7);
    			/* 2 bytes sz, 2 bytes bit inverse */
    			var sz = data[boff>>>3] | data[(boff>>>3)+1]<<8;
    			boff += 32;
    			/* push sz bytes */
    			if(sz > 0) {
    				if(!usz && OL < woff + sz) { outbuf = realloc(outbuf, woff + sz); OL = outbuf.length; }
    				while(sz-- > 0) { outbuf[woff++] = data[boff>>>3]; boff += 8; }
    			}
    			continue;
    		} else if((header >> 1) == 1) {
    			/* Fixed Huffman */
    			max_len_1 = 9; max_len_2 = 5;
    		} else {
    			/* Dynamic Huffman */
    			boff = dyn(data, boff);
    			max_len_1 = dyn_len_1; max_len_2 = dyn_len_2;
    		}
    		for(;;) { // while(true) is apparently out of vogue in modern JS circles
    			if(!usz && (OL < woff + 32767)) { outbuf = realloc(outbuf, woff + 32767); OL = outbuf.length; }
    			/* ingest code and move read head */
    			var bits = read_bits_n(data, boff, max_len_1);
    			var code = (header>>>1) == 1 ? fix_lmap[bits] : dyn_lmap[bits];
    			boff += code & 15; code >>>= 4;
    			/* 0-255 are literals, 256 is end of block token, 257+ are copy tokens */
    			if(((code>>>8)&0xFF) === 0) outbuf[woff++] = code;
    			else if(code == 256) break;
    			else {
    				code -= 257;
    				var len_eb = (code < 8) ? 0 : ((code-4)>>2); if(len_eb > 5) len_eb = 0;
    				var tgt = woff + LEN_LN[code];
    				/* length extra bits */
    				if(len_eb > 0) {
    					tgt += read_bits_n(data, boff, len_eb);
    					boff += len_eb;
    				}

    				/* dist code */
    				bits = read_bits_n(data, boff, max_len_2);
    				code = (header>>>1) == 1 ? fix_dmap[bits] : dyn_dmap[bits];
    				boff += code & 15; code >>>= 4;
    				var dst_eb = (code < 4 ? 0 : (code-2)>>1);
    				var dst = DST_LN[code];
    				/* dist extra bits */
    				if(dst_eb > 0) {
    					dst += read_bits_n(data, boff, dst_eb);
    					boff += dst_eb;
    				}

    				/* in the common case, manual byte copy is faster than TA set / Buffer copy */
    				if(!usz && OL < tgt) { outbuf = realloc(outbuf, tgt + 100); OL = outbuf.length; }
    				while(woff < tgt) { outbuf[woff] = outbuf[woff - dst]; ++woff; }
    			}
    		}
    	}
    	if(usz) return [outbuf, (boff+7)>>>3];
    	return [outbuf.slice(0, woff), (boff+7)>>>3];
    }

    function _inflate(payload, usz) {
    	var data = payload.slice(payload.l||0);
    	var out = inflate(data, usz);
    	payload.l += out[1];
    	return out[0];
    }

    function warn_or_throw(wrn, msg) {
    	if(wrn) { if(typeof console !== 'undefined') console.error(msg); }
    	else throw new Error(msg);
    }

    function parse_zip(file/*:RawBytes*/, options/*:CFBReadOpts*/)/*:CFBContainer*/ {
    	var blob/*:CFBlob*/ = /*::(*/file/*:: :any)*/;
    	prep_blob(blob, 0);

    	var FileIndex/*:CFBFileIndex*/ = [], FullPaths/*:Array<string>*/ = [];
    	var o = {
    		FileIndex: FileIndex,
    		FullPaths: FullPaths
    	};
    	init_cfb(o, { root: options.root });

    	/* find end of central directory, start just after signature */
    	var i = blob.length - 4;
    	while((blob[i] != 0x50 || blob[i+1] != 0x4b || blob[i+2] != 0x05 || blob[i+3] != 0x06) && i >= 0) --i;
    	blob.l = i + 4;

    	/* parse end of central directory */
    	blob.l += 4;
    	var fcnt = blob.read_shift(2);
    	blob.l += 6;
    	var start_cd = blob.read_shift(4);

    	/* parse central directory */
    	blob.l = start_cd;

    	for(i = 0; i < fcnt; ++i) {
    		/* trust local file header instead of CD entry */
    		blob.l += 20;
    		var csz = blob.read_shift(4);
    		var usz = blob.read_shift(4);
    		var namelen = blob.read_shift(2);
    		var efsz = blob.read_shift(2);
    		var fcsz = blob.read_shift(2);
    		blob.l += 8;
    		var offset = blob.read_shift(4);
    		var EF = parse_extra_field(/*::(*/blob.slice(blob.l+namelen, blob.l+namelen+efsz)/*:: :any)*/);
    		blob.l += namelen + efsz + fcsz;

    		var L = blob.l;
    		blob.l = offset + 4;
    		parse_local_file(blob, csz, usz, o, EF);
    		blob.l = L;
    	}
    	return o;
    }


    /* head starts just after local file header signature */
    function parse_local_file(blob/*:CFBlob*/, csz/*:number*/, usz/*:number*/, o/*:CFBContainer*/, EF) {
    	/* [local file header] */
    	blob.l += 2;
    	var flags = blob.read_shift(2);
    	var meth = blob.read_shift(2);
    	var date = parse_dos_date(blob);

    	if(flags & 0x2041) throw new Error("Unsupported ZIP encryption");
    	var crc32 = blob.read_shift(4);
    	var _csz = blob.read_shift(4);
    	var _usz = blob.read_shift(4);

    	var namelen = blob.read_shift(2);
    	var efsz = blob.read_shift(2);

    	// TODO: flags & (1<<11) // UTF8
    	var name = ""; for(var i = 0; i < namelen; ++i) name += String.fromCharCode(blob[blob.l++]);
    	if(efsz) {
    		var ef = parse_extra_field(/*::(*/blob.slice(blob.l, blob.l + efsz)/*:: :any)*/);
    		if((ef[0x5455]||{}).mt) date = ef[0x5455].mt;
    		if(((EF||{})[0x5455]||{}).mt) date = EF[0x5455].mt;
    	}
    	blob.l += efsz;

    	/* [encryption header] */

    	/* [file data] */
    	var data = blob.slice(blob.l, blob.l + _csz);
    	switch(meth) {
    		case 8: data = _inflateRawSync(blob, _usz); break;
    		case 0: break; // TODO: scan for magic number
    		default: throw new Error("Unsupported ZIP Compression method " + meth);
    	}

    	/* [data descriptor] */
    	var wrn = false;
    	if(flags & 8) {
    		crc32 = blob.read_shift(4);
    		if(crc32 == 0x08074b50) { crc32 = blob.read_shift(4); wrn = true; }
    		_csz = blob.read_shift(4);
    		_usz = blob.read_shift(4);
    	}

    	if(_csz != csz) warn_or_throw(wrn, "Bad compressed size: " + csz + " != " + _csz);
    	if(_usz != usz) warn_or_throw(wrn, "Bad uncompressed size: " + usz + " != " + _usz);
    	//var _crc32 = CRC32.buf(data, 0);
    	//if((crc32>>0) != (_crc32>>0)) warn_or_throw(wrn, "Bad CRC32 checksum: " + crc32 + " != " + _crc32);
    	cfb_add(o, name, data, {unsafe: true, mt: date});
    }
    function write_zip(cfb/*:CFBContainer*/, options/*:CFBWriteOpts*/)/*:RawBytes*/ {
    	var _opts = options || {};
    	var out = [], cdirs = [];
    	var o/*:CFBlob*/ = new_buf(1);
    	var method = (_opts.compression ? 8 : 0), flags = 0;
    	var i = 0, j = 0;

    	var start_cd = 0, fcnt = 0;
    	var root = cfb.FullPaths[0], fp = root, fi = cfb.FileIndex[0];
    	var crcs = [];
    	var sz_cd = 0;

    	for(i = 1; i < cfb.FullPaths.length; ++i) {
    		fp = cfb.FullPaths[i].slice(root.length); fi = cfb.FileIndex[i];
    		if(!fi.size || !fi.content || fp == "\u0001Sh33tJ5") continue;
    		var start = start_cd;

    		/* TODO: CP437 filename */
    		var namebuf = new_buf(fp.length);
    		for(j = 0; j < fp.length; ++j) namebuf.write_shift(1, fp.charCodeAt(j) & 0x7F);
    		namebuf = namebuf.slice(0, namebuf.l);
    		crcs[fcnt] = CRC32.buf(/*::((*/fi.content/*::||[]):any)*/, 0);

    		var outbuf = fi.content/*::||[]*/;
    		if(method == 8) outbuf = _deflateRawSync(outbuf);

    		/* local file header */
    		o = new_buf(30);
    		o.write_shift(4, 0x04034b50);
    		o.write_shift(2, 20);
    		o.write_shift(2, flags);
    		o.write_shift(2, method);
    		/* TODO: last mod file time/date */
    		if(fi.mt) write_dos_date(o, fi.mt);
    		else o.write_shift(4, 0);
    		o.write_shift(-4, crcs[fcnt]);
    		o.write_shift(4,  outbuf.length);
    		o.write_shift(4,  /*::(*/fi.content/*::||[])*/.length);
    		o.write_shift(2, namebuf.length);
    		o.write_shift(2, 0);

    		start_cd += o.length;
    		out.push(o);
    		start_cd += namebuf.length;
    		out.push(namebuf);

    		/* TODO: extra fields? */

    		/* TODO: encryption header ? */

    		start_cd += outbuf.length;
    		out.push(outbuf);

    		/* central directory */
    		o = new_buf(46);
    		o.write_shift(4, 0x02014b50);
    		o.write_shift(2, 0);
    		o.write_shift(2, 20);
    		o.write_shift(2, flags);
    		o.write_shift(2, method);
    		o.write_shift(4, 0); /* TODO: last mod file time/date */
    		o.write_shift(-4, crcs[fcnt]);

    		o.write_shift(4, outbuf.length);
    		o.write_shift(4, /*::(*/fi.content/*::||[])*/.length);
    		o.write_shift(2, namebuf.length);
    		o.write_shift(2, 0);
    		o.write_shift(2, 0);
    		o.write_shift(2, 0);
    		o.write_shift(2, 0);
    		o.write_shift(4, 0);
    		o.write_shift(4, start);

    		sz_cd += o.l;
    		cdirs.push(o);
    		sz_cd += namebuf.length;
    		cdirs.push(namebuf);
    		++fcnt;
    	}

    	/* end of central directory */
    	o = new_buf(22);
    	o.write_shift(4, 0x06054b50);
    	o.write_shift(2, 0);
    	o.write_shift(2, 0);
    	o.write_shift(2, fcnt);
    	o.write_shift(2, fcnt);
    	o.write_shift(4, sz_cd);
    	o.write_shift(4, start_cd);
    	o.write_shift(2, 0);

    	return bconcat(([bconcat((out/*:any*/)), bconcat(cdirs), o]/*:any*/));
    }
    var ContentTypeMap = ({
    	"htm": "text/html",
    	"xml": "text/xml",

    	"gif": "image/gif",
    	"jpg": "image/jpeg",
    	"png": "image/png",

    	"mso": "application/x-mso",
    	"thmx": "application/vnd.ms-officetheme",
    	"sh33tj5": "application/octet-stream"
    }/*:any*/);

    function get_content_type(fi/*:CFBEntry*/, fp/*:string*/)/*:string*/ {
    	if(fi.ctype) return fi.ctype;

    	var ext = fi.name || "", m = ext.match(/\.([^\.]+)$/);
    	if(m && ContentTypeMap[m[1]]) return ContentTypeMap[m[1]];

    	if(fp) {
    		m = (ext = fp).match(/[\.\\]([^\.\\])+$/);
    		if(m && ContentTypeMap[m[1]]) return ContentTypeMap[m[1]];
    	}

    	return "application/octet-stream";
    }

    /* 76 character chunks TODO: intertwine encoding */
    function write_base64_76(bstr/*:string*/)/*:string*/ {
    	var data = Base64_encode(bstr);
    	var o = [];
    	for(var i = 0; i < data.length; i+= 76) o.push(data.slice(i, i+76));
    	return o.join("\r\n") + "\r\n";
    }

    /*
    Rules for QP:
    	- escape =## applies for all non-display characters and literal "="
    	- space or tab at end of line must be encoded
    	- \r\n newlines can be preserved, but bare \r and \n must be escaped
    	- lines must not exceed 76 characters, use soft breaks =\r\n

    TODO: Some files from word appear to write line extensions with bare equals:

    ```
    <table class=3DMsoTableGrid border=3D1 cellspacing=3D0 cellpadding=3D0 width=
    ="70%"
    ```
    */
    function write_quoted_printable(text/*:string*/)/*:string*/ {
    	var encoded = text.replace(/[\x00-\x08\x0B\x0C\x0E-\x1F\x7E-\xFF=]/g, function(c) {
    		var w = c.charCodeAt(0).toString(16).toUpperCase();
    		return "=" + (w.length == 1 ? "0" + w : w);
    	});

    	encoded = encoded.replace(/ $/mg, "=20").replace(/\t$/mg, "=09");

    	if(encoded.charAt(0) == "\n") encoded = "=0D" + encoded.slice(1);
    	encoded = encoded.replace(/\r(?!\n)/mg, "=0D").replace(/\n\n/mg, "\n=0A").replace(/([^\r\n])\n/mg, "$1=0A");

    	var o/*:Array<string>*/ = [], split = encoded.split("\r\n");
    	for(var si = 0; si < split.length; ++si) {
    		var str = split[si];
    		if(str.length == 0) { o.push(""); continue; }
    		for(var i = 0; i < str.length;) {
    			var end = 76;
    			var tmp = str.slice(i, i + end);
    			if(tmp.charAt(end - 1) == "=") end --;
    			else if(tmp.charAt(end - 2) == "=") end -= 2;
    			else if(tmp.charAt(end - 3) == "=") end -= 3;
    			tmp = str.slice(i, i + end);
    			i += end;
    			if(i < str.length) tmp += "=";
    			o.push(tmp);
    		}
    	}

    	return o.join("\r\n");
    }
    function parse_quoted_printable(data/*:Array<string>*/)/*:RawBytes*/ {
    	var o = [];

    	/* unify long lines */
    	for(var di = 0; di < data.length; ++di) {
    		var line = data[di];
    		while(di <= data.length && line.charAt(line.length - 1) == "=") line = line.slice(0, line.length - 1) + data[++di];
    		o.push(line);
    	}

    	/* decode */
    	for(var oi = 0; oi < o.length; ++oi) o[oi] = o[oi].replace(/[=][0-9A-Fa-f]{2}/g, function($$) { return String.fromCharCode(parseInt($$.slice(1), 16)); });
    	return s2a(o.join("\r\n"));
    }


    function parse_mime(cfb/*:CFBContainer*/, data/*:Array<string>*/, root/*:string*/)/*:void*/ {
    	var fname = "", cte = "", ctype = "", fdata;
    	var di = 0;
    	for(;di < 10; ++di) {
    		var line = data[di];
    		if(!line || line.match(/^\s*$/)) break;
    		var m = line.match(/^(.*?):\s*([^\s].*)$/);
    		if(m) switch(m[1].toLowerCase()) {
    			case "content-location": fname = m[2].trim(); break;
    			case "content-type": ctype = m[2].trim(); break;
    			case "content-transfer-encoding": cte = m[2].trim(); break;
    		}
    	}
    	++di;
    	switch(cte.toLowerCase()) {
    		case 'base64': fdata = s2a(Base64_decode(data.slice(di).join(""))); break;
    		case 'quoted-printable': fdata = parse_quoted_printable(data.slice(di)); break;
    		default: throw new Error("Unsupported Content-Transfer-Encoding " + cte);
    	}
    	var file = cfb_add(cfb, fname.slice(root.length), fdata, {unsafe: true});
    	if(ctype) file.ctype = ctype;
    }

    function parse_mad(file/*:RawBytes*/, options/*:CFBReadOpts*/)/*:CFBContainer*/ {
    	if(a2s(file.slice(0,13)).toLowerCase() != "mime-version:") throw new Error("Unsupported MAD header");
    	var root = (options && options.root || "");
    	// $FlowIgnore
    	var data = (has_buf && Buffer.isBuffer(file) ? file.toString("binary") : a2s(file)).split("\r\n");
    	var di = 0, row = "";

    	/* if root is not specified, scan for the common prefix */
    	for(di = 0; di < data.length; ++di) {
    		row = data[di];
    		if(!/^Content-Location:/i.test(row)) continue;
    		row = row.slice(row.indexOf("file"));
    		if(!root) root = row.slice(0, row.lastIndexOf("/") + 1);
    		if(row.slice(0, root.length) == root) continue;
    		while(root.length > 0) {
    			root = root.slice(0, root.length - 1);
    			root = root.slice(0, root.lastIndexOf("/") + 1);
    			if(row.slice(0,root.length) == root) break;
    		}
    	}

    	var mboundary = (data[1] || "").match(/boundary="(.*?)"/);
    	if(!mboundary) throw new Error("MAD cannot find boundary");
    	var boundary = "--" + (mboundary[1] || "");

    	var FileIndex/*:CFBFileIndex*/ = [], FullPaths/*:Array<string>*/ = [];
    	var o = {
    		FileIndex: FileIndex,
    		FullPaths: FullPaths
    	};
    	init_cfb(o);
    	var start_di, fcnt = 0;
    	for(di = 0; di < data.length; ++di) {
    		var line = data[di];
    		if(line !== boundary && line !== boundary + "--") continue;
    		if(fcnt++) parse_mime(o, data.slice(start_di, di), root);
    		start_di = di;
    	}
    	return o;
    }

    function write_mad(cfb/*:CFBContainer*/, options/*:CFBWriteOpts*/)/*:string*/ {
    	var opts = options || {};
    	var boundary = opts.boundary || "SheetJS";
    	boundary = '------=' + boundary;

    	var out = [
    		'MIME-Version: 1.0',
    		'Content-Type: multipart/related; boundary="' + boundary.slice(2) + '"',
    		'',
    		'',
    		''
    	];

    	var root = cfb.FullPaths[0], fp = root, fi = cfb.FileIndex[0];
    	for(var i = 1; i < cfb.FullPaths.length; ++i) {
    		fp = cfb.FullPaths[i].slice(root.length);
    		fi = cfb.FileIndex[i];
    		if(!fi.size || !fi.content || fp == "\u0001Sh33tJ5") continue;

    		/* Normalize filename */
    		fp = fp.replace(/[\x00-\x08\x0B\x0C\x0E-\x1F\x7E-\xFF]/g, function(c) {
    			return "_x" + c.charCodeAt(0).toString(16) + "_";
    		}).replace(/[\u0080-\uFFFF]/g, function(u) {
    			return "_u" + u.charCodeAt(0).toString(16) + "_";
    		});

    		/* Extract content as binary string */
    		var ca = fi.content;
    		// $FlowIgnore
    		var cstr = has_buf && Buffer.isBuffer(ca) ? ca.toString("binary") : a2s(ca);

    		/* 4/5 of first 1024 chars ascii -> quoted printable, else base64 */
    		var dispcnt = 0, L = Math.min(1024, cstr.length), cc = 0;
    		for(var csl = 0; csl <= L; ++csl) if((cc=cstr.charCodeAt(csl)) >= 0x20 && cc < 0x80) ++dispcnt;
    		var qp = dispcnt >= L * 4 / 5;

    		out.push(boundary);
    		out.push('Content-Location: ' + (opts.root || 'file:///C:/SheetJS/') + fp);
    		out.push('Content-Transfer-Encoding: ' + (qp ? 'quoted-printable' : 'base64'));
    		out.push('Content-Type: ' + get_content_type(fi, fp));
    		out.push('');

    		out.push(qp ? write_quoted_printable(cstr) : write_base64_76(cstr));
    	}
    	out.push(boundary + '--\r\n');
    	return out.join("\r\n");
    }
    function cfb_new(opts/*:?any*/)/*:CFBContainer*/ {
    	var o/*:CFBContainer*/ = ({}/*:any*/);
    	init_cfb(o, opts);
    	return o;
    }

    function cfb_add(cfb/*:CFBContainer*/, name/*:string*/, content/*:?RawBytes*/, opts/*:?any*/)/*:CFBEntry*/ {
    	var unsafe = opts && opts.unsafe;
    	if(!unsafe) init_cfb(cfb);
    	var file = !unsafe && CFB.find(cfb, name);
    	if(!file) {
    		var fpath/*:string*/ = cfb.FullPaths[0];
    		if(name.slice(0, fpath.length) == fpath) fpath = name;
    		else {
    			if(fpath.slice(-1) != "/") fpath += "/";
    			fpath = (fpath + name).replace("//","/");
    		}
    		file = ({name: filename(name), type: 2}/*:any*/);
    		cfb.FileIndex.push(file);
    		cfb.FullPaths.push(fpath);
    		if(!unsafe) CFB.utils.cfb_gc(cfb);
    	}
    	/*:: if(!file) throw new Error("unreachable"); */
    	file.content = (content/*:any*/);
    	file.size = content ? content.length : 0;
    	if(opts) {
    		if(opts.CLSID) file.clsid = opts.CLSID;
    		if(opts.mt) file.mt = opts.mt;
    		if(opts.ct) file.ct = opts.ct;
    	}
    	return file;
    }

    function cfb_del(cfb/*:CFBContainer*/, name/*:string*/)/*:boolean*/ {
    	init_cfb(cfb);
    	var file = CFB.find(cfb, name);
    	if(file) for(var j = 0; j < cfb.FileIndex.length; ++j) if(cfb.FileIndex[j] == file) {
    		cfb.FileIndex.splice(j, 1);
    		cfb.FullPaths.splice(j, 1);
    		return true;
    	}
    	return false;
    }

    function cfb_mov(cfb/*:CFBContainer*/, old_name/*:string*/, new_name/*:string*/)/*:boolean*/ {
    	init_cfb(cfb);
    	var file = CFB.find(cfb, old_name);
    	if(file) for(var j = 0; j < cfb.FileIndex.length; ++j) if(cfb.FileIndex[j] == file) {
    		cfb.FileIndex[j].name = filename(new_name);
    		cfb.FullPaths[j] = new_name;
    		return true;
    	}
    	return false;
    }

    function cfb_gc(cfb/*:CFBContainer*/)/*:void*/ { rebuild_cfb(cfb, true); }

    exports.find = find;
    exports.read = read;
    exports.parse = parse;
    exports.write = write;
    exports.writeFile = write_file;
    exports.utils = {
    	cfb_new: cfb_new,
    	cfb_add: cfb_add,
    	cfb_del: cfb_del,
    	cfb_mov: cfb_mov,
    	cfb_gc: cfb_gc,
    	ReadShift: ReadShift,
    	CheckField: CheckField,
    	prep_blob: prep_blob,
    	bconcat: bconcat,
    	use_zlib: use_zlib,
    	_deflateRaw: _deflate,
    	_inflateRaw: _inflate,
    	consts: consts
    };

    return exports;
    })();

    /* read binary data from file */
    function read_binary(path/*:string*/) {
    	if(typeof Deno !== 'undefined') return Deno.readFileSync(path);
    	// $FlowIgnore
    	if(typeof $ !== 'undefined' && typeof File !== 'undefined' && typeof Folder !== 'undefined') try { // extendscript
    		// $FlowIgnore
    		var infile = File(path); infile.open("r"); infile.encoding = "binary";
    		var data = infile.read(); infile.close();
    		return data;
    	} catch(e) { if(!e.message || !e.message.match(/onstruct/)) throw e; }
    	throw new Error("Cannot access file " + path);
    }
    function keys(o/*:any*/)/*:Array<any>*/ {
    	var ks = Object.keys(o), o2 = [];
    	for(var i = 0; i < ks.length; ++i) if(Object.prototype.hasOwnProperty.call(o, ks[i])) o2.push(ks[i]);
    	return o2;
    }

    function evert(obj/*:any*/)/*:EvertType*/ {
    	var o = ([]/*:any*/), K = keys(obj);
    	for(var i = 0; i !== K.length; ++i) o[obj[K[i]]] = K[i];
    	return o;
    }

    var basedate = /*#__PURE__*/new Date(1899, 11, 30, 0, 0, 0); // 2209161600000
    function datenum(v/*:Date*/, date1904/*:?boolean*/)/*:number*/ {
    	var epoch = /*#__PURE__*/v.getTime();
    	if(date1904) epoch -= 1462*24*60*60*1000;
    	var dnthresh = /*#__PURE__*/basedate.getTime() + (/*#__PURE__*/v.getTimezoneOffset() - /*#__PURE__*/basedate.getTimezoneOffset()) * 60000;
    	return (epoch - dnthresh) / (24 * 60 * 60 * 1000);
    }
    var refdate = /*#__PURE__*/new Date();
    var dnthresh = /*#__PURE__*/basedate.getTime() + (/*#__PURE__*/refdate.getTimezoneOffset() - /*#__PURE__*/basedate.getTimezoneOffset()) * 60000;
    var refoffset = /*#__PURE__*/refdate.getTimezoneOffset();
    function numdate(v/*:number*/)/*:Date*/ {
    	var out = new Date();
    	out.setTime(v * 24 * 60 * 60 * 1000 + dnthresh);
    	if (out.getTimezoneOffset() !== refoffset) {
    		out.setTime(out.getTime() + (out.getTimezoneOffset() - refoffset) * 60000);
    	}
    	return out;
    }

    /* ISO 8601 Duration */
    function parse_isodur(s) {
    	var sec = 0, mt = 0, time = false;
    	var m = s.match(/P([0-9\.]+Y)?([0-9\.]+M)?([0-9\.]+D)?T([0-9\.]+H)?([0-9\.]+M)?([0-9\.]+S)?/);
    	if(!m) throw new Error("|" + s + "| is not an ISO8601 Duration");
    	for(var i = 1; i != m.length; ++i) {
    		if(!m[i]) continue;
    		mt = 1;
    		if(i > 3) time = true;
    		switch(m[i].slice(m[i].length-1)) {
    			case 'Y':
    				throw new Error("Unsupported ISO Duration Field: " + m[i].slice(m[i].length-1));
    			case 'D': mt *= 24;
    				/* falls through */
    			case 'H': mt *= 60;
    				/* falls through */
    			case 'M':
    				if(!time) throw new Error("Unsupported ISO Duration Field: M");
    				else mt *= 60;
    		}
    		sec += mt * parseInt(m[i], 10);
    	}
    	return sec;
    }

    var good_pd_date_1 = /*#__PURE__*/new Date('2017-02-19T19:06:09.000Z');
    var good_pd_date = /*#__PURE__*/isNaN(/*#__PURE__*/good_pd_date_1.getFullYear()) ? /*#__PURE__*/new Date('2/19/17') : good_pd_date_1;
    var good_pd = /*#__PURE__*/good_pd_date.getFullYear() == 2017;
    /* parses a date as a local date */
    function parseDate(str/*:string|Date*/, fixdate/*:?number*/)/*:Date*/ {
    	var d = new Date(str);
    	if(good_pd) {
    		/*:: if(fixdate == null) fixdate = 0; */
    		if(fixdate > 0) d.setTime(d.getTime() + d.getTimezoneOffset() * 60 * 1000);
    		else if(fixdate < 0) d.setTime(d.getTime() - d.getTimezoneOffset() * 60 * 1000);
    		return d;
    	}
    	if(str instanceof Date) return str;
    	if(good_pd_date.getFullYear() == 1917 && !isNaN(d.getFullYear())) {
    		var s = d.getFullYear();
    		if(str.indexOf("" + s) > -1) return d;
    		d.setFullYear(d.getFullYear() + 100); return d;
    	}
    	var n = str.match(/\d+/g)||["2017","2","19","0","0","0"];
    	var out = new Date(+n[0], +n[1] - 1, +n[2], (+n[3]||0), (+n[4]||0), (+n[5]||0));
    	if(str.indexOf("Z") > -1) out = new Date(out.getTime() - out.getTimezoneOffset() * 60 * 1000);
    	return out;
    }

    function cc2str(arr/*:Array<number>*/, debomit)/*:string*/ {
    	if(has_buf && Buffer.isBuffer(arr)) {
    		if(debomit) {
    			if(arr[0] == 0xFF && arr[1] == 0xFE) return utf8write(arr.slice(2).toString("utf16le"));
    			if(arr[1] == 0xFE && arr[2] == 0xFF) return utf8write(utf16beread(arr.slice(2).toString("binary")));
    		}
    		return arr.toString("binary");
    	}

    	if(typeof TextDecoder !== "undefined") try {
    		if(debomit) {
    			if(arr[0] == 0xFF && arr[1] == 0xFE) return utf8write(new TextDecoder("utf-16le").decode(arr.slice(2)));
    			if(arr[0] == 0xFE && arr[1] == 0xFF) return utf8write(new TextDecoder("utf-16be").decode(arr.slice(2)));
    		}
    		var rev = {
    			"\u20ac": "\x80", "\u201a": "\x82", "\u0192": "\x83", "\u201e": "\x84",
    			"\u2026": "\x85", "\u2020": "\x86", "\u2021": "\x87", "\u02c6": "\x88",
    			"\u2030": "\x89", "\u0160": "\x8a", "\u2039": "\x8b", "\u0152": "\x8c",
    			"\u017d": "\x8e", "\u2018": "\x91", "\u2019": "\x92", "\u201c": "\x93",
    			"\u201d": "\x94", "\u2022": "\x95", "\u2013": "\x96", "\u2014": "\x97",
    			"\u02dc": "\x98", "\u2122": "\x99", "\u0161": "\x9a", "\u203a": "\x9b",
    			"\u0153": "\x9c", "\u017e": "\x9e", "\u0178": "\x9f"
    		};
    		if(Array.isArray(arr)) arr = new Uint8Array(arr);
    		return new TextDecoder("latin1").decode(arr).replace(/[€‚ƒ„…†‡ˆ‰Š‹ŒŽ‘’“”•–—˜™š›œžŸ]/g, function(c) { return rev[c] || c; });
    	} catch(e) {}

    	var o = [];
    	for(var i = 0; i != arr.length; ++i) o.push(String.fromCharCode(arr[i]));
    	return o.join("");
    }

    function dup(o/*:any*/)/*:any*/ {
    	if(typeof JSON != 'undefined' && !Array.isArray(o)) return JSON.parse(JSON.stringify(o));
    	if(typeof o != 'object' || o == null) return o;
    	if(o instanceof Date) return new Date(o.getTime());
    	var out = {};
    	for(var k in o) if(Object.prototype.hasOwnProperty.call(o, k)) out[k] = dup(o[k]);
    	return out;
    }

    function fill(c/*:string*/,l/*:number*/)/*:string*/ { var o = ""; while(o.length < l) o+=c; return o; }

    /* TODO: stress test */
    function fuzzynum(s/*:string*/)/*:number*/ {
    	var v/*:number*/ = Number(s);
    	if(!isNaN(v)) return isFinite(v) ? v : NaN;
    	if(!/\d/.test(s)) return v;
    	var wt = 1;
    	var ss = s.replace(/([\d]),([\d])/g,"$1$2").replace(/[$]/g,"").replace(/[%]/g, function() { wt *= 100; return "";});
    	if(!isNaN(v = Number(ss))) return v / wt;
    	ss = ss.replace(/[(](.*)[)]/,function($$, $1) { wt = -wt; return $1;});
    	if(!isNaN(v = Number(ss))) return v / wt;
    	return v;
    }
    var lower_months = ['january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december'];
    function fuzzydate(s/*:string*/)/*:Date*/ {
    	var o = new Date(s), n = new Date(NaN);
    	var y = o.getYear(), m = o.getMonth(), d = o.getDate();
    	if(isNaN(d)) return n;
    	var lower = s.toLowerCase();
    	if(lower.match(/jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec/)) {
    		lower = lower.replace(/[^a-z]/g,"").replace(/([^a-z]|^)[ap]m?([^a-z]|$)/,"");
    		if(lower.length > 3 && lower_months.indexOf(lower) == -1) return n;
    	} else if(lower.match(/[a-z]/)) return n;
    	if(y < 0 || y > 8099) return n;
    	if((m > 0 || d > 1) && y != 101) return o;
    	if(s.match(/[^-0-9:,\/\\]/)) return n;
    	return o;
    }

    var split_regex = /*#__PURE__*/(function() {
    	var safe_split_regex = "abacaba".split(/(:?b)/i).length == 5;
    	return function split_regex(str/*:string*/, re, def/*:string*/)/*:Array<string>*/ {
    		if(safe_split_regex || typeof re == "string") return str.split(re);
    		var p = str.split(re), o = [p[0]];
    		for(var i = 1; i < p.length; ++i) { o.push(def); o.push(p[i]); }
    		return o;
    	};
    })();
    function getdatastr(data)/*:?string*/ {
    	if(!data) return null;
    	if(data.content && data.type) return cc2str(data.content, true);
    	if(data.data) return debom(data.data);
    	if(data.asNodeBuffer && has_buf) return debom(data.asNodeBuffer().toString('binary'));
    	if(data.asBinary) return debom(data.asBinary());
    	if(data._data && data._data.getContent) return debom(cc2str(Array.prototype.slice.call(data._data.getContent(),0)));
    	return null;
    }

    function getdatabin(data) {
    	if(!data) return null;
    	if(data.data) return char_codes(data.data);
    	if(data.asNodeBuffer && has_buf) return data.asNodeBuffer();
    	if(data._data && data._data.getContent) {
    		var o = data._data.getContent();
    		if(typeof o == "string") return char_codes(o);
    		return Array.prototype.slice.call(o);
    	}
    	if(data.content && data.type) return data.content;
    	return null;
    }

    function getdata(data) { return (data && data.name.slice(-4) === ".bin") ? getdatabin(data) : getdatastr(data); }

    /* Part 2 Section 10.1.2 "Mapping Content Types" Names are case-insensitive */
    /* OASIS does not comment on filename case sensitivity */
    function safegetzipfile(zip, file/*:string*/) {
    	var k = zip.FullPaths || keys(zip.files);
    	var f = file.toLowerCase().replace(/[\/]/g, '\\'), g = f.replace(/\\/g,'\/');
    	for(var i=0; i<k.length; ++i) {
    		var n = k[i].replace(/^Root Entry[\/]/,"").toLowerCase();
    		if(f == n || g == n) return zip.files ? zip.files[k[i]] : zip.FileIndex[i];
    	}
    	return null;
    }

    function getzipfile(zip, file/*:string*/) {
    	var o = safegetzipfile(zip, file);
    	if(o == null) throw new Error("Cannot find file " + file + " in zip");
    	return o;
    }

    function getzipdata(zip, file/*:string*/, safe/*:?boolean*/)/*:any*/ {
    	if(!safe) return getdata(getzipfile(zip, file));
    	if(!file) return null;
    	try { return getzipdata(zip, file); } catch(e) { return null; }
    }

    function getzipstr(zip, file/*:string*/, safe/*:?boolean*/)/*:?string*/ {
    	if(!safe) return getdatastr(getzipfile(zip, file));
    	if(!file) return null;
    	try { return getzipstr(zip, file); } catch(e) { return null; }
    }

    function getzipbin(zip, file/*:string*/, safe/*:?boolean*/)/*:any*/ {
    	if(!safe) return getdatabin(getzipfile(zip, file));
    	if(!file) return null;
    	try { return getzipbin(zip, file); } catch(e) { return null; }
    }

    function zipentries(zip) {
    	var k = zip.FullPaths || keys(zip.files), o = [];
    	for(var i = 0; i < k.length; ++i) if(k[i].slice(-1) != '/') o.push(k[i].replace(/^Root Entry[\/]/, ""));
    	return o.sort();
    }

    function zip_add_file(zip, path, content) {
    	if(zip.FullPaths) {
    		if(typeof content == "string") {
    			var res;
    			if(has_buf) res = Buffer_from(content);
    			/* TODO: investigate performance in Edge 13 */
    			//else if(typeof TextEncoder !== "undefined") res = new TextEncoder().encode(content);
    			else res = utf8decode(content);
    			return CFB.utils.cfb_add(zip, path, res);
    		}
    		CFB.utils.cfb_add(zip, path, content);
    	}
    	else zip.file(path, content);
    }

    function zip_read(d, o) {
    	switch(o.type) {
    		case "base64": return CFB.read(d, { type: "base64" });
    		case "binary": return CFB.read(d, { type: "binary" });
    		case "buffer": case "array": return CFB.read(d, { type: "buffer" });
    	}
    	throw new Error("Unrecognized type " + o.type);
    }

    function resolve_path(path/*:string*/, base/*:string*/)/*:string*/ {
    	if(path.charAt(0) == "/") return path.slice(1);
    	var result = base.split('/');
    	if(base.slice(-1) != "/") result.pop(); // folder path
    	var target = path.split('/');
    	while (target.length !== 0) {
    		var step = target.shift();
    		if (step === '..') result.pop();
    		else if (step !== '.') result.push(step);
    	}
    	return result.join('/');
    }
    var XML_HEADER = '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>\r\n';
    var attregexg=/([^"\s?>\/]+)\s*=\s*((?:")([^"]*)(?:")|(?:')([^']*)(?:')|([^'">\s]+))/g;
    var tagregex1=/<[\/\?]?[a-zA-Z0-9:_-]+(?:\s+[^"\s?>\/]+\s*=\s*(?:"[^"]*"|'[^']*'|[^'">\s=]+))*\s*[\/\?]?>/mg, tagregex2 = /<[^>]*>/g;
    var tagregex = /*#__PURE__*/XML_HEADER.match(tagregex1) ? tagregex1 : tagregex2;
    var nsregex=/<\w*:/, nsregex2 = /<(\/?)\w+:/;
    function parsexmltag(tag/*:string*/, skip_root/*:?boolean*/, skip_LC/*:?boolean*/)/*:any*/ {
    	var z = ({}/*:any*/);
    	var eq = 0, c = 0;
    	for(; eq !== tag.length; ++eq) if((c = tag.charCodeAt(eq)) === 32 || c === 10 || c === 13) break;
    	if(!skip_root) z[0] = tag.slice(0, eq);
    	if(eq === tag.length) return z;
    	var m = tag.match(attregexg), j=0, v="", i=0, q="", cc="", quot = 1;
    	if(m) for(i = 0; i != m.length; ++i) {
    		cc = m[i];
    		for(c=0; c != cc.length; ++c) if(cc.charCodeAt(c) === 61) break;
    		q = cc.slice(0,c).trim();
    		while(cc.charCodeAt(c+1) == 32) ++c;
    		quot = ((eq=cc.charCodeAt(c+1)) == 34 || eq == 39) ? 1 : 0;
    		v = cc.slice(c+1+quot, cc.length-quot);
    		for(j=0;j!=q.length;++j) if(q.charCodeAt(j) === 58) break;
    		if(j===q.length) {
    			if(q.indexOf("_") > 0) q = q.slice(0, q.indexOf("_")); // from ods
    			z[q] = v;
    			if(!skip_LC) z[q.toLowerCase()] = v;
    		}
    		else {
    			var k = (j===5 && q.slice(0,5)==="xmlns"?"xmlns":"")+q.slice(j+1);
    			if(z[k] && q.slice(j-3,j) == "ext") continue; // from ods
    			z[k] = v;
    			if(!skip_LC) z[k.toLowerCase()] = v;
    		}
    	}
    	return z;
    }
    function strip_ns(x/*:string*/)/*:string*/ { return x.replace(nsregex2, "<$1"); }

    var encodings = {
    	'&quot;': '"',
    	'&apos;': "'",
    	'&gt;': '>',
    	'&lt;': '<',
    	'&amp;': '&'
    };
    var rencoding = /*#__PURE__*/evert(encodings);
    //var rencstr = "&<>'\"".split("");

    // TODO: CP remap (need to read file version to determine OS)
    var unescapexml/*:StringConv*/ = /*#__PURE__*/(function() {
    	/* 22.4.2.4 bstr (Basic String) */
    	var encregex = /&(?:quot|apos|gt|lt|amp|#x?([\da-fA-F]+));/ig, coderegex = /_x([\da-fA-F]{4})_/ig;
    	return function unescapexml(text/*:string*/)/*:string*/ {
    		var s = text + '', i = s.indexOf("<![CDATA[");
    		if(i == -1) return s.replace(encregex, function($$, $1) { return encodings[$$]||String.fromCharCode(parseInt($1,$$.indexOf("x")>-1?16:10))||$$; }).replace(coderegex,function(m,c) {return String.fromCharCode(parseInt(c,16));});
    		var j = s.indexOf("]]>");
    		return unescapexml(s.slice(0, i)) + s.slice(i+9,j) + unescapexml(s.slice(j+3));
    	};
    })();

    var decregex=/[&<>'"]/g;

    var htmlcharegex = /[\u0000-\u001f]/g;
    function escapehtml(text/*:string*/)/*:string*/{
    	var s = text + '';
    	return s.replace(decregex, function(y) { return rencoding[y]; }).replace(/\n/g, "<br/>").replace(htmlcharegex,function(s) { return "&#x" + ("000"+s.charCodeAt(0).toString(16)).slice(-4) + ";"; });
    }

    /* TODO: handle codepages */
    var xlml_fixstr/*:StringConv*/ = /*#__PURE__*/(function() {
    	var entregex = /&#(\d+);/g;
    	function entrepl($$/*:string*/,$1/*:string*/)/*:string*/ { return String.fromCharCode(parseInt($1,10)); }
    	return function xlml_fixstr(str/*:string*/)/*:string*/ { return str.replace(entregex,entrepl); };
    })();

    function parsexmlbool(value/*:any*/)/*:boolean*/ {
    	switch(value) {
    		case 1: case true: case '1': case 'true': case 'TRUE': return true;
    		/* case '0': case 'false': case 'FALSE':*/
    		default: return false;
    	}
    }

    function utf8reada(orig/*:string*/)/*:string*/ {
    	var out = "", i = 0, c = 0, d = 0, e = 0, f = 0, w = 0;
    	while (i < orig.length) {
    		c = orig.charCodeAt(i++);
    		if (c < 128) { out += String.fromCharCode(c); continue; }
    		d = orig.charCodeAt(i++);
    		if (c>191 && c<224) { f = ((c & 31) << 6); f |= (d & 63); out += String.fromCharCode(f); continue; }
    		e = orig.charCodeAt(i++);
    		if (c < 240) { out += String.fromCharCode(((c & 15) << 12) | ((d & 63) << 6) | (e & 63)); continue; }
    		f = orig.charCodeAt(i++);
    		w = (((c & 7) << 18) | ((d & 63) << 12) | ((e & 63) << 6) | (f & 63))-65536;
    		out += String.fromCharCode(0xD800 + ((w>>>10)&1023));
    		out += String.fromCharCode(0xDC00 + (w&1023));
    	}
    	return out;
    }

    function utf8readb(data) {
    	var out = new_raw_buf(2*data.length), w, i, j = 1, k = 0, ww=0, c;
    	for(i = 0; i < data.length; i+=j) {
    		j = 1;
    		if((c=data.charCodeAt(i)) < 128) w = c;
    		else if(c < 224) { w = (c&31)*64+(data.charCodeAt(i+1)&63); j=2; }
    		else if(c < 240) { w=(c&15)*4096+(data.charCodeAt(i+1)&63)*64+(data.charCodeAt(i+2)&63); j=3; }
    		else { j = 4;
    			w = (c & 7)*262144+(data.charCodeAt(i+1)&63)*4096+(data.charCodeAt(i+2)&63)*64+(data.charCodeAt(i+3)&63);
    			w -= 65536; ww = 0xD800 + ((w>>>10)&1023); w = 0xDC00 + (w&1023);
    		}
    		if(ww !== 0) { out[k++] = ww&255; out[k++] = ww>>>8; ww = 0; }
    		out[k++] = w%256; out[k++] = w>>>8;
    	}
    	return out.slice(0,k).toString('ucs2');
    }

    function utf8readc(data) { return Buffer_from(data, 'binary').toString('utf8'); }

    var utf8corpus = "foo bar baz\u00e2\u0098\u0083\u00f0\u009f\u008d\u00a3";
    var utf8read = has_buf && (/*#__PURE__*/utf8readc(utf8corpus) == /*#__PURE__*/utf8reada(utf8corpus) && utf8readc || /*#__PURE__*/utf8readb(utf8corpus) == /*#__PURE__*/utf8reada(utf8corpus) && utf8readb) || utf8reada;

    var utf8write/*:StringConv*/ = has_buf ? function(data) { return Buffer_from(data, 'utf8').toString("binary"); } : function(orig/*:string*/)/*:string*/ {
    	var out/*:Array<string>*/ = [], i = 0, c = 0, d = 0;
    	while(i < orig.length) {
    		c = orig.charCodeAt(i++);
    		switch(true) {
    			case c < 128: out.push(String.fromCharCode(c)); break;
    			case c < 2048:
    				out.push(String.fromCharCode(192 + (c >> 6)));
    				out.push(String.fromCharCode(128 + (c & 63)));
    				break;
    			case c >= 55296 && c < 57344:
    				c -= 55296; d = orig.charCodeAt(i++) - 56320 + (c<<10);
    				out.push(String.fromCharCode(240 + ((d >>18) & 7)));
    				out.push(String.fromCharCode(144 + ((d >>12) & 63)));
    				out.push(String.fromCharCode(128 + ((d >> 6) & 63)));
    				out.push(String.fromCharCode(128 + (d & 63)));
    				break;
    			default:
    				out.push(String.fromCharCode(224 + (c >> 12)));
    				out.push(String.fromCharCode(128 + ((c >> 6) & 63)));
    				out.push(String.fromCharCode(128 + (c & 63)));
    		}
    	}
    	return out.join("");
    };

    // matches <foo>...</foo> extracts content
    var matchtag = /*#__PURE__*/(function() {
    	var mtcache/*:{[k:string]:RegExp}*/ = ({}/*:any*/);
    	return function matchtag(f/*:string*/,g/*:?string*/)/*:RegExp*/ {
    		var t = f+"|"+(g||"");
    		if(mtcache[t]) return mtcache[t];
    		return (mtcache[t] = new RegExp('<(?:\\w+:)?'+f+'(?: xml:space="preserve")?(?:[^>]*)>([\\s\\S]*?)</(?:\\w+:)?'+f+'>',((g||"")/*:any*/)));
    	};
    })();

    var htmldecode/*:{(s:string):string}*/ = /*#__PURE__*/(function() {
    	var entities/*:Array<[RegExp, string]>*/ = [
    		['nbsp', ' '], ['middot', '·'],
    		['quot', '"'], ['apos', "'"], ['gt',   '>'], ['lt',   '<'], ['amp',  '&']
    	].map(function(x/*:[string, string]*/) { return [new RegExp('&' + x[0] + ';', "ig"), x[1]]; });
    	return function htmldecode(str/*:string*/)/*:string*/ {
    		var o = str
    				// Remove new lines and spaces from start of content
    				.replace(/^[\t\n\r ]+/, "")
    				// Remove new lines and spaces from end of content
    				.replace(/[\t\n\r ]+$/,"")
    				// Added line which removes any white space characters after and before html tags
    				.replace(/>\s+/g,">").replace(/\s+</g,"<")
    				// Replace remaining new lines and spaces with space
    				.replace(/[\t\n\r ]+/g, " ")
    				// Replace <br> tags with new lines
    				.replace(/<\s*[bB][rR]\s*\/?>/g,"\n")
    				// Strip HTML elements
    				.replace(/<[^>]*>/g,"");
    		for(var i = 0; i < entities.length; ++i) o = o.replace(entities[i][0], entities[i][1]);
    		return o;
    	};
    })();

    var vtregex = /*#__PURE__*/(function(){ var vt_cache = {};
    	return function vt_regex(bt) {
    		if(vt_cache[bt] !== undefined) return vt_cache[bt];
    		return (vt_cache[bt] = new RegExp("<(?:vt:)?" + bt + ">([\\s\\S]*?)</(?:vt:)?" + bt + ">", 'g') );
    };})();
    var vtvregex = /<\/?(?:vt:)?variant>/g, vtmregex = /<(?:vt:)([^>]*)>([\s\S]*)</;
    function parseVector(data/*:string*/, opts)/*:Array<{v:string,t:string}>*/ {
    	var h = parsexmltag(data);

    	var matches/*:Array<string>*/ = data.match(vtregex(h.baseType))||[];
    	var res/*:Array<any>*/ = [];
    	if(matches.length != h.size) {
    		if(opts.WTF) throw new Error("unexpected vector length " + matches.length + " != " + h.size);
    		return res;
    	}
    	matches.forEach(function(x/*:string*/) {
    		var v = x.replace(vtvregex,"").match(vtmregex);
    		if(v) res.push({v:utf8read(v[2]), t:v[1]});
    	});
    	return res;
    }

    var wtregex = /(^\s|\s$|\n)/;

    function wxt_helper(h)/*:string*/ { return keys(h).map(function(k) { return " " + k + '="' + h[k] + '"';}).join(""); }
    function writextag(f/*:string*/,g/*:?string*/,h) { return '<' + f + ((h != null) ? wxt_helper(h) : "") + ((g != null) ? (g.match(wtregex)?' xml:space="preserve"' : "") + '>' + g + '</' + f : "/") + '>';}

    function xlml_normalize(d)/*:string*/ {
    	if(has_buf &&/*::typeof Buffer !== "undefined" && d != null && d instanceof Buffer &&*/ Buffer.isBuffer(d)) return d.toString('utf8');
    	if(typeof d === 'string') return d;
    	/* duktape */
    	if(typeof Uint8Array !== 'undefined' && d instanceof Uint8Array) return utf8read(a2s(ab2a(d)));
    	throw new Error("Bad input format: expected Buffer or string");
    }
    /* UOS uses CJK in tags */
    var xlmlregex = /<(\/?)([^\s?><!\/:]*:|)([^\s?<>:\/]+)(?:[\s?:\/][^>]*)?>/mg;
    //var xlmlregex = /<(\/?)([a-z0-9]*:|)(\w+)[^>]*>/mg;

    var XMLNS = ({
    	CORE_PROPS: 'http://schemas.openxmlformats.org/package/2006/metadata/core-properties',
    	CUST_PROPS: "http://schemas.openxmlformats.org/officeDocument/2006/custom-properties",
    	EXT_PROPS: "http://schemas.openxmlformats.org/officeDocument/2006/extended-properties",
    	CT: 'http://schemas.openxmlformats.org/package/2006/content-types',
    	RELS: 'http://schemas.openxmlformats.org/package/2006/relationships',
    	TCMNT: 'http://schemas.microsoft.com/office/spreadsheetml/2018/threadedcomments',
    	'dc': 'http://purl.org/dc/elements/1.1/',
    	'dcterms': 'http://purl.org/dc/terms/',
    	'dcmitype': 'http://purl.org/dc/dcmitype/',
    	'mx': 'http://schemas.microsoft.com/office/mac/excel/2008/main',
    	'r': 'http://schemas.openxmlformats.org/officeDocument/2006/relationships',
    	'sjs': 'http://schemas.openxmlformats.org/package/2006/sheetjs/core-properties',
    	'vt': 'http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes',
    	'xsi': 'http://www.w3.org/2001/XMLSchema-instance',
    	'xsd': 'http://www.w3.org/2001/XMLSchema'
    }/*:any*/);

    var XMLNS_main = [
    	'http://schemas.openxmlformats.org/spreadsheetml/2006/main',
    	'http://purl.oclc.org/ooxml/spreadsheetml/main',
    	'http://schemas.microsoft.com/office/excel/2006/main',
    	'http://schemas.microsoft.com/office/excel/2006/2'
    ];
    function read_double_le(b/*:RawBytes|CFBlob*/, idx/*:number*/)/*:number*/ {
    	var s = 1 - 2 * (b[idx + 7] >>> 7);
    	var e = ((b[idx + 7] & 0x7f) << 4) + ((b[idx + 6] >>> 4) & 0x0f);
    	var m = (b[idx+6]&0x0f);
    	for(var i = 5; i >= 0; --i) m = m * 256 + b[idx + i];
    	if(e == 0x7ff) return m == 0 ? (s * Infinity) : NaN;
    	if(e == 0) e = -1022;
    	else { e -= 1023; m += Math.pow(2,52); }
    	return s * Math.pow(2, e - 52) * m;
    }

    function write_double_le(b/*:RawBytes|CFBlob*/, v/*:number*/, idx/*:number*/) {
    	var bs = ((((v < 0) || (1/v == -Infinity)) ? 1 : 0) << 7), e = 0, m = 0;
    	var av = bs ? (-v) : v;
    	if(!isFinite(av)) { e = 0x7ff; m = isNaN(v) ? 0x6969 : 0; }
    	else if(av == 0) e = m = 0;
    	else {
    		e = Math.floor(Math.log(av) / Math.LN2);
    		m = av * Math.pow(2, 52 - e);
    		if((e <= -1023) && (!isFinite(m) || (m < Math.pow(2,52)))) { e = -1022; }
    		else { m -= Math.pow(2,52); e+=1023; }
    	}
    	for(var i = 0; i <= 5; ++i, m/=256) b[idx + i] = m & 0xff;
    	b[idx + 6] = ((e & 0x0f) << 4) | (m & 0xf);
    	b[idx + 7] = (e >> 4) | bs;
    }

    var ___toBuffer = function(bufs/*:Array<Array<RawBytes> >*/)/*:RawBytes*/ { var x=[],w=10240; for(var i=0;i<bufs[0].length;++i) if(bufs[0][i]) for(var j=0,L=bufs[0][i].length;j<L;j+=w) x.push.apply(x, bufs[0][i].slice(j,j+w)); return x; };
    var __toBuffer = has_buf ? function(bufs) { return (bufs[0].length > 0 && Buffer.isBuffer(bufs[0][0])) ? Buffer.concat(bufs[0].map(function(x) { return Buffer.isBuffer(x) ? x : Buffer_from(x); })) : ___toBuffer(bufs);} : ___toBuffer;

    var ___utf16le = function(b/*:RawBytes|CFBlob*/,s/*:number*/,e/*:number*/)/*:string*/ { var ss/*:Array<string>*/=[]; for(var i=s; i<e; i+=2) ss.push(String.fromCharCode(__readUInt16LE(b,i))); return ss.join("").replace(chr0,''); };
    var __utf16le = has_buf ? function(b/*:RawBytes|CFBlob*/,s/*:number*/,e/*:number*/)/*:string*/ { if(!Buffer.isBuffer(b)/*:: || !(b instanceof Buffer)*/) return ___utf16le(b,s,e); return b.toString('utf16le',s,e).replace(chr0,'')/*.replace(chr1,'!')*/; } : ___utf16le;

    var ___hexlify = function(b/*:RawBytes|CFBlob*/,s/*:number*/,l/*:number*/)/*:string*/ { var ss/*:Array<string>*/=[]; for(var i=s; i<s+l; ++i) ss.push(("0" + b[i].toString(16)).slice(-2)); return ss.join(""); };
    var __hexlify = has_buf ? function(b/*:RawBytes|CFBlob*/,s/*:number*/,l/*:number*/)/*:string*/ { return Buffer.isBuffer(b)/*:: && b instanceof Buffer*/ ? b.toString('hex',s,s+l) : ___hexlify(b,s,l); } : ___hexlify;

    var ___utf8 = function(b/*:RawBytes|CFBlob*/,s/*:number*/,e/*:number*/) { var ss=[]; for(var i=s; i<e; i++) ss.push(String.fromCharCode(__readUInt8(b,i))); return ss.join(""); };
    var __utf8 = has_buf ? function utf8_b(b/*:RawBytes|CFBlob*/, s/*:number*/, e/*:number*/) { return (Buffer.isBuffer(b)/*:: && (b instanceof Buffer)*/) ? b.toString('utf8',s,e) : ___utf8(b,s,e); } : ___utf8;

    var ___lpstr = function(b/*:RawBytes|CFBlob*/,i/*:number*/) { var len = __readUInt32LE(b,i); return len > 0 ? __utf8(b, i+4,i+4+len-1) : "";};
    var __lpstr = ___lpstr;

    var ___cpstr = function(b/*:RawBytes|CFBlob*/,i/*:number*/) { var len = __readUInt32LE(b,i); return len > 0 ? __utf8(b, i+4,i+4+len-1) : "";};
    var __cpstr = ___cpstr;

    var ___lpwstr = function(b/*:RawBytes|CFBlob*/,i/*:number*/) { var len = 2*__readUInt32LE(b,i); return len > 0 ? __utf8(b, i+4,i+4+len-1) : "";};
    var __lpwstr = ___lpwstr;

    var ___lpp4 = function lpp4_(b/*:RawBytes|CFBlob*/,i/*:number*/) { var len = __readUInt32LE(b,i); return len > 0 ? __utf16le(b, i+4,i+4+len) : "";};
    var __lpp4 = ___lpp4;

    var ___8lpp4 = function(b/*:RawBytes|CFBlob*/,i/*:number*/) { var len = __readUInt32LE(b,i); return len > 0 ? __utf8(b, i+4,i+4+len) : "";};
    var __8lpp4 = ___8lpp4;

    var ___double = function(b/*:RawBytes|CFBlob*/, idx/*:number*/) { return read_double_le(b, idx);};
    var __double = ___double;

    var is_buf = function is_buf_a(a) { return Array.isArray(a) || (typeof Uint8Array !== "undefined" && a instanceof Uint8Array); };

    if(has_buf/*:: && typeof Buffer !== 'undefined'*/) {
    	__lpstr = function lpstr_b(b/*:RawBytes|CFBlob*/, i/*:number*/) { if(!Buffer.isBuffer(b)/*:: || !(b instanceof Buffer)*/) return ___lpstr(b, i); var len = b.readUInt32LE(i); return len > 0 ? b.toString('utf8',i+4,i+4+len-1) : "";};
    	__cpstr = function cpstr_b(b/*:RawBytes|CFBlob*/, i/*:number*/) { if(!Buffer.isBuffer(b)/*:: || !(b instanceof Buffer)*/) return ___cpstr(b, i); var len = b.readUInt32LE(i); return len > 0 ? b.toString('utf8',i+4,i+4+len-1) : "";};
    	__lpwstr = function lpwstr_b(b/*:RawBytes|CFBlob*/, i/*:number*/) { if(!Buffer.isBuffer(b)/*:: || !(b instanceof Buffer)*/) return ___lpwstr(b, i); var len = 2*b.readUInt32LE(i); return b.toString('utf16le',i+4,i+4+len-1);};
    	__lpp4 = function lpp4_b(b/*:RawBytes|CFBlob*/, i/*:number*/) { if(!Buffer.isBuffer(b)/*:: || !(b instanceof Buffer)*/) return ___lpp4(b, i); var len = b.readUInt32LE(i); return b.toString('utf16le',i+4,i+4+len);};
    	__8lpp4 = function lpp4_8b(b/*:RawBytes|CFBlob*/, i/*:number*/) { if(!Buffer.isBuffer(b)/*:: || !(b instanceof Buffer)*/) return ___8lpp4(b, i); var len = b.readUInt32LE(i); return b.toString('utf8',i+4,i+4+len);};
    	__double = function double_(b/*:RawBytes|CFBlob*/, i/*:number*/) { if(Buffer.isBuffer(b)/*::&& b instanceof Buffer*/) return b.readDoubleLE(i); return ___double(b,i); };
    	is_buf = function is_buf_b(a) { return Buffer.isBuffer(a) || Array.isArray(a) || (typeof Uint8Array !== "undefined" && a instanceof Uint8Array); };
    }

    var __readUInt8 = function(b/*:RawBytes|CFBlob*/, idx/*:number*/)/*:number*/ { return b[idx]; };
    var __readUInt16LE = function(b/*:RawBytes|CFBlob*/, idx/*:number*/)/*:number*/ { return (b[idx+1]*(1<<8))+b[idx]; };
    var __readInt16LE = function(b/*:RawBytes|CFBlob*/, idx/*:number*/)/*:number*/ { var u = (b[idx+1]*(1<<8))+b[idx]; return (u < 0x8000) ? u : ((0xffff - u + 1) * -1); };
    var __readUInt32LE = function(b/*:RawBytes|CFBlob*/, idx/*:number*/)/*:number*/ { return b[idx+3]*(1<<24)+(b[idx+2]<<16)+(b[idx+1]<<8)+b[idx]; };
    var __readInt32LE = function(b/*:RawBytes|CFBlob*/, idx/*:number*/)/*:number*/ { return (b[idx+3]<<24)|(b[idx+2]<<16)|(b[idx+1]<<8)|b[idx]; };
    var __readInt32BE = function(b/*:RawBytes|CFBlob*/, idx/*:number*/)/*:number*/ { return (b[idx]<<24)|(b[idx+1]<<16)|(b[idx+2]<<8)|b[idx+3]; };

    function ReadShift(size/*:number*/, t/*:?string*/)/*:number|string*/ {
    	var o="", oI/*:: :number = 0*/, oR, oo=[], w, vv, i, loc;
    	switch(t) {
    		case 'dbcs':
    			loc = this.l;
    			if(has_buf && Buffer.isBuffer(this)) o = this.slice(this.l, this.l+2*size).toString("utf16le");
    			else for(i = 0; i < size; ++i) { o+=String.fromCharCode(__readUInt16LE(this, loc)); loc+=2; }
    			size *= 2;
    			break;

    		case 'utf8': o = __utf8(this, this.l, this.l + size); break;
    		case 'utf16le': size *= 2; o = __utf16le(this, this.l, this.l + size); break;

    		case 'wstr':
    			return ReadShift.call(this, size, 'dbcs');

    		/* [MS-OLEDS] 2.1.4 LengthPrefixedAnsiString */
    		case 'lpstr-ansi': o = __lpstr(this, this.l); size = 4 + __readUInt32LE(this, this.l); break;
    		case 'lpstr-cp': o = __cpstr(this, this.l); size = 4 + __readUInt32LE(this, this.l); break;
    		/* [MS-OLEDS] 2.1.5 LengthPrefixedUnicodeString */
    		case 'lpwstr': o = __lpwstr(this, this.l); size = 4 + 2 * __readUInt32LE(this, this.l); break;
    		/* [MS-OFFCRYPTO] 2.1.2 Length-Prefixed Padded Unicode String (UNICODE-LP-P4) */
    		case 'lpp4': size = 4 +  __readUInt32LE(this, this.l); o = __lpp4(this, this.l); if(size & 0x02) size += 2; break;
    		/* [MS-OFFCRYPTO] 2.1.3 Length-Prefixed UTF-8 String (UTF-8-LP-P4) */
    		case '8lpp4': size = 4 +  __readUInt32LE(this, this.l); o = __8lpp4(this, this.l); if(size & 0x03) size += 4 - (size & 0x03); break;

    		case 'cstr': size = 0; o = "";
    			while((w=__readUInt8(this, this.l + size++))!==0) oo.push(_getchar(w));
    			o = oo.join(""); break;
    		case '_wstr': size = 0; o = "";
    			while((w=__readUInt16LE(this,this.l +size))!==0){oo.push(_getchar(w));size+=2;}
    			size+=2; o = oo.join(""); break;

    		/* sbcs and dbcs support continue records in the SST way TODO codepages */
    		case 'dbcs-cont': o = ""; loc = this.l;
    			for(i = 0; i < size; ++i) {
    				if(this.lens && this.lens.indexOf(loc) !== -1) {
    					w = __readUInt8(this, loc);
    					this.l = loc + 1;
    					vv = ReadShift.call(this, size-i, w ? 'dbcs-cont' : 'sbcs-cont');
    					return oo.join("") + vv;
    				}
    				oo.push(_getchar(__readUInt16LE(this, loc)));
    				loc+=2;
    			} o = oo.join(""); size *= 2; break;

    		case 'cpstr':
    		/* falls through */
    		case 'sbcs-cont': o = ""; loc = this.l;
    			for(i = 0; i != size; ++i) {
    				if(this.lens && this.lens.indexOf(loc) !== -1) {
    					w = __readUInt8(this, loc);
    					this.l = loc + 1;
    					vv = ReadShift.call(this, size-i, w ? 'dbcs-cont' : 'sbcs-cont');
    					return oo.join("") + vv;
    				}
    				oo.push(_getchar(__readUInt8(this, loc)));
    				loc+=1;
    			} o = oo.join(""); break;

    		default:
    	switch(size) {
    		case 1: oI = __readUInt8(this, this.l); this.l++; return oI;
    		case 2: oI = (t === 'i' ? __readInt16LE : __readUInt16LE)(this, this.l); this.l += 2; return oI;
    		case 4: case -4:
    			if(t === 'i' || ((this[this.l+3] & 0x80)===0)) { oI = ((size > 0) ? __readInt32LE : __readInt32BE)(this, this.l); this.l += 4; return oI; }
    			else { oR = __readUInt32LE(this, this.l); this.l += 4; } return oR;
    		case 8: case -8:
    			if(t === 'f') {
    				if(size == 8) oR = __double(this, this.l);
    				else oR = __double([this[this.l+7],this[this.l+6],this[this.l+5],this[this.l+4],this[this.l+3],this[this.l+2],this[this.l+1],this[this.l+0]], 0);
    				this.l += 8; return oR;
    			} else size = 8;
    		/* falls through */
    		case 16: o = __hexlify(this, this.l, size); break;
    	}}
    	this.l+=size; return o;
    }

    var __writeUInt32LE = function(b/*:RawBytes|CFBlob*/, val/*:number*/, idx/*:number*/)/*:void*/ { b[idx] = (val & 0xFF); b[idx+1] = ((val >>> 8) & 0xFF); b[idx+2] = ((val >>> 16) & 0xFF); b[idx+3] = ((val >>> 24) & 0xFF); };
    var __writeInt32LE  = function(b/*:RawBytes|CFBlob*/, val/*:number*/, idx/*:number*/)/*:void*/ { b[idx] = (val & 0xFF); b[idx+1] = ((val >> 8) & 0xFF); b[idx+2] = ((val >> 16) & 0xFF); b[idx+3] = ((val >> 24) & 0xFF); };
    var __writeUInt16LE = function(b/*:RawBytes|CFBlob*/, val/*:number*/, idx/*:number*/)/*:void*/ { b[idx] = (val & 0xFF); b[idx+1] = ((val >>> 8) & 0xFF); };

    function WriteShift(t/*:number*/, val/*:string|number*/, f/*:?string*/)/*:any*/ {
    	var size = 0, i = 0;
    	if(f === 'dbcs') {
    		/*:: if(typeof val !== 'string') throw new Error("unreachable"); */
    		for(i = 0; i != val.length; ++i) __writeUInt16LE(this, val.charCodeAt(i), this.l + 2 * i);
    		size = 2 * val.length;
    	} else if(f === 'sbcs') {
    		{
    			/*:: if(typeof val !== 'string') throw new Error("unreachable"); */
    			val = val.replace(/[^\x00-\x7F]/g, "_");
    			/*:: if(typeof val !== 'string') throw new Error("unreachable"); */
    			for(i = 0; i != val.length; ++i) this[this.l + i] = (val.charCodeAt(i) & 0xFF);
    		}
    		size = val.length;
    	} else if(f === 'hex') {
    		for(; i < t; ++i) {
    			/*:: if(typeof val !== "string") throw new Error("unreachable"); */
    			this[this.l++] = (parseInt(val.slice(2*i, 2*i+2), 16)||0);
    		} return this;
    	} else if(f === 'utf16le') {
    			/*:: if(typeof val !== "string") throw new Error("unreachable"); */
    			var end/*:number*/ = Math.min(this.l + t, this.length);
    			for(i = 0; i < Math.min(val.length, t); ++i) {
    				var cc = val.charCodeAt(i);
    				this[this.l++] = (cc & 0xff);
    				this[this.l++] = (cc >> 8);
    			}
    			while(this.l < end) this[this.l++] = 0;
    			return this;
    	} else /*:: if(typeof val === 'number') */ switch(t) {
    		case  1: size = 1; this[this.l] = val&0xFF; break;
    		case  2: size = 2; this[this.l] = val&0xFF; val >>>= 8; this[this.l+1] = val&0xFF; break;
    		case  3: size = 3; this[this.l] = val&0xFF; val >>>= 8; this[this.l+1] = val&0xFF; val >>>= 8; this[this.l+2] = val&0xFF; break;
    		case  4: size = 4; __writeUInt32LE(this, val, this.l); break;
    		case  8: size = 8; if(f === 'f') { write_double_le(this, val, this.l); break; }
    		/* falls through */
    		case 16: break;
    		case -4: size = 4; __writeInt32LE(this, val, this.l); break;
    	}
    	this.l += size; return this;
    }

    function CheckField(hexstr/*:string*/, fld/*:string*/)/*:void*/ {
    	var m = __hexlify(this,this.l,hexstr.length>>1);
    	if(m !== hexstr) throw new Error(fld + 'Expected ' + hexstr + ' saw ' + m);
    	this.l += hexstr.length>>1;
    }

    function prep_blob(blob, pos/*:number*/)/*:void*/ {
    	blob.l = pos;
    	blob.read_shift = /*::(*/ReadShift/*:: :any)*/;
    	blob.chk = CheckField;
    	blob.write_shift = WriteShift;
    }

    function parsenoop(blob, length/*:: :number, opts?:any */) { blob.l += length; }

    function new_buf(sz/*:number*/)/*:Block*/ {
    	var o = new_raw_buf(sz);
    	prep_blob(o, 0);
    	return o;
    }

    /* [MS-XLSB] 2.1.4 Record */
    function recordhopper(data, cb/*:RecordHopperCB*/, opts/*:?any*/) {
    	if(!data) return;
    	var tmpbyte, cntbyte, length;
    	prep_blob(data, data.l || 0);
    	var L = data.length, RT = 0, tgt = 0;
    	while(data.l < L) {
    		RT = data.read_shift(1);
    		if(RT & 0x80) RT = (RT & 0x7F) + ((data.read_shift(1) & 0x7F)<<7);
    		var R = XLSBRecordEnum[RT] || XLSBRecordEnum[0xFFFF];
    		tmpbyte = data.read_shift(1);
    		length = tmpbyte & 0x7F;
    		for(cntbyte = 1; cntbyte <4 && (tmpbyte & 0x80); ++cntbyte) length += ((tmpbyte = data.read_shift(1)) & 0x7F)<<(7*cntbyte);
    		tgt = data.l + length;
    		var d = R.f && R.f(data, length, opts);
    		data.l = tgt;
    		if(cb(d, R, RT)) return;
    	}
    }

    /* control buffer usage for fixed-length buffers */
    function buf_array()/*:BufArray*/ {
    	var bufs/*:Array<Block>*/ = [], blksz = has_buf ? 256 : 2048;
    	var newblk = function ba_newblk(sz/*:number*/)/*:Block*/ {
    		var o/*:Block*/ = (new_buf(sz)/*:any*/);
    		prep_blob(o, 0);
    		return o;
    	};

    	var curbuf/*:Block*/ = newblk(blksz);

    	var endbuf = function ba_endbuf() {
    		if(!curbuf) return;
    		if(curbuf.length > curbuf.l) { curbuf = curbuf.slice(0, curbuf.l); curbuf.l = curbuf.length; }
    		if(curbuf.length > 0) bufs.push(curbuf);
    		curbuf = null;
    	};

    	var next = function ba_next(sz/*:number*/)/*:Block*/ {
    		if(curbuf && (sz < (curbuf.length - curbuf.l))) return curbuf;
    		endbuf();
    		return (curbuf = newblk(Math.max(sz+1, blksz)));
    	};

    	var end = function ba_end() {
    		endbuf();
    		return bconcat(bufs);
    	};

    	var push = function ba_push(buf) { endbuf(); curbuf = buf; if(curbuf.l == null) curbuf.l = curbuf.length; next(blksz); };

    	return ({ next:next, push:push, end:end, _bufs:bufs }/*:any*/);
    }
    /* XLS ranges enforced */
    function shift_cell_xls(cell/*:CellAddress*/, tgt/*:any*/, opts/*:?any*/)/*:CellAddress*/ {
    	var out = dup(cell);
    	if(tgt.s) {
    		if(out.cRel) out.c += tgt.s.c;
    		if(out.rRel) out.r += tgt.s.r;
    	} else {
    		if(out.cRel) out.c += tgt.c;
    		if(out.rRel) out.r += tgt.r;
    	}
    	if(!opts || opts.biff < 12) {
    		while(out.c >= 0x100) out.c -= 0x100;
    		while(out.r >= 0x10000) out.r -= 0x10000;
    	}
    	return out;
    }

    function shift_range_xls(cell, range, opts) {
    	var out = dup(cell);
    	out.s = shift_cell_xls(out.s, range.s, opts);
    	out.e = shift_cell_xls(out.e, range.s, opts);
    	return out;
    }

    function encode_cell_xls(c/*:CellAddress*/, biff/*:number*/)/*:string*/ {
    	if(c.cRel && c.c < 0) { c = dup(c); while(c.c < 0) c.c += (biff > 8) ? 0x4000 : 0x100; }
    	if(c.rRel && c.r < 0) { c = dup(c); while(c.r < 0) c.r += (biff > 8) ? 0x100000 : ((biff > 5) ? 0x10000 : 0x4000); }
    	var s = encode_cell(c);
    	if(!c.cRel && c.cRel != null) s = fix_col(s);
    	if(!c.rRel && c.rRel != null) s = fix_row(s);
    	return s;
    }

    function encode_range_xls(r, opts)/*:string*/ {
    	if(r.s.r == 0 && !r.s.rRel) {
    		if(r.e.r == (opts.biff >= 12 ? 0xFFFFF : (opts.biff >= 8 ? 0x10000 : 0x4000)) && !r.e.rRel) {
    			return (r.s.cRel ? "" : "$") + encode_col(r.s.c) + ":" + (r.e.cRel ? "" : "$") + encode_col(r.e.c);
    		}
    	}
    	if(r.s.c == 0 && !r.s.cRel) {
    		if(r.e.c == (opts.biff >= 12 ? 0x3FFF : 0xFF) && !r.e.cRel) {
    			return (r.s.rRel ? "" : "$") + encode_row(r.s.r) + ":" + (r.e.rRel ? "" : "$") + encode_row(r.e.r);
    		}
    	}
    	return encode_cell_xls(r.s, opts.biff) + ":" + encode_cell_xls(r.e, opts.biff);
    }
    function decode_row(rowstr/*:string*/)/*:number*/ { return parseInt(unfix_row(rowstr),10) - 1; }
    function encode_row(row/*:number*/)/*:string*/ { return "" + (row + 1); }
    function fix_row(cstr/*:string*/)/*:string*/ { return cstr.replace(/([A-Z]|^)(\d+)$/,"$1$$$2"); }
    function unfix_row(cstr/*:string*/)/*:string*/ { return cstr.replace(/\$(\d+)$/,"$1"); }

    function decode_col(colstr/*:string*/)/*:number*/ { var c = unfix_col(colstr), d = 0, i = 0; for(; i !== c.length; ++i) d = 26*d + c.charCodeAt(i) - 64; return d - 1; }
    function encode_col(col/*:number*/)/*:string*/ { if(col < 0) throw new Error("invalid column " + col); var s=""; for(++col; col; col=Math.floor((col-1)/26)) s = String.fromCharCode(((col-1)%26) + 65) + s; return s; }
    function fix_col(cstr/*:string*/)/*:string*/ { return cstr.replace(/^([A-Z])/,"$$$1"); }
    function unfix_col(cstr/*:string*/)/*:string*/ { return cstr.replace(/^\$([A-Z])/,"$1"); }

    function split_cell(cstr/*:string*/)/*:Array<string>*/ { return cstr.replace(/(\$?[A-Z]*)(\$?\d*)/,"$1,$2").split(","); }
    //function decode_cell(cstr/*:string*/)/*:CellAddress*/ { var splt = split_cell(cstr); return { c:decode_col(splt[0]), r:decode_row(splt[1]) }; }
    function decode_cell(cstr/*:string*/)/*:CellAddress*/ {
    	var R = 0, C = 0;
    	for(var i = 0; i < cstr.length; ++i) {
    		var cc = cstr.charCodeAt(i);
    		if(cc >= 48 && cc <= 57) R = 10 * R + (cc - 48);
    		else if(cc >= 65 && cc <= 90) C = 26 * C + (cc - 64);
    	}
    	return { c: C - 1, r:R - 1 };
    }
    //function encode_cell(cell/*:CellAddress*/)/*:string*/ { return encode_col(cell.c) + encode_row(cell.r); }
    function encode_cell(cell/*:CellAddress*/)/*:string*/ {
    	var col = cell.c + 1;
    	var s="";
    	for(; col; col=((col-1)/26)|0) s = String.fromCharCode(((col-1)%26) + 65) + s;
    	return s + (cell.r + 1);
    }
    function decode_range(range/*:string*/)/*:Range*/ {
    	var idx = range.indexOf(":");
    	if(idx == -1) return { s: decode_cell(range), e: decode_cell(range) };
    	return { s: decode_cell(range.slice(0, idx)), e: decode_cell(range.slice(idx + 1)) };
    }
    /*# if only one arg, it is assumed to be a Range.  If 2 args, both are cell addresses */
    function encode_range(cs/*:CellAddrSpec|Range*/,ce/*:?CellAddrSpec*/)/*:string*/ {
    	if(typeof ce === 'undefined' || typeof ce === 'number') {
    /*:: if(!(cs instanceof Range)) throw "unreachable"; */
    		return encode_range(cs.s, cs.e);
    	}
    /*:: if((cs instanceof Range)) throw "unreachable"; */
    	if(typeof cs !== 'string') cs = encode_cell((cs/*:any*/));
    	if(typeof ce !== 'string') ce = encode_cell((ce/*:any*/));
    /*:: if(typeof cs !== 'string') throw "unreachable"; */
    /*:: if(typeof ce !== 'string') throw "unreachable"; */
    	return cs == ce ? cs : cs + ":" + ce;
    }

    function safe_decode_range(range/*:string*/)/*:Range*/ {
    	var o = {s:{c:0,r:0},e:{c:0,r:0}};
    	var idx = 0, i = 0, cc = 0;
    	var len = range.length;
    	for(idx = 0; i < len; ++i) {
    		if((cc=range.charCodeAt(i)-64) < 1 || cc > 26) break;
    		idx = 26*idx + cc;
    	}
    	o.s.c = --idx;

    	for(idx = 0; i < len; ++i) {
    		if((cc=range.charCodeAt(i)-48) < 0 || cc > 9) break;
    		idx = 10*idx + cc;
    	}
    	o.s.r = --idx;

    	if(i === len || cc != 10) { o.e.c=o.s.c; o.e.r=o.s.r; return o; }
    	++i;

    	for(idx = 0; i != len; ++i) {
    		if((cc=range.charCodeAt(i)-64) < 1 || cc > 26) break;
    		idx = 26*idx + cc;
    	}
    	o.e.c = --idx;

    	for(idx = 0; i != len; ++i) {
    		if((cc=range.charCodeAt(i)-48) < 0 || cc > 9) break;
    		idx = 10*idx + cc;
    	}
    	o.e.r = --idx;
    	return o;
    }

    function safe_format_cell(cell/*:Cell*/, v/*:any*/) {
    	var q = (cell.t == 'd' && v instanceof Date);
    	if(cell.z != null) try { return (cell.w = SSF_format(cell.z, q ? datenum(v) : v)); } catch(e) { }
    	try { return (cell.w = SSF_format((cell.XF||{}).numFmtId||(q ? 14 : 0),  q ? datenum(v) : v)); } catch(e) { return ''+v; }
    }

    function format_cell(cell/*:Cell*/, v/*:any*/, o/*:any*/) {
    	if(cell == null || cell.t == null || cell.t == 'z') return "";
    	if(cell.w !== undefined) return cell.w;
    	if(cell.t == 'd' && !cell.z && o && o.dateNF) cell.z = o.dateNF;
    	if(cell.t == "e") return BErr[cell.v] || cell.v;
    	if(v == undefined) return safe_format_cell(cell, cell.v);
    	return safe_format_cell(cell, v);
    }

    function sheet_to_workbook(sheet/*:Worksheet*/, opts)/*:Workbook*/ {
    	var n = opts && opts.sheet ? opts.sheet : "Sheet1";
    	var sheets = {}; sheets[n] = sheet;
    	return { SheetNames: [n], Sheets: sheets };
    }

    function sheet_add_aoa(_ws/*:?Worksheet*/, data/*:AOA*/, opts/*:?any*/)/*:Worksheet*/ {
    	var o = opts || {};
    	var dense = _ws ? Array.isArray(_ws) : o.dense;
    	var ws/*:Worksheet*/ = _ws || (dense ? ([]/*:any*/) : ({}/*:any*/));
    	var _R = 0, _C = 0;
    	if(ws && o.origin != null) {
    		if(typeof o.origin == 'number') _R = o.origin;
    		else {
    			var _origin/*:CellAddress*/ = typeof o.origin == "string" ? decode_cell(o.origin) : o.origin;
    			_R = _origin.r; _C = _origin.c;
    		}
    		if(!ws["!ref"]) ws["!ref"] = "A1:A1";
    	}
    	var range/*:Range*/ = ({s: {c:10000000, r:10000000}, e: {c:0, r:0}}/*:any*/);
    	if(ws['!ref']) {
    		var _range = safe_decode_range(ws['!ref']);
    		range.s.c = _range.s.c;
    		range.s.r = _range.s.r;
    		range.e.c = Math.max(range.e.c, _range.e.c);
    		range.e.r = Math.max(range.e.r, _range.e.r);
    		if(_R == -1) range.e.r = _R = _range.e.r + 1;
    	}
    	for(var R = 0; R != data.length; ++R) {
    		if(!data[R]) continue;
    		if(!Array.isArray(data[R])) throw new Error("aoa_to_sheet expects an array of arrays");
    		for(var C = 0; C != data[R].length; ++C) {
    			if(typeof data[R][C] === 'undefined') continue;
    			var cell/*:Cell*/ = ({v: data[R][C] }/*:any*/);
    			var __R = _R + R, __C = _C + C;
    			if(range.s.r > __R) range.s.r = __R;
    			if(range.s.c > __C) range.s.c = __C;
    			if(range.e.r < __R) range.e.r = __R;
    			if(range.e.c < __C) range.e.c = __C;
    			if(data[R][C] && typeof data[R][C] === 'object' && !Array.isArray(data[R][C]) && !(data[R][C] instanceof Date)) cell = data[R][C];
    			else {
    				if(Array.isArray(cell.v)) { cell.f = data[R][C][1]; cell.v = cell.v[0]; }
    				if(cell.v === null) {
    					if(cell.f) cell.t = 'n';
    					else if(o.nullError) { cell.t = 'e'; cell.v = 0; }
    					else if(!o.sheetStubs) continue;
    					else cell.t = 'z';
    				}
    				else if(typeof cell.v === 'number') cell.t = 'n';
    				else if(typeof cell.v === 'boolean') cell.t = 'b';
    				else if(cell.v instanceof Date) {
    					cell.z = o.dateNF || table_fmt[14];
    					if(o.cellDates) { cell.t = 'd'; cell.w = SSF_format(cell.z, datenum(cell.v)); }
    					else { cell.t = 'n'; cell.v = datenum(cell.v); cell.w = SSF_format(cell.z, cell.v); }
    				}
    				else cell.t = 's';
    			}
    			if(dense) {
    				if(!ws[__R]) ws[__R] = [];
    				if(ws[__R][__C] && ws[__R][__C].z) cell.z = ws[__R][__C].z;
    				ws[__R][__C] = cell;
    			} else {
    				var cell_ref = encode_cell(({c:__C,r:__R}/*:any*/));
    				if(ws[cell_ref] && ws[cell_ref].z) cell.z = ws[cell_ref].z;
    				ws[cell_ref] = cell;
    			}
    		}
    	}
    	if(range.s.c < 10000000) ws['!ref'] = encode_range(range);
    	return ws;
    }
    function aoa_to_sheet(data/*:AOA*/, opts/*:?any*/)/*:Worksheet*/ { return sheet_add_aoa(null, data, opts); }

    function parse_Int32LE(data) {
    	return data.read_shift(4, 'i');
    }

    /* [MS-XLSB] 2.5.168 */
    function parse_XLWideString(data/*::, length*/)/*:string*/ {
    	var cchCharacters = data.read_shift(4);
    	return cchCharacters === 0 ? "" : data.read_shift(cchCharacters, 'dbcs');
    }

    /* [MS-XLSB] 2.5.91 */
    //function parse_LPWideString(data/*::, length*/)/*:string*/ {
    //	var cchCharacters = data.read_shift(2);
    //	return cchCharacters === 0 ? "" : data.read_shift(cchCharacters, "utf16le");
    //}

    /* [MS-XLSB] 2.5.143 */
    function parse_StrRun(data) {
    	return { ich: data.read_shift(2), ifnt: data.read_shift(2) };
    }

    /* [MS-XLSB] 2.5.121 */
    function parse_RichStr(data, length/*:number*/)/*:XLString*/ {
    	var start = data.l;
    	var flags = data.read_shift(1);
    	var str = parse_XLWideString(data);
    	var rgsStrRun = [];
    	var z = ({ t: str, h: str }/*:any*/);
    	if ((flags & 1) !== 0) { /* fRichStr */
    		/* TODO: formatted string */
    		var dwSizeStrRun = data.read_shift(4);
    		for (var i = 0; i != dwSizeStrRun; ++i) rgsStrRun.push(parse_StrRun(data));
    		z.r = rgsStrRun;
    	}
    	else z.r = [{ ich: 0, ifnt: 0 }];
    	//if((flags & 2) !== 0) { /* fExtStr */
    	//	/* TODO: phonetic string */
    	//}
    	data.l = start + length;
    	return z;
    }
    /* [MS-XLSB] 2.4.328 BrtCommentText (RichStr w/1 run) */
    var parse_BrtCommentText = parse_RichStr;

    /* [MS-XLSB] 2.5.9 */
    function parse_XLSBCell(data)/*:any*/ {
    	var col = data.read_shift(4);
    	var iStyleRef = data.read_shift(2);
    	iStyleRef += data.read_shift(1) << 16;
    	data.l++; //var fPhShow = data.read_shift(1);
    	return { c: col, iStyleRef: iStyleRef };
    }

    /* Short XLSB Cell does not include column */
    function parse_XLSBShortCell(data)/*:any*/ {
    	var iStyleRef = data.read_shift(2);
    	iStyleRef += data.read_shift(1) <<16;
    	data.l++; //var fPhShow = data.read_shift(1);
    	return { c:-1, iStyleRef: iStyleRef };
    }

    /* [MS-XLSB] 2.5.21 */
    var parse_XLSBCodeName = parse_XLWideString;

    /* [MS-XLSB] 2.5.166 */
    function parse_XLNullableWideString(data/*::, length*/)/*:string*/ {
    	var cchCharacters = data.read_shift(4);
    	return cchCharacters === 0 || cchCharacters === 0xFFFFFFFF ? "" : data.read_shift(cchCharacters, 'dbcs');
    }

    /* [MS-XLSB] 2.5.165 */
    var parse_XLNameWideString = parse_XLWideString;
    //var write_XLNameWideString = write_XLWideString;

    /* [MS-XLSB] 2.5.114 */
    var parse_RelID = parse_XLNullableWideString;


    /* [MS-XLS] 2.5.217 ; [MS-XLSB] 2.5.122 */
    function parse_RkNumber(data)/*:number*/ {
    	var b = data.slice(data.l, data.l + 4);
    	var fX100 = (b[0] & 1), fInt = (b[0] & 2);
    	data.l += 4;
    	var RK = fInt === 0 ? __double([0, 0, 0, 0, (b[0] & 0xFC), b[1], b[2], b[3]], 0) : __readInt32LE(b, 0) >> 2;
    	return fX100 ? (RK / 100) : RK;
    }


    /* [MS-XLSB] 2.5.117 RfX */
    function parse_RfX(data /*::, length*/)/*:Range*/ {
    	var cell/*:Range*/ = ({ s: {}, e: {} }/*:any*/);
    	cell.s.r = data.read_shift(4);
    	cell.e.r = data.read_shift(4);
    	cell.s.c = data.read_shift(4);
    	cell.e.c = data.read_shift(4);
    	return cell;
    }

    /* [MS-XLSB] 2.5.153 UncheckedRfX */
    var parse_UncheckedRfX = parse_RfX;

    /* [MS-XLSB] 2.5.155 UncheckedSqRfX */
    //function parse_UncheckedSqRfX(data) {
    //	var cnt = data.read_shift(4);
    //	var out = [];
    //	for(var i = 0; i < cnt; ++i) {
    //		var rng = parse_UncheckedRfX(data);
    //		out.push(encode_range(rng));
    //	}
    //	return out.join(",");
    //}
    //function write_UncheckedSqRfX(sqrfx/*:string*/) {
    //	var parts = sqrfx.split(/\s*,\s*/);
    //	var o = new_buf(4); o.write_shift(4, parts.length);
    //	var out = [o];
    //	parts.forEach(function(rng) {
    //		out.push(write_UncheckedRfX(safe_decode_range(rng)));
    //	});
    //	return bconcat(out);
    //}

    /* [MS-XLS] 2.5.342 ; [MS-XLSB] 2.5.171 */
    /* TODO: error checking, NaN and Infinity values are not valid Xnum */
    function parse_Xnum(data/*::, length*/) {
    	if(data.length - data.l < 8) throw "XLS Xnum Buffer underflow";
    	return data.read_shift(8, 'f');
    }

    /* [MS-XLSB] 2.4.324 BrtColor */
    function parse_BrtColor(data/*::, length*/) {
    	var out = {};
    	var d = data.read_shift(1);

    	//var fValidRGB = d & 1;
    	var xColorType = d >>> 1;

    	var index = data.read_shift(1);
    	var nTS = data.read_shift(2, 'i');
    	var bR = data.read_shift(1);
    	var bG = data.read_shift(1);
    	var bB = data.read_shift(1);
    	data.l++; //var bAlpha = data.read_shift(1);

    	switch (xColorType) {
    		case 0: out.auto = 1; break;
    		case 1:
    			out.index = index;
    			var icv = XLSIcv[index];
    			/* automatic pseudo index 81 */
    			if (icv) out.rgb = rgb2Hex(icv);
    			break;
    		case 2:
    			/* if(!fValidRGB) throw new Error("invalid"); */
    			out.rgb = rgb2Hex([bR, bG, bB]);
    			break;
    		case 3: out.theme = index; break;
    	}
    	if (nTS != 0) out.tint = nTS > 0 ? nTS / 32767 : nTS / 32768;

    	return out;
    }

    /* [MS-XLSB] 2.5.52 */
    function parse_FontFlags(data/*::, length, opts*/) {
    	var d = data.read_shift(1);
    	data.l++;
    	var out = {
    		fBold: d & 0x01,
    		fItalic: d & 0x02,
    		fUnderline: d & 0x04,
    		fStrikeout: d & 0x08,
    		fOutline: d & 0x10,
    		fShadow: d & 0x20,
    		fCondense: d & 0x40,
    		fExtend: d & 0x80
    	};
    	return out;
    }

    /* [MS-OLEDS] 2.3.1 and 2.3.2 */
    function parse_ClipboardFormatOrString(o, w/*:number*/)/*:string*/ {
    	// $FlowIgnore
    	var ClipFmt = { 2: "BITMAP", 3: "METAFILEPICT", 8: "DIB", 14: "ENHMETAFILE" };
    	var m/*:number*/ = o.read_shift(4);
    	switch (m) {
    		case 0x00000000: return "";
    		case 0xffffffff: case 0xfffffffe: return ClipFmt[o.read_shift(4)] || "";
    	}
    	if (m > 0x190) throw new Error("Unsupported Clipboard: " + m.toString(16));
    	o.l -= 4;
    	return o.read_shift(0, w == 1 ? "lpstr" : "lpwstr");
    }
    function parse_ClipboardFormatOrAnsiString(o) { return parse_ClipboardFormatOrString(o, 1); }
    function parse_ClipboardFormatOrUnicodeString(o) { return parse_ClipboardFormatOrString(o, 2); }

    /* [MS-OLEPS] 2.2 PropertyType */
    // Note: some tree shakers cannot handle VT_VECTOR | $CONST, hence extra vars
    //var VT_EMPTY    = 0x0000;
    //var VT_NULL     = 0x0001;
    var VT_I2       = 0x0002;
    var VT_I4       = 0x0003;
    //var VT_R4       = 0x0004;
    //var VT_R8       = 0x0005;
    //var VT_CY       = 0x0006;
    //var VT_DATE     = 0x0007;
    //var VT_BSTR     = 0x0008;
    //var VT_ERROR    = 0x000A;
    var VT_BOOL     = 0x000B;
    var VT_VARIANT  = 0x000C;
    //var VT_DECIMAL  = 0x000E;
    //var VT_I1       = 0x0010;
    //var VT_UI1      = 0x0011;
    //var VT_UI2      = 0x0012;
    var VT_UI4      = 0x0013;
    //var VT_LPWSTR   = 0x001F;
    var VT_FILETIME = 0x0040;
    var VT_BLOB     = 0x0041;
    //var VT_STREAM   = 0x0042;
    //var VT_STORAGE  = 0x0043;
    //var VT_STREAMED_Object  = 0x0044;
    //var VT_STORED_Object    = 0x0045;
    //var VT_BLOB_Object      = 0x0046;
    var VT_CF       = 0x0047;
    var VT_VECTOR_VARIANT = 0x100C;
    var VT_VECTOR_LPSTR   = 0x101E;
    //var VT_ARRAY    = 0x2000;

    var VT_STRING   = 0x0050; // 2.3.3.1.11 VtString
    var VT_USTR     = 0x0051; // 2.3.3.1.12 VtUnalignedString
    var VT_CUSTOM   = [VT_STRING, VT_USTR];

    /* [MS-OSHARED] 2.3.3.2.2.1 Document Summary Information PIDDSI */
    var DocSummaryPIDDSI = {
    	/*::[*/0x01/*::]*/: { n: 'CodePage', t: VT_I2 },
    	/*::[*/0x02/*::]*/: { n: 'Category', t: VT_STRING },
    	/*::[*/0x03/*::]*/: { n: 'PresentationFormat', t: VT_STRING },
    	/*::[*/0x04/*::]*/: { n: 'ByteCount', t: VT_I4 },
    	/*::[*/0x05/*::]*/: { n: 'LineCount', t: VT_I4 },
    	/*::[*/0x06/*::]*/: { n: 'ParagraphCount', t: VT_I4 },
    	/*::[*/0x07/*::]*/: { n: 'SlideCount', t: VT_I4 },
    	/*::[*/0x08/*::]*/: { n: 'NoteCount', t: VT_I4 },
    	/*::[*/0x09/*::]*/: { n: 'HiddenCount', t: VT_I4 },
    	/*::[*/0x0a/*::]*/: { n: 'MultimediaClipCount', t: VT_I4 },
    	/*::[*/0x0b/*::]*/: { n: 'ScaleCrop', t: VT_BOOL },
    	/*::[*/0x0c/*::]*/: { n: 'HeadingPairs', t: VT_VECTOR_VARIANT /* VT_VECTOR | VT_VARIANT */ },
    	/*::[*/0x0d/*::]*/: { n: 'TitlesOfParts', t: VT_VECTOR_LPSTR /* VT_VECTOR | VT_LPSTR */ },
    	/*::[*/0x0e/*::]*/: { n: 'Manager', t: VT_STRING },
    	/*::[*/0x0f/*::]*/: { n: 'Company', t: VT_STRING },
    	/*::[*/0x10/*::]*/: { n: 'LinksUpToDate', t: VT_BOOL },
    	/*::[*/0x11/*::]*/: { n: 'CharacterCount', t: VT_I4 },
    	/*::[*/0x13/*::]*/: { n: 'SharedDoc', t: VT_BOOL },
    	/*::[*/0x16/*::]*/: { n: 'HyperlinksChanged', t: VT_BOOL },
    	/*::[*/0x17/*::]*/: { n: 'AppVersion', t: VT_I4, p: 'version' },
    	/*::[*/0x18/*::]*/: { n: 'DigSig', t: VT_BLOB },
    	/*::[*/0x1A/*::]*/: { n: 'ContentType', t: VT_STRING },
    	/*::[*/0x1B/*::]*/: { n: 'ContentStatus', t: VT_STRING },
    	/*::[*/0x1C/*::]*/: { n: 'Language', t: VT_STRING },
    	/*::[*/0x1D/*::]*/: { n: 'Version', t: VT_STRING },
    	/*::[*/0xFF/*::]*/: {},
    	/* [MS-OLEPS] 2.18 */
    	/*::[*/0x80000000/*::]*/: { n: 'Locale', t: VT_UI4 },
    	/*::[*/0x80000003/*::]*/: { n: 'Behavior', t: VT_UI4 },
    	/*::[*/0x72627262/*::]*/: {}
    };

    /* [MS-OSHARED] 2.3.3.2.1.1 Summary Information Property Set PIDSI */
    var SummaryPIDSI = {
    	/*::[*/0x01/*::]*/: { n: 'CodePage', t: VT_I2 },
    	/*::[*/0x02/*::]*/: { n: 'Title', t: VT_STRING },
    	/*::[*/0x03/*::]*/: { n: 'Subject', t: VT_STRING },
    	/*::[*/0x04/*::]*/: { n: 'Author', t: VT_STRING },
    	/*::[*/0x05/*::]*/: { n: 'Keywords', t: VT_STRING },
    	/*::[*/0x06/*::]*/: { n: 'Comments', t: VT_STRING },
    	/*::[*/0x07/*::]*/: { n: 'Template', t: VT_STRING },
    	/*::[*/0x08/*::]*/: { n: 'LastAuthor', t: VT_STRING },
    	/*::[*/0x09/*::]*/: { n: 'RevNumber', t: VT_STRING },
    	/*::[*/0x0A/*::]*/: { n: 'EditTime', t: VT_FILETIME },
    	/*::[*/0x0B/*::]*/: { n: 'LastPrinted', t: VT_FILETIME },
    	/*::[*/0x0C/*::]*/: { n: 'CreatedDate', t: VT_FILETIME },
    	/*::[*/0x0D/*::]*/: { n: 'ModifiedDate', t: VT_FILETIME },
    	/*::[*/0x0E/*::]*/: { n: 'PageCount', t: VT_I4 },
    	/*::[*/0x0F/*::]*/: { n: 'WordCount', t: VT_I4 },
    	/*::[*/0x10/*::]*/: { n: 'CharCount', t: VT_I4 },
    	/*::[*/0x11/*::]*/: { n: 'Thumbnail', t: VT_CF },
    	/*::[*/0x12/*::]*/: { n: 'Application', t: VT_STRING },
    	/*::[*/0x13/*::]*/: { n: 'DocSecurity', t: VT_I4 },
    	/*::[*/0xFF/*::]*/: {},
    	/* [MS-OLEPS] 2.18 */
    	/*::[*/0x80000000/*::]*/: { n: 'Locale', t: VT_UI4 },
    	/*::[*/0x80000003/*::]*/: { n: 'Behavior', t: VT_UI4 },
    	/*::[*/0x72627262/*::]*/: {}
    };

    /* [MS-XLS] 2.4.63 Country/Region codes */
    var CountryEnum = {
    	/*::[*/0x0001/*::]*/: "US", // United States
    	/*::[*/0x0002/*::]*/: "CA", // Canada
    	/*::[*/0x0003/*::]*/: "", // Latin America (except Brazil)
    	/*::[*/0x0007/*::]*/: "RU", // Russia
    	/*::[*/0x0014/*::]*/: "EG", // Egypt
    	/*::[*/0x001E/*::]*/: "GR", // Greece
    	/*::[*/0x001F/*::]*/: "NL", // Netherlands
    	/*::[*/0x0020/*::]*/: "BE", // Belgium
    	/*::[*/0x0021/*::]*/: "FR", // France
    	/*::[*/0x0022/*::]*/: "ES", // Spain
    	/*::[*/0x0024/*::]*/: "HU", // Hungary
    	/*::[*/0x0027/*::]*/: "IT", // Italy
    	/*::[*/0x0029/*::]*/: "CH", // Switzerland
    	/*::[*/0x002B/*::]*/: "AT", // Austria
    	/*::[*/0x002C/*::]*/: "GB", // United Kingdom
    	/*::[*/0x002D/*::]*/: "DK", // Denmark
    	/*::[*/0x002E/*::]*/: "SE", // Sweden
    	/*::[*/0x002F/*::]*/: "NO", // Norway
    	/*::[*/0x0030/*::]*/: "PL", // Poland
    	/*::[*/0x0031/*::]*/: "DE", // Germany
    	/*::[*/0x0034/*::]*/: "MX", // Mexico
    	/*::[*/0x0037/*::]*/: "BR", // Brazil
    	/*::[*/0x003d/*::]*/: "AU", // Australia
    	/*::[*/0x0040/*::]*/: "NZ", // New Zealand
    	/*::[*/0x0042/*::]*/: "TH", // Thailand
    	/*::[*/0x0051/*::]*/: "JP", // Japan
    	/*::[*/0x0052/*::]*/: "KR", // Korea
    	/*::[*/0x0054/*::]*/: "VN", // Viet Nam
    	/*::[*/0x0056/*::]*/: "CN", // China
    	/*::[*/0x005A/*::]*/: "TR", // Turkey
    	/*::[*/0x0069/*::]*/: "JS", // Ramastan
    	/*::[*/0x00D5/*::]*/: "DZ", // Algeria
    	/*::[*/0x00D8/*::]*/: "MA", // Morocco
    	/*::[*/0x00DA/*::]*/: "LY", // Libya
    	/*::[*/0x015F/*::]*/: "PT", // Portugal
    	/*::[*/0x0162/*::]*/: "IS", // Iceland
    	/*::[*/0x0166/*::]*/: "FI", // Finland
    	/*::[*/0x01A4/*::]*/: "CZ", // Czech Republic
    	/*::[*/0x0376/*::]*/: "TW", // Taiwan
    	/*::[*/0x03C1/*::]*/: "LB", // Lebanon
    	/*::[*/0x03C2/*::]*/: "JO", // Jordan
    	/*::[*/0x03C3/*::]*/: "SY", // Syria
    	/*::[*/0x03C4/*::]*/: "IQ", // Iraq
    	/*::[*/0x03C5/*::]*/: "KW", // Kuwait
    	/*::[*/0x03C6/*::]*/: "SA", // Saudi Arabia
    	/*::[*/0x03CB/*::]*/: "AE", // United Arab Emirates
    	/*::[*/0x03CC/*::]*/: "IL", // Israel
    	/*::[*/0x03CE/*::]*/: "QA", // Qatar
    	/*::[*/0x03D5/*::]*/: "IR", // Iran
    	/*::[*/0xFFFF/*::]*/: "US"  // United States
    };

    /* [MS-XLS] 2.5.127 */
    var XLSFillPattern = [
    	null,
    	'solid',
    	'mediumGray',
    	'darkGray',
    	'lightGray',
    	'darkHorizontal',
    	'darkVertical',
    	'darkDown',
    	'darkUp',
    	'darkGrid',
    	'darkTrellis',
    	'lightHorizontal',
    	'lightVertical',
    	'lightDown',
    	'lightUp',
    	'lightGrid',
    	'lightTrellis',
    	'gray125',
    	'gray0625'
    ];

    function rgbify(arr/*:Array<number>*/)/*:Array<[number, number, number]>*/ { return arr.map(function(x) { return [(x>>16)&255,(x>>8)&255,x&255]; }); }

    /* [MS-XLS] 2.5.161 */
    /* [MS-XLSB] 2.5.75 Icv */
    var _XLSIcv = /*#__PURE__*/ rgbify([
    	/* Color Constants */
    	0x000000,
    	0xFFFFFF,
    	0xFF0000,
    	0x00FF00,
    	0x0000FF,
    	0xFFFF00,
    	0xFF00FF,
    	0x00FFFF,

    	/* Overridable Defaults */
    	0x000000,
    	0xFFFFFF,
    	0xFF0000,
    	0x00FF00,
    	0x0000FF,
    	0xFFFF00,
    	0xFF00FF,
    	0x00FFFF,

    	0x800000,
    	0x008000,
    	0x000080,
    	0x808000,
    	0x800080,
    	0x008080,
    	0xC0C0C0,
    	0x808080,
    	0x9999FF,
    	0x993366,
    	0xFFFFCC,
    	0xCCFFFF,
    	0x660066,
    	0xFF8080,
    	0x0066CC,
    	0xCCCCFF,

    	0x000080,
    	0xFF00FF,
    	0xFFFF00,
    	0x00FFFF,
    	0x800080,
    	0x800000,
    	0x008080,
    	0x0000FF,
    	0x00CCFF,
    	0xCCFFFF,
    	0xCCFFCC,
    	0xFFFF99,
    	0x99CCFF,
    	0xFF99CC,
    	0xCC99FF,
    	0xFFCC99,

    	0x3366FF,
    	0x33CCCC,
    	0x99CC00,
    	0xFFCC00,
    	0xFF9900,
    	0xFF6600,
    	0x666699,
    	0x969696,
    	0x003366,
    	0x339966,
    	0x003300,
    	0x333300,
    	0x993300,
    	0x993366,
    	0x333399,
    	0x333333,

    	/* Other entries to appease BIFF8/12 */
    	0xFFFFFF, /* 0x40 icvForeground ?? */
    	0x000000, /* 0x41 icvBackground ?? */
    	0x000000, /* 0x42 icvFrame ?? */
    	0x000000, /* 0x43 icv3D ?? */
    	0x000000, /* 0x44 icv3DText ?? */
    	0x000000, /* 0x45 icv3DHilite ?? */
    	0x000000, /* 0x46 icv3DShadow ?? */
    	0x000000, /* 0x47 icvHilite ?? */
    	0x000000, /* 0x48 icvCtlText ?? */
    	0x000000, /* 0x49 icvCtlScrl ?? */
    	0x000000, /* 0x4A icvCtlInv ?? */
    	0x000000, /* 0x4B icvCtlBody ?? */
    	0x000000, /* 0x4C icvCtlFrame ?? */
    	0x000000, /* 0x4D icvCtlFore ?? */
    	0x000000, /* 0x4E icvCtlBack ?? */
    	0x000000, /* 0x4F icvCtlNeutral */
    	0x000000, /* 0x50 icvInfoBk ?? */
    	0x000000 /* 0x51 icvInfoText ?? */
    ]);
    var XLSIcv = /*#__PURE__*/dup(_XLSIcv);

    /* [MS-XLSB] 2.5.97.2 */
    var BErr = {
    	/*::[*/0x00/*::]*/: "#NULL!",
    	/*::[*/0x07/*::]*/: "#DIV/0!",
    	/*::[*/0x0F/*::]*/: "#VALUE!",
    	/*::[*/0x17/*::]*/: "#REF!",
    	/*::[*/0x1D/*::]*/: "#NAME?",
    	/*::[*/0x24/*::]*/: "#NUM!",
    	/*::[*/0x2A/*::]*/: "#N/A",
    	/*::[*/0x2B/*::]*/: "#GETTING_DATA",
    	/*::[*/0xFF/*::]*/: "#WTF?"
    };
    //var RBErr = evert_num(BErr);
    var RBErr = {
    	"#NULL!":        0x00,
    	"#DIV/0!":       0x07,
    	"#VALUE!":       0x0F,
    	"#REF!":         0x17,
    	"#NAME?":        0x1D,
    	"#NUM!":         0x24,
    	"#N/A":          0x2A,
    	"#GETTING_DATA": 0x2B,
    	"#WTF?":         0xFF
    };

    /* Parts enumerated in OPC spec, MS-XLSB and MS-XLSX */
    /* 12.3 Part Summary <SpreadsheetML> */
    /* 14.2 Part Summary <DrawingML> */
    /* [MS-XLSX] 2.1 Part Enumerations ; [MS-XLSB] 2.1.7 Part Enumeration */
    var ct2type/*{[string]:string}*/ = ({
    	/* Workbook */
    	"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml": "workbooks",
    	"application/vnd.ms-excel.sheet.macroEnabled.main+xml": "workbooks",
    	"application/vnd.ms-excel.sheet.binary.macroEnabled.main": "workbooks",
    	"application/vnd.ms-excel.addin.macroEnabled.main+xml": "workbooks",
    	"application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml": "workbooks",

    	/* Worksheet */
    	"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml": "sheets",
    	"application/vnd.ms-excel.worksheet": "sheets",
    	"application/vnd.ms-excel.binIndexWs": "TODO", /* Binary Index */

    	/* Chartsheet */
    	"application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml": "charts",
    	"application/vnd.ms-excel.chartsheet": "charts",

    	/* Macrosheet */
    	"application/vnd.ms-excel.macrosheet+xml": "macros",
    	"application/vnd.ms-excel.macrosheet": "macros",
    	"application/vnd.ms-excel.intlmacrosheet": "TODO",
    	"application/vnd.ms-excel.binIndexMs": "TODO", /* Binary Index */

    	/* Dialogsheet */
    	"application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml": "dialogs",
    	"application/vnd.ms-excel.dialogsheet": "dialogs",

    	/* Shared Strings */
    	"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml": "strs",
    	"application/vnd.ms-excel.sharedStrings": "strs",

    	/* Styles */
    	"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml": "styles",
    	"application/vnd.ms-excel.styles": "styles",

    	/* File Properties */
    	"application/vnd.openxmlformats-package.core-properties+xml": "coreprops",
    	"application/vnd.openxmlformats-officedocument.custom-properties+xml": "custprops",
    	"application/vnd.openxmlformats-officedocument.extended-properties+xml": "extprops",

    	/* Custom Data Properties */
    	"application/vnd.openxmlformats-officedocument.customXmlProperties+xml": "TODO",
    	"application/vnd.openxmlformats-officedocument.spreadsheetml.customProperty": "TODO",

    	/* Comments */
    	"application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml": "comments",
    	"application/vnd.ms-excel.comments": "comments",
    	"application/vnd.ms-excel.threadedcomments+xml": "threadedcomments",
    	"application/vnd.ms-excel.person+xml": "people",

    	/* Metadata (Stock/Geography and Dynamic Array) */
    	"application/vnd.openxmlformats-officedocument.spreadsheetml.sheetMetadata+xml": "metadata",
    	"application/vnd.ms-excel.sheetMetadata": "metadata",

    	/* PivotTable */
    	"application/vnd.ms-excel.pivotTable": "TODO",
    	"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotTable+xml": "TODO",

    	/* Chart Objects */
    	"application/vnd.openxmlformats-officedocument.drawingml.chart+xml": "TODO",

    	/* Chart Colors */
    	"application/vnd.ms-office.chartcolorstyle+xml": "TODO",

    	/* Chart Style */
    	"application/vnd.ms-office.chartstyle+xml": "TODO",

    	/* Chart Advanced */
    	"application/vnd.ms-office.chartex+xml": "TODO",

    	/* Calculation Chain */
    	"application/vnd.ms-excel.calcChain": "calcchains",
    	"application/vnd.openxmlformats-officedocument.spreadsheetml.calcChain+xml": "calcchains",

    	/* Printer Settings */
    	"application/vnd.openxmlformats-officedocument.spreadsheetml.printerSettings": "TODO",

    	/* ActiveX */
    	"application/vnd.ms-office.activeX": "TODO",
    	"application/vnd.ms-office.activeX+xml": "TODO",

    	/* Custom Toolbars */
    	"application/vnd.ms-excel.attachedToolbars": "TODO",

    	/* External Data Connections */
    	"application/vnd.ms-excel.connections": "TODO",
    	"application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml": "TODO",

    	/* External Links */
    	"application/vnd.ms-excel.externalLink": "links",
    	"application/vnd.openxmlformats-officedocument.spreadsheetml.externalLink+xml": "links",

    	/* PivotCache */
    	"application/vnd.ms-excel.pivotCacheDefinition": "TODO",
    	"application/vnd.ms-excel.pivotCacheRecords": "TODO",
    	"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotCacheDefinition+xml": "TODO",
    	"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotCacheRecords+xml": "TODO",

    	/* Query Table */
    	"application/vnd.ms-excel.queryTable": "TODO",
    	"application/vnd.openxmlformats-officedocument.spreadsheetml.queryTable+xml": "TODO",

    	/* Shared Workbook */
    	"application/vnd.ms-excel.userNames": "TODO",
    	"application/vnd.ms-excel.revisionHeaders": "TODO",
    	"application/vnd.ms-excel.revisionLog": "TODO",
    	"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionHeaders+xml": "TODO",
    	"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionLog+xml": "TODO",
    	"application/vnd.openxmlformats-officedocument.spreadsheetml.userNames+xml": "TODO",

    	/* Single Cell Table */
    	"application/vnd.ms-excel.tableSingleCells": "TODO",
    	"application/vnd.openxmlformats-officedocument.spreadsheetml.tableSingleCells+xml": "TODO",

    	/* Slicer */
    	"application/vnd.ms-excel.slicer": "TODO",
    	"application/vnd.ms-excel.slicerCache": "TODO",
    	"application/vnd.ms-excel.slicer+xml": "TODO",
    	"application/vnd.ms-excel.slicerCache+xml": "TODO",

    	/* Sort Map */
    	"application/vnd.ms-excel.wsSortMap": "TODO",

    	/* Table */
    	"application/vnd.ms-excel.table": "TODO",
    	"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml": "TODO",

    	/* Themes */
    	"application/vnd.openxmlformats-officedocument.theme+xml": "themes",

    	/* Theme Override */
    	"application/vnd.openxmlformats-officedocument.themeOverride+xml": "TODO",

    	/* Timeline */
    	"application/vnd.ms-excel.Timeline+xml": "TODO", /* verify */
    	"application/vnd.ms-excel.TimelineCache+xml": "TODO", /* verify */

    	/* VBA */
    	"application/vnd.ms-office.vbaProject": "vba",
    	"application/vnd.ms-office.vbaProjectSignature": "TODO",

    	/* Volatile Dependencies */
    	"application/vnd.ms-office.volatileDependencies": "TODO",
    	"application/vnd.openxmlformats-officedocument.spreadsheetml.volatileDependencies+xml": "TODO",

    	/* Control Properties */
    	"application/vnd.ms-excel.controlproperties+xml": "TODO",

    	/* Data Model */
    	"application/vnd.openxmlformats-officedocument.model+data": "TODO",

    	/* Survey */
    	"application/vnd.ms-excel.Survey+xml": "TODO",

    	/* Drawing */
    	"application/vnd.openxmlformats-officedocument.drawing+xml": "drawings",
    	"application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml": "TODO",
    	"application/vnd.openxmlformats-officedocument.drawingml.diagramColors+xml": "TODO",
    	"application/vnd.openxmlformats-officedocument.drawingml.diagramData+xml": "TODO",
    	"application/vnd.openxmlformats-officedocument.drawingml.diagramLayout+xml": "TODO",
    	"application/vnd.openxmlformats-officedocument.drawingml.diagramStyle+xml": "TODO",

    	/* VML */
    	"application/vnd.openxmlformats-officedocument.vmlDrawing": "TODO",

    	"application/vnd.openxmlformats-package.relationships+xml": "rels",
    	"application/vnd.openxmlformats-officedocument.oleObject": "TODO",

    	/* Image */
    	"image/png": "TODO",

    	"sheet": "js"
    }/*:any*/);

    function new_ct()/*:any*/ {
    	return ({
    		workbooks:[], sheets:[], charts:[], dialogs:[], macros:[],
    		rels:[], strs:[], comments:[], threadedcomments:[], links:[],
    		coreprops:[], extprops:[], custprops:[], themes:[], styles:[],
    		calcchains:[], vba: [], drawings: [], metadata: [], people:[],
    		TODO:[], xmlns: "" }/*:any*/);
    }

    function parse_ct(data/*:?string*/) {
    	var ct = new_ct();
    	if(!data || !data.match) return ct;
    	var ctext = {};
    	(data.match(tagregex)||[]).forEach(function(x) {
    		var y = parsexmltag(x);
    		switch(y[0].replace(nsregex,"<")) {
    			case '<?xml': break;
    			case '<Types': ct.xmlns = y['xmlns' + (y[0].match(/<(\w+):/)||["",""])[1] ]; break;
    			case '<Default': ctext[y.Extension] = y.ContentType; break;
    			case '<Override':
    				if(ct[ct2type[y.ContentType]] !== undefined) ct[ct2type[y.ContentType]].push(y.PartName);
    				break;
    		}
    	});
    	if(ct.xmlns !== XMLNS.CT) throw new Error("Unknown Namespace: " + ct.xmlns);
    	ct.calcchain = ct.calcchains.length > 0 ? ct.calcchains[0] : "";
    	ct.sst = ct.strs.length > 0 ? ct.strs[0] : "";
    	ct.style = ct.styles.length > 0 ? ct.styles[0] : "";
    	ct.defaults = ctext;
    	delete ct.calcchains;
    	return ct;
    }
    /* 9.3 Relationships */
    var RELS = ({
    	WB: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument",
    	SHEET: "http://sheetjs.openxmlformats.org/officeDocument/2006/relationships/officeDocument",
    	HLINK: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink",
    	VML: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/vmlDrawing",
    	XPATH: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/externalLinkPath",
    	XMISS: "http://schemas.microsoft.com/office/2006/relationships/xlExternalLinkPath/xlPathMissing",
    	XLINK: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/externalLink",
    	CXML: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/customXml",
    	CXMLP: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/customXmlProps",
    	CMNT: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/comments",
    	CORE_PROPS: "http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties",
    	EXT_PROPS: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties',
    	CUST_PROPS: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/custom-properties',
    	SST: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings",
    	STY: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles",
    	THEME: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme",
    	CHART: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/chart",
    	CHARTEX: "http://schemas.microsoft.com/office/2014/relationships/chartEx",
    	CS: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/chartsheet",
    	WS: [
    		"http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet",
    		"http://purl.oclc.org/ooxml/officeDocument/relationships/worksheet"
    	],
    	DS: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/dialogsheet",
    	MS: "http://schemas.microsoft.com/office/2006/relationships/xlMacrosheet",
    	IMG: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/image",
    	DRAW: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/drawing",
    	XLMETA: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/sheetMetadata",
    	TCMNT: "http://schemas.microsoft.com/office/2017/10/relationships/threadedComment",
    	PEOPLE: "http://schemas.microsoft.com/office/2017/10/relationships/person",
    	VBA: "http://schemas.microsoft.com/office/2006/relationships/vbaProject"
    }/*:any*/);


    /* 9.3.3 Representing Relationships */
    function get_rels_path(file/*:string*/)/*:string*/ {
    	var n = file.lastIndexOf("/");
    	return file.slice(0,n+1) + '_rels/' + file.slice(n+1) + ".rels";
    }

    function parse_rels(data/*:?string*/, currentFilePath/*:string*/) {
    	var rels = {"!id":{}};
    	if (!data) return rels;
    	if (currentFilePath.charAt(0) !== '/') {
    		currentFilePath = '/'+currentFilePath;
    	}
    	var hash = {};

    	(data.match(tagregex)||[]).forEach(function(x) {
    		var y = parsexmltag(x);
    		/* 9.3.2.2 OPC_Relationships */
    		if (y[0] === '<Relationship') {
    			var rel = {}; rel.Type = y.Type; rel.Target = y.Target; rel.Id = y.Id; if(y.TargetMode) rel.TargetMode = y.TargetMode;
    			var canonictarget = y.TargetMode === 'External' ? y.Target : resolve_path(y.Target, currentFilePath);
    			rels[canonictarget] = rel;
    			hash[y.Id] = rel;
    		}
    	});
    	rels["!id"] = hash;
    	return rels;
    }
    /* Open Document Format for Office Applications (OpenDocument) Version 1.2 */
    /* Part 3 Section 4 Manifest File */
    var CT_ODS = "application/vnd.oasis.opendocument.spreadsheet";
    function parse_manifest(d, opts) {
    	var str = xlml_normalize(d);
    	var Rn;
    	var FEtag;
    	while((Rn = xlmlregex.exec(str))) switch(Rn[3]) {
    		case 'manifest': break; // 4.2 <manifest:manifest>
    		case 'file-entry': // 4.3 <manifest:file-entry>
    			FEtag = parsexmltag(Rn[0], false);
    			if(FEtag.path == '/' && FEtag.type !== CT_ODS) throw new Error("This OpenDocument is not a spreadsheet");
    			break;
    		case 'encryption-data': // 4.4 <manifest:encryption-data>
    		case 'algorithm': // 4.5 <manifest:algorithm>
    		case 'start-key-generation': // 4.6 <manifest:start-key-generation>
    		case 'key-derivation': // 4.7 <manifest:key-derivation>
    			throw new Error("Unsupported ODS Encryption");
    		default: if(opts && opts.WTF) throw Rn;
    	}
    }

    /* ECMA-376 Part II 11.1 Core Properties Part */
    /* [MS-OSHARED] 2.3.3.2.[1-2].1 (PIDSI/PIDDSI) */
    var CORE_PROPS/*:Array<Array<string> >*/ = [
    	["cp:category", "Category"],
    	["cp:contentStatus", "ContentStatus"],
    	["cp:keywords", "Keywords"],
    	["cp:lastModifiedBy", "LastAuthor"],
    	["cp:lastPrinted", "LastPrinted"],
    	["cp:revision", "RevNumber"],
    	["cp:version", "Version"],
    	["dc:creator", "Author"],
    	["dc:description", "Comments"],
    	["dc:identifier", "Identifier"],
    	["dc:language", "Language"],
    	["dc:subject", "Subject"],
    	["dc:title", "Title"],
    	["dcterms:created", "CreatedDate", 'date'],
    	["dcterms:modified", "ModifiedDate", 'date']
    ];

    var CORE_PROPS_REGEX/*:Array<RegExp>*/ = /*#__PURE__*/(function() {
    	var r = new Array(CORE_PROPS.length);
    	for(var i = 0; i < CORE_PROPS.length; ++i) {
    		var f = CORE_PROPS[i];
    		var g = "(?:"+ f[0].slice(0,f[0].indexOf(":")) +":)"+ f[0].slice(f[0].indexOf(":")+1);
    		r[i] = new RegExp("<" + g + "[^>]*>([\\s\\S]*?)<\/" + g + ">");
    	}
    	return r;
    })();

    function parse_core_props(data) {
    	var p = {};
    	data = utf8read(data);

    	for(var i = 0; i < CORE_PROPS.length; ++i) {
    		var f = CORE_PROPS[i], cur = data.match(CORE_PROPS_REGEX[i]);
    		if(cur != null && cur.length > 0) p[f[1]] = unescapexml(cur[1]);
    		if(f[2] === 'date' && p[f[1]]) p[f[1]] = parseDate(p[f[1]]);
    	}

    	return p;
    }
    /* 15.2.12.3 Extended File Properties Part */
    /* [MS-OSHARED] 2.3.3.2.[1-2].1 (PIDSI/PIDDSI) */
    var EXT_PROPS/*:Array<Array<string> >*/ = [
    	["Application", "Application", "string"],
    	["AppVersion", "AppVersion", "string"],
    	["Company", "Company", "string"],
    	["DocSecurity", "DocSecurity", "string"],
    	["Manager", "Manager", "string"],
    	["HyperlinksChanged", "HyperlinksChanged", "bool"],
    	["SharedDoc", "SharedDoc", "bool"],
    	["LinksUpToDate", "LinksUpToDate", "bool"],
    	["ScaleCrop", "ScaleCrop", "bool"],
    	["HeadingPairs", "HeadingPairs", "raw"],
    	["TitlesOfParts", "TitlesOfParts", "raw"]
    ];
    function load_props_pairs(HP/*:string|Array<Array<any>>*/, TOP, props, opts) {
    	var v = [];
    	if(typeof HP == "string") v = parseVector(HP, opts);
    	else for(var j = 0; j < HP.length; ++j) v = v.concat(HP[j].map(function(hp) { return {v:hp}; }));
    	var parts = (typeof TOP == "string") ? parseVector(TOP, opts).map(function (x) { return x.v; }) : TOP;
    	var idx = 0, len = 0;
    	if(parts.length > 0) for(var i = 0; i !== v.length; i += 2) {
    		len = +(v[i+1].v);
    		switch(v[i].v) {
    			case "Worksheets":
    			case "工作表":
    			case "Листы":
    			case "أوراق العمل":
    			case "ワークシート":
    			case "גליונות עבודה":
    			case "Arbeitsblätter":
    			case "Çalışma Sayfaları":
    			case "Feuilles de calcul":
    			case "Fogli di lavoro":
    			case "Folhas de cálculo":
    			case "Planilhas":
    			case "Regneark":
    			case "Hojas de cálculo":
    			case "Werkbladen":
    				props.Worksheets = len;
    				props.SheetNames = parts.slice(idx, idx + len);
    				break;

    			case "Named Ranges":
    			case "Rangos con nombre":
    			case "名前付き一覧":
    			case "Benannte Bereiche":
    			case "Navngivne områder":
    				props.NamedRanges = len;
    				props.DefinedNames = parts.slice(idx, idx + len);
    				break;

    			case "Charts":
    			case "Diagramme":
    				props.Chartsheets = len;
    				props.ChartNames = parts.slice(idx, idx + len);
    				break;
    		}
    		idx += len;
    	}
    }

    function parse_ext_props(data, p, opts) {
    	var q = {}; if(!p) p = {};
    	data = utf8read(data);

    	EXT_PROPS.forEach(function(f) {
    		var xml = (data.match(matchtag(f[0]))||[])[1];
    		switch(f[2]) {
    			case "string": if(xml) p[f[1]] = unescapexml(xml); break;
    			case "bool": p[f[1]] = xml === "true"; break;
    			case "raw":
    				var cur = data.match(new RegExp("<" + f[0] + "[^>]*>([\\s\\S]*?)<\/" + f[0] + ">"));
    				if(cur && cur.length > 0) q[f[1]] = cur[1];
    				break;
    		}
    	});

    	if(q.HeadingPairs && q.TitlesOfParts) load_props_pairs(q.HeadingPairs, q.TitlesOfParts, p, opts);

    	return p;
    }
    /* 15.2.12.2 Custom File Properties Part */
    var custregex = /<[^>]+>[^<]*/g;
    function parse_cust_props(data/*:string*/, opts) {
    	var p = {}, name = "";
    	var m = data.match(custregex);
    	if(m) for(var i = 0; i != m.length; ++i) {
    		var x = m[i], y = parsexmltag(x);
    		switch(y[0]) {
    			case '<?xml': break;
    			case '<Properties': break;
    			case '<property': name = unescapexml(y.name); break;
    			case '</property>': name = null; break;
    			default: if (x.indexOf('<vt:') === 0) {
    				var toks = x.split('>');
    				var type = toks[0].slice(4), text = toks[1];
    				/* 22.4.2.32 (CT_Variant). Omit the binary types from 22.4 (Variant Types) */
    				switch(type) {
    					case 'lpstr': case 'bstr': case 'lpwstr':
    						p[name] = unescapexml(text);
    						break;
    					case 'bool':
    						p[name] = parsexmlbool(text);
    						break;
    					case 'i1': case 'i2': case 'i4': case 'i8': case 'int': case 'uint':
    						p[name] = parseInt(text, 10);
    						break;
    					case 'r4': case 'r8': case 'decimal':
    						p[name] = parseFloat(text);
    						break;
    					case 'filetime': case 'date':
    						p[name] = parseDate(text);
    						break;
    					case 'cy': case 'error':
    						p[name] = unescapexml(text);
    						break;
    					default:
    						if(type.slice(-1) == '/') break;
    						if(opts.WTF && typeof console !== 'undefined') console.warn('Unexpected', x, type, toks);
    				}
    			} else if(x.slice(0,2) === "</") ; else if(opts.WTF) throw new Error(x);
    		}
    	}
    	return p;
    }
    /* Common Name -> XLML Name */
    var XLMLDocPropsMap = {
    	Title: 'Title',
    	Subject: 'Subject',
    	Author: 'Author',
    	Keywords: 'Keywords',
    	Comments: 'Description',
    	LastAuthor: 'LastAuthor',
    	RevNumber: 'Revision',
    	Application: 'AppName',
    	/* TotalTime: 'TotalTime', */
    	LastPrinted: 'LastPrinted',
    	CreatedDate: 'Created',
    	ModifiedDate: 'LastSaved',
    	/* Pages */
    	/* Words */
    	/* Characters */
    	Category: 'Category',
    	/* PresentationFormat */
    	Manager: 'Manager',
    	Company: 'Company',
    	/* Guid */
    	/* HyperlinkBase */
    	/* Bytes */
    	/* Lines */
    	/* Paragraphs */
    	/* CharactersWithSpaces */
    	AppVersion: 'Version',

    	ContentStatus: 'ContentStatus', /* NOTE: missing from schema */
    	Identifier: 'Identifier', /* NOTE: missing from schema */
    	Language: 'Language' /* NOTE: missing from schema */
    };
    var evert_XLMLDPM;

    function xlml_set_prop(Props, tag/*:string*/, val) {
    	if(!evert_XLMLDPM) evert_XLMLDPM = evert(XLMLDocPropsMap);
    	tag = evert_XLMLDPM[tag] || tag;
    	Props[tag] = val;
    }
    /* [MS-DTYP] 2.3.3 FILETIME */
    /* [MS-OLEDS] 2.1.3 FILETIME (Packet Version) */
    /* [MS-OLEPS] 2.8 FILETIME (Packet Version) */
    function parse_FILETIME(blob) {
    	var dwLowDateTime = blob.read_shift(4), dwHighDateTime = blob.read_shift(4);
    	return new Date(((dwHighDateTime/1e7*Math.pow(2,32) + dwLowDateTime/1e7) - 11644473600)*1000).toISOString().replace(/\.000/,"");
    }

    /* [MS-OSHARED] 2.3.3.1.4 Lpstr */
    function parse_lpstr(blob, type, pad/*:?number*/) {
    	var start = blob.l;
    	var str = blob.read_shift(0, 'lpstr-cp');
    	if(pad) while((blob.l - start) & 3) ++blob.l;
    	return str;
    }

    /* [MS-OSHARED] 2.3.3.1.6 Lpwstr */
    function parse_lpwstr(blob, type, pad) {
    	var str = blob.read_shift(0, 'lpwstr');
    	if(pad) blob.l += (4 - ((str.length+1) & 3)) & 3;
    	return str;
    }


    /* [MS-OSHARED] 2.3.3.1.11 VtString */
    /* [MS-OSHARED] 2.3.3.1.12 VtUnalignedString */
    function parse_VtStringBase(blob, stringType, pad) {
    	if(stringType === 0x1F /*VT_LPWSTR*/) return parse_lpwstr(blob);
    	return parse_lpstr(blob, stringType, pad);
    }

    function parse_VtString(blob, t/*:number*/, pad/*:?boolean*/) { return parse_VtStringBase(blob, t, pad === false ? 0: 4); }
    function parse_VtUnalignedString(blob, t/*:number*/) { if(!t) throw new Error("VtUnalignedString must have positive length"); return parse_VtStringBase(blob, t, 0); }

    /* [MS-OSHARED] 2.3.3.1.7 VtVecLpwstrValue */
    function parse_VtVecLpwstrValue(blob)/*:Array<string>*/ {
    	var length = blob.read_shift(4);
    	var ret/*:Array<string>*/ = [];
    	for(var i = 0; i != length; ++i) {
    		var start = blob.l;
    		ret[i] = blob.read_shift(0, 'lpwstr').replace(chr0,'');
    		if((blob.l - start) & 0x02) blob.l += 2;
    	}
    	return ret;
    }

    /* [MS-OSHARED] 2.3.3.1.9 VtVecUnalignedLpstrValue */
    function parse_VtVecUnalignedLpstrValue(blob)/*:Array<string>*/ {
    	var length = blob.read_shift(4);
    	var ret/*:Array<string>*/ = [];
    	for(var i = 0; i != length; ++i) ret[i] = blob.read_shift(0, 'lpstr-cp').replace(chr0,'');
    	return ret;
    }


    /* [MS-OSHARED] 2.3.3.1.13 VtHeadingPair */
    function parse_VtHeadingPair(blob) {
    	var start = blob.l;
    	var headingString = parse_TypedPropertyValue(blob, VT_USTR);
    	if(blob[blob.l] == 0x00 && blob[blob.l+1] == 0x00 && ((blob.l - start) & 0x02)) blob.l += 2;
    	var headerParts = parse_TypedPropertyValue(blob, VT_I4);
    	return [headingString, headerParts];
    }

    /* [MS-OSHARED] 2.3.3.1.14 VtVecHeadingPairValue */
    function parse_VtVecHeadingPairValue(blob) {
    	var cElements = blob.read_shift(4);
    	var out = [];
    	for(var i = 0; i < cElements / 2; ++i) out.push(parse_VtHeadingPair(blob));
    	return out;
    }

    /* [MS-OLEPS] 2.18.1 Dictionary (uses 2.17, 2.16) */
    function parse_dictionary(blob,CodePage) {
    	var cnt = blob.read_shift(4);
    	var dict/*:{[number]:string}*/ = ({}/*:any*/);
    	for(var j = 0; j != cnt; ++j) {
    		var pid = blob.read_shift(4);
    		var len = blob.read_shift(4);
    		dict[pid] = blob.read_shift(len, (CodePage === 0x4B0 ?'utf16le':'utf8')).replace(chr0,'').replace(chr1,'!');
    		if(CodePage === 0x4B0 && (len % 2)) blob.l += 2;
    	}
    	if(blob.l & 3) blob.l = (blob.l>>2+1)<<2;
    	return dict;
    }

    /* [MS-OLEPS] 2.9 BLOB */
    function parse_BLOB(blob) {
    	var size = blob.read_shift(4);
    	var bytes = blob.slice(blob.l,blob.l+size);
    	blob.l += size;
    	if((size & 3) > 0) blob.l += (4 - (size & 3)) & 3;
    	return bytes;
    }

    /* [MS-OLEPS] 2.11 ClipboardData */
    function parse_ClipboardData(blob) {
    	// TODO
    	var o = {};
    	o.Size = blob.read_shift(4);
    	//o.Format = blob.read_shift(4);
    	blob.l += o.Size + 3 - (o.Size - 1) % 4;
    	return o;
    }

    /* [MS-OLEPS] 2.15 TypedPropertyValue */
    function parse_TypedPropertyValue(blob, type/*:number*/, _opts)/*:any*/ {
    	var t = blob.read_shift(2), ret, opts = _opts||{};
    	blob.l += 2;
    	if(type !== VT_VARIANT)
    	if(t !== type && VT_CUSTOM.indexOf(type)===-1 && !((type & 0xFFFE) == 0x101E && (t & 0xFFFE) == 0x101E)) throw new Error('Expected type ' + type + ' saw ' + t);
    	switch(type === VT_VARIANT ? t : type) {
    		case 0x02 /*VT_I2*/: ret = blob.read_shift(2, 'i'); if(!opts.raw) blob.l += 2; return ret;
    		case 0x03 /*VT_I4*/: ret = blob.read_shift(4, 'i'); return ret;
    		case 0x0B /*VT_BOOL*/: return blob.read_shift(4) !== 0x0;
    		case 0x13 /*VT_UI4*/: ret = blob.read_shift(4); return ret;
    		case 0x1E /*VT_LPSTR*/: return parse_lpstr(blob, t, 4).replace(chr0,'');
    		case 0x1F /*VT_LPWSTR*/: return parse_lpwstr(blob);
    		case 0x40 /*VT_FILETIME*/: return parse_FILETIME(blob);
    		case 0x41 /*VT_BLOB*/: return parse_BLOB(blob);
    		case 0x47 /*VT_CF*/: return parse_ClipboardData(blob);
    		case 0x50 /*VT_STRING*/: return parse_VtString(blob, t, !opts.raw).replace(chr0,'');
    		case 0x51 /*VT_USTR*/: return parse_VtUnalignedString(blob, t/*, 4*/).replace(chr0,'');
    		case 0x100C /*VT_VECTOR|VT_VARIANT*/: return parse_VtVecHeadingPairValue(blob);
    		case 0x101E /*VT_VECTOR|VT_LPSTR*/:
    		case 0x101F /*VT_VECTOR|VT_LPWSTR*/:
    			return t == 0x101F ? parse_VtVecLpwstrValue(blob) : parse_VtVecUnalignedLpstrValue(blob);
    		default: throw new Error("TypedPropertyValue unrecognized type " + type + " " + t);
    	}
    }

    /* [MS-OLEPS] 2.20 PropertySet */
    function parse_PropertySet(blob, PIDSI) {
    	var start_addr = blob.l;
    	var size = blob.read_shift(4);
    	var NumProps = blob.read_shift(4);
    	var Props = [], i = 0;
    	var CodePage = 0;
    	var Dictionary = -1, DictObj/*:{[number]:string}*/ = ({}/*:any*/);
    	for(i = 0; i != NumProps; ++i) {
    		var PropID = blob.read_shift(4);
    		var Offset = blob.read_shift(4);
    		Props[i] = [PropID, Offset + start_addr];
    	}
    	Props.sort(function(x,y) { return x[1] - y[1]; });
    	var PropH = {};
    	for(i = 0; i != NumProps; ++i) {
    		if(blob.l !== Props[i][1]) {
    			var fail = true;
    			if(i>0 && PIDSI) switch(PIDSI[Props[i-1][0]].t) {
    				case 0x02 /*VT_I2*/: if(blob.l+2 === Props[i][1]) { blob.l+=2; fail = false; } break;
    				case 0x50 /*VT_STRING*/: if(blob.l <= Props[i][1]) { blob.l=Props[i][1]; fail = false; } break;
    				case 0x100C /*VT_VECTOR|VT_VARIANT*/: if(blob.l <= Props[i][1]) { blob.l=Props[i][1]; fail = false; } break;
    			}
    			if((!PIDSI||i==0) && blob.l <= Props[i][1]) { fail=false; blob.l = Props[i][1]; }
    			if(fail) throw new Error("Read Error: Expected address " + Props[i][1] + ' at ' + blob.l + ' :' + i);
    		}
    		if(PIDSI) {
    			var piddsi = PIDSI[Props[i][0]];
    			PropH[piddsi.n] = parse_TypedPropertyValue(blob, piddsi.t, {raw:true});
    			if(piddsi.p === 'version') PropH[piddsi.n] = String(PropH[piddsi.n] >> 16) + "." + ("0000" + String(PropH[piddsi.n] & 0xFFFF)).slice(-4);
    			if(piddsi.n == "CodePage") switch(PropH[piddsi.n]) {
    				case 0: PropH[piddsi.n] = 1252;
    					/* falls through */
    				case 874:
    				case 932:
    				case 936:
    				case 949:
    				case 950:
    				case 1250:
    				case 1251:
    				case 1253:
    				case 1254:
    				case 1255:
    				case 1256:
    				case 1257:
    				case 1258:
    				case 10000:
    				case 1200:
    				case 1201:
    				case 1252:
    				case 65000: case -536:
    				case 65001: case -535:
    					set_cp(CodePage = (PropH[piddsi.n]>>>0) & 0xFFFF); break;
    				default: throw new Error("Unsupported CodePage: " + PropH[piddsi.n]);
    			}
    		} else {
    			if(Props[i][0] === 0x1) {
    				CodePage = PropH.CodePage = (parse_TypedPropertyValue(blob, VT_I2)/*:number*/);
    				set_cp(CodePage);
    				if(Dictionary !== -1) {
    					var oldpos = blob.l;
    					blob.l = Props[Dictionary][1];
    					DictObj = parse_dictionary(blob,CodePage);
    					blob.l = oldpos;
    				}
    			} else if(Props[i][0] === 0) {
    				if(CodePage === 0) { Dictionary = i; blob.l = Props[i+1][1]; continue; }
    				DictObj = parse_dictionary(blob,CodePage);
    			} else {
    				var name = DictObj[Props[i][0]];
    				var val;
    				/* [MS-OSHARED] 2.3.3.2.3.1.2 + PROPVARIANT */
    				switch(blob[blob.l]) {
    					case 0x41 /*VT_BLOB*/: blob.l += 4; val = parse_BLOB(blob); break;
    					case 0x1E /*VT_LPSTR*/: blob.l += 4; val = parse_VtString(blob, blob[blob.l-4]).replace(/\u0000+$/,""); break;
    					case 0x1F /*VT_LPWSTR*/: blob.l += 4; val = parse_VtString(blob, blob[blob.l-4]).replace(/\u0000+$/,""); break;
    					case 0x03 /*VT_I4*/: blob.l += 4; val = blob.read_shift(4, 'i'); break;
    					case 0x13 /*VT_UI4*/: blob.l += 4; val = blob.read_shift(4); break;
    					case 0x05 /*VT_R8*/: blob.l += 4; val = blob.read_shift(8, 'f'); break;
    					case 0x0B /*VT_BOOL*/: blob.l += 4; val = parsebool(blob, 4); break;
    					case 0x40 /*VT_FILETIME*/: blob.l += 4; val = parseDate(parse_FILETIME(blob)); break;
    					default: throw new Error("unparsed value: " + blob[blob.l]);
    				}
    				PropH[name] = val;
    			}
    		}
    	}
    	blob.l = start_addr + size; /* step ahead to skip padding */
    	return PropH;
    }

    /* [MS-OLEPS] 2.21 PropertySetStream */
    function parse_PropertySetStream(file, PIDSI, clsid) {
    	var blob = file.content;
    	if(!blob) return ({}/*:any*/);
    	prep_blob(blob, 0);

    	var NumSets, FMTID0, FMTID1, Offset0, Offset1 = 0;
    	blob.chk('feff', 'Byte Order: ');

    	/*var vers = */blob.read_shift(2); // TODO: check version
    	var SystemIdentifier = blob.read_shift(4);
    	var CLSID = blob.read_shift(16);
    	if(CLSID !== CFB.utils.consts.HEADER_CLSID && CLSID !== clsid) throw new Error("Bad PropertySet CLSID " + CLSID);
    	NumSets = blob.read_shift(4);
    	if(NumSets !== 1 && NumSets !== 2) throw new Error("Unrecognized #Sets: " + NumSets);
    	FMTID0 = blob.read_shift(16); Offset0 = blob.read_shift(4);

    	if(NumSets === 1 && Offset0 !== blob.l) throw new Error("Length mismatch: " + Offset0 + " !== " + blob.l);
    	else if(NumSets === 2) { FMTID1 = blob.read_shift(16); Offset1 = blob.read_shift(4); }
    	var PSet0 = parse_PropertySet(blob, PIDSI);

    	var rval = ({ SystemIdentifier: SystemIdentifier }/*:any*/);
    	for(var y in PSet0) rval[y] = PSet0[y];
    	//rval.blob = blob;
    	rval.FMTID = FMTID0;
    	//rval.PSet0 = PSet0;
    	if(NumSets === 1) return rval;
    	if(Offset1 - blob.l == 2) blob.l += 2;
    	if(blob.l !== Offset1) throw new Error("Length mismatch 2: " + blob.l + " !== " + Offset1);
    	var PSet1;
    	try { PSet1 = parse_PropertySet(blob, null); } catch(e) {/* empty */}
    	for(y in PSet1) rval[y] = PSet1[y];
    	rval.FMTID = [FMTID0, FMTID1]; // TODO: verify FMTID0/1
    	return rval;
    }

    function parsenoop2(blob, length) { blob.read_shift(length); return null; }

    function parslurp(blob, length, cb) {
    	var arr = [], target = blob.l + length;
    	while(blob.l < target) arr.push(cb(blob, target - blob.l));
    	if(target !== blob.l) throw new Error("Slurp error");
    	return arr;
    }

    function parsebool(blob, length/*:number*/) { return blob.read_shift(length) === 0x1; }

    function parseuint16(blob/*::, length:?number, opts:?any*/) { return blob.read_shift(2, 'u'); }
    function parseuint16a(blob, length/*:: :?number, opts:?any*/) { return parslurp(blob,length,parseuint16);}

    /* --- 2.5 Structures --- */

    /* [MS-XLS] 2.5.10 Bes (boolean or error) */
    function parse_Bes(blob/*::, length*/) {
    	var v = blob.read_shift(1), t = blob.read_shift(1);
    	return t === 0x01 ? v : v === 0x01;
    }

    /* [MS-XLS] 2.5.240 ShortXLUnicodeString */
    function parse_ShortXLUnicodeString(blob, length, opts) {
    	var cch = blob.read_shift(opts && opts.biff >= 12 ? 2 : 1);
    	var encoding = 'sbcs-cont';
    	if(opts && opts.biff >= 8) ;
    	if(!opts || opts.biff == 8 ) {
    		var fHighByte = blob.read_shift(1);
    		if(fHighByte) { encoding = 'dbcs-cont'; }
    	} else if(opts.biff == 12) {
    		encoding = 'wstr';
    	}
    	if(opts.biff >= 2 && opts.biff <= 5) encoding = 'cpstr';
    	var o = cch ? blob.read_shift(cch, encoding) : "";
    	return o;
    }

    /* 2.5.293 XLUnicodeRichExtendedString */
    function parse_XLUnicodeRichExtendedString(blob) {
    	var cch = blob.read_shift(2), flags = blob.read_shift(1);
    	var /*fHighByte = flags & 0x1,*/ fExtSt = flags & 0x4, fRichSt = flags & 0x8;
    	var width = 1 + (flags & 0x1); // 0x0 -> utf8, 0x1 -> dbcs
    	var cRun = 0, cbExtRst;
    	var z = {};
    	if(fRichSt) cRun = blob.read_shift(2);
    	if(fExtSt) cbExtRst = blob.read_shift(4);
    	var encoding = width == 2 ? 'dbcs-cont' : 'sbcs-cont';
    	var msg = cch === 0 ? "" : blob.read_shift(cch, encoding);
    	if(fRichSt) blob.l += 4 * cRun; //TODO: parse this
    	if(fExtSt) blob.l += cbExtRst; //TODO: parse this
    	z.t = msg;
    	if(!fRichSt) { z.raw = "<t>" + z.t + "</t>"; z.r = z.t; }
    	return z;
    }

    /* 2.5.296 XLUnicodeStringNoCch */
    function parse_XLUnicodeStringNoCch(blob, cch, opts) {
    	var retval;
    	if(opts) {
    		if(opts.biff >= 2 && opts.biff <= 5) return blob.read_shift(cch, 'cpstr');
    		if(opts.biff >= 12) return blob.read_shift(cch, 'dbcs-cont');
    	}
    	var fHighByte = blob.read_shift(1);
    	if(fHighByte===0) { retval = blob.read_shift(cch, 'sbcs-cont'); }
    	else { retval = blob.read_shift(cch, 'dbcs-cont'); }
    	return retval;
    }

    /* 2.5.294 XLUnicodeString */
    function parse_XLUnicodeString(blob, length, opts) {
    	var cch = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
    	if(cch === 0) { blob.l++; return ""; }
    	return parse_XLUnicodeStringNoCch(blob, cch, opts);
    }
    /* BIFF5 override */
    function parse_XLUnicodeString2(blob, length, opts) {
    	if(opts.biff > 5) return parse_XLUnicodeString(blob, length, opts);
    	var cch = blob.read_shift(1);
    	if(cch === 0) { blob.l++; return ""; }
    	return blob.read_shift(cch, (opts.biff <= 4 || !blob.lens ) ? 'cpstr' : 'sbcs-cont');
    }

    /* [MS-XLS] 2.5.61 ControlInfo */
    function parse_ControlInfo(blob/*::, length, opts*/) {
    	var flags = blob.read_shift(1);
    	blob.l++;
    	var accel = blob.read_shift(2);
    	blob.l += 2;
    	return [flags, accel];
    }

    /* [MS-OSHARED] 2.3.7.6 URLMoniker TODO: flags */
    function parse_URLMoniker(blob/*::, length, opts*/) {
    	var len = blob.read_shift(4), start = blob.l;
    	var extra = false;
    	if(len > 24) {
    		/* look ahead */
    		blob.l += len - 24;
    		if(blob.read_shift(16) === "795881f43b1d7f48af2c825dc4852763") extra = true;
    		blob.l = start;
    	}
    	var url = blob.read_shift((extra?len-24:len)>>1, 'utf16le').replace(chr0,"");
    	if(extra) blob.l += 24;
    	return url;
    }

    /* [MS-OSHARED] 2.3.7.8 FileMoniker TODO: all fields */
    function parse_FileMoniker(blob/*::, length*/) {
    	var cAnti = blob.read_shift(2);
    	var preamble = ""; while(cAnti-- > 0) preamble += "../";
    	var ansiPath = blob.read_shift(0, 'lpstr-ansi');
    	blob.l += 2; //var endServer = blob.read_shift(2);
    	if(blob.read_shift(2) != 0xDEAD) throw new Error("Bad FileMoniker");
    	var sz = blob.read_shift(4);
    	if(sz === 0) return preamble + ansiPath.replace(/\\/g,"/");
    	var bytes = blob.read_shift(4);
    	if(blob.read_shift(2) != 3) throw new Error("Bad FileMoniker");
    	var unicodePath = blob.read_shift(bytes>>1, 'utf16le').replace(chr0,"");
    	return preamble + unicodePath;
    }

    /* [MS-OSHARED] 2.3.7.2 HyperlinkMoniker TODO: all the monikers */
    function parse_HyperlinkMoniker(blob, length) {
    	var clsid = blob.read_shift(16);	switch(clsid) {
    		case "e0c9ea79f9bace118c8200aa004ba90b": return parse_URLMoniker(blob);
    		case "0303000000000000c000000000000046": return parse_FileMoniker(blob);
    		default: throw new Error("Unsupported Moniker " + clsid);
    	}
    }

    /* [MS-OSHARED] 2.3.7.9 HyperlinkString */
    function parse_HyperlinkString(blob/*::, length*/) {
    	var len = blob.read_shift(4);
    	var o = len > 0 ? blob.read_shift(len, 'utf16le').replace(chr0, "") : "";
    	return o;
    }

    /* [MS-OSHARED] 2.3.7.1 Hyperlink Object */
    function parse_Hyperlink(blob, length)/*:Hyperlink*/ {
    	var end = blob.l + length;
    	var sVer = blob.read_shift(4);
    	if(sVer !== 2) throw new Error("Unrecognized streamVersion: " + sVer);
    	var flags = blob.read_shift(2);
    	blob.l += 2;
    	var displayName, targetFrameName, moniker, oleMoniker, Loc="", guid, fileTime;
    	if(flags & 0x0010) displayName = parse_HyperlinkString(blob, end - blob.l);
    	if(flags & 0x0080) targetFrameName = parse_HyperlinkString(blob, end - blob.l);
    	if((flags & 0x0101) === 0x0101) moniker = parse_HyperlinkString(blob, end - blob.l);
    	if((flags & 0x0101) === 0x0001) oleMoniker = parse_HyperlinkMoniker(blob, end - blob.l);
    	if(flags & 0x0008) Loc = parse_HyperlinkString(blob, end - blob.l);
    	if(flags & 0x0020) guid = blob.read_shift(16);
    	if(flags & 0x0040) fileTime = parse_FILETIME(blob/*, 8*/);
    	blob.l = end;
    	var target = targetFrameName||moniker||oleMoniker||"";
    	if(target && Loc) target+="#"+Loc;
    	if(!target) target = "#" + Loc;
    	if((flags & 0x0002) && target.charAt(0) == "/" && target.charAt(1) != "/") target = "file://" + target;
    	var out = ({Target:target}/*:any*/);
    	if(guid) out.guid = guid;
    	if(fileTime) out.time = fileTime;
    	if(displayName) out.Tooltip = displayName;
    	return out;
    }

    /* 2.5.178 LongRGBA */
    function parse_LongRGBA(blob/*::, length*/) { var r = blob.read_shift(1), g = blob.read_shift(1), b = blob.read_shift(1), a = blob.read_shift(1); return [r,g,b,a]; }

    /* 2.5.177 LongRGB */
    function parse_LongRGB(blob, length) { var x = parse_LongRGBA(blob); x[3] = 0; return x; }


    /* [MS-XLS] 2.5.19 */
    function parse_XLSCell(blob/*::, length*/)/*:Cell*/ {
    	var rw = blob.read_shift(2); // 0-indexed
    	var col = blob.read_shift(2);
    	var ixfe = blob.read_shift(2);
    	return ({r:rw, c:col, ixfe:ixfe}/*:any*/);
    }

    /* [MS-XLS] 2.5.134 */
    function parse_frtHeader(blob) {
    	var rt = blob.read_shift(2);
    	var flags = blob.read_shift(2); // TODO: parse these flags
    	blob.l += 8;
    	return {type: rt, flags: flags};
    }



    function parse_OptXLUnicodeString(blob, length, opts) { return length === 0 ? "" : parse_XLUnicodeString2(blob, length, opts); }

    /* [MS-XLS] 2.5.344 */
    function parse_XTI(blob, length, opts) {
    	var w = opts.biff > 8 ? 4 : 2;
    	var iSupBook = blob.read_shift(w), itabFirst = blob.read_shift(w,'i'), itabLast = blob.read_shift(w,'i');
    	return [iSupBook, itabFirst, itabLast];
    }

    /* [MS-XLS] 2.5.218 */
    function parse_RkRec(blob) {
    	var ixfe = blob.read_shift(2);
    	var RK = parse_RkNumber(blob);
    	return [ixfe, RK];
    }

    /* [MS-XLS] 2.5.1 */
    function parse_AddinUdf(blob, length, opts) {
    	blob.l += 4; length -= 4;
    	var l = blob.l + length;
    	var udfName = parse_ShortXLUnicodeString(blob, length, opts);
    	var cb = blob.read_shift(2);
    	l -= blob.l;
    	if(cb !== l) throw new Error("Malformed AddinUdf: padding = " + l + " != " + cb);
    	blob.l += cb;
    	return udfName;
    }

    /* [MS-XLS] 2.5.209 TODO: Check sizes */
    function parse_Ref8U(blob/*::, length*/) {
    	var rwFirst = blob.read_shift(2);
    	var rwLast = blob.read_shift(2);
    	var colFirst = blob.read_shift(2);
    	var colLast = blob.read_shift(2);
    	return {s:{c:colFirst, r:rwFirst}, e:{c:colLast,r:rwLast}};
    }

    /* [MS-XLS] 2.5.211 */
    function parse_RefU(blob/*::, length*/) {
    	var rwFirst = blob.read_shift(2);
    	var rwLast = blob.read_shift(2);
    	var colFirst = blob.read_shift(1);
    	var colLast = blob.read_shift(1);
    	return {s:{c:colFirst, r:rwFirst}, e:{c:colLast,r:rwLast}};
    }

    /* [MS-XLS] 2.5.207 */
    var parse_Ref = parse_RefU;

    /* [MS-XLS] 2.5.143 */
    function parse_FtCmo(blob/*::, length*/) {
    	blob.l += 4;
    	var ot = blob.read_shift(2);
    	var id = blob.read_shift(2);
    	var flags = blob.read_shift(2);
    	blob.l+=12;
    	return [id, ot, flags];
    }

    /* [MS-XLS] 2.5.149 */
    function parse_FtNts(blob) {
    	var out = {};
    	blob.l += 4;
    	blob.l += 16; // GUID TODO
    	out.fSharedNote = blob.read_shift(2);
    	blob.l += 4;
    	return out;
    }

    /* [MS-XLS] 2.5.142 */
    function parse_FtCf(blob) {
    	var out = {};
    	blob.l += 4;
    	blob.cf = blob.read_shift(2);
    	return out;
    }

    /* [MS-XLS] 2.5.140 - 2.5.154 and friends */
    function parse_FtSkip(blob) { blob.l += 2; blob.l += blob.read_shift(2); }
    var FtTab = {
    	/*::[*/0x00/*::]*/: parse_FtSkip,      /* FtEnd */
    	/*::[*/0x04/*::]*/: parse_FtSkip,      /* FtMacro */
    	/*::[*/0x05/*::]*/: parse_FtSkip,      /* FtButton */
    	/*::[*/0x06/*::]*/: parse_FtSkip,      /* FtGmo */
    	/*::[*/0x07/*::]*/: parse_FtCf,        /* FtCf */
    	/*::[*/0x08/*::]*/: parse_FtSkip,      /* FtPioGrbit */
    	/*::[*/0x09/*::]*/: parse_FtSkip,      /* FtPictFmla */
    	/*::[*/0x0A/*::]*/: parse_FtSkip,      /* FtCbls */
    	/*::[*/0x0B/*::]*/: parse_FtSkip,      /* FtRbo */
    	/*::[*/0x0C/*::]*/: parse_FtSkip,      /* FtSbs */
    	/*::[*/0x0D/*::]*/: parse_FtNts,       /* FtNts */
    	/*::[*/0x0E/*::]*/: parse_FtSkip,      /* FtSbsFmla */
    	/*::[*/0x0F/*::]*/: parse_FtSkip,      /* FtGboData */
    	/*::[*/0x10/*::]*/: parse_FtSkip,      /* FtEdoData */
    	/*::[*/0x11/*::]*/: parse_FtSkip,      /* FtRboData */
    	/*::[*/0x12/*::]*/: parse_FtSkip,      /* FtCblsData */
    	/*::[*/0x13/*::]*/: parse_FtSkip,      /* FtLbsData */
    	/*::[*/0x14/*::]*/: parse_FtSkip,      /* FtCblsFmla */
    	/*::[*/0x15/*::]*/: parse_FtCmo
    };
    function parse_FtArray(blob, length/*::, ot*/) {
    	var tgt = blob.l + length;
    	var fts = [];
    	while(blob.l < tgt) {
    		var ft = blob.read_shift(2);
    		blob.l-=2;
    		try {
    			fts.push(FtTab[ft](blob, tgt - blob.l));
    		} catch(e) { blob.l = tgt; return fts; }
    	}
    	if(blob.l != tgt) blob.l = tgt; //throw new Error("bad Object Ft-sequence");
    	return fts;
    }

    /* --- 2.4 Records --- */

    /* [MS-XLS] 2.4.21 */
    function parse_BOF(blob, length) {
    	var o = {BIFFVer:0, dt:0};
    	o.BIFFVer = blob.read_shift(2); length -= 2;
    	if(length >= 2) { o.dt = blob.read_shift(2); blob.l -= 2; }
    	switch(o.BIFFVer) {
    		case 0x0600: /* BIFF8 */
    		case 0x0500: /* BIFF5 */
    		case 0x0400: /* BIFF4 */
    		case 0x0300: /* BIFF3 */
    		case 0x0200: /* BIFF2 */
    		case 0x0002: case 0x0007: /* BIFF2 */
    			break;
    		default: if(length > 6) throw new Error("Unexpected BIFF Ver " + o.BIFFVer);
    	}

    	blob.read_shift(length);
    	return o;
    }


    /* [MS-XLS] 2.4.146 */
    function parse_InterfaceHdr(blob, length) {
    	if(length === 0) return 0x04b0;
    	if((blob.read_shift(2))!==0x04b0);
    	return 0x04b0;
    }


    /* [MS-XLS] 2.4.349 */
    function parse_WriteAccess(blob, length, opts) {
    	if(opts.enc) { blob.l += length; return ""; }
    	var l = blob.l;
    	// TODO: make sure XLUnicodeString doesnt overrun
    	var UserName = parse_XLUnicodeString2(blob, 0, opts);
    	blob.read_shift(length + l - blob.l);
    	return UserName;
    }

    /* [MS-XLS] 2.4.351 */
    function parse_WsBool(blob, length, opts) {
    	var flags = opts && opts.biff == 8 || length == 2 ? blob.read_shift(2) : (blob.l += length, 0);
    	return { fDialog: flags & 0x10, fBelow: flags & 0x40, fRight: flags & 0x80 };
    }

    /* [MS-XLS] 2.4.28 */
    function parse_BoundSheet8(blob, length, opts) {
    	var pos = blob.read_shift(4);
    	var hidden = blob.read_shift(1) & 0x03;
    	var dt = blob.read_shift(1);
    	switch(dt) {
    		case 0: dt = 'Worksheet'; break;
    		case 1: dt = 'Macrosheet'; break;
    		case 2: dt = 'Chartsheet'; break;
    		case 6: dt = 'VBAModule'; break;
    	}
    	var name = parse_ShortXLUnicodeString(blob, 0, opts);
    	if(name.length === 0) name = "Sheet1";
    	return { pos:pos, hs:hidden, dt:dt, name:name };
    }

    /* [MS-XLS] 2.4.265 TODO */
    function parse_SST(blob, length)/*:SST*/ {
    	var end = blob.l + length;
    	var cnt = blob.read_shift(4);
    	var ucnt = blob.read_shift(4);
    	var strs/*:SST*/ = ([]/*:any*/);
    	for(var i = 0; i != ucnt && blob.l < end; ++i) {
    		strs.push(parse_XLUnicodeRichExtendedString(blob));
    	}
    	strs.Count = cnt; strs.Unique = ucnt;
    	return strs;
    }

    /* [MS-XLS] 2.4.107 */
    function parse_ExtSST(blob, length) {
    	var extsst = {};
    	extsst.dsst = blob.read_shift(2);
    	blob.l += length-2;
    	return extsst;
    }


    /* [MS-XLS] 2.4.221 TODO: check BIFF2-4 */
    function parse_Row(blob) {
    	var z = ({}/*:any*/);
    	z.r = blob.read_shift(2);
    	z.c = blob.read_shift(2);
    	z.cnt = blob.read_shift(2) - z.c;
    	var miyRw = blob.read_shift(2);
    	blob.l += 4; // reserved(2), unused(2)
    	var flags = blob.read_shift(1); // various flags
    	blob.l += 3; // reserved(8), ixfe(12), flags(4)
    	if(flags & 0x07) z.level = flags & 0x07;
    	// collapsed: flags & 0x10
    	if(flags & 0x20) z.hidden = true;
    	if(flags & 0x40) z.hpt = miyRw / 20;
    	return z;
    }


    /* [MS-XLS] 2.4.125 */
    function parse_ForceFullCalculation(blob) {
    	var header = parse_frtHeader(blob);
    	if(header.type != 0x08A3) throw new Error("Invalid Future Record " + header.type);
    	var fullcalc = blob.read_shift(4);
    	return fullcalc !== 0x0;
    }





    /* [MS-XLS] 2.4.215 rt */
    function parse_RecalcId(blob) {
    	blob.read_shift(2);
    	return blob.read_shift(4);
    }

    /* [MS-XLS] 2.4.87 */
    function parse_DefaultRowHeight(blob, length, opts) {
    	var f = 0;
    	if(!(opts && opts.biff == 2)) {
    		f = blob.read_shift(2);
    	}
    	var miyRw = blob.read_shift(2);
    	if((opts && opts.biff == 2)) {
    		f = 1 - (miyRw >> 15); miyRw &= 0x7fff;
    	}
    	var fl = {Unsynced:f&1,DyZero:(f&2)>>1,ExAsc:(f&4)>>2,ExDsc:(f&8)>>3};
    	return [fl, miyRw];
    }

    /* [MS-XLS] 2.4.345 TODO */
    function parse_Window1(blob) {
    	var xWn = blob.read_shift(2), yWn = blob.read_shift(2), dxWn = blob.read_shift(2), dyWn = blob.read_shift(2);
    	var flags = blob.read_shift(2), iTabCur = blob.read_shift(2), iTabFirst = blob.read_shift(2);
    	var ctabSel = blob.read_shift(2), wTabRatio = blob.read_shift(2);
    	return { Pos: [xWn, yWn], Dim: [dxWn, dyWn], Flags: flags, CurTab: iTabCur,
    		FirstTab: iTabFirst, Selected: ctabSel, TabRatio: wTabRatio };
    }
    /* [MS-XLS] 2.4.346 TODO */
    function parse_Window2(blob, length, opts) {
    	if(opts && opts.biff >= 2 && opts.biff < 5) return {};
    	var f = blob.read_shift(2);
    	return { RTL: f & 0x40 };
    }

    /* [MS-XLS] 2.4.189 TODO */
    function parse_Pane(/*blob, length, opts*/) {
    }

    /* [MS-XLS] 2.4.122 TODO */
    function parse_Font(blob, length, opts) {
    	var o/*:any*/ = {
    		dyHeight: blob.read_shift(2),
    		fl: blob.read_shift(2)
    	};
    	switch((opts && opts.biff) || 8) {
    		case 2: break;
    		case 3: case 4: blob.l += 2; break;
    		default: blob.l += 10; break;
    	}
    	o.name = parse_ShortXLUnicodeString(blob, 0, opts);
    	return o;
    }

    /* [MS-XLS] 2.4.149 */
    function parse_LabelSst(blob) {
    	var cell = parse_XLSCell(blob);
    	cell.isst = blob.read_shift(4);
    	return cell;
    }

    /* [MS-XLS] 2.4.148 */
    function parse_Label(blob, length, opts) {
    	if(opts.biffguess && opts.biff == 2) opts.biff = 5;
    	var target = blob.l + length;
    	var cell = parse_XLSCell(blob);
    	if(opts.biff == 2) blob.l++;
    	var str = parse_XLUnicodeString(blob, target - blob.l, opts);
    	cell.val = str;
    	return cell;
    }


    /* [MS-XLS] 2.4.126 Number Formats */
    function parse_Format(blob, length, opts) {
    	var numFmtId = blob.read_shift(2);
    	var fmtstr = parse_XLUnicodeString2(blob, 0, opts);
    	return [numFmtId, fmtstr];
    }
    var parse_BIFF2Format = parse_XLUnicodeString2;

    /* [MS-XLS] 2.4.90 */
    function parse_Dimensions(blob, length, opts) {
    	var end = blob.l + length;
    	var w = opts.biff == 8 || !opts.biff ? 4 : 2;
    	var r = blob.read_shift(w), R = blob.read_shift(w);
    	var c = blob.read_shift(2), C = blob.read_shift(2);
    	blob.l = end;
    	return {s: {r:r, c:c}, e: {r:R, c:C}};
    }

    /* [MS-XLS] 2.4.220 */
    function parse_RK(blob) {
    	var rw = blob.read_shift(2), col = blob.read_shift(2);
    	var rkrec = parse_RkRec(blob);
    	return {r:rw, c:col, ixfe:rkrec[0], rknum:rkrec[1]};
    }

    /* [MS-XLS] 2.4.175 */
    function parse_MulRk(blob, length) {
    	var target = blob.l + length - 2;
    	var rw = blob.read_shift(2), col = blob.read_shift(2);
    	var rkrecs = [];
    	while(blob.l < target) rkrecs.push(parse_RkRec(blob));
    	if(blob.l !== target) throw new Error("MulRK read error");
    	var lastcol = blob.read_shift(2);
    	if(rkrecs.length != lastcol - col + 1) throw new Error("MulRK length mismatch");
    	return {r:rw, c:col, C:lastcol, rkrec:rkrecs};
    }
    /* [MS-XLS] 2.4.174 */
    function parse_MulBlank(blob, length) {
    	var target = blob.l + length - 2;
    	var rw = blob.read_shift(2), col = blob.read_shift(2);
    	var ixfes = [];
    	while(blob.l < target) ixfes.push(blob.read_shift(2));
    	if(blob.l !== target) throw new Error("MulBlank read error");
    	var lastcol = blob.read_shift(2);
    	if(ixfes.length != lastcol - col + 1) throw new Error("MulBlank length mismatch");
    	return {r:rw, c:col, C:lastcol, ixfe:ixfes};
    }

    /* [MS-XLS] 2.5.20 2.5.249 TODO: interpret values here */
    function parse_CellStyleXF(blob, length, style, opts) {
    	var o = {};
    	var a = blob.read_shift(4), b = blob.read_shift(4);
    	var c = blob.read_shift(4), d = blob.read_shift(2);
    	o.patternType = XLSFillPattern[c >> 26];

    	if(!opts.cellStyles) return o;
    	o.alc = a & 0x07;
    	o.fWrap = (a >> 3) & 0x01;
    	o.alcV = (a >> 4) & 0x07;
    	o.fJustLast = (a >> 7) & 0x01;
    	o.trot = (a >> 8) & 0xFF;
    	o.cIndent = (a >> 16) & 0x0F;
    	o.fShrinkToFit = (a >> 20) & 0x01;
    	o.iReadOrder = (a >> 22) & 0x02;
    	o.fAtrNum = (a >> 26) & 0x01;
    	o.fAtrFnt = (a >> 27) & 0x01;
    	o.fAtrAlc = (a >> 28) & 0x01;
    	o.fAtrBdr = (a >> 29) & 0x01;
    	o.fAtrPat = (a >> 30) & 0x01;
    	o.fAtrProt = (a >> 31) & 0x01;

    	o.dgLeft = b & 0x0F;
    	o.dgRight = (b >> 4) & 0x0F;
    	o.dgTop = (b >> 8) & 0x0F;
    	o.dgBottom = (b >> 12) & 0x0F;
    	o.icvLeft = (b >> 16) & 0x7F;
    	o.icvRight = (b >> 23) & 0x7F;
    	o.grbitDiag = (b >> 30) & 0x03;

    	o.icvTop = c & 0x7F;
    	o.icvBottom = (c >> 7) & 0x7F;
    	o.icvDiag = (c >> 14) & 0x7F;
    	o.dgDiag = (c >> 21) & 0x0F;

    	o.icvFore = d & 0x7F;
    	o.icvBack = (d >> 7) & 0x7F;
    	o.fsxButton = (d >> 14) & 0x01;
    	return o;
    }
    //function parse_CellXF(blob, length, opts) {return parse_CellStyleXF(blob,length,0, opts);}
    //function parse_StyleXF(blob, length, opts) {return parse_CellStyleXF(blob,length,1, opts);}

    /* [MS-XLS] 2.4.353 TODO: actually do this right */
    function parse_XF(blob, length, opts) {
    	var o = {};
    	o.ifnt = blob.read_shift(2); o.numFmtId = blob.read_shift(2); o.flags = blob.read_shift(2);
    	o.fStyle = (o.flags >> 2) & 0x01;
    	length -= 6;
    	o.data = parse_CellStyleXF(blob, length, o.fStyle, opts);
    	return o;
    }

    /* [MS-XLS] 2.4.134 */
    function parse_Guts(blob) {
    	blob.l += 4;
    	var out = [blob.read_shift(2), blob.read_shift(2)];
    	if(out[0] !== 0) out[0]--;
    	if(out[1] !== 0) out[1]--;
    	if(out[0] > 7 || out[1] > 7) throw new Error("Bad Gutters: " + out.join("|"));
    	return out;
    }

    /* [MS-XLS] 2.4.24 */
    function parse_BoolErr(blob, length, opts) {
    	var cell = parse_XLSCell(blob);
    	if(opts.biff == 2 || length == 9) ++blob.l;
    	var val = parse_Bes(blob);
    	cell.val = val;
    	cell.t = (val === true || val === false) ? 'b' : 'e';
    	return cell;
    }

    /* [MS-XLS] 2.4.180 Number */
    function parse_Number(blob, length, opts) {
    	if(opts.biffguess && opts.biff == 2) opts.biff = 5;
    	var cell = parse_XLSCell(blob);
    	var xnum = parse_Xnum(blob);
    	cell.val = xnum;
    	return cell;
    }

    var parse_XLHeaderFooter = parse_OptXLUnicodeString; // TODO: parse 2.4.136

    /* [MS-XLS] 2.4.271 */
    function parse_SupBook(blob, length, opts) {
    	var end = blob.l + length;
    	var ctab = blob.read_shift(2);
    	var cch = blob.read_shift(2);
    	opts.sbcch = cch;
    	if(cch == 0x0401 || cch == 0x3A01) return [cch, ctab];
    	if(cch < 0x01 || cch >0xff) throw new Error("Unexpected SupBook type: "+cch);
    	var virtPath = parse_XLUnicodeStringNoCch(blob, cch);
    	/* TODO: 2.5.277 Virtual Path */
    	var rgst = [];
    	while(end > blob.l) rgst.push(parse_XLUnicodeString(blob));
    	return [cch, ctab, virtPath, rgst];
    }

    /* [MS-XLS] 2.4.105 TODO */
    function parse_ExternName(blob, length, opts) {
    	var flags = blob.read_shift(2);
    	var body;
    	var o = ({
    		fBuiltIn: flags & 0x01,
    		fWantAdvise: (flags >>> 1) & 0x01,
    		fWantPict: (flags >>> 2) & 0x01,
    		fOle: (flags >>> 3) & 0x01,
    		fOleLink: (flags >>> 4) & 0x01,
    		cf: (flags >>> 5) & 0x3FF,
    		fIcon: flags >>> 15 & 0x01
    	}/*:any*/);
    	if(opts.sbcch === 0x3A01) body = parse_AddinUdf(blob, length-2, opts);
    	//else throw new Error("unsupported SupBook cch: " + opts.sbcch);
    	o.body = body || blob.read_shift(length-2);
    	if(typeof body === "string") o.Name = body;
    	return o;
    }

    /* [MS-XLS] 2.4.150 TODO */
    var XLSLblBuiltIn = [
    	"_xlnm.Consolidate_Area",
    	"_xlnm.Auto_Open",
    	"_xlnm.Auto_Close",
    	"_xlnm.Extract",
    	"_xlnm.Database",
    	"_xlnm.Criteria",
    	"_xlnm.Print_Area",
    	"_xlnm.Print_Titles",
    	"_xlnm.Recorder",
    	"_xlnm.Data_Form",
    	"_xlnm.Auto_Activate",
    	"_xlnm.Auto_Deactivate",
    	"_xlnm.Sheet_Title",
    	"_xlnm._FilterDatabase"
    ];
    function parse_Lbl(blob, length, opts) {
    	var target = blob.l + length;
    	var flags = blob.read_shift(2);
    	var chKey = blob.read_shift(1);
    	var cch = blob.read_shift(1);
    	var cce = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
    	var itab = 0;
    	if(!opts || opts.biff >= 5) {
    		if(opts.biff != 5) blob.l += 2;
    		itab = blob.read_shift(2);
    		if(opts.biff == 5) blob.l += 2;
    		blob.l += 4;
    	}
    	var name = parse_XLUnicodeStringNoCch(blob, cch, opts);
    	if(flags & 0x20) name = XLSLblBuiltIn[name.charCodeAt(0)];
    	var npflen = target - blob.l; if(opts && opts.biff == 2) --npflen;
    	/*jshint -W018 */
    	var rgce = (target == blob.l || cce === 0 || !(npflen > 0)) ? [] : parse_NameParsedFormula(blob, npflen, opts, cce);
    	/*jshint +W018 */
    	return {
    		chKey: chKey,
    		Name: name,
    		itab: itab,
    		rgce: rgce
    	};
    }

    /* [MS-XLS] 2.4.106 TODO: verify filename encoding */
    function parse_ExternSheet(blob, length, opts) {
    	if(opts.biff < 8) return parse_BIFF5ExternSheet(blob, length, opts);
    	var o = [], target = blob.l + length, len = blob.read_shift(opts.biff > 8 ? 4 : 2);
    	while(len-- !== 0) o.push(parse_XTI(blob, opts.biff > 8 ? 12 : 6, opts));
    		// [iSupBook, itabFirst, itabLast];
    	if(blob.l != target) throw new Error("Bad ExternSheet: " + blob.l + " != " + target);
    	return o;
    }
    function parse_BIFF5ExternSheet(blob, length, opts) {
    	if(blob[blob.l + 1] == 0x03) blob[blob.l]++;
    	var o = parse_ShortXLUnicodeString(blob, length, opts);
    	return o.charCodeAt(0) == 0x03 ? o.slice(1) : o;
    }

    /* [MS-XLS] 2.4.176 TODO: check older biff */
    function parse_NameCmt(blob, length, opts) {
    	if(opts.biff < 8) { blob.l += length; return; }
    	var cchName = blob.read_shift(2);
    	var cchComment = blob.read_shift(2);
    	var name = parse_XLUnicodeStringNoCch(blob, cchName, opts);
    	var comment = parse_XLUnicodeStringNoCch(blob, cchComment, opts);
    	return [name, comment];
    }

    /* [MS-XLS] 2.4.260 */
    function parse_ShrFmla(blob, length, opts) {
    	var ref = parse_RefU(blob);
    	blob.l++;
    	var cUse = blob.read_shift(1);
    	length -= 8;
    	return [parse_SharedParsedFormula(blob, length, opts), cUse, ref];
    }

    /* [MS-XLS] 2.4.4 TODO */
    function parse_Array(blob, length, opts) {
    	var ref = parse_Ref(blob);
    	/* TODO: fAlwaysCalc */
    	switch(opts.biff) {
    		case 2: blob.l ++; length -= 7; break;
    		case 3: case 4: blob.l += 2; length -= 8; break;
    		default: blob.l += 6; length -= 12;
    	}
    	return [ref, parse_ArrayParsedFormula(blob, length, opts)];
    }

    /* [MS-XLS] 2.4.173 */
    function parse_MTRSettings(blob) {
    	var fMTREnabled = blob.read_shift(4) !== 0x00;
    	var fUserSetThreadCount = blob.read_shift(4) !== 0x00;
    	var cUserThreadCount = blob.read_shift(4);
    	return [fMTREnabled, fUserSetThreadCount, cUserThreadCount];
    }

    /* [MS-XLS] 2.5.186 TODO: BIFF5 */
    function parse_NoteSh(blob, length, opts) {
    	if(opts.biff < 8) return;
    	var row = blob.read_shift(2), col = blob.read_shift(2);
    	var flags = blob.read_shift(2), idObj = blob.read_shift(2);
    	var stAuthor = parse_XLUnicodeString2(blob, 0, opts);
    	if(opts.biff < 8) blob.read_shift(1);
    	return [{r:row,c:col}, stAuthor, idObj, flags];
    }

    /* [MS-XLS] 2.4.179 */
    function parse_Note(blob, length, opts) {
    	/* TODO: Support revisions */
    	return parse_NoteSh(blob, length, opts);
    }

    /* [MS-XLS] 2.4.168 */
    function parse_MergeCells(blob, length)/*:Array<Range>*/ {
    	var merges/*:Array<Range>*/ = [];
    	var cmcs = blob.read_shift(2);
    	while (cmcs--) merges.push(parse_Ref8U(blob));
    	return merges;
    }

    /* [MS-XLS] 2.4.181 TODO: parse all the things! */
    function parse_Obj(blob, length, opts) {
    	if(opts && opts.biff < 8) return parse_BIFF5Obj(blob, length, opts);
    	var cmo = parse_FtCmo(blob); // id, ot, flags
    	var fts = parse_FtArray(blob, length-22);
    	return { cmo: cmo, ft:fts };
    }
    /* from older spec */
    var parse_BIFF5OT = {
    0x08: function(blob, length) {
    	var tgt = blob.l + length;
    	blob.l += 10; // todo
    	var cf = blob.read_shift(2);
    	blob.l += 4;
    	blob.l += 2; //var cbPictFmla = blob.read_shift(2);
    	blob.l += 2;
    	blob.l += 2; //var grbit = blob.read_shift(2);
    	blob.l += 4;
    	var cchName = blob.read_shift(1);
    	blob.l += cchName; // TODO: stName
    	blob.l = tgt; // TODO: fmla
    	return { fmt:cf };
    }
    };

    function parse_BIFF5Obj(blob, length, opts) {
    	blob.l += 4; //var cnt = blob.read_shift(4);
    	var ot = blob.read_shift(2);
    	var id = blob.read_shift(2);
    	var grbit = blob.read_shift(2);
    	blob.l += 2; //var colL = blob.read_shift(2);
    	blob.l += 2; //var dxL = blob.read_shift(2);
    	blob.l += 2; //var rwT = blob.read_shift(2);
    	blob.l += 2; //var dyT = blob.read_shift(2);
    	blob.l += 2; //var colR = blob.read_shift(2);
    	blob.l += 2; //var dxR = blob.read_shift(2);
    	blob.l += 2; //var rwB = blob.read_shift(2);
    	blob.l += 2; //var dyB = blob.read_shift(2);
    	blob.l += 2; //var cbMacro = blob.read_shift(2);
    	blob.l += 6;
    	length -= 36;
    	var fts = [];
    	fts.push((parse_BIFF5OT[ot]||parsenoop)(blob, length, opts));
    	return { cmo: [id, ot, grbit], ft:fts };
    }

    /* [MS-XLS] 2.4.329 TODO: parse properly */
    function parse_TxO(blob, length, opts) {
    	var s = blob.l;
    	var texts = "";
    try {
    	blob.l += 4;
    	var ot = (opts.lastobj||{cmo:[0,0]}).cmo[1];
    	var controlInfo; // eslint-disable-line no-unused-vars
    	if([0,5,7,11,12,14].indexOf(ot) == -1) blob.l += 6;
    	else controlInfo = parse_ControlInfo(blob, 6, opts); // eslint-disable-line no-unused-vars
    	var cchText = blob.read_shift(2);
    	/*var cbRuns = */blob.read_shift(2);
    	/*var ifntEmpty = */parseuint16(blob, 2);
    	var len = blob.read_shift(2);
    	blob.l += len;
    	//var fmla = parse_ObjFmla(blob, s + length - blob.l);

    	for(var i = 1; i < blob.lens.length-1; ++i) {
    		if(blob.l-s != blob.lens[i]) throw new Error("TxO: bad continue record");
    		var hdr = blob[blob.l];
    		var t = parse_XLUnicodeStringNoCch(blob, blob.lens[i+1]-blob.lens[i]-1);
    		texts += t;
    		if(texts.length >= (hdr ? cchText : 2*cchText)) break;
    	}
    	if(texts.length !== cchText && texts.length !== cchText*2) {
    		throw new Error("cchText: " + cchText + " != " + texts.length);
    	}

    	blob.l = s + length;
    	/* [MS-XLS] 2.5.272 TxORuns */
    //	var rgTxoRuns = [];
    //	for(var j = 0; j != cbRuns/8-1; ++j) blob.l += 8;
    //	var cchText2 = blob.read_shift(2);
    //	if(cchText2 !== cchText) throw new Error("TxOLastRun mismatch: " + cchText2 + " " + cchText);
    //	blob.l += 6;
    //	if(s + length != blob.l) throw new Error("TxO " + (s + length) + ", at " + blob.l);
    	return { t: texts };
    } catch(e) { blob.l = s + length; return { t: texts }; }
    }

    /* [MS-XLS] 2.4.140 */
    function parse_HLink(blob, length) {
    	var ref = parse_Ref8U(blob);
    	blob.l += 16; /* CLSID */
    	var hlink = parse_Hyperlink(blob, length-24);
    	return [ref, hlink];
    }


    /* [MS-XLS] 2.4.141 */
    function parse_HLinkTooltip(blob, length) {
    	blob.read_shift(2);
    	var ref = parse_Ref8U(blob);
    	var wzTooltip = blob.read_shift((length-10)/2, 'dbcs-cont');
    	wzTooltip = wzTooltip.replace(chr0,"");
    	return [ref, wzTooltip];
    }

    /* [MS-XLS] 2.4.63 */
    function parse_Country(blob)/*:[string|number, string|number]*/ {
    	var o = [0,0], d;
    	d = blob.read_shift(2); o[0] = CountryEnum[d] || d;
    	d = blob.read_shift(2); o[1] = CountryEnum[d] || d;
    	return o;
    }

    /* [MS-XLS] 2.4.50 ClrtClient */
    function parse_ClrtClient(blob) {
    	var ccv = blob.read_shift(2);
    	var o = [];
    	while(ccv-->0) o.push(parse_LongRGB(blob));
    	return o;
    }

    /* [MS-XLS] 2.4.188 */
    function parse_Palette(blob) {
    	var ccv = blob.read_shift(2);
    	var o = [];
    	while(ccv-->0) o.push(parse_LongRGB(blob));
    	return o;
    }

    /* [MS-XLS] 2.4.354 */
    function parse_XFCRC(blob) {
    	blob.l += 2;
    	var o = {cxfs:0, crc:0};
    	o.cxfs = blob.read_shift(2);
    	o.crc = blob.read_shift(4);
    	return o;
    }

    /* [MS-XLS] 2.4.53 TODO: parse flags */
    /* [MS-XLSB] 2.4.323 TODO: parse flags */
    function parse_ColInfo(blob, length, opts) {
    	if(!opts.cellStyles) return parsenoop(blob, length);
    	var w = opts && opts.biff >= 12 ? 4 : 2;
    	var colFirst = blob.read_shift(w);
    	var colLast = blob.read_shift(w);
    	var coldx = blob.read_shift(w);
    	var ixfe = blob.read_shift(w);
    	var flags = blob.read_shift(2);
    	if(w == 2) blob.l += 2;
    	var o = ({s:colFirst, e:colLast, w:coldx, ixfe:ixfe, flags:flags}/*:any*/);
    	if(opts.biff >= 5 || !opts.biff) o.level = (flags >> 8) & 0x7;
    	return o;
    }

    /* [MS-XLS] 2.4.257 */
    function parse_Setup(blob, length) {
    	var o = {};
    	if(length < 32) return o;
    	blob.l += 16;
    	o.header = parse_Xnum(blob);
    	o.footer = parse_Xnum(blob);
    	blob.l += 2;
    	return o;
    }

    /* [MS-XLS] 2.4.261 */
    function parse_ShtProps(blob, length, opts) {
    	var def = {area:false};
    	if(opts.biff != 5) { blob.l += length; return def; }
    	var d = blob.read_shift(1); blob.l += 3;
    	if((d & 0x10)) def.area = true;
    	return def;
    }

    var parse_Blank = parse_XLSCell; /* [MS-XLS] 2.4.20 Just the cell */
    var parse_Scl = parseuint16a; /* [MS-XLS] 2.4.247 num, den */
    var parse_String = parse_XLUnicodeString; /* [MS-XLS] 2.4.268 */

    /* --- Specific to versions before BIFF8 --- */
    function parse_ImData(blob) {
    	var cf = blob.read_shift(2);
    	var env = blob.read_shift(2);
    	var lcb = blob.read_shift(4);
    	var o = {fmt:cf, env:env, len:lcb, data:blob.slice(blob.l,blob.l+lcb)};
    	blob.l += lcb;
    	return o;
    }

    /* BIFF2_??? where ??? is the name from [XLS] */
    function parse_BIFF2STR(blob, length, opts) {
    	if(opts.biffguess && opts.biff == 5) opts.biff = 2;
    	var cell = parse_XLSCell(blob);
    	++blob.l;
    	var str = parse_XLUnicodeString2(blob, length-7, opts);
    	cell.t = 'str';
    	cell.val = str;
    	return cell;
    }

    function parse_BIFF2NUM(blob/*::, length*/) {
    	var cell = parse_XLSCell(blob);
    	++blob.l;
    	var num = parse_Xnum(blob);
    	cell.t = 'n';
    	cell.val = num;
    	return cell;
    }

    function parse_BIFF2INT(blob) {
    	var cell = parse_XLSCell(blob);
    	++blob.l;
    	var num = blob.read_shift(2);
    	cell.t = 'n';
    	cell.val = num;
    	return cell;
    }

    function parse_BIFF2STRING(blob) {
    	var cch = blob.read_shift(1);
    	if(cch === 0) { blob.l++; return ""; }
    	return blob.read_shift(cch, 'sbcs-cont');
    }

    /* TODO: convert to BIFF8 font struct */
    function parse_BIFF2FONTXTRA(blob, length) {
    	blob.l += 6; // unknown
    	blob.l += 2; // font weight "bls"
    	blob.l += 1; // charset
    	blob.l += 3; // unknown
    	blob.l += 1; // font family
    	blob.l += length - 13;
    }

    /* TODO: parse rich text runs */
    function parse_RString(blob, length, opts) {
    	var end = blob.l + length;
    	var cell = parse_XLSCell(blob);
    	var cch = blob.read_shift(2);
    	var str = parse_XLUnicodeStringNoCch(blob, cch, opts);
    	blob.l = end;
    	cell.t = 'str';
    	cell.val = str;
    	return cell;
    }
    /* from js-harb (C) 2014-present  SheetJS */
    var DBF_SUPPORTED_VERSIONS = [0x02, 0x03, 0x30, 0x31, 0x83, 0x8B, 0x8C, 0xF5];
    var DBF = /*#__PURE__*/(function() {
    var dbf_codepage_map = {
    	/* Code Pages Supported by Visual FoxPro */
    	/*::[*/0x01/*::]*/:   437,           /*::[*/0x02/*::]*/:   850,
    	/*::[*/0x03/*::]*/:  1252,           /*::[*/0x04/*::]*/: 10000,
    	/*::[*/0x64/*::]*/:   852,           /*::[*/0x65/*::]*/:   866,
    	/*::[*/0x66/*::]*/:   865,           /*::[*/0x67/*::]*/:   861,
    	/*::[*/0x68/*::]*/:   895,           /*::[*/0x69/*::]*/:   620,
    	/*::[*/0x6A/*::]*/:   737,           /*::[*/0x6B/*::]*/:   857,
    	/*::[*/0x78/*::]*/:   950,           /*::[*/0x79/*::]*/:   949,
    	/*::[*/0x7A/*::]*/:   936,           /*::[*/0x7B/*::]*/:   932,
    	/*::[*/0x7C/*::]*/:   874,           /*::[*/0x7D/*::]*/:  1255,
    	/*::[*/0x7E/*::]*/:  1256,           /*::[*/0x96/*::]*/: 10007,
    	/*::[*/0x97/*::]*/: 10029,           /*::[*/0x98/*::]*/: 10006,
    	/*::[*/0xC8/*::]*/:  1250,           /*::[*/0xC9/*::]*/:  1251,
    	/*::[*/0xCA/*::]*/:  1254,           /*::[*/0xCB/*::]*/:  1253,

    	/* shapefile DBF extension */
    	/*::[*/0x00/*::]*/: 20127,           /*::[*/0x08/*::]*/:   865,
    	/*::[*/0x09/*::]*/:   437,           /*::[*/0x0A/*::]*/:   850,
    	/*::[*/0x0B/*::]*/:   437,           /*::[*/0x0D/*::]*/:   437,
    	/*::[*/0x0E/*::]*/:   850,           /*::[*/0x0F/*::]*/:   437,
    	/*::[*/0x10/*::]*/:   850,           /*::[*/0x11/*::]*/:   437,
    	/*::[*/0x12/*::]*/:   850,           /*::[*/0x13/*::]*/:   932,
    	/*::[*/0x14/*::]*/:   850,           /*::[*/0x15/*::]*/:   437,
    	/*::[*/0x16/*::]*/:   850,           /*::[*/0x17/*::]*/:   865,
    	/*::[*/0x18/*::]*/:   437,           /*::[*/0x19/*::]*/:   437,
    	/*::[*/0x1A/*::]*/:   850,           /*::[*/0x1B/*::]*/:   437,
    	/*::[*/0x1C/*::]*/:   863,           /*::[*/0x1D/*::]*/:   850,
    	/*::[*/0x1F/*::]*/:   852,           /*::[*/0x22/*::]*/:   852,
    	/*::[*/0x23/*::]*/:   852,           /*::[*/0x24/*::]*/:   860,
    	/*::[*/0x25/*::]*/:   850,           /*::[*/0x26/*::]*/:   866,
    	/*::[*/0x37/*::]*/:   850,           /*::[*/0x40/*::]*/:   852,
    	/*::[*/0x4D/*::]*/:   936,           /*::[*/0x4E/*::]*/:   949,
    	/*::[*/0x4F/*::]*/:   950,           /*::[*/0x50/*::]*/:   874,
    	/*::[*/0x57/*::]*/:  1252,           /*::[*/0x58/*::]*/:  1252,
    	/*::[*/0x59/*::]*/:  1252,           /*::[*/0x6C/*::]*/:   863,
    	/*::[*/0x86/*::]*/:   737,           /*::[*/0x87/*::]*/:   852,
    	/*::[*/0x88/*::]*/:   857,           /*::[*/0xCC/*::]*/:  1257,

    	/*::[*/0xFF/*::]*/: 16969
    };
    var dbf_reverse_map = evert({
    	/*::[*/0x01/*::]*/:   437,           /*::[*/0x02/*::]*/:   850,
    	/*::[*/0x03/*::]*/:  1252,           /*::[*/0x04/*::]*/: 10000,
    	/*::[*/0x64/*::]*/:   852,           /*::[*/0x65/*::]*/:   866,
    	/*::[*/0x66/*::]*/:   865,           /*::[*/0x67/*::]*/:   861,
    	/*::[*/0x68/*::]*/:   895,           /*::[*/0x69/*::]*/:   620,
    	/*::[*/0x6A/*::]*/:   737,           /*::[*/0x6B/*::]*/:   857,
    	/*::[*/0x78/*::]*/:   950,           /*::[*/0x79/*::]*/:   949,
    	/*::[*/0x7A/*::]*/:   936,           /*::[*/0x7B/*::]*/:   932,
    	/*::[*/0x7C/*::]*/:   874,           /*::[*/0x7D/*::]*/:  1255,
    	/*::[*/0x7E/*::]*/:  1256,           /*::[*/0x96/*::]*/: 10007,
    	/*::[*/0x97/*::]*/: 10029,           /*::[*/0x98/*::]*/: 10006,
    	/*::[*/0xC8/*::]*/:  1250,           /*::[*/0xC9/*::]*/:  1251,
    	/*::[*/0xCA/*::]*/:  1254,           /*::[*/0xCB/*::]*/:  1253,
    	/*::[*/0x00/*::]*/: 20127
    });
    /* TODO: find an actual specification */
    function dbf_to_aoa(buf, opts)/*:AOA*/ {
    	var out/*:AOA*/ = [];
    	var d/*:Block*/ = (new_raw_buf(1)/*:any*/);
    	switch(opts.type) {
    		case 'base64': d = s2a(Base64_decode(buf)); break;
    		case 'binary': d = s2a(buf); break;
    		case 'buffer':
    		case 'array': d = buf; break;
    	}
    	prep_blob(d, 0);

    	/* header */
    	var ft = d.read_shift(1);
    	var memo = !!(ft & 0x88);
    	var vfp = false, l7 = false;
    	switch(ft) {
    		case 0x02: break; // dBASE II
    		case 0x03: break; // dBASE III
    		case 0x30: vfp = true; memo = true; break; // VFP
    		case 0x31: vfp = true; memo = true; break; // VFP with autoincrement
    		// 0x43 dBASE IV SQL table files
    		// 0x63 dBASE IV SQL system files
    		case 0x83: break; // dBASE III with memo
    		case 0x8B: break; // dBASE IV with memo
    		case 0x8C: l7 = true; break; // dBASE Level 7 with memo
    		// case 0xCB dBASE IV SQL table files with memo
    		case 0xF5: break; // FoxPro 2.x with memo
    		// case 0xFB FoxBASE
    		default: throw new Error("DBF Unsupported Version: " + ft.toString(16));
    	}

    	var nrow = 0, fpos = 0x0209;
    	if(ft == 0x02) nrow = d.read_shift(2);
    	d.l += 3; // dBASE II stores DDMMYY date, others use YYMMDD
    	if(ft != 0x02) nrow = d.read_shift(4);
    	if(nrow > 1048576) nrow = 1e6;

    	if(ft != 0x02) fpos = d.read_shift(2); // header length
    	var rlen = d.read_shift(2); // record length

    	var /*flags = 0,*/ current_cp = opts.codepage || 1252;
    	if(ft != 0x02) { // 20 reserved bytes
    		d.l+=16;
    		/*flags = */d.read_shift(1);
    		//if(memo && ((flags & 0x02) === 0)) throw new Error("DBF Flags " + flags.toString(16) + " ft " + ft.toString(16));

    		/* codepage present in FoxPro and dBASE Level 7 */
    		if(d[d.l] !== 0) current_cp = dbf_codepage_map[d[d.l]];
    		d.l+=1;

    		d.l+=2;
    	}
    	if(l7) d.l += 36; // Level 7: 32 byte "Language driver name", 4 byte reserved

    /*:: type DBFField = { name:string; len:number; type:string; } */
    	var fields/*:Array<DBFField>*/ = [], field/*:DBFField*/ = ({}/*:any*/);
    	var hend = Math.min(d.length, (ft == 0x02 ? 0x209 : (fpos - 10 - (vfp ? 264 : 0))));
    	var ww = l7 ? 32 : 11;
    	while(d.l < hend && d[d.l] != 0x0d) {
    		field = ({}/*:any*/);
    		field.name = $cptable.utils.decode(current_cp, d.slice(d.l, d.l+ww)).replace(/[\u0000\r\n].*$/g,"");
    		d.l += ww;
    		field.type = String.fromCharCode(d.read_shift(1));
    		if(ft != 0x02 && !l7) field.offset = d.read_shift(4);
    		field.len = d.read_shift(1);
    		if(ft == 0x02) field.offset = d.read_shift(2);
    		field.dec = d.read_shift(1);
    		if(field.name.length) fields.push(field);
    		if(ft != 0x02) d.l += l7 ? 13 : 14;
    		switch(field.type) {
    			case 'B': // Double (VFP) / Binary (dBASE L7)
    				if((!vfp || field.len != 8) && opts.WTF) console.log('Skipping ' + field.name + ':' + field.type);
    				break;
    			case 'G': // General (FoxPro and dBASE L7)
    			case 'P': // Picture (FoxPro and dBASE L7)
    				if(opts.WTF) console.log('Skipping ' + field.name + ':' + field.type);
    				break;
    			case '+': // Autoincrement (dBASE L7 only)
    			case '0': // _NullFlags (VFP only)
    			case '@': // Timestamp (dBASE L7 only)
    			case 'C': // Character (dBASE II)
    			case 'D': // Date (dBASE III)
    			case 'F': // Float (dBASE IV)
    			case 'I': // Long (VFP and dBASE L7)
    			case 'L': // Logical (dBASE II)
    			case 'M': // Memo (dBASE III)
    			case 'N': // Number (dBASE II)
    			case 'O': // Double (dBASE L7 only)
    			case 'T': // Datetime (VFP only)
    			case 'Y': // Currency (VFP only)
    				break;
    			default: throw new Error('Unknown Field Type: ' + field.type);
    		}
    	}

    	if(d[d.l] !== 0x0D) d.l = fpos-1;
    	if(d.read_shift(1) !== 0x0D) throw new Error("DBF Terminator not found " + d.l + " " + d[d.l]);
    	d.l = fpos;

    	/* data */
    	var R = 0, C = 0;
    	out[0] = [];
    	for(C = 0; C != fields.length; ++C) out[0][C] = fields[C].name;
    	while(nrow-- > 0) {
    		if(d[d.l] === 0x2A) {
    			// TODO: record marked as deleted -- create a hidden row?
    			d.l+=rlen;
    			continue;
    		}
    		++d.l;
    		out[++R] = []; C = 0;
    		for(C = 0; C != fields.length; ++C) {
    			var dd = d.slice(d.l, d.l+fields[C].len); d.l+=fields[C].len;
    			prep_blob(dd, 0);
    			var s = $cptable.utils.decode(current_cp, dd);
    			switch(fields[C].type) {
    				case 'C':
    					// NOTE: it is conventional to write '  /  /  ' for empty dates
    					if(s.trim().length) out[R][C] = s.replace(/\s+$/,"");
    					break;
    				case 'D':
    					if(s.length === 8) out[R][C] = new Date(+s.slice(0,4), +s.slice(4,6)-1, +s.slice(6,8));
    					else out[R][C] = s;
    					break;
    				case 'F': out[R][C] = parseFloat(s.trim()); break;
    				case '+': case 'I': out[R][C] = l7 ? dd.read_shift(-4, 'i') ^ 0x80000000 : dd.read_shift(4, 'i'); break;
    				case 'L': switch(s.trim().toUpperCase()) {
    					case 'Y': case 'T': out[R][C] = true; break;
    					case 'N': case 'F': out[R][C] = false; break;
    					case '': case '?': break;
    					default: throw new Error("DBF Unrecognized L:|" + s + "|");
    					} break;
    				case 'M': /* TODO: handle memo files */
    					if(!memo) throw new Error("DBF Unexpected MEMO for type " + ft.toString(16));
    					out[R][C] = "##MEMO##" + (l7 ? parseInt(s.trim(), 10): dd.read_shift(4));
    					break;
    				case 'N':
    					s = s.replace(/\u0000/g,"").trim();
    					// NOTE: dBASE II interprets "  .  " as 0
    					if(s && s != ".") out[R][C] = +s || 0; break;
    				case '@':
    					// NOTE: dBASE specs appear to be incorrect
    					out[R][C] = new Date(dd.read_shift(-8, 'f') - 0x388317533400);
    					break;
    				case 'T': out[R][C] = new Date((dd.read_shift(4) - 0x253D8C) * 0x5265C00 + dd.read_shift(4)); break;
    				case 'Y': out[R][C] = dd.read_shift(4,'i')/1e4 + (dd.read_shift(4, 'i')/1e4)*Math.pow(2,32); break;
    				case 'O': out[R][C] = -dd.read_shift(-8, 'f'); break;
    				case 'B': if(vfp && fields[C].len == 8) { out[R][C] = dd.read_shift(8,'f'); break; }
    					/* falls through */
    				case 'G': case 'P': dd.l += fields[C].len; break;
    				case '0':
    					if(fields[C].name === '_NullFlags') break;
    					/* falls through */
    				default: throw new Error("DBF Unsupported data type " + fields[C].type);
    			}
    		}
    	}
    	if(ft != 0x02) if(d.l < d.length && d[d.l++] != 0x1A) throw new Error("DBF EOF Marker missing " + (d.l-1) + " of " + d.length + " " + d[d.l-1].toString(16));
    	if(opts && opts.sheetRows) out = out.slice(0, opts.sheetRows);
    	opts.DBF = fields;
    	return out;
    }

    function dbf_to_sheet(buf, opts)/*:Worksheet*/ {
    	var o = opts || {};
    	if(!o.dateNF) o.dateNF = "yyyymmdd";
    	var ws = aoa_to_sheet(dbf_to_aoa(buf, o), o);
    	ws["!cols"] = o.DBF.map(function(field) { return {
    		wch: field.len,
    		DBF: field
    	};});
    	delete o.DBF;
    	return ws;
    }

    function dbf_to_workbook(buf, opts)/*:Workbook*/ {
    	try { return sheet_to_workbook(dbf_to_sheet(buf, opts), opts); }
    	catch(e) { if(opts && opts.WTF) throw e; }
    	return ({SheetNames:[],Sheets:{}});
    }

    var _RLEN = { 'B': 8, 'C': 250, 'L': 1, 'D': 8, '?': 0, '': 0 };
    function sheet_to_dbf(ws/*:Worksheet*/, opts/*:WriteOpts*/) {
    	var o = opts || {};
    	if(+o.codepage >= 0) set_cp(+o.codepage);
    	if(o.type == "string") throw new Error("Cannot write DBF to JS string");
    	var ba = buf_array();
    	var aoa/*:AOA*/ = sheet_to_json(ws, {header:1, raw:true, cellDates:true});
    	var headers = aoa[0], data = aoa.slice(1), cols = ws["!cols"] || [];
    	var i = 0, j = 0, hcnt = 0, rlen = 1;
    	for(i = 0; i < headers.length; ++i) {
    		if(((cols[i]||{}).DBF||{}).name) { headers[i] = cols[i].DBF.name; ++hcnt; continue; }
    		if(headers[i] == null) continue;
    		++hcnt;
    		if(typeof headers[i] === 'number') headers[i] = headers[i].toString(10);
    		if(typeof headers[i] !== 'string') throw new Error("DBF Invalid column name " + headers[i] + " |" + (typeof headers[i]) + "|");
    		if(headers.indexOf(headers[i]) !== i) for(j=0; j<1024;++j)
    			if(headers.indexOf(headers[i] + "_" + j) == -1) { headers[i] += "_" + j; break; }
    	}
    	var range = safe_decode_range(ws['!ref']);
    	var coltypes/*:Array<string>*/ = [];
    	var colwidths/*:Array<number>*/ = [];
    	var coldecimals/*:Array<number>*/ = [];
    	for(i = 0; i <= range.e.c - range.s.c; ++i) {
    		var guess = '', _guess = '', maxlen = 0;
    		var col/*:Array<any>*/ = [];
    		for(j=0; j < data.length; ++j) {
    			if(data[j][i] != null) col.push(data[j][i]);
    		}
    		if(col.length == 0 || headers[i] == null) { coltypes[i] = '?'; continue; }
    		for(j = 0; j < col.length; ++j) {
    			switch(typeof col[j]) {
    				/* TODO: check if L2 compat is desired */
    				case 'number': _guess = 'B'; break;
    				case 'string': _guess = 'C'; break;
    				case 'boolean': _guess = 'L'; break;
    				case 'object': _guess = col[j] instanceof Date ? 'D' : 'C'; break;
    				default: _guess = 'C';
    			}
    			maxlen = Math.max(maxlen, String(col[j]).length);
    			guess = guess && guess != _guess ? 'C' : _guess;
    			//if(guess == 'C') break;
    		}
    		if(maxlen > 250) maxlen = 250;
    		_guess = ((cols[i]||{}).DBF||{}).type;
    		/* TODO: more fine grained control over DBF type resolution */
    		if(_guess == 'C') {
    			if(cols[i].DBF.len > maxlen) maxlen = cols[i].DBF.len;
    		}
    		if(guess == 'B' && _guess == 'N') {
    			guess = 'N';
    			coldecimals[i] = cols[i].DBF.dec;
    			maxlen = cols[i].DBF.len;
    		}
    		colwidths[i] = guess == 'C' || _guess == 'N' ? maxlen : (_RLEN[guess] || 0);
    		rlen += colwidths[i];
    		coltypes[i] = guess;
    	}

    	var h = ba.next(32);
    	h.write_shift(4, 0x13021130);
    	h.write_shift(4, data.length);
    	h.write_shift(2, 296 + 32 * hcnt);
    	h.write_shift(2, rlen);
    	for(i=0; i < 4; ++i) h.write_shift(4, 0);
    	h.write_shift(4, 0x00000000 | ((+dbf_reverse_map[/*::String(*/current_ansi/*::)*/] || 0x03)<<8));

    	for(i = 0, j = 0; i < headers.length; ++i) {
    		if(headers[i] == null) continue;
    		var hf = ba.next(32);
    		var _f = (headers[i].slice(-10) + "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00").slice(0, 11);
    		hf.write_shift(1, _f, "sbcs");
    		hf.write_shift(1, coltypes[i] == '?' ? 'C' : coltypes[i], "sbcs");
    		hf.write_shift(4, j);
    		hf.write_shift(1, colwidths[i] || _RLEN[coltypes[i]] || 0);
    		hf.write_shift(1, coldecimals[i] || 0);
    		hf.write_shift(1, 0x02);
    		hf.write_shift(4, 0);
    		hf.write_shift(1, 0);
    		hf.write_shift(4, 0);
    		hf.write_shift(4, 0);
    		j += (colwidths[i] || _RLEN[coltypes[i]] || 0);
    	}

    	var hb = ba.next(264);
    	hb.write_shift(4, 0x0000000D);
    	for(i=0; i < 65;++i) hb.write_shift(4, 0x00000000);
    	for(i=0; i < data.length; ++i) {
    		var rout = ba.next(rlen);
    		rout.write_shift(1, 0);
    		for(j=0; j<headers.length; ++j) {
    			if(headers[j] == null) continue;
    			switch(coltypes[j]) {
    				case 'L': rout.write_shift(1, data[i][j] == null ? 0x3F : data[i][j] ? 0x54 : 0x46); break;
    				case 'B': rout.write_shift(8, data[i][j]||0, 'f'); break;
    				case 'N':
    					var _n = "0";
    					if(typeof data[i][j] == "number") _n = data[i][j].toFixed(coldecimals[j]||0);
    					for(hcnt=0; hcnt < colwidths[j]-_n.length; ++hcnt) rout.write_shift(1, 0x20);
    					rout.write_shift(1, _n, "sbcs");
    					break;
    				case 'D':
    					if(!data[i][j]) rout.write_shift(8, "00000000", "sbcs");
    					else {
    						rout.write_shift(4, ("0000"+data[i][j].getFullYear()).slice(-4), "sbcs");
    						rout.write_shift(2, ("00"+(data[i][j].getMonth()+1)).slice(-2), "sbcs");
    						rout.write_shift(2, ("00"+data[i][j].getDate()).slice(-2), "sbcs");
    					} break;
    				case 'C':
    					var _s = String(data[i][j] != null ? data[i][j] : "").slice(0, colwidths[j]);
    					rout.write_shift(1, _s, "sbcs");
    					for(hcnt=0; hcnt < colwidths[j]-_s.length; ++hcnt) rout.write_shift(1, 0x20); break;
    			}
    		}
    		// data
    	}
    	ba.next(1).write_shift(1, 0x1A);
    	return ba.end();
    }
    	return {
    		to_workbook: dbf_to_workbook,
    		to_sheet: dbf_to_sheet,
    		from_sheet: sheet_to_dbf
    	};
    })();

    var SYLK = /*#__PURE__*/(function() {
    	/* TODO: stress test sequences */
    	var sylk_escapes = ({
    		AA:'À', BA:'Á', CA:'Â', DA:195, HA:'Ä', JA:197,
    		AE:'È', BE:'É', CE:'Ê',         HE:'Ë',
    		AI:'Ì', BI:'Í', CI:'Î',         HI:'Ï',
    		AO:'Ò', BO:'Ó', CO:'Ô', DO:213, HO:'Ö',
    		AU:'Ù', BU:'Ú', CU:'Û',         HU:'Ü',
    		Aa:'à', Ba:'á', Ca:'â', Da:227, Ha:'ä', Ja:229,
    		Ae:'è', Be:'é', Ce:'ê',         He:'ë',
    		Ai:'ì', Bi:'í', Ci:'î',         Hi:'ï',
    		Ao:'ò', Bo:'ó', Co:'ô', Do:245, Ho:'ö',
    		Au:'ù', Bu:'ú', Cu:'û',         Hu:'ü',
    		KC:'Ç', Kc:'ç', q:'æ',  z:'œ',  a:'Æ',  j:'Œ',
    		DN:209, Dn:241, Hy:255,
    		S:169,  c:170,  R:174,  "B ":180,
    		/*::[*/0/*::]*/:176,    /*::[*/1/*::]*/:177,  /*::[*/2/*::]*/:178,
    		/*::[*/3/*::]*/:179,    /*::[*/5/*::]*/:181,  /*::[*/6/*::]*/:182,
    		/*::[*/7/*::]*/:183,    Q:185,  k:186,  b:208,  i:216,  l:222,  s:240,  y:248,
    		"!":161, '"':162, "#":163, "(":164, "%":165, "'":167, "H ":168,
    		"+":171, ";":187, "<":188, "=":189, ">":190, "?":191, "{":223
    	}/*:any*/);
    	var sylk_char_regex = new RegExp("\u001BN(" + keys(sylk_escapes).join("|").replace(/\|\|\|/, "|\\||").replace(/([?()+])/g,"\\$1") + "|\\|)", "gm");
    	var sylk_char_fn = function(_, $1){ var o = sylk_escapes[$1]; return typeof o == "number" ? _getansi(o) : o; };
    	var decode_sylk_char = function($$, $1, $2) { var newcc = (($1.charCodeAt(0) - 0x20)<<4) | ($2.charCodeAt(0) - 0x30); return newcc == 59 ? $$ : _getansi(newcc); };
    	sylk_escapes["|"] = 254;
    	/* TODO: find an actual specification */
    	function sylk_to_aoa(d/*:RawData*/, opts)/*:[AOA, Worksheet]*/ {
    		switch(opts.type) {
    			case 'base64': return sylk_to_aoa_str(Base64_decode(d), opts);
    			case 'binary': return sylk_to_aoa_str(d, opts);
    			case 'buffer': return sylk_to_aoa_str(has_buf && Buffer.isBuffer(d) ? d.toString('binary') : a2s(d), opts);
    			case 'array': return sylk_to_aoa_str(cc2str(d), opts);
    		}
    		throw new Error("Unrecognized type " + opts.type);
    	}
    	function sylk_to_aoa_str(str/*:string*/, opts)/*:[AOA, Worksheet]*/ {
    		var records = str.split(/[\n\r]+/), R = -1, C = -1, ri = 0, rj = 0, arr/*:AOA*/ = [];
    		var formats/*:Array<string>*/ = [];
    		var next_cell_format/*:string|null*/ = null;
    		var sht = {}, rowinfo/*:Array<RowInfo>*/ = [], colinfo/*:Array<ColInfo>*/ = [], cw/*:Array<string>*/ = [];
    		var Mval = 0, j;
    		if(+opts.codepage >= 0) set_cp(+opts.codepage);
    		for (; ri !== records.length; ++ri) {
    			Mval = 0;
    			var rstr=records[ri].trim().replace(/\x1B([\x20-\x2F])([\x30-\x3F])/g, decode_sylk_char).replace(sylk_char_regex, sylk_char_fn);
    			var record=rstr.replace(/;;/g, "\u0000").split(";").map(function(x) { return x.replace(/\u0000/g, ";"); });
    			var RT=record[0], val;
    			if(rstr.length > 0) switch(RT) {
    			case 'ID': break; /* header */
    			case 'E': break; /* EOF */
    			case 'B': break; /* dimensions */
    			case 'O': break; /* options? */
    			case 'W': break; /* window? */
    			case 'P':
    				if(record[1].charAt(0) == 'P')
    					formats.push(rstr.slice(3).replace(/;;/g, ";"));
    				break;
    			case 'C':
    			var C_seen_K = false, C_seen_X = false, C_seen_S = false, C_seen_E = false, _R = -1, _C = -1;
    			for(rj=1; rj<record.length; ++rj) switch(record[rj].charAt(0)) {
    				case 'A': break; // TODO: comment
    				case 'X': C = parseInt(record[rj].slice(1))-1; C_seen_X = true; break;
    				case 'Y':
    					R = parseInt(record[rj].slice(1))-1; if(!C_seen_X) C = 0;
    					for(j = arr.length; j <= R; ++j) arr[j] = [];
    					break;
    				case 'K':
    					val = record[rj].slice(1);
    					if(val.charAt(0) === '"') val = val.slice(1,val.length - 1);
    					else if(val === 'TRUE') val = true;
    					else if(val === 'FALSE') val = false;
    					else if(!isNaN(fuzzynum(val))) {
    						val = fuzzynum(val);
    						if(next_cell_format !== null && fmt_is_date(next_cell_format)) val = numdate(val);
    					} else if(!isNaN(fuzzydate(val).getDate())) {
    						val = parseDate(val);
    					}
    					C_seen_K = true;
    					break;
    				case 'E':
    					C_seen_E = true;
    					var formula = rc_to_a1(record[rj].slice(1), {r:R,c:C});
    					arr[R][C] = [arr[R][C], formula];
    					break;
    				case 'S':
    					C_seen_S = true;
    					arr[R][C] = [arr[R][C], "S5S"];
    					break;
    				case 'G': break; // unknown
    				case 'R': _R = parseInt(record[rj].slice(1))-1; break;
    				case 'C': _C = parseInt(record[rj].slice(1))-1; break;
    				default: if(opts && opts.WTF) throw new Error("SYLK bad record " + rstr);
    			}
    			if(C_seen_K) {
    				if(arr[R][C] && arr[R][C].length == 2) arr[R][C][0] = val;
    				else arr[R][C] = val;
    				next_cell_format = null;
    			}
    			if(C_seen_S) {
    				if(C_seen_E) throw new Error("SYLK shared formula cannot have own formula");
    				var shrbase = _R > -1 && arr[_R][_C];
    				if(!shrbase || !shrbase[1]) throw new Error("SYLK shared formula cannot find base");
    				arr[R][C][1] = shift_formula_str(shrbase[1], {r: R - _R, c: C - _C});
    			}
    			break;
    			case 'F':
    			var F_seen = 0;
    			for(rj=1; rj<record.length; ++rj) switch(record[rj].charAt(0)) {
    				case 'X': C = parseInt(record[rj].slice(1))-1; ++F_seen; break;
    				case 'Y':
    					R = parseInt(record[rj].slice(1))-1; /*C = 0;*/
    					for(j = arr.length; j <= R; ++j) arr[j] = [];
    					break;
    				case 'M': Mval = parseInt(record[rj].slice(1)) / 20; break;
    				case 'F': break; /* ??? */
    				case 'G': break; /* hide grid */
    				case 'P':
    					next_cell_format = formats[parseInt(record[rj].slice(1))];
    					break;
    				case 'S': break; /* cell style */
    				case 'D': break; /* column */
    				case 'N': break; /* font */
    				case 'W':
    					cw = record[rj].slice(1).split(" ");
    					for(j = parseInt(cw[0], 10); j <= parseInt(cw[1], 10); ++j) {
    						Mval = parseInt(cw[2], 10);
    						colinfo[j-1] = Mval === 0 ? {hidden:true}: {wch:Mval}; process_col(colinfo[j-1]);
    					} break;
    				case 'C': /* default column format */
    					C = parseInt(record[rj].slice(1))-1;
    					if(!colinfo[C]) colinfo[C] = {};
    					break;
    				case 'R': /* row properties */
    					R = parseInt(record[rj].slice(1))-1;
    					if(!rowinfo[R]) rowinfo[R] = {};
    					if(Mval > 0) { rowinfo[R].hpt = Mval; rowinfo[R].hpx = pt2px(Mval); }
    					else if(Mval === 0) rowinfo[R].hidden = true;
    					break;
    				default: if(opts && opts.WTF) throw new Error("SYLK bad record " + rstr);
    			}
    			if(F_seen < 1) next_cell_format = null; break;
    			default: if(opts && opts.WTF) throw new Error("SYLK bad record " + rstr);
    			}
    		}
    		if(rowinfo.length > 0) sht['!rows'] = rowinfo;
    		if(colinfo.length > 0) sht['!cols'] = colinfo;
    		if(opts && opts.sheetRows) arr = arr.slice(0, opts.sheetRows);
    		return [arr, sht];
    	}

    	function sylk_to_sheet(d/*:RawData*/, opts)/*:Worksheet*/ {
    		var aoasht = sylk_to_aoa(d, opts);
    		var aoa = aoasht[0], ws = aoasht[1];
    		var o = aoa_to_sheet(aoa, opts);
    		keys(ws).forEach(function(k) { o[k] = ws[k]; });
    		return o;
    	}

    	function sylk_to_workbook(d/*:RawData*/, opts)/*:Workbook*/ { return sheet_to_workbook(sylk_to_sheet(d, opts), opts); }

    	function write_ws_cell_sylk(cell/*:Cell*/, ws/*:Worksheet*/, R/*:number*/, C/*:number*//*::, opts*/)/*:string*/ {
    		var o = "C;Y" + (R+1) + ";X" + (C+1) + ";K";
    		switch(cell.t) {
    			case 'n':
    				o += (cell.v||0);
    				if(cell.f && !cell.F) o += ";E" + a1_to_rc(cell.f, {r:R, c:C}); break;
    			case 'b': o += cell.v ? "TRUE" : "FALSE"; break;
    			case 'e': o += cell.w || cell.v; break;
    			case 'd': o += '"' + (cell.w || cell.v) + '"'; break;
    			case 's': o += '"' + cell.v.replace(/"/g,"").replace(/;/g, ";;") + '"'; break;
    		}
    		return o;
    	}

    	function write_ws_cols_sylk(out, cols) {
    		cols.forEach(function(col, i) {
    			var rec = "F;W" + (i+1) + " " + (i+1) + " ";
    			if(col.hidden) rec += "0";
    			else {
    				if(typeof col.width == 'number' && !col.wpx) col.wpx = width2px(col.width);
    				if(typeof col.wpx == 'number' && !col.wch) col.wch = px2char(col.wpx);
    				if(typeof col.wch == 'number') rec += Math.round(col.wch);
    			}
    			if(rec.charAt(rec.length - 1) != " ") out.push(rec);
    		});
    	}

    	function write_ws_rows_sylk(out/*:Array<string>*/, rows/*:Array<RowInfo>*/) {
    		rows.forEach(function(row, i) {
    			var rec = "F;";
    			if(row.hidden) rec += "M0;";
    			else if(row.hpt) rec += "M" + 20 * row.hpt + ";";
    			else if(row.hpx) rec += "M" + 20 * px2pt(row.hpx) + ";";
    			if(rec.length > 2) out.push(rec + "R" + (i+1));
    		});
    	}

    	function sheet_to_sylk(ws/*:Worksheet*/, opts/*:?any*/)/*:string*/ {
    		var preamble/*:Array<string>*/ = ["ID;PWXL;N;E"], o/*:Array<string>*/ = [];
    		var r = safe_decode_range(ws['!ref']), cell/*:Cell*/;
    		var dense = Array.isArray(ws);
    		var RS = "\r\n";

    		preamble.push("P;PGeneral");
    		preamble.push("F;P0;DG0G8;M255");
    		if(ws['!cols']) write_ws_cols_sylk(preamble, ws['!cols']);
    		if(ws['!rows']) write_ws_rows_sylk(preamble, ws['!rows']);

    		preamble.push("B;Y" + (r.e.r - r.s.r + 1) + ";X" + (r.e.c - r.s.c + 1) + ";D" + [r.s.c,r.s.r,r.e.c,r.e.r].join(" "));
    		for(var R = r.s.r; R <= r.e.r; ++R) {
    			for(var C = r.s.c; C <= r.e.c; ++C) {
    				var coord = encode_cell({r:R,c:C});
    				cell = dense ? (ws[R]||[])[C]: ws[coord];
    				if(!cell || (cell.v == null && (!cell.f || cell.F))) continue;
    				o.push(write_ws_cell_sylk(cell, ws, R, C));
    			}
    		}
    		return preamble.join(RS) + RS + o.join(RS) + RS + "E" + RS;
    	}

    	return {
    		to_workbook: sylk_to_workbook,
    		to_sheet: sylk_to_sheet,
    		from_sheet: sheet_to_sylk
    	};
    })();

    var DIF = /*#__PURE__*/(function() {
    	function dif_to_aoa(d/*:RawData*/, opts)/*:AOA*/ {
    		switch(opts.type) {
    			case 'base64': return dif_to_aoa_str(Base64_decode(d), opts);
    			case 'binary': return dif_to_aoa_str(d, opts);
    			case 'buffer': return dif_to_aoa_str(has_buf && Buffer.isBuffer(d) ? d.toString('binary') : a2s(d), opts);
    			case 'array': return dif_to_aoa_str(cc2str(d), opts);
    		}
    		throw new Error("Unrecognized type " + opts.type);
    	}
    	function dif_to_aoa_str(str/*:string*/, opts)/*:AOA*/ {
    		var records = str.split('\n'), R = -1, C = -1, ri = 0, arr/*:AOA*/ = [];
    		for (; ri !== records.length; ++ri) {
    			if (records[ri].trim() === 'BOT') { arr[++R] = []; C = 0; continue; }
    			if (R < 0) continue;
    			var metadata = records[ri].trim().split(",");
    			var type = metadata[0], value = metadata[1];
    			++ri;
    			var data = records[ri] || "";
    			while(((data.match(/["]/g)||[]).length & 1) && ri < records.length - 1) data += "\n" + records[++ri];
    			data = data.trim();
    			switch (+type) {
    				case -1:
    					if (data === 'BOT') { arr[++R] = []; C = 0; continue; }
    					else if (data !== 'EOD') throw new Error("Unrecognized DIF special command " + data);
    					break;
    				case 0:
    					if(data === 'TRUE') arr[R][C] = true;
    					else if(data === 'FALSE') arr[R][C] = false;
    					else if(!isNaN(fuzzynum(value))) arr[R][C] = fuzzynum(value);
    					else if(!isNaN(fuzzydate(value).getDate())) arr[R][C] = parseDate(value);
    					else arr[R][C] = value;
    					++C; break;
    				case 1:
    					data = data.slice(1,data.length-1);
    					data = data.replace(/""/g, '"');
    					if(data && data.match(/^=".*"$/)) data = data.slice(2, -1);
    					arr[R][C++] = data !== '' ? data : null;
    					break;
    			}
    			if (data === 'EOD') break;
    		}
    		if(opts && opts.sheetRows) arr = arr.slice(0, opts.sheetRows);
    		return arr;
    	}

    	function dif_to_sheet(str/*:string*/, opts)/*:Worksheet*/ { return aoa_to_sheet(dif_to_aoa(str, opts), opts); }
    	function dif_to_workbook(str/*:string*/, opts)/*:Workbook*/ { return sheet_to_workbook(dif_to_sheet(str, opts), opts); }

    	var sheet_to_dif = /*#__PURE__*/(function() {
    		var push_field = function pf(o/*:Array<string>*/, topic/*:string*/, v/*:number*/, n/*:number*/, s/*:string*/) {
    			o.push(topic);
    			o.push(v + "," + n);
    			o.push('"' + s.replace(/"/g,'""') + '"');
    		};
    		var push_value = function po(o/*:Array<string>*/, type/*:number*/, v/*:any*/, s/*:string*/) {
    			o.push(type + "," + v);
    			o.push(type == 1 ? '"' + s.replace(/"/g,'""') + '"' : s);
    		};
    		return function sheet_to_dif(ws/*:Worksheet*//*::, opts:?any*/)/*:string*/ {
    			var o/*:Array<string>*/ = [];
    			var r = safe_decode_range(ws['!ref']), cell/*:Cell*/;
    			var dense = Array.isArray(ws);
    			push_field(o, "TABLE", 0, 1, "sheetjs");
    			push_field(o, "VECTORS", 0, r.e.r - r.s.r + 1,"");
    			push_field(o, "TUPLES", 0, r.e.c - r.s.c + 1,"");
    			push_field(o, "DATA", 0, 0,"");
    			for(var R = r.s.r; R <= r.e.r; ++R) {
    				push_value(o, -1, 0, "BOT");
    				for(var C = r.s.c; C <= r.e.c; ++C) {
    					var coord = encode_cell({r:R,c:C});
    					cell = dense ? (ws[R]||[])[C] : ws[coord];
    					if(!cell) { push_value(o, 1, 0, ""); continue;}
    					switch(cell.t) {
    						case 'n':
    							var val = cell.w ;
    							if(!val && cell.v != null) val = cell.v;
    							if(val == null) {
    								if(cell.f && !cell.F) push_value(o, 1, 0, "=" + cell.f);
    								else push_value(o, 1, 0, "");
    							}
    							else push_value(o, 0, val, "V");
    							break;
    						case 'b':
    							push_value(o, 0, cell.v ? 1 : 0, cell.v ? "TRUE" : "FALSE");
    							break;
    						case 's':
    							push_value(o, 1, 0, (isNaN(cell.v)) ? cell.v : '="' + cell.v + '"');
    							break;
    						case 'd':
    							if(!cell.w) cell.w = SSF_format(cell.z || table_fmt[14], datenum(parseDate(cell.v)));
    							push_value(o, 0, cell.w, "V");
    							break;
    						default: push_value(o, 1, 0, "");
    					}
    				}
    			}
    			push_value(o, -1, 0, "EOD");
    			var RS = "\r\n";
    			var oo = o.join(RS);
    			//while((oo.length & 0x7F) != 0) oo += "\0";
    			return oo;
    		};
    	})();
    	return {
    		to_workbook: dif_to_workbook,
    		to_sheet: dif_to_sheet,
    		from_sheet: sheet_to_dif
    	};
    })();

    var ETH = /*#__PURE__*/(function() {
    	function decode(s/*:string*/)/*:string*/ { return s.replace(/\\b/g,"\\").replace(/\\c/g,":").replace(/\\n/g,"\n"); }
    	function encode(s/*:string*/)/*:string*/ { return s.replace(/\\/g, "\\b").replace(/:/g, "\\c").replace(/\n/g,"\\n"); }

    	function eth_to_aoa(str/*:string*/, opts)/*:AOA*/ {
    		var records = str.split('\n'), R = -1, C = -1, ri = 0, arr/*:AOA*/ = [];
    		for (; ri !== records.length; ++ri) {
    			var record = records[ri].trim().split(":");
    			if(record[0] !== 'cell') continue;
    			var addr = decode_cell(record[1]);
    			if(arr.length <= addr.r) for(R = arr.length; R <= addr.r; ++R) if(!arr[R]) arr[R] = [];
    			R = addr.r; C = addr.c;
    			switch(record[2]) {
    				case 't': arr[R][C] = decode(record[3]); break;
    				case 'v': arr[R][C] = +record[3]; break;
    				case 'vtf': var _f = record[record.length - 1];
    					/* falls through */
    				case 'vtc':
    					switch(record[3]) {
    						case 'nl': arr[R][C] = +record[4] ? true : false; break;
    						default: arr[R][C] = +record[4]; break;
    					}
    					if(record[2] == 'vtf') arr[R][C] = [arr[R][C], _f];
    			}
    		}
    		if(opts && opts.sheetRows) arr = arr.slice(0, opts.sheetRows);
    		return arr;
    	}

    	function eth_to_sheet(d/*:string*/, opts)/*:Worksheet*/ { return aoa_to_sheet(eth_to_aoa(d, opts), opts); }
    	function eth_to_workbook(d/*:string*/, opts)/*:Workbook*/ { return sheet_to_workbook(eth_to_sheet(d, opts), opts); }

    	var header = [
    		"socialcalc:version:1.5",
    		"MIME-Version: 1.0",
    		"Content-Type: multipart/mixed; boundary=SocialCalcSpreadsheetControlSave"
    	].join("\n");

    	var sep = [
    		"--SocialCalcSpreadsheetControlSave",
    		"Content-type: text/plain; charset=UTF-8"
    	].join("\n") + "\n";

    	/* TODO: the other parts */
    	var meta = [
    		"# SocialCalc Spreadsheet Control Save",
    		"part:sheet"
    	].join("\n");

    	var end = "--SocialCalcSpreadsheetControlSave--";

    	function sheet_to_eth_data(ws/*:Worksheet*/)/*:string*/ {
    		if(!ws || !ws['!ref']) return "";
    		var o/*:Array<string>*/ = [], oo/*:Array<string>*/ = [], cell, coord = "";
    		var r = decode_range(ws['!ref']);
    		var dense = Array.isArray(ws);
    		for(var R = r.s.r; R <= r.e.r; ++R) {
    			for(var C = r.s.c; C <= r.e.c; ++C) {
    				coord = encode_cell({r:R,c:C});
    				cell = dense ? (ws[R]||[])[C] : ws[coord];
    				if(!cell || cell.v == null || cell.t === 'z') continue;
    				oo = ["cell", coord, 't'];
    				switch(cell.t) {
    					case 's': case 'str': oo.push(encode(cell.v)); break;
    					case 'n':
    						if(!cell.f) { oo[2]='v'; oo[3]=cell.v; }
    						else { oo[2]='vtf'; oo[3]='n'; oo[4]=cell.v; oo[5]=encode(cell.f); }
    						break;
    					case 'b':
    						oo[2] = 'vt'+(cell.f?'f':'c'); oo[3]='nl'; oo[4]=cell.v?"1":"0";
    						oo[5] = encode(cell.f||(cell.v?'TRUE':'FALSE'));
    						break;
    					case 'd':
    						var t = datenum(parseDate(cell.v));
    						oo[2] = 'vtc'; oo[3] = 'nd'; oo[4] = ""+t;
    						oo[5] = cell.w || SSF_format(cell.z || table_fmt[14], t);
    						break;
    					case 'e': continue;
    				}
    				o.push(oo.join(":"));
    			}
    		}
    		o.push("sheet:c:" + (r.e.c-r.s.c+1) + ":r:" + (r.e.r-r.s.r+1) + ":tvf:1");
    		o.push("valueformat:1:text-wiki");
    		//o.push("copiedfrom:" + ws['!ref']); // clipboard only
    		return o.join("\n");
    	}

    	function sheet_to_eth(ws/*:Worksheet*//*::, opts:?any*/)/*:string*/ {
    		return [header, sep, meta, sep, sheet_to_eth_data(ws), end].join("\n");
    		// return ["version:1.5", sheet_to_eth_data(ws)].join("\n"); // clipboard form
    	}

    	return {
    		to_workbook: eth_to_workbook,
    		to_sheet: eth_to_sheet,
    		from_sheet: sheet_to_eth
    	};
    })();

    var PRN = /*#__PURE__*/(function() {
    	function set_text_arr(data/*:string*/, arr/*:AOA*/, R/*:number*/, C/*:number*/, o/*:any*/) {
    		if(o.raw) arr[R][C] = data;
    		else if(data === "");
    		else if(data === 'TRUE') arr[R][C] = true;
    		else if(data === 'FALSE') arr[R][C] = false;
    		else if(!isNaN(fuzzynum(data))) arr[R][C] = fuzzynum(data);
    		else if(!isNaN(fuzzydate(data).getDate())) arr[R][C] = parseDate(data);
    		else arr[R][C] = data;
    	}

    	function prn_to_aoa_str(f/*:string*/, opts)/*:AOA*/ {
    		var o = opts || {};
    		var arr/*:AOA*/ = ([]/*:any*/);
    		if(!f || f.length === 0) return arr;
    		var lines = f.split(/[\r\n]/);
    		var L = lines.length - 1;
    		while(L >= 0 && lines[L].length === 0) --L;
    		var start = 10, idx = 0;
    		var R = 0;
    		for(; R <= L; ++R) {
    			idx = lines[R].indexOf(" ");
    			if(idx == -1) idx = lines[R].length; else idx++;
    			start = Math.max(start, idx);
    		}
    		for(R = 0; R <= L; ++R) {
    			arr[R] = [];
    			/* TODO: confirm that widths are always 10 */
    			var C = 0;
    			set_text_arr(lines[R].slice(0, start).trim(), arr, R, C, o);
    			for(C = 1; C <= (lines[R].length - start)/10 + 1; ++C)
    				set_text_arr(lines[R].slice(start+(C-1)*10,start+C*10).trim(),arr,R,C,o);
    		}
    		if(o.sheetRows) arr = arr.slice(0, o.sheetRows);
    		return arr;
    	}

    	// List of accepted CSV separators
    	var guess_seps = {
    		/*::[*/0x2C/*::]*/: ',',
    		/*::[*/0x09/*::]*/: "\t",
    		/*::[*/0x3B/*::]*/: ';',
    		/*::[*/0x7C/*::]*/: '|'
    	};

    	// CSV separator weights to be used in case of equal numbers
    	var guess_sep_weights = {
    		/*::[*/0x2C/*::]*/: 3,
    		/*::[*/0x09/*::]*/: 2,
    		/*::[*/0x3B/*::]*/: 1,
    		/*::[*/0x7C/*::]*/: 0
    	};

    	function guess_sep(str) {
    		var cnt = {}, instr = false, end = 0, cc = 0;
    		for(;end < str.length;++end) {
    			if((cc=str.charCodeAt(end)) == 0x22) instr = !instr;
    			else if(!instr && cc in guess_seps) cnt[cc] = (cnt[cc]||0)+1;
    		}

    		cc = [];
    		for(end in cnt) if ( Object.prototype.hasOwnProperty.call(cnt, end) ) {
    			cc.push([ cnt[end], end ]);
    		}

    		if ( !cc.length ) {
    			cnt = guess_sep_weights;
    			for(end in cnt) if ( Object.prototype.hasOwnProperty.call(cnt, end) ) {
    				cc.push([ cnt[end], end ]);
    			}
    		}

    		cc.sort(function(a, b) { return a[0] - b[0] || guess_sep_weights[a[1]] - guess_sep_weights[b[1]]; });

    		return guess_seps[cc.pop()[1]] || 0x2C;
    	}

    	function dsv_to_sheet_str(str/*:string*/, opts)/*:Worksheet*/ {
    		var o = opts || {};
    		var sep = "";
    		var ws/*:Worksheet*/ = o.dense ? ([]/*:any*/) : ({}/*:any*/);
    		var range/*:Range*/ = ({s: {c:0, r:0}, e: {c:0, r:0}}/*:any*/);

    		if(str.slice(0,4) == "sep=") {
    			// If the line ends in \r\n
    			if(str.charCodeAt(5) == 13 && str.charCodeAt(6) == 10 ) {
    				sep = str.charAt(4); str = str.slice(7);
    			}
    			// If line ends in \r OR \n
    			else if(str.charCodeAt(5) == 13 || str.charCodeAt(5) == 10 ) {
    				sep = str.charAt(4); str = str.slice(6);
    			}
    			else sep = guess_sep(str.slice(0,1024));
    		}
    		else if(o && o.FS) sep = o.FS;
    		else sep = guess_sep(str.slice(0,1024));
    		var R = 0, C = 0, v = 0;
    		var start = 0, end = 0, sepcc = sep.charCodeAt(0), instr = false, cc=0, startcc=str.charCodeAt(0);
    		str = str.replace(/\r\n/mg, "\n");
    		var _re/*:?RegExp*/ = o.dateNF != null ? dateNF_regex(o.dateNF) : null;
    		function finish_cell() {
    			var s = str.slice(start, end);
    			var cell = ({}/*:any*/);
    			if(s.charAt(0) == '"' && s.charAt(s.length - 1) == '"') s = s.slice(1,-1).replace(/""/g,'"');
    			if(s.length === 0) cell.t = 'z';
    			else if(o.raw) { cell.t = 's'; cell.v = s; }
    			else if(s.trim().length === 0) { cell.t = 's'; cell.v = s; }
    			else if(s.charCodeAt(0) == 0x3D) {
    				if(s.charCodeAt(1) == 0x22 && s.charCodeAt(s.length - 1) == 0x22) { cell.t = 's'; cell.v = s.slice(2,-1).replace(/""/g,'"'); }
    				else if(fuzzyfmla(s)) { cell.t = 'n'; cell.f = s.slice(1); }
    				else { cell.t = 's'; cell.v = s; } }
    			else if(s == "TRUE") { cell.t = 'b'; cell.v = true; }
    			else if(s == "FALSE") { cell.t = 'b'; cell.v = false; }
    			else if(!isNaN(v = fuzzynum(s))) { cell.t = 'n'; if(o.cellText !== false) cell.w = s; cell.v = v; }
    			else if(!isNaN(fuzzydate(s).getDate()) || _re && s.match(_re)) {
    				cell.z = o.dateNF || table_fmt[14];
    				var k = 0;
    				if(_re && s.match(_re)){ s=dateNF_fix(s, o.dateNF, (s.match(_re)||[])); k=1; }
    				if(o.cellDates) { cell.t = 'd'; cell.v = parseDate(s, k); }
    				else { cell.t = 'n'; cell.v = datenum(parseDate(s, k)); }
    				if(o.cellText !== false) cell.w = SSF_format(cell.z, cell.v instanceof Date ? datenum(cell.v):cell.v);
    				if(!o.cellNF) delete cell.z;
    			} else {
    				cell.t = 's';
    				cell.v = s;
    			}
    			if(cell.t == 'z');
    			else if(o.dense) { if(!ws[R]) ws[R] = []; ws[R][C] = cell; }
    			else ws[encode_cell({c:C,r:R})] = cell;
    			start = end+1; startcc = str.charCodeAt(start);
    			if(range.e.c < C) range.e.c = C;
    			if(range.e.r < R) range.e.r = R;
    			if(cc == sepcc) ++C; else { C = 0; ++R; if(o.sheetRows && o.sheetRows <= R) return true; }
    		}
    		outer: for(;end < str.length;++end) switch((cc=str.charCodeAt(end))) {
    			case 0x22: if(startcc === 0x22) instr = !instr; break;
    			case sepcc: case 0x0a: case 0x0d: if(!instr && finish_cell()) break outer; break;
    		}
    		if(end - start > 0) finish_cell();

    		ws['!ref'] = encode_range(range);
    		return ws;
    	}

    	function prn_to_sheet_str(str/*:string*/, opts)/*:Worksheet*/ {
    		if(!(opts && opts.PRN)) return dsv_to_sheet_str(str, opts);
    		if(opts.FS) return dsv_to_sheet_str(str, opts);
    		if(str.slice(0,4) == "sep=") return dsv_to_sheet_str(str, opts);
    		if(str.indexOf("\t") >= 0 || str.indexOf(",") >= 0 || str.indexOf(";") >= 0) return dsv_to_sheet_str(str, opts);
    		return aoa_to_sheet(prn_to_aoa_str(str, opts), opts);
    	}

    	function prn_to_sheet(d/*:RawData*/, opts)/*:Worksheet*/ {
    		var str = "", bytes = opts.type == 'string' ? [0,0,0,0] : firstbyte(d, opts);
    		switch(opts.type) {
    			case 'base64': str = Base64_decode(d); break;
    			case 'binary': str = d; break;
    			case 'buffer':
    				if(opts.codepage == 65001) str = d.toString('utf8'); // TODO: test if buf
    				else if(opts.codepage && typeof $cptable !== 'undefined') str = $cptable.utils.decode(opts.codepage, d);
    				else str = has_buf && Buffer.isBuffer(d) ? d.toString('binary') : a2s(d);
    				break;
    			case 'array': str = cc2str(d); break;
    			case 'string': str = d; break;
    			default: throw new Error("Unrecognized type " + opts.type);
    		}
    		if(bytes[0] == 0xEF && bytes[1] == 0xBB && bytes[2] == 0xBF) str = utf8read(str.slice(3));
    		else if(opts.type != 'string' && opts.type != 'buffer' && opts.codepage == 65001) str = utf8read(str);
    		else if((opts.type == 'binary') && typeof $cptable !== 'undefined' && opts.codepage)  str = $cptable.utils.decode(opts.codepage, $cptable.utils.encode(28591,str));
    		if(str.slice(0,19) == "socialcalc:version:") return ETH.to_sheet(opts.type == 'string' ? str : utf8read(str), opts);
    		return prn_to_sheet_str(str, opts);
    	}

    	function prn_to_workbook(d/*:RawData*/, opts)/*:Workbook*/ { return sheet_to_workbook(prn_to_sheet(d, opts), opts); }

    	function sheet_to_prn(ws/*:Worksheet*//*::, opts:?any*/)/*:string*/ {
    		var o/*:Array<string>*/ = [];
    		var r = safe_decode_range(ws['!ref']), cell/*:Cell*/;
    		var dense = Array.isArray(ws);
    		for(var R = r.s.r; R <= r.e.r; ++R) {
    			var oo/*:Array<string>*/ = [];
    			for(var C = r.s.c; C <= r.e.c; ++C) {
    				var coord = encode_cell({r:R,c:C});
    				cell = dense ? (ws[R]||[])[C] : ws[coord];
    				if(!cell || cell.v == null) { oo.push("          "); continue; }
    				var w = (cell.w || (format_cell(cell), cell.w) || "").slice(0,10);
    				while(w.length < 10) w += " ";
    				oo.push(w + (C === 0 ? " " : ""));
    			}
    			o.push(oo.join(""));
    		}
    		return o.join("\n");
    	}

    	return {
    		to_workbook: prn_to_workbook,
    		to_sheet: prn_to_sheet,
    		from_sheet: sheet_to_prn
    	};
    })();

    /* Excel defaults to SYLK but warns if data is not valid */
    function read_wb_ID(d, opts) {
    	var o = opts || {}, OLD_WTF = !!o.WTF; o.WTF = true;
    	try {
    		var out = SYLK.to_workbook(d, o);
    		o.WTF = OLD_WTF;
    		return out;
    	} catch(e) {
    		o.WTF = OLD_WTF;
    		if(!e.message.match(/SYLK bad record ID/) && OLD_WTF) throw e;
    		return PRN.to_workbook(d, opts);
    	}
    }

    var WK_ = /*#__PURE__*/(function() {
    	function lotushopper(data, cb/*:RecordHopperCB*/, opts/*:any*/) {
    		if(!data) return;
    		prep_blob(data, data.l || 0);
    		var Enum = opts.Enum || WK1Enum;
    		while(data.l < data.length) {
    			var RT = data.read_shift(2);
    			var R = Enum[RT] || Enum[0xFFFF];
    			var length = data.read_shift(2);
    			var tgt = data.l + length;
    			var d = R.f && R.f(data, length, opts);
    			data.l = tgt;
    			if(cb(d, R, RT)) return;
    		}
    	}

    	function lotus_to_workbook(d/*:RawData*/, opts) {
    		switch(opts.type) {
    			case 'base64': return lotus_to_workbook_buf(s2a(Base64_decode(d)), opts);
    			case 'binary': return lotus_to_workbook_buf(s2a(d), opts);
    			case 'buffer':
    			case 'array': return lotus_to_workbook_buf(d, opts);
    		}
    		throw "Unsupported type " + opts.type;
    	}

    	function lotus_to_workbook_buf(d, opts)/*:Workbook*/ {
    		if(!d) return d;
    		var o = opts || {};
    		var s/*:Worksheet*/ = ((o.dense ? [] : {})/*:any*/), n = "Sheet1", next_n = "", sidx = 0;
    		var sheets = {}, snames = [], realnames = [];

    		var refguess = {s: {r:0, c:0}, e: {r:0, c:0} };
    		var sheetRows = o.sheetRows || 0;

    		if(d[2] == 0x00) {
    			if(d[3] == 0x08 || d[3] == 0x09) {
    				if(d.length >= 16 && d[14] == 0x05 && d[15] === 0x6c) throw new Error("Unsupported Works 3 for Mac file");
    			}
    		}

    		if(d[2] == 0x02) {
    			o.Enum = WK1Enum;
    			lotushopper(d, function(val, R, RT) { switch(RT) {
    				case 0x00: /* BOF */
    					o.vers = val;
    					if(val >= 0x1000) o.qpro = true;
    					break;
    				case 0x06: refguess = val; break; /* RANGE */
    				case 0xCC: if(val) next_n = val; break; /* SHEETNAMECS */
    				case 0xDE: next_n = val; break; /* SHEETNAMELP */
    				case 0x0F: /* LABEL */
    				case 0x33: /* STRING */
    					if(!o.qpro) val[1].v = val[1].v.slice(1);
    					/* falls through */
    				case 0x0D: /* INTEGER */
    				case 0x0E: /* NUMBER */
    				case 0x10: /* FORMULA */
    					/* TODO: actual translation of the format code */
    					if(RT == 0x0E && (val[2] & 0x70) == 0x70 && (val[2] & 0x0F) > 1 && (val[2] & 0x0F) < 15) {
    						val[1].z = o.dateNF || table_fmt[14];
    						if(o.cellDates) { val[1].t = 'd'; val[1].v = numdate(val[1].v); }
    					}

    					if(o.qpro) {
    						if(val[3] > sidx) {
    							s["!ref"] = encode_range(refguess);
    							sheets[n] = s;
    							snames.push(n);
    							s = (o.dense ? [] : {});
    							refguess = {s: {r:0, c:0}, e: {r:0, c:0} };
    							sidx = val[3]; n = next_n || "Sheet" + (sidx + 1); next_n = "";
    						}
    					}

    					var tmpcell = o.dense ? (s[val[0].r]||[])[val[0].c] : s[encode_cell(val[0])];
    					if(tmpcell) {
    						tmpcell.t = val[1].t; tmpcell.v = val[1].v;
    						if(val[1].z != null) tmpcell.z = val[1].z;
    						if(val[1].f != null) tmpcell.f = val[1].f;
    						break;
    					}
    					if(o.dense) {
    						if(!s[val[0].r]) s[val[0].r] = [];
    						s[val[0].r][val[0].c] = val[1];
    					} else s[encode_cell(val[0])] = val[1];
    					break;
    			}}, o);
    		} else if(d[2] == 0x1A || d[2] == 0x0E) {
    			o.Enum = WK3Enum;
    			if(d[2] == 0x0E) { o.qpro = true; d.l = 0; }
    			lotushopper(d, function(val, R, RT) { switch(RT) {
    				case 0xCC: n = val; break; /* SHEETNAMECS */
    				case 0x16: /* LABEL16 */
    					val[1].v = val[1].v.slice(1);
    					/* falls through */
    				case 0x17: /* NUMBER17 */
    				case 0x18: /* NUMBER18 */
    				case 0x19: /* FORMULA19 */
    				case 0x25: /* NUMBER25 */
    				case 0x27: /* NUMBER27 */
    				case 0x28: /* FORMULA28 */
    					if(val[3] > sidx) {
    						s["!ref"] = encode_range(refguess);
    						sheets[n] = s;
    						snames.push(n);
    						s = (o.dense ? [] : {});
    						refguess = {s: {r:0, c:0}, e: {r:0, c:0} };
    						sidx = val[3]; n = "Sheet" + (sidx + 1);
    					}
    					if(sheetRows > 0 && val[0].r >= sheetRows) break;
    					if(o.dense) {
    						if(!s[val[0].r]) s[val[0].r] = [];
    						s[val[0].r][val[0].c] = val[1];
    					} else s[encode_cell(val[0])] = val[1];
    					if(refguess.e.c < val[0].c) refguess.e.c = val[0].c;
    					if(refguess.e.r < val[0].r) refguess.e.r = val[0].r;
    					break;
    				case 0x1B: /* XFORMAT */
    					if(val[0x36b0]) realnames[val[0x36b0][0]] = val[0x36b0][1];
    					break;
    				case 0x0601: /* SHEETINFOQP */
    					realnames[val[0]] = val[1]; if(val[0] == sidx) n = val[1]; break;
    			}}, o);
    		} else throw new Error("Unrecognized LOTUS BOF " + d[2]);
    		s["!ref"] = encode_range(refguess);
    		sheets[next_n || n] = s;
    		snames.push(next_n || n);
    		if(!realnames.length) return { SheetNames: snames, Sheets: sheets };
    		var osheets = {}, rnames = [];
    		/* TODO: verify no collisions */
    		for(var i = 0; i < realnames.length; ++i) if(sheets[snames[i]]) {
    			rnames.push(realnames[i] || snames[i]);
    			osheets[realnames[i]] = sheets[realnames[i]] || sheets[snames[i]];
    		} else {
    			rnames.push(realnames[i]);
    			osheets[realnames[i]] = ({ "!ref": "A1" });
    		}
    		return { SheetNames: rnames, Sheets: osheets };
    	}

    	function sheet_to_wk1(ws/*:Worksheet*/, opts/*:WriteOpts*/) {
    		var o = opts || {};
    		if(+o.codepage >= 0) set_cp(+o.codepage);
    		if(o.type == "string") throw new Error("Cannot write WK1 to JS string");
    		var ba = buf_array();
    		var range = safe_decode_range(ws["!ref"]);
    		var dense = Array.isArray(ws);
    		var cols = [];

    		write_biff_rec(ba, 0x00, write_BOF_WK1(0x0406));
    		write_biff_rec(ba, 0x06, write_RANGE(range));
    		var max_R = Math.min(range.e.r, 8191);
    		for(var R = range.s.r; R <= max_R; ++R) {
    			var rr = encode_row(R);
    			for(var C = range.s.c; C <= range.e.c; ++C) {
    				if(R === range.s.r) cols[C] = encode_col(C);
    				var ref = cols[C] + rr;
    				var cell = dense ? (ws[R]||[])[C] : ws[ref];
    				if(!cell || cell.t == "z") continue;
    				/* TODO: formula records */
    				if(cell.t == "n") {
    					if((cell.v|0)==cell.v && cell.v >= -32768 && cell.v <= 32767) write_biff_rec(ba, 0x0d, write_INTEGER(R, C, cell.v));
    					else write_biff_rec(ba, 0x0e, write_NUMBER(R, C, cell.v));
    				} else {
    					var str = format_cell(cell);
    					write_biff_rec(ba, 0x0F, write_LABEL(R, C, str.slice(0, 239)));
    				}
    			}
    		}

    		write_biff_rec(ba, 0x01);
    		return ba.end();
    	}

    	function book_to_wk3(wb/*:Workbook*/, opts/*:WriteOpts*/) {
    		var o = opts || {};
    		if(+o.codepage >= 0) set_cp(+o.codepage);
    		if(o.type == "string") throw new Error("Cannot write WK3 to JS string");
    		var ba = buf_array();

    		write_biff_rec(ba, 0x00, write_BOF_WK3(wb));

    		for(var i = 0, cnt = 0; i < wb.SheetNames.length; ++i) if((wb.Sheets[wb.SheetNames[i]] || {})["!ref"]) write_biff_rec(ba, 0x1b, write_XFORMAT_SHEETNAME(wb.SheetNames[i], cnt++));

    		var wsidx = 0;
    		for(i = 0; i < wb.SheetNames.length; ++i) {
    			var ws = wb.Sheets[wb.SheetNames[i]];
    			if(!ws || !ws["!ref"]) continue;
    			var range = safe_decode_range(ws["!ref"]);
    			var dense = Array.isArray(ws);
    			var cols = [];
    			var max_R = Math.min(range.e.r, 8191);
    			for(var R = range.s.r; R <= max_R; ++R) {
    				var rr = encode_row(R);
    				for(var C = range.s.c; C <= range.e.c; ++C) {
    					if(R === range.s.r) cols[C] = encode_col(C);
    					var ref = cols[C] + rr;
    					var cell = dense ? (ws[R]||[])[C] : ws[ref];
    					if(!cell || cell.t == "z") continue;
    					/* TODO: FORMULA19 NUMBER18 records */
    					if(cell.t == "n") {
    						write_biff_rec(ba, 0x17, write_NUMBER_17(R, C, wsidx, cell.v));
    					} else {
    						var str = format_cell(cell);
    						/* TODO: max len? */
    						write_biff_rec(ba, 0x16, write_LABEL_16(R, C, wsidx, str.slice(0, 239)));
    					}
    				}
    			}
    			++wsidx;
    		}

    		write_biff_rec(ba, 0x01);
    		return ba.end();
    	}


    	function write_BOF_WK1(v/*:number*/) {
    		var out = new_buf(2);
    		out.write_shift(2, v);
    		return out;
    	}

    	function write_BOF_WK3(wb/*:Workbook*/) {
    		var out = new_buf(26);
    		out.write_shift(2, 0x1000);
    		out.write_shift(2, 0x0004);
    		out.write_shift(4, 0x0000);
    		var rows = 0, cols = 0, wscnt = 0;
    		for(var i = 0; i < wb.SheetNames.length; ++i) {
    			var name = wb.SheetNames[i];
    			var ws = wb.Sheets[name];
    			if(!ws || !ws["!ref"]) continue;
    			++wscnt;
    			var range = decode_range(ws["!ref"]);
    			if(rows < range.e.r) rows = range.e.r;
    			if(cols < range.e.c) cols = range.e.c;
    		}
    		if(rows > 8191) rows = 8191;
    		out.write_shift(2, rows);
    		out.write_shift(1, wscnt);
    		out.write_shift(1, cols);
    		out.write_shift(2, 0x00);
    		out.write_shift(2, 0x00);
    		out.write_shift(1, 0x01);
    		out.write_shift(1, 0x02);
    		out.write_shift(4, 0);
    		out.write_shift(4, 0);
    		return out;
    	}

    	function parse_RANGE(blob, length, opts) {
    		var o = {s:{c:0,r:0},e:{c:0,r:0}};
    		if(length == 8 && opts.qpro) {
    			o.s.c = blob.read_shift(1);
    			blob.l++;
    			o.s.r = blob.read_shift(2);
    			o.e.c = blob.read_shift(1);
    			blob.l++;
    			o.e.r = blob.read_shift(2);
    			return o;
    		}
    		o.s.c = blob.read_shift(2);
    		o.s.r = blob.read_shift(2);
    		if(length == 12 && opts.qpro) blob.l += 2;
    		o.e.c = blob.read_shift(2);
    		o.e.r = blob.read_shift(2);
    		if(length == 12 && opts.qpro) blob.l += 2;
    		if(o.s.c == 0xFFFF) o.s.c = o.e.c = o.s.r = o.e.r = 0;
    		return o;
    	}
    	function write_RANGE(range) {
    		var out = new_buf(8);
    		out.write_shift(2, range.s.c);
    		out.write_shift(2, range.s.r);
    		out.write_shift(2, range.e.c);
    		out.write_shift(2, range.e.r);
    		return out;
    	}

    	function parse_cell(blob, length, opts) {
    		var o = [{c:0,r:0}, {t:'n',v:0}, 0, 0];
    		if(opts.qpro && opts.vers != 0x5120) {
    			o[0].c = blob.read_shift(1);
    			o[3] = blob.read_shift(1);
    			o[0].r = blob.read_shift(2);
    			blob.l+=2;
    		} else {
    			o[2] = blob.read_shift(1);
    			o[0].c = blob.read_shift(2); o[0].r = blob.read_shift(2);
    		}
    		return o;
    	}

    	function parse_LABEL(blob, length, opts) {
    		var tgt = blob.l + length;
    		var o = parse_cell(blob, length, opts);
    		o[1].t = 's';
    		if(opts.vers == 0x5120) {
    			blob.l++;
    			var len = blob.read_shift(1);
    			o[1].v = blob.read_shift(len, 'utf8');
    			return o;
    		}
    		if(opts.qpro) blob.l++;
    		o[1].v = blob.read_shift(tgt - blob.l, 'cstr');
    		return o;
    	}
    	function write_LABEL(R, C, s) {
    		/* TODO: encoding */
    		var o = new_buf(7 + s.length);
    		o.write_shift(1, 0xFF);
    		o.write_shift(2, C);
    		o.write_shift(2, R);
    		o.write_shift(1, 0x27); // ??
    		for(var i = 0; i < o.length; ++i) {
    			var cc = s.charCodeAt(i);
    			o.write_shift(1, cc >= 0x80 ? 0x5F : cc);
    		}
    		o.write_shift(1, 0);
    		return o;
    	}

    	function parse_INTEGER(blob, length, opts) {
    		var o = parse_cell(blob, length, opts);
    		o[1].v = blob.read_shift(2, 'i');
    		return o;
    	}
    	function write_INTEGER(R, C, v) {
    		var o = new_buf(7);
    		o.write_shift(1, 0xFF);
    		o.write_shift(2, C);
    		o.write_shift(2, R);
    		o.write_shift(2, v, 'i');
    		return o;
    	}

    	function parse_NUMBER(blob, length, opts) {
    		var o = parse_cell(blob, length, opts);
    		o[1].v = blob.read_shift(8, 'f');
    		return o;
    	}
    	function write_NUMBER(R, C, v) {
    		var o = new_buf(13);
    		o.write_shift(1, 0xFF);
    		o.write_shift(2, C);
    		o.write_shift(2, R);
    		o.write_shift(8, v, 'f');
    		return o;
    	}

    	function parse_FORMULA(blob, length, opts) {
    		var tgt = blob.l + length;
    		var o = parse_cell(blob, length, opts);
    		/* TODO: formula */
    		o[1].v = blob.read_shift(8, 'f');
    		if(opts.qpro) blob.l = tgt;
    		else {
    			var flen = blob.read_shift(2);
    			wk1_fmla_to_csf(blob.slice(blob.l, blob.l + flen), o);
    			blob.l += flen;
    		}
    		return o;
    	}

    	function wk1_parse_rc(B, V, col) {
    		var rel = V & 0x8000;
    		V &= ~0x8000;
    		V = (rel ? B : 0) + ((V >= 0x2000) ? V - 0x4000 : V);
    		return (rel ? "" : "$") + (col ? encode_col(V) : encode_row(V));
    	}
    	/* var oprec = [
    		8, 8, 8, 8, 8, 8, 8, 8, 6, 4, 4, 5, 5, 7, 3, 3,
    		3, 3, 3, 3, 1, 1, 2, 6, 8, 8, 8, 8, 8, 8, 8, 8
    	]; */
    	/* TODO: flesh out */
    	var FuncTab = {
    		0x33: ["FALSE", 0],
    		0x34: ["TRUE", 0],
    		0x46: ["LEN", 1],
    		0x50: ["SUM", 69],
    		0x51: ["AVERAGEA", 69],
    		0x52: ["COUNTA", 69],
    		0x53: ["MINA", 69],
    		0x54: ["MAXA", 69],
    		0x6F: ["T", 1]
    	};
    	var BinOpTab = [
    		  "",   "",   "",   "",   "",   "",   "",   "", // eslint-disable-line no-mixed-spaces-and-tabs
    		  "",  "+",  "-",  "*",  "/",  "^",  "=", "<>", // eslint-disable-line no-mixed-spaces-and-tabs
    		"<=", ">=",  "<",  ">",   "",   "",   "",   "", // eslint-disable-line no-mixed-spaces-and-tabs
    		 "&",   "",   "",   "",   "",   "",   "",   ""  // eslint-disable-line no-mixed-spaces-and-tabs
    	];

    	function wk1_fmla_to_csf(blob, o) {
    		prep_blob(blob, 0);
    		var out = [], argc = 0, R = "", C = "", argL = "", argR = "";
    		while(blob.l < blob.length) {
    			var cc = blob[blob.l++];
    			switch(cc) {
    				case 0x00: out.push(blob.read_shift(8, 'f')); break;
    				case 0x01: {
    					C = wk1_parse_rc(o[0].c, blob.read_shift(2), true);
    					R = wk1_parse_rc(o[0].r, blob.read_shift(2), false);
    					out.push(C + R);
    				} break;
    				case 0x02: {
    					var c = wk1_parse_rc(o[0].c, blob.read_shift(2), true);
    					var r = wk1_parse_rc(o[0].r, blob.read_shift(2), false);
    					C = wk1_parse_rc(o[0].c, blob.read_shift(2), true);
    					R = wk1_parse_rc(o[0].r, blob.read_shift(2), false);
    					out.push(c + r + ":" + C + R);
    				} break;
    				case 0x03:
    					if(blob.l < blob.length) { console.error("WK1 premature formula end"); return; }
    					break;
    				case 0x04: out.push("(" + out.pop() + ")"); break;
    				case 0x05: out.push(blob.read_shift(2)); break;
    				case 0x06: {
    					/* TODO: text encoding */
    					var Z = ""; while((cc = blob[blob.l++])) Z += String.fromCharCode(cc);
    					out.push('"' + Z.replace(/"/g, '""') + '"');
    				} break;

    				case 0x08: out.push("-" + out.pop()); break;
    				case 0x17: out.push("+" + out.pop()); break;
    				case 0x16: out.push("NOT(" + out.pop() + ")"); break;

    				case 0x14: case 0x15: {
    					argR = out.pop(); argL = out.pop();
    					out.push(["AND", "OR"][cc - 0x14] + "(" + argL + "," + argR + ")");
    				} break;

    				default:
    					if(cc < 0x20 && BinOpTab[cc]) {
    						argR = out.pop(); argL = out.pop();
    						out.push(argL + BinOpTab[cc] + argR);
    					} else if(FuncTab[cc]) {
    						argc = FuncTab[cc][1];
    						if(argc == 69) argc = blob[blob.l++];
    						if(argc > out.length) { console.error("WK1 bad formula parse 0x" + cc.toString(16) + ":|" + out.join("|") + "|"); return; }
    						var args = out.slice(-argc);
    						out.length -= argc;
    						out.push(FuncTab[cc][0] + "(" + args.join(",") + ")");
    					}
    					else if(cc <= 0x07) return console.error("WK1 invalid opcode " + cc.toString(16));
    					else if(cc <= 0x18) return console.error("WK1 unsupported op " + cc.toString(16));
    					else if(cc <= 0x1E) return console.error("WK1 invalid opcode " + cc.toString(16));
    					else if(cc <= 0x73) return console.error("WK1 unsupported function opcode " + cc.toString(16));
    					// possible future functions ??
    					else return console.error("WK1 unrecognized opcode " + cc.toString(16));
    			}
    		}
    		if(out.length == 1) o[1].f = "" + out[0];
    		else console.error("WK1 bad formula parse |" + out.join("|") + "|");
    	}


    	function parse_cell_3(blob/*::, length*/) {
    		var o = [{c:0,r:0}, {t:'n',v:0}, 0];
    		o[0].r = blob.read_shift(2); o[3] = blob[blob.l++]; o[0].c = blob[blob.l++];
    		return o;
    	}

    	function parse_LABEL_16(blob, length) {
    		var o = parse_cell_3(blob);
    		o[1].t = 's';
    		o[1].v = blob.read_shift(length - 4, 'cstr');
    		return o;
    	}
    	function write_LABEL_16(R, C, wsidx, s) {
    		/* TODO: encoding */
    		var o = new_buf(6 + s.length);
    		o.write_shift(2, R);
    		o.write_shift(1, wsidx);
    		o.write_shift(1, C);
    		o.write_shift(1, 0x27);
    		for(var i = 0; i < s.length; ++i) {
    			var cc = s.charCodeAt(i);
    			o.write_shift(1, cc >= 0x80 ? 0x5F : cc);
    		}
    		o.write_shift(1, 0);
    		return o;
    	}

    	function parse_NUMBER_18(blob, length) {
    		var o = parse_cell_3(blob);
    		o[1].v = blob.read_shift(2);
    		var v = o[1].v >> 1;
    		if(o[1].v & 0x1) {
    			switch(v & 0x07) {
    				case 0: v = (v >> 3) * 5000; break;
    				case 1: v = (v >> 3) * 500; break;
    				case 2: v = (v >> 3) / 20; break;
    				case 3: v = (v >> 3) / 200; break;
    				case 4: v = (v >> 3) / 2000; break;
    				case 5: v = (v >> 3) / 20000; break;
    				case 6: v = (v >> 3) / 16; break;
    				case 7: v = (v >> 3) / 64; break;
    			}
    		}
    		o[1].v = v;
    		return o;
    	}

    	function parse_NUMBER_17(blob, length) {
    		var o = parse_cell_3(blob);
    		var v1 = blob.read_shift(4);
    		var v2 = blob.read_shift(4);
    		var e = blob.read_shift(2);
    		if(e == 0xFFFF) {
    			if(v1 === 0 && v2 === 0xC0000000) { o[1].t = "e"; o[1].v = 0x0F; } // ERR -> #VALUE!
    			else if(v1 === 0 && v2 === 0xD0000000) { o[1].t = "e"; o[1].v = 0x2A; } // NA -> #N/A
    			else o[1].v = 0;
    			return o;
    		}
    		var s = e & 0x8000; e = (e&0x7FFF) - 16446;
    		o[1].v = (1 - s*2) * (v2 * Math.pow(2, e+32) + v1 * Math.pow(2, e));
    		return o;
    	}
    	function write_NUMBER_17(R, C, wsidx, v) {
    		var o = new_buf(14);
    		o.write_shift(2, R);
    		o.write_shift(1, wsidx);
    		o.write_shift(1, C);
    		if(v == 0) {
    			o.write_shift(4, 0);
    			o.write_shift(4, 0);
    			o.write_shift(2, 0xFFFF);
    			return o;
    		}
    		var s = 0, e = 0, v1 = 0, v2 = 0;
    		if(v < 0) { s = 1; v = -v; }
    		e = Math.log2(v) | 0;
    		v /= Math.pow(2, e-31);
    		v2 = (v)>>>0;
    		if((v2&0x80000000) == 0) { v/=2; ++e; v2 = v >>> 0; }
    		v -= v2;
    		v2 |= 0x80000000;
    		v2 >>>= 0;
    		v *= Math.pow(2, 32);
    		v1 = v>>>0;
    		o.write_shift(4, v1);
    		o.write_shift(4, v2);
    		e += 0x3FFF + (s ? 0x8000 : 0);
    		o.write_shift(2, e);
    		return o;
    	}

    	function parse_FORMULA_19(blob, length) {
    		var o = parse_NUMBER_17(blob);
    		blob.l += length - 14; /* TODO: WK3 formula */
    		return o;
    	}

    	function parse_NUMBER_25(blob, length) {
    		var o = parse_cell_3(blob);
    		var v1 = blob.read_shift(4);
    		o[1].v = v1 >> 6;
    		return o;
    	}

    	function parse_NUMBER_27(blob, length) {
    		var o = parse_cell_3(blob);
    		var v1 = blob.read_shift(8,'f');
    		o[1].v = v1;
    		return o;
    	}

    	function parse_FORMULA_28(blob, length) {
    		var o = parse_NUMBER_27(blob);
    		blob.l += length - 10; /* TODO: formula */
    		return o;
    	}

    	function parse_SHEETNAMECS(blob, length) {
    		return blob[blob.l + length - 1] == 0 ? blob.read_shift(length, 'cstr') : "";
    	}

    	function parse_SHEETNAMELP(blob, length) {
    		var len = blob[blob.l++];
    		if(len > length - 1) len = length - 1;
    		var o = ""; while(o.length < len) o += String.fromCharCode(blob[blob.l++]);
    		return o;
    	}

    	function parse_SHEETINFOQP(blob, length, opts) {
    		if(!opts.qpro || length < 21) return;
    		var id = blob.read_shift(1);
    		blob.l += 17;
    		blob.l += 1; //var len = blob.read_shift(1);
    		blob.l += 2;
    		var nm = blob.read_shift(length - 21, 'cstr');
    		return [id, nm];
    	}

    	function parse_XFORMAT(blob, length) {
    		var o = {}, tgt = blob.l + length;
    		while(blob.l < tgt) {
    			var dt = blob.read_shift(2);
    			if(dt == 0x36b0) {
    				o[dt] = [0, ""];
    				o[dt][0] = blob.read_shift(2);
    				while(blob[blob.l]) { o[dt][1] += String.fromCharCode(blob[blob.l]); blob.l++; } blob.l++;
    			}
    			// TODO: 0x3a99 ??
    		}
    		return o;
    	}
    	function write_XFORMAT_SHEETNAME(name, wsidx) {
    		var out = new_buf(5 + name.length);
    		out.write_shift(2, 0x36b0);
    		out.write_shift(2, wsidx);
    		for(var i = 0; i < name.length; ++i) {
    			var cc = name.charCodeAt(i);
    			out[out.l++] = cc > 0x7F ? 0x5F : cc;
    		}
    		out[out.l++] = 0;
    		return out;
    	}

    	var WK1Enum = {
    		/*::[*/0x0000/*::]*/: { n:"BOF", f:parseuint16 },
    		/*::[*/0x0001/*::]*/: { n:"EOF" },
    		/*::[*/0x0002/*::]*/: { n:"CALCMODE" },
    		/*::[*/0x0003/*::]*/: { n:"CALCORDER" },
    		/*::[*/0x0004/*::]*/: { n:"SPLIT" },
    		/*::[*/0x0005/*::]*/: { n:"SYNC" },
    		/*::[*/0x0006/*::]*/: { n:"RANGE", f:parse_RANGE },
    		/*::[*/0x0007/*::]*/: { n:"WINDOW1" },
    		/*::[*/0x0008/*::]*/: { n:"COLW1" },
    		/*::[*/0x0009/*::]*/: { n:"WINTWO" },
    		/*::[*/0x000A/*::]*/: { n:"COLW2" },
    		/*::[*/0x000B/*::]*/: { n:"NAME" },
    		/*::[*/0x000C/*::]*/: { n:"BLANK" },
    		/*::[*/0x000D/*::]*/: { n:"INTEGER", f:parse_INTEGER },
    		/*::[*/0x000E/*::]*/: { n:"NUMBER", f:parse_NUMBER },
    		/*::[*/0x000F/*::]*/: { n:"LABEL", f:parse_LABEL },
    		/*::[*/0x0010/*::]*/: { n:"FORMULA", f:parse_FORMULA },
    		/*::[*/0x0018/*::]*/: { n:"TABLE" },
    		/*::[*/0x0019/*::]*/: { n:"ORANGE" },
    		/*::[*/0x001A/*::]*/: { n:"PRANGE" },
    		/*::[*/0x001B/*::]*/: { n:"SRANGE" },
    		/*::[*/0x001C/*::]*/: { n:"FRANGE" },
    		/*::[*/0x001D/*::]*/: { n:"KRANGE1" },
    		/*::[*/0x0020/*::]*/: { n:"HRANGE" },
    		/*::[*/0x0023/*::]*/: { n:"KRANGE2" },
    		/*::[*/0x0024/*::]*/: { n:"PROTEC" },
    		/*::[*/0x0025/*::]*/: { n:"FOOTER" },
    		/*::[*/0x0026/*::]*/: { n:"HEADER" },
    		/*::[*/0x0027/*::]*/: { n:"SETUP" },
    		/*::[*/0x0028/*::]*/: { n:"MARGINS" },
    		/*::[*/0x0029/*::]*/: { n:"LABELFMT" },
    		/*::[*/0x002A/*::]*/: { n:"TITLES" },
    		/*::[*/0x002B/*::]*/: { n:"SHEETJS" },
    		/*::[*/0x002D/*::]*/: { n:"GRAPH" },
    		/*::[*/0x002E/*::]*/: { n:"NGRAPH" },
    		/*::[*/0x002F/*::]*/: { n:"CALCCOUNT" },
    		/*::[*/0x0030/*::]*/: { n:"UNFORMATTED" },
    		/*::[*/0x0031/*::]*/: { n:"CURSORW12" },
    		/*::[*/0x0032/*::]*/: { n:"WINDOW" },
    		/*::[*/0x0033/*::]*/: { n:"STRING", f:parse_LABEL },
    		/*::[*/0x0037/*::]*/: { n:"PASSWORD" },
    		/*::[*/0x0038/*::]*/: { n:"LOCKED" },
    		/*::[*/0x003C/*::]*/: { n:"QUERY" },
    		/*::[*/0x003D/*::]*/: { n:"QUERYNAME" },
    		/*::[*/0x003E/*::]*/: { n:"PRINT" },
    		/*::[*/0x003F/*::]*/: { n:"PRINTNAME" },
    		/*::[*/0x0040/*::]*/: { n:"GRAPH2" },
    		/*::[*/0x0041/*::]*/: { n:"GRAPHNAME" },
    		/*::[*/0x0042/*::]*/: { n:"ZOOM" },
    		/*::[*/0x0043/*::]*/: { n:"SYMSPLIT" },
    		/*::[*/0x0044/*::]*/: { n:"NSROWS" },
    		/*::[*/0x0045/*::]*/: { n:"NSCOLS" },
    		/*::[*/0x0046/*::]*/: { n:"RULER" },
    		/*::[*/0x0047/*::]*/: { n:"NNAME" },
    		/*::[*/0x0048/*::]*/: { n:"ACOMM" },
    		/*::[*/0x0049/*::]*/: { n:"AMACRO" },
    		/*::[*/0x004A/*::]*/: { n:"PARSE" },
    		/*::[*/0x0066/*::]*/: { n:"PRANGES??" },
    		/*::[*/0x0067/*::]*/: { n:"RRANGES??" },
    		/*::[*/0x0068/*::]*/: { n:"FNAME??" },
    		/*::[*/0x0069/*::]*/: { n:"MRANGES??" },
    		/*::[*/0x00CC/*::]*/: { n:"SHEETNAMECS", f:parse_SHEETNAMECS },
    		/*::[*/0x00DE/*::]*/: { n:"SHEETNAMELP", f:parse_SHEETNAMELP },
    		/*::[*/0xFFFF/*::]*/: { n:"" }
    	};

    	var WK3Enum = {
    		/*::[*/0x0000/*::]*/: { n:"BOF" },
    		/*::[*/0x0001/*::]*/: { n:"EOF" },
    		/*::[*/0x0002/*::]*/: { n:"PASSWORD" },
    		/*::[*/0x0003/*::]*/: { n:"CALCSET" },
    		/*::[*/0x0004/*::]*/: { n:"WINDOWSET" },
    		/*::[*/0x0005/*::]*/: { n:"SHEETCELLPTR" },
    		/*::[*/0x0006/*::]*/: { n:"SHEETLAYOUT" },
    		/*::[*/0x0007/*::]*/: { n:"COLUMNWIDTH" },
    		/*::[*/0x0008/*::]*/: { n:"HIDDENCOLUMN" },
    		/*::[*/0x0009/*::]*/: { n:"USERRANGE" },
    		/*::[*/0x000A/*::]*/: { n:"SYSTEMRANGE" },
    		/*::[*/0x000B/*::]*/: { n:"ZEROFORCE" },
    		/*::[*/0x000C/*::]*/: { n:"SORTKEYDIR" },
    		/*::[*/0x000D/*::]*/: { n:"FILESEAL" },
    		/*::[*/0x000E/*::]*/: { n:"DATAFILLNUMS" },
    		/*::[*/0x000F/*::]*/: { n:"PRINTMAIN" },
    		/*::[*/0x0010/*::]*/: { n:"PRINTSTRING" },
    		/*::[*/0x0011/*::]*/: { n:"GRAPHMAIN" },
    		/*::[*/0x0012/*::]*/: { n:"GRAPHSTRING" },
    		/*::[*/0x0013/*::]*/: { n:"??" },
    		/*::[*/0x0014/*::]*/: { n:"ERRCELL" },
    		/*::[*/0x0015/*::]*/: { n:"NACELL" },
    		/*::[*/0x0016/*::]*/: { n:"LABEL16", f:parse_LABEL_16},
    		/*::[*/0x0017/*::]*/: { n:"NUMBER17", f:parse_NUMBER_17 },
    		/*::[*/0x0018/*::]*/: { n:"NUMBER18", f:parse_NUMBER_18 },
    		/*::[*/0x0019/*::]*/: { n:"FORMULA19", f:parse_FORMULA_19},
    		/*::[*/0x001A/*::]*/: { n:"FORMULA1A" },
    		/*::[*/0x001B/*::]*/: { n:"XFORMAT", f:parse_XFORMAT },
    		/*::[*/0x001C/*::]*/: { n:"DTLABELMISC" },
    		/*::[*/0x001D/*::]*/: { n:"DTLABELCELL" },
    		/*::[*/0x001E/*::]*/: { n:"GRAPHWINDOW" },
    		/*::[*/0x001F/*::]*/: { n:"CPA" },
    		/*::[*/0x0020/*::]*/: { n:"LPLAUTO" },
    		/*::[*/0x0021/*::]*/: { n:"QUERY" },
    		/*::[*/0x0022/*::]*/: { n:"HIDDENSHEET" },
    		/*::[*/0x0023/*::]*/: { n:"??" },
    		/*::[*/0x0025/*::]*/: { n:"NUMBER25", f:parse_NUMBER_25 },
    		/*::[*/0x0026/*::]*/: { n:"??" },
    		/*::[*/0x0027/*::]*/: { n:"NUMBER27", f:parse_NUMBER_27 },
    		/*::[*/0x0028/*::]*/: { n:"FORMULA28", f:parse_FORMULA_28 },
    		/*::[*/0x008E/*::]*/: { n:"??" },
    		/*::[*/0x0093/*::]*/: { n:"??" },
    		/*::[*/0x0096/*::]*/: { n:"??" },
    		/*::[*/0x0097/*::]*/: { n:"??" },
    		/*::[*/0x0098/*::]*/: { n:"??" },
    		/*::[*/0x0099/*::]*/: { n:"??" },
    		/*::[*/0x009A/*::]*/: { n:"??" },
    		/*::[*/0x009B/*::]*/: { n:"??" },
    		/*::[*/0x009C/*::]*/: { n:"??" },
    		/*::[*/0x00A3/*::]*/: { n:"??" },
    		/*::[*/0x00AE/*::]*/: { n:"??" },
    		/*::[*/0x00AF/*::]*/: { n:"??" },
    		/*::[*/0x00B0/*::]*/: { n:"??" },
    		/*::[*/0x00B1/*::]*/: { n:"??" },
    		/*::[*/0x00B8/*::]*/: { n:"??" },
    		/*::[*/0x00B9/*::]*/: { n:"??" },
    		/*::[*/0x00BA/*::]*/: { n:"??" },
    		/*::[*/0x00BB/*::]*/: { n:"??" },
    		/*::[*/0x00BC/*::]*/: { n:"??" },
    		/*::[*/0x00C3/*::]*/: { n:"??" },
    		/*::[*/0x00C9/*::]*/: { n:"??" },
    		/*::[*/0x00CC/*::]*/: { n:"SHEETNAMECS", f:parse_SHEETNAMECS },
    		/*::[*/0x00CD/*::]*/: { n:"??" },
    		/*::[*/0x00CE/*::]*/: { n:"??" },
    		/*::[*/0x00CF/*::]*/: { n:"??" },
    		/*::[*/0x00D0/*::]*/: { n:"??" },
    		/*::[*/0x0100/*::]*/: { n:"??" },
    		/*::[*/0x0103/*::]*/: { n:"??" },
    		/*::[*/0x0104/*::]*/: { n:"??" },
    		/*::[*/0x0105/*::]*/: { n:"??" },
    		/*::[*/0x0106/*::]*/: { n:"??" },
    		/*::[*/0x0107/*::]*/: { n:"??" },
    		/*::[*/0x0109/*::]*/: { n:"??" },
    		/*::[*/0x010A/*::]*/: { n:"??" },
    		/*::[*/0x010B/*::]*/: { n:"??" },
    		/*::[*/0x010C/*::]*/: { n:"??" },
    		/*::[*/0x010E/*::]*/: { n:"??" },
    		/*::[*/0x010F/*::]*/: { n:"??" },
    		/*::[*/0x0180/*::]*/: { n:"??" },
    		/*::[*/0x0185/*::]*/: { n:"??" },
    		/*::[*/0x0186/*::]*/: { n:"??" },
    		/*::[*/0x0189/*::]*/: { n:"??" },
    		/*::[*/0x018C/*::]*/: { n:"??" },
    		/*::[*/0x0200/*::]*/: { n:"??" },
    		/*::[*/0x0202/*::]*/: { n:"??" },
    		/*::[*/0x0201/*::]*/: { n:"??" },
    		/*::[*/0x0204/*::]*/: { n:"??" },
    		/*::[*/0x0205/*::]*/: { n:"??" },
    		/*::[*/0x0280/*::]*/: { n:"??" },
    		/*::[*/0x0281/*::]*/: { n:"??" },
    		/*::[*/0x0282/*::]*/: { n:"??" },
    		/*::[*/0x0283/*::]*/: { n:"??" },
    		/*::[*/0x0284/*::]*/: { n:"??" },
    		/*::[*/0x0285/*::]*/: { n:"??" },
    		/*::[*/0x0286/*::]*/: { n:"??" },
    		/*::[*/0x0287/*::]*/: { n:"??" },
    		/*::[*/0x0288/*::]*/: { n:"??" },
    		/*::[*/0x0292/*::]*/: { n:"??" },
    		/*::[*/0x0293/*::]*/: { n:"??" },
    		/*::[*/0x0294/*::]*/: { n:"??" },
    		/*::[*/0x0295/*::]*/: { n:"??" },
    		/*::[*/0x0296/*::]*/: { n:"??" },
    		/*::[*/0x0299/*::]*/: { n:"??" },
    		/*::[*/0x029A/*::]*/: { n:"??" },
    		/*::[*/0x0300/*::]*/: { n:"??" },
    		/*::[*/0x0304/*::]*/: { n:"??" },
    		/*::[*/0x0601/*::]*/: { n:"SHEETINFOQP", f:parse_SHEETINFOQP },
    		/*::[*/0x0640/*::]*/: { n:"??" },
    		/*::[*/0x0642/*::]*/: { n:"??" },
    		/*::[*/0x0701/*::]*/: { n:"??" },
    		/*::[*/0x0702/*::]*/: { n:"??" },
    		/*::[*/0x0703/*::]*/: { n:"??" },
    		/*::[*/0x0704/*::]*/: { n:"??" },
    		/*::[*/0x0780/*::]*/: { n:"??" },
    		/*::[*/0x0800/*::]*/: { n:"??" },
    		/*::[*/0x0801/*::]*/: { n:"??" },
    		/*::[*/0x0804/*::]*/: { n:"??" },
    		/*::[*/0x0A80/*::]*/: { n:"??" },
    		/*::[*/0x2AF6/*::]*/: { n:"??" },
    		/*::[*/0x3231/*::]*/: { n:"??" },
    		/*::[*/0x6E49/*::]*/: { n:"??" },
    		/*::[*/0x6F44/*::]*/: { n:"??" },
    		/*::[*/0xFFFF/*::]*/: { n:"" }
    	};
    	return {
    		sheet_to_wk1: sheet_to_wk1,
    		book_to_wk3: book_to_wk3,
    		to_workbook: lotus_to_workbook
    	};
    })();
    /* 18.4.7 rPr CT_RPrElt */
    function parse_rpr(rpr) {
    	var font = {}, m = rpr.match(tagregex), i = 0;
    	var pass = false;
    	if(m) for(;i!=m.length; ++i) {
    		var y = parsexmltag(m[i]);
    		switch(y[0].replace(/\w*:/g,"")) {
    			/* 18.8.12 condense CT_BooleanProperty */
    			/* ** not required . */
    			case '<condense': break;
    			/* 18.8.17 extend CT_BooleanProperty */
    			/* ** not required . */
    			case '<extend': break;
    			/* 18.8.36 shadow CT_BooleanProperty */
    			/* ** not required . */
    			case '<shadow':
    				if(!y.val) break;
    				/* falls through */
    			case '<shadow>':
    			case '<shadow/>': font.shadow = 1; break;
    			case '</shadow>': break;

    			/* 18.4.1 charset CT_IntProperty TODO */
    			case '<charset':
    				if(y.val == '1') break;
    				font.cp = CS2CP[parseInt(y.val, 10)];
    				break;

    			/* 18.4.2 outline CT_BooleanProperty TODO */
    			case '<outline':
    				if(!y.val) break;
    				/* falls through */
    			case '<outline>':
    			case '<outline/>': font.outline = 1; break;
    			case '</outline>': break;

    			/* 18.4.5 rFont CT_FontName */
    			case '<rFont': font.name = y.val; break;

    			/* 18.4.11 sz CT_FontSize */
    			case '<sz': font.sz = y.val; break;

    			/* 18.4.10 strike CT_BooleanProperty */
    			case '<strike':
    				if(!y.val) break;
    				/* falls through */
    			case '<strike>':
    			case '<strike/>': font.strike = 1; break;
    			case '</strike>': break;

    			/* 18.4.13 u CT_UnderlineProperty */
    			case '<u':
    				if(!y.val) break;
    				switch(y.val) {
    					case 'double': font.uval = "double"; break;
    					case 'singleAccounting': font.uval = "single-accounting"; break;
    					case 'doubleAccounting': font.uval = "double-accounting"; break;
    				}
    				/* falls through */
    			case '<u>':
    			case '<u/>': font.u = 1; break;
    			case '</u>': break;

    			/* 18.8.2 b */
    			case '<b':
    				if(y.val == '0') break;
    				/* falls through */
    			case '<b>':
    			case '<b/>': font.b = 1; break;
    			case '</b>': break;

    			/* 18.8.26 i */
    			case '<i':
    				if(y.val == '0') break;
    				/* falls through */
    			case '<i>':
    			case '<i/>': font.i = 1; break;
    			case '</i>': break;

    			/* 18.3.1.15 color CT_Color TODO: tint, theme, auto, indexed */
    			case '<color':
    				if(y.rgb) font.color = y.rgb.slice(2,8);
    				break;
    			case '<color>': case '<color/>': case '</color>': break;

    			/* 18.8.18 family ST_FontFamily */
    			case '<family': font.family = y.val; break;
    			case '<family>': case '<family/>': case '</family>': break;

    			/* 18.4.14 vertAlign CT_VerticalAlignFontProperty TODO */
    			case '<vertAlign': font.valign = y.val; break;
    			case '<vertAlign>': case '<vertAlign/>': case '</vertAlign>': break;

    			/* 18.8.35 scheme CT_FontScheme TODO */
    			case '<scheme': break;
    			case '<scheme>': case '<scheme/>': case '</scheme>': break;

    			/* 18.2.10 extLst CT_ExtensionList ? */
    			case '<extLst': case '<extLst>': case '</extLst>': break;
    			case '<ext': pass = true; break;
    			case '</ext>': pass = false; break;
    			default:
    				if(y[0].charCodeAt(1) !== 47 && !pass) throw new Error('Unrecognized rich format ' + y[0]);
    		}
    	}
    	return font;
    }

    var parse_rs = /*#__PURE__*/(function() {
    	var tregex = matchtag("t"), rpregex = matchtag("rPr");
    	/* 18.4.4 r CT_RElt */
    	function parse_r(r) {
    		/* 18.4.12 t ST_Xstring */
    		var t = r.match(tregex)/*, cp = 65001*/;
    		if(!t) return {t:"s", v:""};

    		var o/*:Cell*/ = ({t:'s', v:unescapexml(t[1])}/*:any*/);
    		var rpr = r.match(rpregex);
    		if(rpr) o.s = parse_rpr(rpr[1]);
    		return o;
    	}
    	var rregex = /<(?:\w+:)?r>/g, rend = /<\/(?:\w+:)?r>/;
    	return function parse_rs(rs) {
    		return rs.replace(rregex,"").split(rend).map(parse_r).filter(function(r) { return r.v; });
    	};
    })();


    /* Parse a list of <r> tags */
    var rs_to_html = /*#__PURE__*/(function parse_rs_factory() {
    	var nlregex = /(\r\n|\n)/g;
    	function parse_rpr2(font, intro, outro) {
    		var style/*:Array<string>*/ = [];

    		if(font.u) style.push("text-decoration: underline;");
    		if(font.uval) style.push("text-underline-style:" + font.uval + ";");
    		if(font.sz) style.push("font-size:" + font.sz + "pt;");
    		if(font.outline) style.push("text-effect: outline;");
    		if(font.shadow) style.push("text-shadow: auto;");
    		intro.push('<span style="' + style.join("") + '">');

    		if(font.b) { intro.push("<b>"); outro.push("</b>"); }
    		if(font.i) { intro.push("<i>"); outro.push("</i>"); }
    		if(font.strike) { intro.push("<s>"); outro.push("</s>"); }

    		var align = font.valign || "";
    		if(align == "superscript" || align == "super") align = "sup";
    		else if(align == "subscript") align = "sub";
    		if(align != "") { intro.push("<" + align + ">"); outro.push("</" + align + ">"); }

    		outro.push("</span>");
    		return font;
    	}

    	/* 18.4.4 r CT_RElt */
    	function r_to_html(r) {
    		var terms/*:[Array<string>, string, Array<string>]*/ = [[],r.v,[]];
    		if(!r.v) return "";

    		if(r.s) parse_rpr2(r.s, terms[0], terms[2]);

    		return terms[0].join("") + terms[1].replace(nlregex,'<br/>') + terms[2].join("");
    	}

    	return function parse_rs(rs) {
    		return rs.map(r_to_html).join("");
    	};
    })();

    /* 18.4.8 si CT_Rst */
    var sitregex = /<(?:\w+:)?t[^>]*>([^<]*)<\/(?:\w+:)?t>/g, sirregex = /<(?:\w+:)?r>/;
    var sirphregex = /<(?:\w+:)?rPh.*?>([\s\S]*?)<\/(?:\w+:)?rPh>/g;
    function parse_si(x, opts) {
    	var html = opts ? opts.cellHTML : true;
    	var z = {};
    	if(!x) return { t: "" };
    	//var y;
    	/* 18.4.12 t ST_Xstring (Plaintext String) */
    	// TODO: is whitespace actually valid here?
    	if(x.match(/^\s*<(?:\w+:)?t[^>]*>/)) {
    		z.t = unescapexml(utf8read(x.slice(x.indexOf(">")+1).split(/<\/(?:\w+:)?t>/)[0]||""));
    		z.r = utf8read(x);
    		if(html) z.h = escapehtml(z.t);
    	}
    	/* 18.4.4 r CT_RElt (Rich Text Run) */
    	else if((/*y = */x.match(sirregex))) {
    		z.r = utf8read(x);
    		z.t = unescapexml(utf8read((x.replace(sirphregex, '').match(sitregex)||[]).join("").replace(tagregex,"")));
    		if(html) z.h = rs_to_html(parse_rs(z.r));
    	}
    	/* 18.4.3 phoneticPr CT_PhoneticPr (TODO: needed for Asian support) */
    	/* 18.4.6 rPh CT_PhoneticRun (TODO: needed for Asian support) */
    	return z;
    }

    /* 18.4 Shared String Table */
    var sstr0 = /<(?:\w+:)?sst([^>]*)>([\s\S]*)<\/(?:\w+:)?sst>/;
    var sstr1 = /<(?:\w+:)?(?:si|sstItem)>/g;
    var sstr2 = /<\/(?:\w+:)?(?:si|sstItem)>/;
    function parse_sst_xml(data/*:string*/, opts)/*:SST*/ {
    	var s/*:SST*/ = ([]/*:any*/), ss = "";
    	if(!data) return s;
    	/* 18.4.9 sst CT_Sst */
    	var sst = data.match(sstr0);
    	if(sst) {
    		ss = sst[2].replace(sstr1,"").split(sstr2);
    		for(var i = 0; i != ss.length; ++i) {
    			var o = parse_si(ss[i].trim(), opts);
    			if(o != null) s[s.length] = o;
    		}
    		sst = parsexmltag(sst[1]); s.Count = sst.count; s.Unique = sst.uniqueCount;
    	}
    	return s;
    }
    /* [MS-XLSB] 2.4.221 BrtBeginSst */
    function parse_BrtBeginSst(data) {
    	return [data.read_shift(4), data.read_shift(4)];
    }

    /* [MS-XLSB] 2.1.7.45 Shared Strings */
    function parse_sst_bin(data, opts)/*:SST*/ {
    	var s/*:SST*/ = ([]/*:any*/);
    	var pass = false;
    	recordhopper(data, function hopper_sst(val, R, RT) {
    		switch(RT) {
    			case 0x009F: /* BrtBeginSst */
    				s.Count = val[0]; s.Unique = val[1]; break;
    			case 0x0013: /* BrtSSTItem */
    				s.push(val); break;
    			case 0x00A0: /* BrtEndSst */
    				return true;

    			case 0x0023: /* BrtFRTBegin */
    				pass = true; break;
    			case 0x0024: /* BrtFRTEnd */
    				pass = false; break;

    			default:
    				if(R.T);
    				if(!pass || opts.WTF) throw new Error("Unexpected record 0x" + RT.toString(16));
    		}
    	});
    	return s;
    }
    function _JS2ANSI(str/*:string*/)/*:Array<number>*/ {
    	var o/*:Array<number>*/ = [], oo = str.split("");
    	for(var i = 0; i < oo.length; ++i) o[i] = oo[i].charCodeAt(0);
    	return o;
    }

    /* [MS-OFFCRYPTO] 2.1.4 Version */
    function parse_CRYPTOVersion(blob, length/*:?number*/) {
    	var o/*:any*/ = {};
    	o.Major = blob.read_shift(2);
    	o.Minor = blob.read_shift(2);
    	/*:: if(length == null) return o; */
    	if(length >= 4) blob.l += length - 4;
    	return o;
    }

    /* [MS-OFFCRYPTO] 2.1.5 DataSpaceVersionInfo */
    function parse_DataSpaceVersionInfo(blob) {
    	var o = {};
    	o.id = blob.read_shift(0, 'lpp4');
    	o.R = parse_CRYPTOVersion(blob, 4);
    	o.U = parse_CRYPTOVersion(blob, 4);
    	o.W = parse_CRYPTOVersion(blob, 4);
    	return o;
    }

    /* [MS-OFFCRYPTO] 2.1.6.1 DataSpaceMapEntry Structure */
    function parse_DataSpaceMapEntry(blob) {
    	var len = blob.read_shift(4);
    	var end = blob.l + len - 4;
    	var o = {};
    	var cnt = blob.read_shift(4);
    	var comps/*:Array<{t:number, v:string}>*/ = [];
    	/* [MS-OFFCRYPTO] 2.1.6.2 DataSpaceReferenceComponent Structure */
    	while(cnt-- > 0) comps.push({ t: blob.read_shift(4), v: blob.read_shift(0, 'lpp4') });
    	o.name = blob.read_shift(0, 'lpp4');
    	o.comps = comps;
    	if(blob.l != end) throw new Error("Bad DataSpaceMapEntry: " + blob.l + " != " + end);
    	return o;
    }

    /* [MS-OFFCRYPTO] 2.1.6 DataSpaceMap */
    function parse_DataSpaceMap(blob) {
    	var o = [];
    	blob.l += 4; // must be 0x8
    	var cnt = blob.read_shift(4);
    	while(cnt-- > 0) o.push(parse_DataSpaceMapEntry(blob));
    	return o;
    }

    /* [MS-OFFCRYPTO] 2.1.7 DataSpaceDefinition */
    function parse_DataSpaceDefinition(blob)/*:Array<string>*/ {
    	var o/*:Array<string>*/ = [];
    	blob.l += 4; // must be 0x8
    	var cnt = blob.read_shift(4);
    	while(cnt-- > 0) o.push(blob.read_shift(0, 'lpp4'));
    	return o;
    }

    /* [MS-OFFCRYPTO] 2.1.8 DataSpaceDefinition */
    function parse_TransformInfoHeader(blob) {
    	var o = {};
    	/*var len = */blob.read_shift(4);
    	blob.l += 4; // must be 0x1
    	o.id = blob.read_shift(0, 'lpp4');
    	o.name = blob.read_shift(0, 'lpp4');
    	o.R = parse_CRYPTOVersion(blob, 4);
    	o.U = parse_CRYPTOVersion(blob, 4);
    	o.W = parse_CRYPTOVersion(blob, 4);
    	return o;
    }

    function parse_Primary(blob) {
    	/* [MS-OFFCRYPTO] 2.2.6 IRMDSTransformInfo */
    	var hdr = parse_TransformInfoHeader(blob);
    	/* [MS-OFFCRYPTO] 2.1.9 EncryptionTransformInfo */
    	hdr.ename = blob.read_shift(0, '8lpp4');
    	hdr.blksz = blob.read_shift(4);
    	hdr.cmode = blob.read_shift(4);
    	if(blob.read_shift(4) != 0x04) throw new Error("Bad !Primary record");
    	return hdr;
    }

    /* [MS-OFFCRYPTO] 2.3.2 Encryption Header */
    function parse_EncryptionHeader(blob, length/*:number*/) {
    	var tgt = blob.l + length;
    	var o = {};
    	o.Flags = (blob.read_shift(4) & 0x3F);
    	blob.l += 4;
    	o.AlgID = blob.read_shift(4);
    	var valid = false;
    	switch(o.AlgID) {
    		case 0x660E: case 0x660F: case 0x6610: valid = (o.Flags == 0x24); break;
    		case 0x6801: valid = (o.Flags == 0x04); break;
    		case 0: valid = (o.Flags == 0x10 || o.Flags == 0x04 || o.Flags == 0x24); break;
    		default: throw 'Unrecognized encryption algorithm: ' + o.AlgID;
    	}
    	if(!valid) throw new Error("Encryption Flags/AlgID mismatch");
    	o.AlgIDHash = blob.read_shift(4);
    	o.KeySize = blob.read_shift(4);
    	o.ProviderType = blob.read_shift(4);
    	blob.l += 8;
    	o.CSPName = blob.read_shift((tgt-blob.l)>>1, 'utf16le');
    	blob.l = tgt;
    	return o;
    }

    /* [MS-OFFCRYPTO] 2.3.3 Encryption Verifier */
    function parse_EncryptionVerifier(blob, length/*:number*/) {
    	var o = {}, tgt = blob.l + length;
    	blob.l += 4; // SaltSize must be 0x10
    	o.Salt = blob.slice(blob.l, blob.l+16); blob.l += 16;
    	o.Verifier = blob.slice(blob.l, blob.l+16); blob.l += 16;
    	/*var sz = */blob.read_shift(4);
    	o.VerifierHash = blob.slice(blob.l, tgt); blob.l = tgt;
    	return o;
    }

    /* [MS-OFFCRYPTO] 2.3.4.* EncryptionInfo Stream */
    function parse_EncryptionInfo(blob) {
    	var vers = parse_CRYPTOVersion(blob);
    	switch(vers.Minor) {
    		case 0x02: return [vers.Minor, parse_EncInfoStd(blob)];
    		case 0x03: return [vers.Minor, parse_EncInfoExt()];
    		case 0x04: return [vers.Minor, parse_EncInfoAgl(blob)];
    	}
    	throw new Error("ECMA-376 Encrypted file unrecognized Version: " + vers.Minor);
    }

    /* [MS-OFFCRYPTO] 2.3.4.5  EncryptionInfo Stream (Standard Encryption) */
    function parse_EncInfoStd(blob/*::, vers*/) {
    	var flags = blob.read_shift(4);
    	if((flags & 0x3F) != 0x24) throw new Error("EncryptionInfo mismatch");
    	var sz = blob.read_shift(4);
    	//var tgt = blob.l + sz;
    	var hdr = parse_EncryptionHeader(blob, sz);
    	var verifier = parse_EncryptionVerifier(blob, blob.length - blob.l);
    	return { t:"Std", h:hdr, v:verifier };
    }
    /* [MS-OFFCRYPTO] 2.3.4.6  EncryptionInfo Stream (Extensible Encryption) */
    function parse_EncInfoExt(/*::blob, vers*/) { throw new Error("File is password-protected: ECMA-376 Extensible"); }
    /* [MS-OFFCRYPTO] 2.3.4.10 EncryptionInfo Stream (Agile Encryption) */
    function parse_EncInfoAgl(blob/*::, vers*/) {
    	var KeyData = ["saltSize","blockSize","keyBits","hashSize","cipherAlgorithm","cipherChaining","hashAlgorithm","saltValue"];
    	blob.l+=4;
    	var xml = blob.read_shift(blob.length - blob.l, 'utf8');
    	var o = {};
    	xml.replace(tagregex, function xml_agile(x) {
    		var y/*:any*/ = parsexmltag(x);
    		switch(strip_ns(y[0])) {
    			case '<?xml': break;
    			case '<encryption': case '</encryption>': break;
    			case '<keyData': KeyData.forEach(function(k) { o[k] = y[k]; }); break;
    			case '<dataIntegrity': o.encryptedHmacKey = y.encryptedHmacKey; o.encryptedHmacValue = y.encryptedHmacValue; break;
    			case '<keyEncryptors>': case '<keyEncryptors': o.encs = []; break;
    			case '</keyEncryptors>': break;

    			case '<keyEncryptor': o.uri = y.uri; break;
    			case '</keyEncryptor>': break;
    			case '<encryptedKey': o.encs.push(y); break;
    			default: throw y[0];
    		}
    	});
    	return o;
    }

    /* [MS-OFFCRYPTO] 2.3.5.1 RC4 CryptoAPI Encryption Header */
    function parse_RC4CryptoHeader(blob, length/*:number*/) {
    	var o = {};
    	var vers = o.EncryptionVersionInfo = parse_CRYPTOVersion(blob, 4); length -= 4;
    	if(vers.Minor != 2) throw new Error('unrecognized minor version code: ' + vers.Minor);
    	if(vers.Major > 4 || vers.Major < 2) throw new Error('unrecognized major version code: ' + vers.Major);
    	o.Flags = blob.read_shift(4); length -= 4;
    	var sz = blob.read_shift(4); length -= 4;
    	o.EncryptionHeader = parse_EncryptionHeader(blob, sz); length -= sz;
    	o.EncryptionVerifier = parse_EncryptionVerifier(blob, length);
    	return o;
    }
    /* [MS-OFFCRYPTO] 2.3.6.1 RC4 Encryption Header */
    function parse_RC4Header(blob/*::, length*/) {
    	var o = {};
    	var vers = o.EncryptionVersionInfo = parse_CRYPTOVersion(blob, 4);
    	if(vers.Major != 1 || vers.Minor != 1) throw 'unrecognized version code ' + vers.Major + ' : ' + vers.Minor;
    	o.Salt = blob.read_shift(16);
    	o.EncryptedVerifier = blob.read_shift(16);
    	o.EncryptedVerifierHash = blob.read_shift(16);
    	return o;
    }

    /* [MS-OFFCRYPTO] 2.3.7.1 Binary Document Password Verifier Derivation */
    function crypto_CreatePasswordVerifier_Method1(Password/*:string*/) {
    	var Verifier = 0x0000, PasswordArray;
    	var PasswordDecoded = _JS2ANSI(Password);
    	var len = PasswordDecoded.length + 1, i, PasswordByte;
    	var Intermediate1, Intermediate2, Intermediate3;
    	PasswordArray = new_raw_buf(len);
    	PasswordArray[0] = PasswordDecoded.length;
    	for(i = 1; i != len; ++i) PasswordArray[i] = PasswordDecoded[i-1];
    	for(i = len-1; i >= 0; --i) {
    		PasswordByte = PasswordArray[i];
    		Intermediate1 = ((Verifier & 0x4000) === 0x0000) ? 0 : 1;
    		Intermediate2 = (Verifier << 1) & 0x7FFF;
    		Intermediate3 = Intermediate1 | Intermediate2;
    		Verifier = Intermediate3 ^ PasswordByte;
    	}
    	return Verifier ^ 0xCE4B;
    }

    /* [MS-OFFCRYPTO] 2.3.7.2 Binary Document XOR Array Initialization */
    var crypto_CreateXorArray_Method1 = /*#__PURE__*/(function() {
    	var PadArray = [0xBB, 0xFF, 0xFF, 0xBA, 0xFF, 0xFF, 0xB9, 0x80, 0x00, 0xBE, 0x0F, 0x00, 0xBF, 0x0F, 0x00];
    	var InitialCode = [0xE1F0, 0x1D0F, 0xCC9C, 0x84C0, 0x110C, 0x0E10, 0xF1CE, 0x313E, 0x1872, 0xE139, 0xD40F, 0x84F9, 0x280C, 0xA96A, 0x4EC3];
    	var XorMatrix = [0xAEFC, 0x4DD9, 0x9BB2, 0x2745, 0x4E8A, 0x9D14, 0x2A09, 0x7B61, 0xF6C2, 0xFDA5, 0xEB6B, 0xC6F7, 0x9DCF, 0x2BBF, 0x4563, 0x8AC6, 0x05AD, 0x0B5A, 0x16B4, 0x2D68, 0x5AD0, 0x0375, 0x06EA, 0x0DD4, 0x1BA8, 0x3750, 0x6EA0, 0xDD40, 0xD849, 0xA0B3, 0x5147, 0xA28E, 0x553D, 0xAA7A, 0x44D5, 0x6F45, 0xDE8A, 0xAD35, 0x4A4B, 0x9496, 0x390D, 0x721A, 0xEB23, 0xC667, 0x9CEF, 0x29FF, 0x53FE, 0xA7FC, 0x5FD9, 0x47D3, 0x8FA6, 0x0F6D, 0x1EDA, 0x3DB4, 0x7B68, 0xF6D0, 0xB861, 0x60E3, 0xC1C6, 0x93AD, 0x377B, 0x6EF6, 0xDDEC, 0x45A0, 0x8B40, 0x06A1, 0x0D42, 0x1A84, 0x3508, 0x6A10, 0xAA51, 0x4483, 0x8906, 0x022D, 0x045A, 0x08B4, 0x1168, 0x76B4, 0xED68, 0xCAF1, 0x85C3, 0x1BA7, 0x374E, 0x6E9C, 0x3730, 0x6E60, 0xDCC0, 0xA9A1, 0x4363, 0x86C6, 0x1DAD, 0x3331, 0x6662, 0xCCC4, 0x89A9, 0x0373, 0x06E6, 0x0DCC, 0x1021, 0x2042, 0x4084, 0x8108, 0x1231, 0x2462, 0x48C4];
    	var Ror = function(Byte) { return ((Byte/2) | (Byte*128)) & 0xFF; };
    	var XorRor = function(byte1, byte2) { return Ror(byte1 ^ byte2); };
    	var CreateXorKey_Method1 = function(Password) {
    		var XorKey = InitialCode[Password.length - 1];
    		var CurrentElement = 0x68;
    		for(var i = Password.length-1; i >= 0; --i) {
    			var Char = Password[i];
    			for(var j = 0; j != 7; ++j) {
    				if(Char & 0x40) XorKey ^= XorMatrix[CurrentElement];
    				Char *= 2; --CurrentElement;
    			}
    		}
    		return XorKey;
    	};
    	return function(password/*:string*/) {
    		var Password = _JS2ANSI(password);
    		var XorKey = CreateXorKey_Method1(Password);
    		var Index = Password.length;
    		var ObfuscationArray = new_raw_buf(16);
    		for(var i = 0; i != 16; ++i) ObfuscationArray[i] = 0x00;
    		var Temp, PasswordLastChar, PadIndex;
    		if((Index & 1) === 1) {
    			Temp = XorKey >> 8;
    			ObfuscationArray[Index] = XorRor(PadArray[0], Temp);
    			--Index;
    			Temp = XorKey & 0xFF;
    			PasswordLastChar = Password[Password.length - 1];
    			ObfuscationArray[Index] = XorRor(PasswordLastChar, Temp);
    		}
    		while(Index > 0) {
    			--Index;
    			Temp = XorKey >> 8;
    			ObfuscationArray[Index] = XorRor(Password[Index], Temp);
    			--Index;
    			Temp = XorKey & 0xFF;
    			ObfuscationArray[Index] = XorRor(Password[Index], Temp);
    		}
    		Index = 15;
    		PadIndex = 15 - Password.length;
    		while(PadIndex > 0) {
    			Temp = XorKey >> 8;
    			ObfuscationArray[Index] = XorRor(PadArray[PadIndex], Temp);
    			--Index;
    			--PadIndex;
    			Temp = XorKey & 0xFF;
    			ObfuscationArray[Index] = XorRor(Password[Index], Temp);
    			--Index;
    			--PadIndex;
    		}
    		return ObfuscationArray;
    	};
    })();

    /* [MS-OFFCRYPTO] 2.3.7.3 Binary Document XOR Data Transformation Method 1 */
    var crypto_DecryptData_Method1 = function(password/*:string*/, Data, XorArrayIndex, XorArray, O) {
    	/* If XorArray is set, use it; if O is not set, make changes in-place */
    	if(!O) O = Data;
    	if(!XorArray) XorArray = crypto_CreateXorArray_Method1(password);
    	var Index, Value;
    	for(Index = 0; Index != Data.length; ++Index) {
    		Value = Data[Index];
    		Value ^= XorArray[XorArrayIndex];
    		Value = ((Value>>5) | (Value<<3)) & 0xFF;
    		O[Index] = Value;
    		++XorArrayIndex;
    	}
    	return [O, XorArrayIndex, XorArray];
    };

    var crypto_MakeXorDecryptor = function(password/*:string*/) {
    	var XorArrayIndex = 0, XorArray = crypto_CreateXorArray_Method1(password);
    	return function(Data) {
    		var O = crypto_DecryptData_Method1("", Data, XorArrayIndex, XorArray);
    		XorArrayIndex = O[1];
    		return O[0];
    	};
    };

    /* 2.5.343 */
    function parse_XORObfuscation(blob, length, opts, out) {
    	var o = ({ key: parseuint16(blob), verificationBytes: parseuint16(blob) }/*:any*/);
    	if(opts.password) o.verifier = crypto_CreatePasswordVerifier_Method1(opts.password);
    	out.valid = o.verificationBytes === o.verifier;
    	if(out.valid) out.insitu = crypto_MakeXorDecryptor(opts.password);
    	return o;
    }

    /* 2.4.117 */
    function parse_FilePassHeader(blob, length/*:number*/, oo) {
    	var o = oo || {}; o.Info = blob.read_shift(2); blob.l -= 2;
    	if(o.Info === 1) o.Data = parse_RC4Header(blob);
    	else o.Data = parse_RC4CryptoHeader(blob, length);
    	return o;
    }
    function parse_FilePass(blob, length/*:number*/, opts) {
    	var o = ({ Type: opts.biff >= 8 ? blob.read_shift(2) : 0 }/*:any*/); /* wEncryptionType */
    	if(o.Type) parse_FilePassHeader(blob, length-2, o);
    	else parse_XORObfuscation(blob, opts.biff >= 8 ? length : length - 2, opts, o);
    	return o;
    }


    var RTF = /*#__PURE__*/(function() {
    	function rtf_to_sheet(d/*:RawData*/, opts)/*:Worksheet*/ {
    		switch(opts.type) {
    			case 'base64': return rtf_to_sheet_str(Base64_decode(d), opts);
    			case 'binary': return rtf_to_sheet_str(d, opts);
    			case 'buffer': return rtf_to_sheet_str(has_buf && Buffer.isBuffer(d) ? d.toString('binary') : a2s(d), opts);
    			case 'array':  return rtf_to_sheet_str(cc2str(d), opts);
    		}
    		throw new Error("Unrecognized type " + opts.type);
    	}

    	/* TODO: this is a stub */
    	function rtf_to_sheet_str(str/*:string*/, opts)/*:Worksheet*/ {
    		var o = opts || {};
    		var ws/*:Worksheet*/ = o.dense ? ([]/*:any*/) : ({}/*:any*/);

    		var rows = str.match(/\\trowd.*?\\row\b/g);
    		if(!rows.length) throw new Error("RTF missing table");
    		var range/*:Range*/ = ({s: {c:0, r:0}, e: {c:0, r:rows.length - 1}}/*:any*/);
    		rows.forEach(function(rowtf, R) {
    			if(Array.isArray(ws)) ws[R] = [];
    			var rtfre = /\\\w+\b/g;
    			var last_index = 0;
    			var res;
    			var C = -1;
    			while((res = rtfre.exec(rowtf))) {
    				switch(res[0]) {
    					case "\\cell":
    						var data = rowtf.slice(last_index, rtfre.lastIndex - res[0].length);
    						if(data[0] == " ") data = data.slice(1);
    						++C;
    						if(data.length) {
    							// TODO: value parsing, including codepage adjustments
    							var cell = {v: data, t:"s"};
    							if(Array.isArray(ws)) ws[R][C] = cell;
    							else ws[encode_cell({r:R, c:C})] = cell;
    						}
    						break;
    				}
    				last_index = rtfre.lastIndex;
    			}
    			if(C > range.e.c) range.e.c = C;
    		});
    		ws['!ref'] = encode_range(range);
    		return ws;
    	}

    	function rtf_to_workbook(d/*:RawData*/, opts)/*:Workbook*/ { return sheet_to_workbook(rtf_to_sheet(d, opts), opts); }

    	/* TODO: this is a stub */
    	function sheet_to_rtf(ws/*:Worksheet*//*::, opts*/)/*:string*/ {
    		var o = ["{\\rtf1\\ansi"];
    		var r = safe_decode_range(ws['!ref']), cell/*:Cell*/;
    		var dense = Array.isArray(ws);
    		for(var R = r.s.r; R <= r.e.r; ++R) {
    			o.push("\\trowd\\trautofit1");
    			for(var C = r.s.c; C <= r.e.c; ++C) o.push("\\cellx" + (C+1));
    			o.push("\\pard\\intbl");
    			for(C = r.s.c; C <= r.e.c; ++C) {
    				var coord = encode_cell({r:R,c:C});
    				cell = dense ? (ws[R]||[])[C]: ws[coord];
    				if(!cell || cell.v == null && (!cell.f || cell.F)) continue;
    				o.push(" " + (cell.w || (format_cell(cell), cell.w)));
    				o.push("\\cell");
    			}
    			o.push("\\pard\\intbl\\row");
    		}
    		return o.join("") + "}";
    	}

    	return {
    		to_workbook: rtf_to_workbook,
    		to_sheet: rtf_to_sheet,
    		from_sheet: sheet_to_rtf
    	};
    })();
    function hex2RGB(h) {
    	var o = h.slice(h[0]==="#"?1:0).slice(0,6);
    	return [parseInt(o.slice(0,2),16),parseInt(o.slice(2,4),16),parseInt(o.slice(4,6),16)];
    }
    function rgb2Hex(rgb) {
    	for(var i=0,o=1; i!=3; ++i) o = o*256 + (rgb[i]>255?255:rgb[i]<0?0:rgb[i]);
    	return o.toString(16).toUpperCase().slice(1);
    }

    function rgb2HSL(rgb) {
    	var R = rgb[0]/255, G = rgb[1]/255, B=rgb[2]/255;
    	var M = Math.max(R, G, B), m = Math.min(R, G, B), C = M - m;
    	if(C === 0) return [0, 0, R];

    	var H6 = 0, S = 0, L2 = (M + m);
    	S = C / (L2 > 1 ? 2 - L2 : L2);
    	switch(M){
    		case R: H6 = ((G - B) / C + 6)%6; break;
    		case G: H6 = ((B - R) / C + 2); break;
    		case B: H6 = ((R - G) / C + 4); break;
    	}
    	return [H6 / 6, S, L2 / 2];
    }

    function hsl2RGB(hsl){
    	var H = hsl[0], S = hsl[1], L = hsl[2];
    	var C = S * 2 * (L < 0.5 ? L : 1 - L), m = L - C/2;
    	var rgb = [m,m,m], h6 = 6*H;

    	var X;
    	if(S !== 0) switch(h6|0) {
    		case 0: case 6: X = C * h6; rgb[0] += C; rgb[1] += X; break;
    		case 1: X = C * (2 - h6);   rgb[0] += X; rgb[1] += C; break;
    		case 2: X = C * (h6 - 2);   rgb[1] += C; rgb[2] += X; break;
    		case 3: X = C * (4 - h6);   rgb[1] += X; rgb[2] += C; break;
    		case 4: X = C * (h6 - 4);   rgb[2] += C; rgb[0] += X; break;
    		case 5: X = C * (6 - h6);   rgb[2] += X; rgb[0] += C; break;
    	}
    	for(var i = 0; i != 3; ++i) rgb[i] = Math.round(rgb[i]*255);
    	return rgb;
    }

    /* 18.8.3 bgColor tint algorithm */
    function rgb_tint(hex, tint) {
    	if(tint === 0) return hex;
    	var hsl = rgb2HSL(hex2RGB(hex));
    	if (tint < 0) hsl[2] = hsl[2] * (1 + tint);
    	else hsl[2] = 1 - (1 - hsl[2]) * (1 - tint);
    	return rgb2Hex(hsl2RGB(hsl));
    }

    /* 18.3.1.13 width calculations */
    /* [MS-OI29500] 2.1.595 Column Width & Formatting */
    var DEF_MDW = 6, MAX_MDW = 15, MIN_MDW = 1, MDW = DEF_MDW;
    function width2px(width) { return Math.floor(( width + (Math.round(128/MDW))/256 )* MDW ); }
    function px2char(px) { return (Math.floor((px - 5)/MDW * 100 + 0.5))/100; }
    function char2width(chr) { return (Math.round((chr * MDW + 5)/MDW*256))/256; }
    //function px2char_(px) { return (((px - 5)/MDW * 100 + 0.5))/100; }
    //function char2width_(chr) { return (((chr * MDW + 5)/MDW*256))/256; }
    function cycle_width(collw) { return char2width(px2char(width2px(collw))); }
    /* XLSX/XLSB/XLS specify width in units of MDW */
    function find_mdw_colw(collw) {
    	var delta = Math.abs(collw - cycle_width(collw)), _MDW = MDW;
    	if(delta > 0.005) for(MDW=MIN_MDW; MDW<MAX_MDW; ++MDW) if(Math.abs(collw - cycle_width(collw)) <= delta) { delta = Math.abs(collw - cycle_width(collw)); _MDW = MDW; }
    	MDW = _MDW;
    }
    /* XLML specifies width in terms of pixels */
    /*function find_mdw_wpx(wpx) {
    	var delta = Infinity, guess = 0, _MDW = MIN_MDW;
    	for(MDW=MIN_MDW; MDW<MAX_MDW; ++MDW) {
    		guess = char2width_(px2char_(wpx))*256;
    		guess = (guess) % 1;
    		if(guess > 0.5) guess--;
    		if(Math.abs(guess) < delta) { delta = Math.abs(guess); _MDW = MDW; }
    	}
    	MDW = _MDW;
    }*/

    function process_col(coll/*:ColInfo*/) {
    	if(coll.width) {
    		coll.wpx = width2px(coll.width);
    		coll.wch = px2char(coll.wpx);
    		coll.MDW = MDW;
    	} else if(coll.wpx) {
    		coll.wch = px2char(coll.wpx);
    		coll.width = char2width(coll.wch);
    		coll.MDW = MDW;
    	} else if(typeof coll.wch == 'number') {
    		coll.width = char2width(coll.wch);
    		coll.wpx = width2px(coll.width);
    		coll.MDW = MDW;
    	}
    	if(coll.customWidth) delete coll.customWidth;
    }

    var DEF_PPI = 96, PPI = DEF_PPI;
    function px2pt(px) { return px * 96 / PPI; }
    function pt2px(pt) { return pt * PPI / 96; }

    /* [MS-EXSPXML3] 2.4.54 ST_enmPattern */
    var XLMLPatternTypeMap = {
    	"None": "none",
    	"Solid": "solid",
    	"Gray50": "mediumGray",
    	"Gray75": "darkGray",
    	"Gray25": "lightGray",
    	"HorzStripe": "darkHorizontal",
    	"VertStripe": "darkVertical",
    	"ReverseDiagStripe": "darkDown",
    	"DiagStripe": "darkUp",
    	"DiagCross": "darkGrid",
    	"ThickDiagCross": "darkTrellis",
    	"ThinHorzStripe": "lightHorizontal",
    	"ThinVertStripe": "lightVertical",
    	"ThinReverseDiagStripe": "lightDown",
    	"ThinHorzCross": "lightGrid"
    };

    /* 18.8.5 borders CT_Borders */
    function parse_borders(t, styles, themes, opts) {
    	styles.Borders = [];
    	var border = {};
    	var pass = false;
    	(t[0].match(tagregex)||[]).forEach(function(x) {
    		var y = parsexmltag(x);
    		switch(strip_ns(y[0])) {
    			case '<borders': case '<borders>': case '</borders>': break;

    			/* 18.8.4 border CT_Border */
    			case '<border': case '<border>': case '<border/>':
    				border = /*::(*/{}/*:: :any)*/;
    				if(y.diagonalUp) border.diagonalUp = parsexmlbool(y.diagonalUp);
    				if(y.diagonalDown) border.diagonalDown = parsexmlbool(y.diagonalDown);
    				styles.Borders.push(border);
    				break;
    			case '</border>': break;

    			/* note: not in spec, appears to be CT_BorderPr */
    			case '<left/>': break;
    			case '<left': case '<left>': break;
    			case '</left>': break;

    			/* note: not in spec, appears to be CT_BorderPr */
    			case '<right/>': break;
    			case '<right': case '<right>': break;
    			case '</right>': break;

    			/* 18.8.43 top CT_BorderPr */
    			case '<top/>': break;
    			case '<top': case '<top>': break;
    			case '</top>': break;

    			/* 18.8.6 bottom CT_BorderPr */
    			case '<bottom/>': break;
    			case '<bottom': case '<bottom>': break;
    			case '</bottom>': break;

    			/* 18.8.13 diagonal CT_BorderPr */
    			case '<diagonal': case '<diagonal>': case '<diagonal/>': break;
    			case '</diagonal>': break;

    			/* 18.8.25 horizontal CT_BorderPr */
    			case '<horizontal': case '<horizontal>': case '<horizontal/>': break;
    			case '</horizontal>': break;

    			/* 18.8.44 vertical CT_BorderPr */
    			case '<vertical': case '<vertical>': case '<vertical/>': break;
    			case '</vertical>': break;

    			/* 18.8.37 start CT_BorderPr */
    			case '<start': case '<start>': case '<start/>': break;
    			case '</start>': break;

    			/* 18.8.16 end CT_BorderPr */
    			case '<end': case '<end>': case '<end/>': break;
    			case '</end>': break;

    			/* 18.8.? color CT_Color */
    			case '<color': case '<color>':
    				break;
    			case '<color/>': case '</color>': break;

    			/* 18.2.10 extLst CT_ExtensionList ? */
    			case '<extLst': case '<extLst>': case '</extLst>': break;
    			case '<ext': pass = true; break;
    			case '</ext>': pass = false; break;
    			default: if(opts && opts.WTF) {
    				if(!pass) throw new Error('unrecognized ' + y[0] + ' in borders');
    			}
    		}
    	});
    }

    /* 18.8.21 fills CT_Fills */
    function parse_fills(t, styles, themes, opts) {
    	styles.Fills = [];
    	var fill = {};
    	var pass = false;
    	(t[0].match(tagregex)||[]).forEach(function(x) {
    		var y = parsexmltag(x);
    		switch(strip_ns(y[0])) {
    			case '<fills': case '<fills>': case '</fills>': break;

    			/* 18.8.20 fill CT_Fill */
    			case '<fill>': case '<fill': case '<fill/>':
    				fill = {}; styles.Fills.push(fill); break;
    			case '</fill>': break;

    			/* 18.8.24 gradientFill CT_GradientFill */
    			case '<gradientFill>': break;
    			case '<gradientFill':
    			case '</gradientFill>': styles.Fills.push(fill); fill = {}; break;

    			/* 18.8.32 patternFill CT_PatternFill */
    			case '<patternFill': case '<patternFill>':
    				if(y.patternType) fill.patternType = y.patternType;
    				break;
    			case '<patternFill/>': case '</patternFill>': break;

    			/* 18.8.3 bgColor CT_Color */
    			case '<bgColor':
    				if(!fill.bgColor) fill.bgColor = {};
    				if(y.indexed) fill.bgColor.indexed = parseInt(y.indexed, 10);
    				if(y.theme) fill.bgColor.theme = parseInt(y.theme, 10);
    				if(y.tint) fill.bgColor.tint = parseFloat(y.tint);
    				/* Excel uses ARGB strings */
    				if(y.rgb) fill.bgColor.rgb = y.rgb.slice(-6);
    				break;
    			case '<bgColor/>': case '</bgColor>': break;

    			/* 18.8.19 fgColor CT_Color */
    			case '<fgColor':
    				if(!fill.fgColor) fill.fgColor = {};
    				if(y.theme) fill.fgColor.theme = parseInt(y.theme, 10);
    				if(y.tint) fill.fgColor.tint = parseFloat(y.tint);
    				/* Excel uses ARGB strings */
    				if(y.rgb != null) fill.fgColor.rgb = y.rgb.slice(-6);
    				break;
    			case '<fgColor/>': case '</fgColor>': break;

    			/* 18.8.38 stop CT_GradientStop */
    			case '<stop': case '<stop/>': break;
    			case '</stop>': break;

    			/* 18.8.? color CT_Color */
    			case '<color': case '<color/>': break;
    			case '</color>': break;

    			/* 18.2.10 extLst CT_ExtensionList ? */
    			case '<extLst': case '<extLst>': case '</extLst>': break;
    			case '<ext': pass = true; break;
    			case '</ext>': pass = false; break;
    			default: if(opts && opts.WTF) {
    				if(!pass) throw new Error('unrecognized ' + y[0] + ' in fills');
    			}
    		}
    	});
    }

    /* 18.8.23 fonts CT_Fonts */
    function parse_fonts(t, styles, themes, opts) {
    	styles.Fonts = [];
    	var font = {};
    	var pass = false;
    	(t[0].match(tagregex)||[]).forEach(function(x) {
    		var y = parsexmltag(x);
    		switch(strip_ns(y[0])) {
    			case '<fonts': case '<fonts>': case '</fonts>': break;

    			/* 18.8.22 font CT_Font */
    			case '<font': case '<font>': break;
    			case '</font>': case '<font/>':
    				styles.Fonts.push(font);
    				font = {};
    				break;

    			/* 18.8.29 name CT_FontName */
    			case '<name': if(y.val) font.name = utf8read(y.val); break;
    			case '<name/>': case '</name>': break;

    			/* 18.8.2  b CT_BooleanProperty */
    			case '<b': font.bold = y.val ? parsexmlbool(y.val) : 1; break;
    			case '<b/>': font.bold = 1; break;

    			/* 18.8.26 i CT_BooleanProperty */
    			case '<i': font.italic = y.val ? parsexmlbool(y.val) : 1; break;
    			case '<i/>': font.italic = 1; break;

    			/* 18.4.13 u CT_UnderlineProperty */
    			case '<u':
    				switch(y.val) {
    					case "none": font.underline = 0x00; break;
    					case "single": font.underline = 0x01; break;
    					case "double": font.underline = 0x02; break;
    					case "singleAccounting": font.underline = 0x21; break;
    					case "doubleAccounting": font.underline = 0x22; break;
    				} break;
    			case '<u/>': font.underline = 1; break;

    			/* 18.4.10 strike CT_BooleanProperty */
    			case '<strike': font.strike = y.val ? parsexmlbool(y.val) : 1; break;
    			case '<strike/>': font.strike = 1; break;

    			/* 18.4.2  outline CT_BooleanProperty */
    			case '<outline': font.outline = y.val ? parsexmlbool(y.val) : 1; break;
    			case '<outline/>': font.outline = 1; break;

    			/* 18.8.36 shadow CT_BooleanProperty */
    			case '<shadow': font.shadow = y.val ? parsexmlbool(y.val) : 1; break;
    			case '<shadow/>': font.shadow = 1; break;

    			/* 18.8.12 condense CT_BooleanProperty */
    			case '<condense': font.condense = y.val ? parsexmlbool(y.val) : 1; break;
    			case '<condense/>': font.condense = 1; break;

    			/* 18.8.17 extend CT_BooleanProperty */
    			case '<extend': font.extend = y.val ? parsexmlbool(y.val) : 1; break;
    			case '<extend/>': font.extend = 1; break;

    			/* 18.4.11 sz CT_FontSize */
    			case '<sz': if(y.val) font.sz = +y.val; break;
    			case '<sz/>': case '</sz>': break;

    			/* 18.4.14 vertAlign CT_VerticalAlignFontProperty */
    			case '<vertAlign': if(y.val) font.vertAlign = y.val; break;
    			case '<vertAlign/>': case '</vertAlign>': break;

    			/* 18.8.18 family CT_FontFamily */
    			case '<family': if(y.val) font.family = parseInt(y.val,10); break;
    			case '<family/>': case '</family>': break;

    			/* 18.8.35 scheme CT_FontScheme */
    			case '<scheme': if(y.val) font.scheme = y.val; break;
    			case '<scheme/>': case '</scheme>': break;

    			/* 18.4.1 charset CT_IntProperty */
    			case '<charset':
    				if(y.val == '1') break;
    				y.codepage = CS2CP[parseInt(y.val, 10)];
    				break;

    			/* 18.?.? color CT_Color */
    			case '<color':
    				if(!font.color) font.color = {};
    				if(y.auto) font.color.auto = parsexmlbool(y.auto);

    				if(y.rgb) font.color.rgb = y.rgb.slice(-6);
    				else if(y.indexed) {
    					font.color.index = parseInt(y.indexed, 10);
    					var icv = XLSIcv[font.color.index];
    					if(font.color.index == 81) icv = XLSIcv[1];
    					if(!icv) icv = XLSIcv[1]; //throw new Error(x); // note: 206 is valid
    					font.color.rgb = icv[0].toString(16) + icv[1].toString(16) + icv[2].toString(16);
    				} else if(y.theme) {
    					font.color.theme = parseInt(y.theme, 10);
    					if(y.tint) font.color.tint = parseFloat(y.tint);
    					if(y.theme && themes.themeElements && themes.themeElements.clrScheme) {
    						font.color.rgb = rgb_tint(themes.themeElements.clrScheme[font.color.theme].rgb, font.color.tint || 0);
    					}
    				}

    				break;
    			case '<color/>': case '</color>': break;

    			/* note: sometimes mc:AlternateContent appears bare */
    			case '<AlternateContent': pass = true; break;
    			case '</AlternateContent>': pass = false; break;

    			/* 18.2.10 extLst CT_ExtensionList ? */
    			case '<extLst': case '<extLst>': case '</extLst>': break;
    			case '<ext': pass = true; break;
    			case '</ext>': pass = false; break;
    			default: if(opts && opts.WTF) {
    				if(!pass) throw new Error('unrecognized ' + y[0] + ' in fonts');
    			}
    		}
    	});
    }

    /* 18.8.31 numFmts CT_NumFmts */
    function parse_numFmts(t, styles, opts) {
    	styles.NumberFmt = [];
    	var k/*Array<number>*/ = (keys(table_fmt)/*:any*/);
    	for(var i=0; i < k.length; ++i) styles.NumberFmt[k[i]] = table_fmt[k[i]];
    	var m = t[0].match(tagregex);
    	if(!m) return;
    	for(i=0; i < m.length; ++i) {
    		var y = parsexmltag(m[i]);
    		switch(strip_ns(y[0])) {
    			case '<numFmts': case '</numFmts>': case '<numFmts/>': case '<numFmts>': break;
    			case '<numFmt': {
    				var f=unescapexml(utf8read(y.formatCode)), j=parseInt(y.numFmtId,10);
    				styles.NumberFmt[j] = f;
    				if(j>0) {
    					if(j > 0x188) {
    						for(j = 0x188; j > 0x3c; --j) if(styles.NumberFmt[j] == null) break;
    						styles.NumberFmt[j] = f;
    					}
    					SSF_load(f,j);
    				}
    			} break;
    			case '</numFmt>': break;
    			default: if(opts.WTF) throw new Error('unrecognized ' + y[0] + ' in numFmts');
    		}
    	}
    }

    /* 18.8.10 cellXfs CT_CellXfs */
    var cellXF_uint = [ "numFmtId", "fillId", "fontId", "borderId", "xfId" ];
    var cellXF_bool = [ "applyAlignment", "applyBorder", "applyFill", "applyFont", "applyNumberFormat", "applyProtection", "pivotButton", "quotePrefix" ];
    function parse_cellXfs(t, styles, opts) {
    	styles.CellXf = [];
    	var xf;
    	var pass = false;
    	(t[0].match(tagregex)||[]).forEach(function(x) {
    		var y = parsexmltag(x), i = 0;
    		switch(strip_ns(y[0])) {
    			case '<cellXfs': case '<cellXfs>': case '<cellXfs/>': case '</cellXfs>': break;

    			/* 18.8.45 xf CT_Xf */
    			case '<xf': case '<xf/>':
    				xf = y;
    				delete xf[0];
    				for(i = 0; i < cellXF_uint.length; ++i) if(xf[cellXF_uint[i]])
    					xf[cellXF_uint[i]] = parseInt(xf[cellXF_uint[i]], 10);
    				for(i = 0; i < cellXF_bool.length; ++i) if(xf[cellXF_bool[i]])
    					xf[cellXF_bool[i]] = parsexmlbool(xf[cellXF_bool[i]]);
    				if(styles.NumberFmt && xf.numFmtId > 0x188) {
    					for(i = 0x188; i > 0x3c; --i) if(styles.NumberFmt[xf.numFmtId] == styles.NumberFmt[i]) { xf.numFmtId = i; break; }
    				}
    				styles.CellXf.push(xf); break;
    			case '</xf>': break;

    			/* 18.8.1 alignment CT_CellAlignment */
    			case '<alignment': case '<alignment/>':
    				var alignment = {};
    				if(y.vertical) alignment.vertical = y.vertical;
    				if(y.horizontal) alignment.horizontal = y.horizontal;
    				if(y.textRotation != null) alignment.textRotation = y.textRotation;
    				if(y.indent) alignment.indent = y.indent;
    				if(y.wrapText) alignment.wrapText = parsexmlbool(y.wrapText);
    				xf.alignment = alignment;
    				break;
    			case '</alignment>': break;

    			/* 18.8.33 protection CT_CellProtection */
    			case '<protection':
    				break;
    			case '</protection>': case '<protection/>': break;

    			/* note: sometimes mc:AlternateContent appears bare */
    			case '<AlternateContent': pass = true; break;
    			case '</AlternateContent>': pass = false; break;

    			/* 18.2.10 extLst CT_ExtensionList ? */
    			case '<extLst': case '<extLst>': case '</extLst>': break;
    			case '<ext': pass = true; break;
    			case '</ext>': pass = false; break;
    			default: if(opts && opts.WTF) {
    				if(!pass) throw new Error('unrecognized ' + y[0] + ' in cellXfs');
    			}
    		}
    	});
    }

    /* 18.8 Styles CT_Stylesheet*/
    var parse_sty_xml= /*#__PURE__*/(function make_pstyx() {
    var numFmtRegex = /<(?:\w+:)?numFmts([^>]*)>[\S\s]*?<\/(?:\w+:)?numFmts>/;
    var cellXfRegex = /<(?:\w+:)?cellXfs([^>]*)>[\S\s]*?<\/(?:\w+:)?cellXfs>/;
    var fillsRegex = /<(?:\w+:)?fills([^>]*)>[\S\s]*?<\/(?:\w+:)?fills>/;
    var fontsRegex = /<(?:\w+:)?fonts([^>]*)>[\S\s]*?<\/(?:\w+:)?fonts>/;
    var bordersRegex = /<(?:\w+:)?borders([^>]*)>[\S\s]*?<\/(?:\w+:)?borders>/;

    return function parse_sty_xml(data, themes, opts) {
    	var styles = {};
    	if(!data) return styles;
    	data = data.replace(/<!--([\s\S]*?)-->/mg,"").replace(/<!DOCTYPE[^\[]*\[[^\]]*\]>/gm,"");
    	/* 18.8.39 styleSheet CT_Stylesheet */
    	var t;

    	/* 18.8.31 numFmts CT_NumFmts ? */
    	if((t=data.match(numFmtRegex))) parse_numFmts(t, styles, opts);

    	/* 18.8.23 fonts CT_Fonts ? */
    	if((t=data.match(fontsRegex))) parse_fonts(t, styles, themes, opts);

    	/* 18.8.21 fills CT_Fills ? */
    	if((t=data.match(fillsRegex))) parse_fills(t, styles, themes, opts);

    	/* 18.8.5  borders CT_Borders ? */
    	if((t=data.match(bordersRegex))) parse_borders(t, styles, themes, opts);

    	/* 18.8.9  cellStyleXfs CT_CellStyleXfs ? */
    	/* 18.8.8  cellStyles CT_CellStyles ? */

    	/* 18.8.10 cellXfs CT_CellXfs ? */
    	if((t=data.match(cellXfRegex))) parse_cellXfs(t, styles, opts);

    	/* 18.8.15 dxfs CT_Dxfs ? */
    	/* 18.8.42 tableStyles CT_TableStyles ? */
    	/* 18.8.11 colors CT_Colors ? */
    	/* 18.2.10 extLst CT_ExtensionList ? */

    	return styles;
    };
    })();
    /* [MS-XLSB] 2.4.657 BrtFmt */
    function parse_BrtFmt(data, length/*:number*/) {
    	var numFmtId = data.read_shift(2);
    	var stFmtCode = parse_XLWideString(data);
    	return [numFmtId, stFmtCode];
    }

    /* [MS-XLSB] 2.4.659 BrtFont TODO */
    function parse_BrtFont(data, length/*:number*/, opts) {
    	var out = ({}/*:any*/);

    	out.sz = data.read_shift(2) / 20;

    	var grbit = parse_FontFlags(data);
    	if(grbit.fItalic) out.italic = 1;
    	if(grbit.fCondense) out.condense = 1;
    	if(grbit.fExtend) out.extend = 1;
    	if(grbit.fShadow) out.shadow = 1;
    	if(grbit.fOutline) out.outline = 1;
    	if(grbit.fStrikeout) out.strike = 1;

    	var bls = data.read_shift(2);
    	if(bls === 0x02BC) out.bold = 1;

    	switch(data.read_shift(2)) {
    		/* case 0: out.vertAlign = "baseline"; break; */
    		case 1: out.vertAlign = "superscript"; break;
    		case 2: out.vertAlign = "subscript"; break;
    	}

    	var underline = data.read_shift(1);
    	if(underline != 0) out.underline = underline;

    	var family = data.read_shift(1);
    	if(family > 0) out.family = family;

    	var bCharSet = data.read_shift(1);
    	if(bCharSet > 0) out.charset = bCharSet;

    	data.l++;
    	out.color = parse_BrtColor(data);

    	switch(data.read_shift(1)) {
    		/* case 0: out.scheme = "none": break; */
    		case 1: out.scheme = "major"; break;
    		case 2: out.scheme = "minor"; break;
    	}

    	out.name = parse_XLWideString(data);

    	return out;
    }
    /* TODO: gradient fill representation */
    var parse_BrtFill = parsenoop;

    /* [MS-XLSB] 2.4.824 BrtXF */
    function parse_BrtXF(data, length/*:number*/) {
    	var tgt = data.l + length;
    	var ixfeParent = data.read_shift(2);
    	var ifmt = data.read_shift(2);
    	data.l = tgt;
    	return {ixfe:ixfeParent, numFmtId:ifmt };
    }
    /* [MS-XLSB] 2.4.302 BrtBorder TODO */
    var parse_BrtBorder = parsenoop;

    /* [MS-XLSB] 2.1.7.50 Styles */
    function parse_sty_bin(data, themes, opts) {
    	var styles = {};
    	styles.NumberFmt = ([]/*:any*/);
    	for(var y in table_fmt) styles.NumberFmt[y] = table_fmt[y];

    	styles.CellXf = [];
    	styles.Fonts = [];
    	var state/*:Array<string>*/ = [];
    	var pass = false;
    	recordhopper(data, function hopper_sty(val, R, RT) {
    		switch(RT) {
    			case 0x002C: /* BrtFmt */
    				styles.NumberFmt[val[0]] = val[1]; SSF_load(val[1], val[0]);
    				break;
    			case 0x002B: /* BrtFont */
    				styles.Fonts.push(val);
    				if(val.color.theme != null && themes && themes.themeElements && themes.themeElements.clrScheme) {
    					val.color.rgb = rgb_tint(themes.themeElements.clrScheme[val.color.theme].rgb, val.color.tint || 0);
    				}
    				break;
    			case 0x0401: /* BrtKnownFonts */ break;
    			case 0x002D: /* BrtFill */
    				break;
    			case 0x002E: /* BrtBorder */
    				break;
    			case 0x002F: /* BrtXF */
    				if(state[state.length - 1] == 0x0269 /* BrtBeginCellXFs */) {
    					styles.CellXf.push(val);
    				}
    				break;
    			case 0x0030: /* BrtStyle */
    			case 0x01FB: /* BrtDXF */
    			case 0x023C: /* BrtMRUColor */
    			case 0x01DB: /* BrtIndexedColor */
    				break;

    			case 0x0493: /* BrtDXF14 */
    			case 0x0836: /* BrtDXF15 */
    			case 0x046A: /* BrtSlicerStyleElement */
    			case 0x0200: /* BrtTableStyleElement */
    			case 0x082F: /* BrtTimelineStyleElement */
    			case 0x0C00: /* BrtUid */
    				break;

    			case 0x0023: /* BrtFRTBegin */
    				pass = true; break;
    			case 0x0024: /* BrtFRTEnd */
    				pass = false; break;
    			case 0x0025: /* BrtACBegin */
    				state.push(RT); pass = true; break;
    			case 0x0026: /* BrtACEnd */
    				state.pop(); pass = false; break;

    			default:
    				if(R.T > 0) state.push(RT);
    				else if(R.T < 0) state.pop();
    				else if(!pass || (opts.WTF && state[state.length-1] != 0x0025 /* BrtACBegin */)) throw new Error("Unexpected record 0x" + RT.toString(16));
    		}
    	});
    	return styles;
    }
    /* Even though theme layout is dk1 lt1 dk2 lt2, true order is lt1 dk1 lt2 dk2 */
    var XLSXThemeClrScheme = [
    	'</a:lt1>', '</a:dk1>', '</a:lt2>', '</a:dk2>',
    	'</a:accent1>', '</a:accent2>', '</a:accent3>',
    	'</a:accent4>', '</a:accent5>', '</a:accent6>',
    	'</a:hlink>', '</a:folHlink>'
    ];
    /* 20.1.6.2 clrScheme CT_ColorScheme */
    function parse_clrScheme(t, themes, opts) {
    	themes.themeElements.clrScheme = [];
    	var color = {};
    	(t[0].match(tagregex)||[]).forEach(function(x) {
    		var y = parsexmltag(x);
    		switch(y[0]) {
    			/* 20.1.6.2 clrScheme (Color Scheme) CT_ColorScheme */
    			case '<a:clrScheme': case '</a:clrScheme>': break;

    			/* 20.1.2.3.32 srgbClr CT_SRgbColor */
    			case '<a:srgbClr':
    				color.rgb = y.val; break;

    			/* 20.1.2.3.33 sysClr CT_SystemColor */
    			case '<a:sysClr':
    				color.rgb = y.lastClr; break;

    			/* 20.1.4.1.1 accent1 (Accent 1) */
    			/* 20.1.4.1.2 accent2 (Accent 2) */
    			/* 20.1.4.1.3 accent3 (Accent 3) */
    			/* 20.1.4.1.4 accent4 (Accent 4) */
    			/* 20.1.4.1.5 accent5 (Accent 5) */
    			/* 20.1.4.1.6 accent6 (Accent 6) */
    			/* 20.1.4.1.9 dk1 (Dark 1) */
    			/* 20.1.4.1.10 dk2 (Dark 2) */
    			/* 20.1.4.1.15 folHlink (Followed Hyperlink) */
    			/* 20.1.4.1.19 hlink (Hyperlink) */
    			/* 20.1.4.1.22 lt1 (Light 1) */
    			/* 20.1.4.1.23 lt2 (Light 2) */
    			case '<a:dk1>': case '</a:dk1>':
    			case '<a:lt1>': case '</a:lt1>':
    			case '<a:dk2>': case '</a:dk2>':
    			case '<a:lt2>': case '</a:lt2>':
    			case '<a:accent1>': case '</a:accent1>':
    			case '<a:accent2>': case '</a:accent2>':
    			case '<a:accent3>': case '</a:accent3>':
    			case '<a:accent4>': case '</a:accent4>':
    			case '<a:accent5>': case '</a:accent5>':
    			case '<a:accent6>': case '</a:accent6>':
    			case '<a:hlink>': case '</a:hlink>':
    			case '<a:folHlink>': case '</a:folHlink>':
    				if (y[0].charAt(1) === '/') {
    					themes.themeElements.clrScheme[XLSXThemeClrScheme.indexOf(y[0])] = color;
    					color = {};
    				} else {
    					color.name = y[0].slice(3, y[0].length - 1);
    				}
    				break;

    			default: if(opts && opts.WTF) throw new Error('Unrecognized ' + y[0] + ' in clrScheme');
    		}
    	});
    }

    /* 20.1.4.1.18 fontScheme CT_FontScheme */
    function parse_fontScheme(/*::t, themes, opts*/) { }

    /* 20.1.4.1.15 fmtScheme CT_StyleMatrix */
    function parse_fmtScheme(/*::t, themes, opts*/) { }

    var clrsregex = /<a:clrScheme([^>]*)>[\s\S]*<\/a:clrScheme>/;
    var fntsregex = /<a:fontScheme([^>]*)>[\s\S]*<\/a:fontScheme>/;
    var fmtsregex = /<a:fmtScheme([^>]*)>[\s\S]*<\/a:fmtScheme>/;

    /* 20.1.6.10 themeElements CT_BaseStyles */
    function parse_themeElements(data, themes, opts) {
    	themes.themeElements = {};

    	var t;

    	[
    		/* clrScheme CT_ColorScheme */
    		['clrScheme', clrsregex, parse_clrScheme],
    		/* fontScheme CT_FontScheme */
    		['fontScheme', fntsregex, parse_fontScheme],
    		/* fmtScheme CT_StyleMatrix */
    		['fmtScheme', fmtsregex, parse_fmtScheme]
    	].forEach(function(m) {
    		if(!(t=data.match(m[1]))) throw new Error(m[0] + ' not found in themeElements');
    		m[2](t, themes, opts);
    	});
    }

    var themeltregex = /<a:themeElements([^>]*)>[\s\S]*<\/a:themeElements>/;

    /* 14.2.7 Theme Part */
    function parse_theme_xml(data/*:string*/, opts) {
    	/* 20.1.6.9 theme CT_OfficeStyleSheet */
    	if(!data || data.length === 0) data = write_theme();

    	var t;
    	var themes = {};

    	/* themeElements CT_BaseStyles */
    	if(!(t=data.match(themeltregex))) throw new Error('themeElements not found in theme');
    	parse_themeElements(t[0], themes, opts);
    	themes.raw = data;
    	return themes;
    }

    function write_theme(Themes, opts)/*:string*/ {
    	if(opts && opts.themeXLSX) return opts.themeXLSX;
    	if(Themes && typeof Themes.raw == "string") return Themes.raw;
    	var o = [XML_HEADER];
    	o[o.length] = '<a:theme xmlns:a="http://schemas.openxmlformats.org/drawingml/2006/main" name="Office Theme">';
    	o[o.length] =  '<a:themeElements>';

    	o[o.length] =   '<a:clrScheme name="Office">';
    	o[o.length] =    '<a:dk1><a:sysClr val="windowText" lastClr="000000"/></a:dk1>';
    	o[o.length] =    '<a:lt1><a:sysClr val="window" lastClr="FFFFFF"/></a:lt1>';
    	o[o.length] =    '<a:dk2><a:srgbClr val="1F497D"/></a:dk2>';
    	o[o.length] =    '<a:lt2><a:srgbClr val="EEECE1"/></a:lt2>';
    	o[o.length] =    '<a:accent1><a:srgbClr val="4F81BD"/></a:accent1>';
    	o[o.length] =    '<a:accent2><a:srgbClr val="C0504D"/></a:accent2>';
    	o[o.length] =    '<a:accent3><a:srgbClr val="9BBB59"/></a:accent3>';
    	o[o.length] =    '<a:accent4><a:srgbClr val="8064A2"/></a:accent4>';
    	o[o.length] =    '<a:accent5><a:srgbClr val="4BACC6"/></a:accent5>';
    	o[o.length] =    '<a:accent6><a:srgbClr val="F79646"/></a:accent6>';
    	o[o.length] =    '<a:hlink><a:srgbClr val="0000FF"/></a:hlink>';
    	o[o.length] =    '<a:folHlink><a:srgbClr val="800080"/></a:folHlink>';
    	o[o.length] =   '</a:clrScheme>';

    	o[o.length] =   '<a:fontScheme name="Office">';
    	o[o.length] =    '<a:majorFont>';
    	o[o.length] =     '<a:latin typeface="Cambria"/>';
    	o[o.length] =     '<a:ea typeface=""/>';
    	o[o.length] =     '<a:cs typeface=""/>';
    	o[o.length] =     '<a:font script="Jpan" typeface="ＭＳ Ｐゴシック"/>';
    	o[o.length] =     '<a:font script="Hang" typeface="맑은 고딕"/>';
    	o[o.length] =     '<a:font script="Hans" typeface="宋体"/>';
    	o[o.length] =     '<a:font script="Hant" typeface="新細明體"/>';
    	o[o.length] =     '<a:font script="Arab" typeface="Times New Roman"/>';
    	o[o.length] =     '<a:font script="Hebr" typeface="Times New Roman"/>';
    	o[o.length] =     '<a:font script="Thai" typeface="Tahoma"/>';
    	o[o.length] =     '<a:font script="Ethi" typeface="Nyala"/>';
    	o[o.length] =     '<a:font script="Beng" typeface="Vrinda"/>';
    	o[o.length] =     '<a:font script="Gujr" typeface="Shruti"/>';
    	o[o.length] =     '<a:font script="Khmr" typeface="MoolBoran"/>';
    	o[o.length] =     '<a:font script="Knda" typeface="Tunga"/>';
    	o[o.length] =     '<a:font script="Guru" typeface="Raavi"/>';
    	o[o.length] =     '<a:font script="Cans" typeface="Euphemia"/>';
    	o[o.length] =     '<a:font script="Cher" typeface="Plantagenet Cherokee"/>';
    	o[o.length] =     '<a:font script="Yiii" typeface="Microsoft Yi Baiti"/>';
    	o[o.length] =     '<a:font script="Tibt" typeface="Microsoft Himalaya"/>';
    	o[o.length] =     '<a:font script="Thaa" typeface="MV Boli"/>';
    	o[o.length] =     '<a:font script="Deva" typeface="Mangal"/>';
    	o[o.length] =     '<a:font script="Telu" typeface="Gautami"/>';
    	o[o.length] =     '<a:font script="Taml" typeface="Latha"/>';
    	o[o.length] =     '<a:font script="Syrc" typeface="Estrangelo Edessa"/>';
    	o[o.length] =     '<a:font script="Orya" typeface="Kalinga"/>';
    	o[o.length] =     '<a:font script="Mlym" typeface="Kartika"/>';
    	o[o.length] =     '<a:font script="Laoo" typeface="DokChampa"/>';
    	o[o.length] =     '<a:font script="Sinh" typeface="Iskoola Pota"/>';
    	o[o.length] =     '<a:font script="Mong" typeface="Mongolian Baiti"/>';
    	o[o.length] =     '<a:font script="Viet" typeface="Times New Roman"/>';
    	o[o.length] =     '<a:font script="Uigh" typeface="Microsoft Uighur"/>';
    	o[o.length] =     '<a:font script="Geor" typeface="Sylfaen"/>';
    	o[o.length] =    '</a:majorFont>';
    	o[o.length] =    '<a:minorFont>';
    	o[o.length] =     '<a:latin typeface="Calibri"/>';
    	o[o.length] =     '<a:ea typeface=""/>';
    	o[o.length] =     '<a:cs typeface=""/>';
    	o[o.length] =     '<a:font script="Jpan" typeface="ＭＳ Ｐゴシック"/>';
    	o[o.length] =     '<a:font script="Hang" typeface="맑은 고딕"/>';
    	o[o.length] =     '<a:font script="Hans" typeface="宋体"/>';
    	o[o.length] =     '<a:font script="Hant" typeface="新細明體"/>';
    	o[o.length] =     '<a:font script="Arab" typeface="Arial"/>';
    	o[o.length] =     '<a:font script="Hebr" typeface="Arial"/>';
    	o[o.length] =     '<a:font script="Thai" typeface="Tahoma"/>';
    	o[o.length] =     '<a:font script="Ethi" typeface="Nyala"/>';
    	o[o.length] =     '<a:font script="Beng" typeface="Vrinda"/>';
    	o[o.length] =     '<a:font script="Gujr" typeface="Shruti"/>';
    	o[o.length] =     '<a:font script="Khmr" typeface="DaunPenh"/>';
    	o[o.length] =     '<a:font script="Knda" typeface="Tunga"/>';
    	o[o.length] =     '<a:font script="Guru" typeface="Raavi"/>';
    	o[o.length] =     '<a:font script="Cans" typeface="Euphemia"/>';
    	o[o.length] =     '<a:font script="Cher" typeface="Plantagenet Cherokee"/>';
    	o[o.length] =     '<a:font script="Yiii" typeface="Microsoft Yi Baiti"/>';
    	o[o.length] =     '<a:font script="Tibt" typeface="Microsoft Himalaya"/>';
    	o[o.length] =     '<a:font script="Thaa" typeface="MV Boli"/>';
    	o[o.length] =     '<a:font script="Deva" typeface="Mangal"/>';
    	o[o.length] =     '<a:font script="Telu" typeface="Gautami"/>';
    	o[o.length] =     '<a:font script="Taml" typeface="Latha"/>';
    	o[o.length] =     '<a:font script="Syrc" typeface="Estrangelo Edessa"/>';
    	o[o.length] =     '<a:font script="Orya" typeface="Kalinga"/>';
    	o[o.length] =     '<a:font script="Mlym" typeface="Kartika"/>';
    	o[o.length] =     '<a:font script="Laoo" typeface="DokChampa"/>';
    	o[o.length] =     '<a:font script="Sinh" typeface="Iskoola Pota"/>';
    	o[o.length] =     '<a:font script="Mong" typeface="Mongolian Baiti"/>';
    	o[o.length] =     '<a:font script="Viet" typeface="Arial"/>';
    	o[o.length] =     '<a:font script="Uigh" typeface="Microsoft Uighur"/>';
    	o[o.length] =     '<a:font script="Geor" typeface="Sylfaen"/>';
    	o[o.length] =    '</a:minorFont>';
    	o[o.length] =   '</a:fontScheme>';

    	o[o.length] =   '<a:fmtScheme name="Office">';
    	o[o.length] =    '<a:fillStyleLst>';
    	o[o.length] =     '<a:solidFill><a:schemeClr val="phClr"/></a:solidFill>';
    	o[o.length] =     '<a:gradFill rotWithShape="1">';
    	o[o.length] =      '<a:gsLst>';
    	o[o.length] =       '<a:gs pos="0"><a:schemeClr val="phClr"><a:tint val="50000"/><a:satMod val="300000"/></a:schemeClr></a:gs>';
    	o[o.length] =       '<a:gs pos="35000"><a:schemeClr val="phClr"><a:tint val="37000"/><a:satMod val="300000"/></a:schemeClr></a:gs>';
    	o[o.length] =       '<a:gs pos="100000"><a:schemeClr val="phClr"><a:tint val="15000"/><a:satMod val="350000"/></a:schemeClr></a:gs>';
    	o[o.length] =      '</a:gsLst>';
    	o[o.length] =      '<a:lin ang="16200000" scaled="1"/>';
    	o[o.length] =     '</a:gradFill>';
    	o[o.length] =     '<a:gradFill rotWithShape="1">';
    	o[o.length] =      '<a:gsLst>';
    	o[o.length] =       '<a:gs pos="0"><a:schemeClr val="phClr"><a:tint val="100000"/><a:shade val="100000"/><a:satMod val="130000"/></a:schemeClr></a:gs>';
    	o[o.length] =       '<a:gs pos="100000"><a:schemeClr val="phClr"><a:tint val="50000"/><a:shade val="100000"/><a:satMod val="350000"/></a:schemeClr></a:gs>';
    	o[o.length] =      '</a:gsLst>';
    	o[o.length] =      '<a:lin ang="16200000" scaled="0"/>';
    	o[o.length] =     '</a:gradFill>';
    	o[o.length] =    '</a:fillStyleLst>';
    	o[o.length] =    '<a:lnStyleLst>';
    	o[o.length] =     '<a:ln w="9525" cap="flat" cmpd="sng" algn="ctr"><a:solidFill><a:schemeClr val="phClr"><a:shade val="95000"/><a:satMod val="105000"/></a:schemeClr></a:solidFill><a:prstDash val="solid"/></a:ln>';
    	o[o.length] =     '<a:ln w="25400" cap="flat" cmpd="sng" algn="ctr"><a:solidFill><a:schemeClr val="phClr"/></a:solidFill><a:prstDash val="solid"/></a:ln>';
    	o[o.length] =     '<a:ln w="38100" cap="flat" cmpd="sng" algn="ctr"><a:solidFill><a:schemeClr val="phClr"/></a:solidFill><a:prstDash val="solid"/></a:ln>';
    	o[o.length] =    '</a:lnStyleLst>';
    	o[o.length] =    '<a:effectStyleLst>';
    	o[o.length] =     '<a:effectStyle>';
    	o[o.length] =      '<a:effectLst>';
    	o[o.length] =       '<a:outerShdw blurRad="40000" dist="20000" dir="5400000" rotWithShape="0"><a:srgbClr val="000000"><a:alpha val="38000"/></a:srgbClr></a:outerShdw>';
    	o[o.length] =      '</a:effectLst>';
    	o[o.length] =     '</a:effectStyle>';
    	o[o.length] =     '<a:effectStyle>';
    	o[o.length] =      '<a:effectLst>';
    	o[o.length] =       '<a:outerShdw blurRad="40000" dist="23000" dir="5400000" rotWithShape="0"><a:srgbClr val="000000"><a:alpha val="35000"/></a:srgbClr></a:outerShdw>';
    	o[o.length] =      '</a:effectLst>';
    	o[o.length] =     '</a:effectStyle>';
    	o[o.length] =     '<a:effectStyle>';
    	o[o.length] =      '<a:effectLst>';
    	o[o.length] =       '<a:outerShdw blurRad="40000" dist="23000" dir="5400000" rotWithShape="0"><a:srgbClr val="000000"><a:alpha val="35000"/></a:srgbClr></a:outerShdw>';
    	o[o.length] =      '</a:effectLst>';
    	o[o.length] =      '<a:scene3d><a:camera prst="orthographicFront"><a:rot lat="0" lon="0" rev="0"/></a:camera><a:lightRig rig="threePt" dir="t"><a:rot lat="0" lon="0" rev="1200000"/></a:lightRig></a:scene3d>';
    	o[o.length] =      '<a:sp3d><a:bevelT w="63500" h="25400"/></a:sp3d>';
    	o[o.length] =     '</a:effectStyle>';
    	o[o.length] =    '</a:effectStyleLst>';
    	o[o.length] =    '<a:bgFillStyleLst>';
    	o[o.length] =     '<a:solidFill><a:schemeClr val="phClr"/></a:solidFill>';
    	o[o.length] =     '<a:gradFill rotWithShape="1">';
    	o[o.length] =      '<a:gsLst>';
    	o[o.length] =       '<a:gs pos="0"><a:schemeClr val="phClr"><a:tint val="40000"/><a:satMod val="350000"/></a:schemeClr></a:gs>';
    	o[o.length] =       '<a:gs pos="40000"><a:schemeClr val="phClr"><a:tint val="45000"/><a:shade val="99000"/><a:satMod val="350000"/></a:schemeClr></a:gs>';
    	o[o.length] =       '<a:gs pos="100000"><a:schemeClr val="phClr"><a:shade val="20000"/><a:satMod val="255000"/></a:schemeClr></a:gs>';
    	o[o.length] =      '</a:gsLst>';
    	o[o.length] =      '<a:path path="circle"><a:fillToRect l="50000" t="-80000" r="50000" b="180000"/></a:path>';
    	o[o.length] =     '</a:gradFill>';
    	o[o.length] =     '<a:gradFill rotWithShape="1">';
    	o[o.length] =      '<a:gsLst>';
    	o[o.length] =       '<a:gs pos="0"><a:schemeClr val="phClr"><a:tint val="80000"/><a:satMod val="300000"/></a:schemeClr></a:gs>';
    	o[o.length] =       '<a:gs pos="100000"><a:schemeClr val="phClr"><a:shade val="30000"/><a:satMod val="200000"/></a:schemeClr></a:gs>';
    	o[o.length] =      '</a:gsLst>';
    	o[o.length] =      '<a:path path="circle"><a:fillToRect l="50000" t="50000" r="50000" b="50000"/></a:path>';
    	o[o.length] =     '</a:gradFill>';
    	o[o.length] =    '</a:bgFillStyleLst>';
    	o[o.length] =   '</a:fmtScheme>';
    	o[o.length] =  '</a:themeElements>';

    	o[o.length] =  '<a:objectDefaults>';
    	o[o.length] =   '<a:spDef>';
    	o[o.length] =    '<a:spPr/><a:bodyPr/><a:lstStyle/><a:style><a:lnRef idx="1"><a:schemeClr val="accent1"/></a:lnRef><a:fillRef idx="3"><a:schemeClr val="accent1"/></a:fillRef><a:effectRef idx="2"><a:schemeClr val="accent1"/></a:effectRef><a:fontRef idx="minor"><a:schemeClr val="lt1"/></a:fontRef></a:style>';
    	o[o.length] =   '</a:spDef>';
    	o[o.length] =   '<a:lnDef>';
    	o[o.length] =    '<a:spPr/><a:bodyPr/><a:lstStyle/><a:style><a:lnRef idx="2"><a:schemeClr val="accent1"/></a:lnRef><a:fillRef idx="0"><a:schemeClr val="accent1"/></a:fillRef><a:effectRef idx="1"><a:schemeClr val="accent1"/></a:effectRef><a:fontRef idx="minor"><a:schemeClr val="tx1"/></a:fontRef></a:style>';
    	o[o.length] =   '</a:lnDef>';
    	o[o.length] =  '</a:objectDefaults>';
    	o[o.length] =  '<a:extraClrSchemeLst/>';
    	o[o.length] = '</a:theme>';
    	return o.join("");
    }
    /* [MS-XLS] 2.4.326 TODO: payload is a zip file */
    function parse_Theme(blob, length, opts) {
    	var end = blob.l + length;
    	var dwThemeVersion = blob.read_shift(4);
    	if(dwThemeVersion === 124226) return;
    	if(!opts.cellStyles) { blob.l = end; return; }
    	var data = blob.slice(blob.l);
    	blob.l = end;
    	var zip; try { zip = zip_read(data, {type: "array"}); } catch(e) { return; }
    	var themeXML = getzipstr(zip, "theme/theme/theme1.xml", true);
    	if(!themeXML) return;
    	return parse_theme_xml(themeXML, opts);
    }

    /* 2.5.49 */
    function parse_ColorTheme(blob/*::, length*/) { return blob.read_shift(4); }

    /* 2.5.155 */
    function parse_FullColorExt(blob/*::, length*/) {
    	var o = {};
    	o.xclrType = blob.read_shift(2);
    	o.nTintShade = blob.read_shift(2);
    	switch(o.xclrType) {
    		case 0: blob.l += 4; break;
    		case 1: o.xclrValue = parse_IcvXF(blob, 4); break;
    		case 2: o.xclrValue = parse_LongRGBA(blob); break;
    		case 3: o.xclrValue = parse_ColorTheme(blob); break;
    		case 4: blob.l += 4; break;
    	}
    	blob.l += 8;
    	return o;
    }

    /* 2.5.164 TODO: read 7 bits*/
    function parse_IcvXF(blob, length) {
    	return parsenoop(blob, length);
    }

    /* 2.5.280 */
    function parse_XFExtGradient(blob, length) {
    	return parsenoop(blob, length);
    }

    /* [MS-XLS] 2.5.108 */
    function parse_ExtProp(blob/*::, length*/)/*:Array<any>*/ {
    	var extType = blob.read_shift(2);
    	var cb = blob.read_shift(2) - 4;
    	var o = [extType];
    	switch(extType) {
    		case 0x04: case 0x05: case 0x07: case 0x08:
    		case 0x09: case 0x0A: case 0x0B: case 0x0D:
    			o[1] = parse_FullColorExt(blob); break;
    		case 0x06: o[1] = parse_XFExtGradient(blob, cb); break;
    		case 0x0E: case 0x0F: o[1] = blob.read_shift(cb === 1 ? 1 : 2); break;
    		default: throw new Error("Unrecognized ExtProp type: " + extType + " " + cb);
    	}
    	return o;
    }

    /* 2.4.355 */
    function parse_XFExt(blob, length) {
    	var end = blob.l + length;
    	blob.l += 2;
    	var ixfe = blob.read_shift(2);
    	blob.l += 2;
    	var cexts = blob.read_shift(2);
    	var ext/*:AOA*/ = [];
    	while(cexts-- > 0) ext.push(parse_ExtProp(blob, end-blob.l));
    	return {ixfe:ixfe, ext:ext};
    }

    /* xf is an XF, see parse_XFExt for xfext */
    function update_xfext(xf, xfext) {
    	xfext.forEach(function(xfe) {
    		switch(xfe[0]) { /* 2.5.108 extPropData */
    					}
    	});
    }

    function parse_BrtMdtinfo(data, length) {
      return {
        flags: data.read_shift(4),
        version: data.read_shift(4),
        name: parse_XLWideString(data)
      };
    }
    function parse_BrtMdb(data) {
      var out = [];
      var cnt = data.read_shift(4);
      while (cnt-- > 0)
        out.push([data.read_shift(4), data.read_shift(4)]);
      return out;
    }
    function parse_BrtBeginEsmdb(data) {
      data.l += 4;
      return data.read_shift(4) != 0;
    }
    function parse_xlmeta_bin(data, name, _opts) {
      var out = { Types: [], Cell: [], Value: [] };
      var opts = _opts || {};
      var state = [];
      var pass = false;
      var metatype = 2;
      recordhopper(data, function(val, R, RT) {
        switch (RT) {
          case 335:
            out.Types.push({ name: val.name });
            break;
          case 51:
            val.forEach(function(r) {
              if (metatype == 1)
                out.Cell.push({ type: out.Types[r[0] - 1].name, index: r[1] });
              else if (metatype == 0)
                out.Value.push({ type: out.Types[r[0] - 1].name, index: r[1] });
            });
            break;
          case 337:
            metatype = val ? 1 : 0;
            break;
          case 338:
            metatype = 2;
            break;
          case 35:
            state.push(RT);
            pass = true;
            break;
          case 36:
            state.pop();
            pass = false;
            break;
          default:
            if (R.T) ; else if (!pass || opts.WTF && state[state.length - 1] != 35)
              throw new Error("Unexpected record 0x" + RT.toString(16));
        }
      });
      return out;
    }
    function parse_xlmeta_xml(data, name, opts) {
      var out = { Types: [], Cell: [], Value: [] };
      if (!data)
        return out;
      var pass = false;
      var metatype = 2;
      var lastmeta;
      data.replace(tagregex, function(x) {
        var y = parsexmltag(x);
        switch (strip_ns(y[0])) {
          case "<?xml":
            break;
          case "<metadata":
          case "</metadata>":
            break;
          case "<metadataTypes":
          case "</metadataTypes>":
            break;
          case "<metadataType":
            out.Types.push({ name: y.name });
            break;
          case "</metadataType>":
            break;
          case "<futureMetadata":
            for (var j = 0; j < out.Types.length; ++j)
              if (out.Types[j].name == y.name)
                lastmeta = out.Types[j];
            break;
          case "</futureMetadata>":
            break;
          case "<bk>":
            break;
          case "</bk>":
            break;
          case "<rc":
            if (metatype == 1)
              out.Cell.push({ type: out.Types[y.t - 1].name, index: +y.v });
            else if (metatype == 0)
              out.Value.push({ type: out.Types[y.t - 1].name, index: +y.v });
            break;
          case "</rc>":
            break;
          case "<cellMetadata":
            metatype = 1;
            break;
          case "</cellMetadata>":
            metatype = 2;
            break;
          case "<valueMetadata":
            metatype = 0;
            break;
          case "</valueMetadata>":
            metatype = 2;
            break;
          case "<extLst":
          case "<extLst>":
          case "</extLst>":
          case "<extLst/>":
            break;
          case "<ext":
            pass = true;
            break;
          case "</ext>":
            pass = false;
            break;
          case "<rvb":
            if (!lastmeta)
              break;
            if (!lastmeta.offsets)
              lastmeta.offsets = [];
            lastmeta.offsets.push(+y.i);
            break;
          default:
            if (!pass && opts.WTF)
              throw new Error("unrecognized " + y[0] + " in metadata");
        }
        return x;
      });
      return out;
    }
    /* 18.6 Calculation Chain */
    function parse_cc_xml(data/*::, name, opts*/)/*:Array<any>*/ {
    	var d = [];
    	if(!data) return d;
    	var i = 1;
    	(data.match(tagregex)||[]).forEach(function(x) {
    		var y = parsexmltag(x);
    		switch(y[0]) {
    			case '<?xml': break;
    			/* 18.6.2  calcChain CT_CalcChain 1 */
    			case '<calcChain': case '<calcChain>': case '</calcChain>': break;
    			/* 18.6.1  c CT_CalcCell 1 */
    			case '<c': delete y[0]; if(y.i) i = y.i; else y.i = i; d.push(y); break;
    		}
    	});
    	return d;
    }

    //function write_cc_xml(data, opts) { }

    /* [MS-XLSB] 2.6.4.1 */
    function parse_BrtCalcChainItem$(data) {
    	var out = {};
    	out.i = data.read_shift(4);
    	var cell = {};
    	cell.r = data.read_shift(4);
    	cell.c = data.read_shift(4);
    	out.r = encode_cell(cell);
    	var flags = data.read_shift(1);
    	if(flags & 0x2) out.l = '1';
    	if(flags & 0x8) out.a = '1';
    	return out;
    }

    /* 18.6 Calculation Chain */
    function parse_cc_bin(data, name, opts) {
    	var out = [];
    	recordhopper(data, function hopper_cc(val, R, RT) {
    		switch(RT) {
    			case 0x003F: /* 'BrtCalcChainItem$' */
    				out.push(val); break;

    			default:
    				if(R.T);
    				else throw new Error("Unexpected record 0x" + RT.toString(16));
    		}
    	});
    	return out;
    }

    //function write_cc_bin(data, opts) { }
    /* 18.14 Supplementary Workbook Data */
    function parse_xlink_xml(/*::data, rel, name:string, _opts*/) {
    	//var opts = _opts || {};
    	//if(opts.WTF) throw "XLSX External Link";
    }

    /* [MS-XLSB] 2.1.7.25 External Link */
    function parse_xlink_bin(data, rel, name/*:string*/, _opts) {
    	if(!data) return data;
    	var opts = _opts || {};

    	var pass = false;

    	recordhopper(data, function xlink_parse(val, R, RT) {
    		switch(RT) {
    			case 0x0167: /* 'BrtSupTabs' */
    			case 0x016B: /* 'BrtExternTableStart' */
    			case 0x016C: /* 'BrtExternTableEnd' */
    			case 0x016E: /* 'BrtExternRowHdr' */
    			case 0x016F: /* 'BrtExternCellBlank' */
    			case 0x0170: /* 'BrtExternCellReal' */
    			case 0x0171: /* 'BrtExternCellBool' */
    			case 0x0172: /* 'BrtExternCellError' */
    			case 0x0173: /* 'BrtExternCellString' */
    			case 0x01D8: /* 'BrtExternValueMeta' */
    			case 0x0241: /* 'BrtSupNameStart' */
    			case 0x0242: /* 'BrtSupNameValueStart' */
    			case 0x0243: /* 'BrtSupNameValueEnd' */
    			case 0x0244: /* 'BrtSupNameNum' */
    			case 0x0245: /* 'BrtSupNameErr' */
    			case 0x0246: /* 'BrtSupNameSt' */
    			case 0x0247: /* 'BrtSupNameNil' */
    			case 0x0248: /* 'BrtSupNameBool' */
    			case 0x0249: /* 'BrtSupNameFmla' */
    			case 0x024A: /* 'BrtSupNameBits' */
    			case 0x024B: /* 'BrtSupNameEnd' */
    				break;

    			case 0x0023: /* 'BrtFRTBegin' */
    				pass = true; break;
    			case 0x0024: /* 'BrtFRTEnd' */
    				pass = false; break;

    			default:
    				if(R.T);
    				else if(!pass || opts.WTF) throw new Error("Unexpected record 0x" + RT.toString(16));
    		}
    	}, opts);
    }
    /* 20.5 DrawingML - SpreadsheetML Drawing */
    /* 20.5.2.35 wsDr CT_Drawing */
    function parse_drawing(data, rels/*:any*/) {
    	if(!data) return "??";
    	/*
    	  Chartsheet Drawing:
    	   - 20.5.2.35 wsDr CT_Drawing
    	    - 20.5.2.1  absoluteAnchor CT_AbsoluteAnchor
    	     - 20.5.2.16 graphicFrame CT_GraphicalObjectFrame
    	      - 20.1.2.2.16 graphic CT_GraphicalObject
    	       - 20.1.2.2.17 graphicData CT_GraphicalObjectData
              - chart reference
    	   the actual type is based on the URI of the graphicData
    		TODO: handle embedded charts and other types of graphics
    	*/
    	var id = (data.match(/<c:chart [^>]*r:id="([^"]*)"/)||["",""])[1];

    	return rels['!id'][id].Target;
    }
    function sheet_insert_comments(sheet, comments/*:Array<RawComment>*/, threaded/*:boolean*/, people/*:?Array<any>*/) {
    	var dense = Array.isArray(sheet);
    	var cell/*:Cell*/;
    	comments.forEach(function(comment) {
    		var r = decode_cell(comment.ref);
    		if(dense) {
    			if(!sheet[r.r]) sheet[r.r] = [];
    			cell = sheet[r.r][r.c];
    		} else cell = sheet[comment.ref];
    		if (!cell) {
    			cell = ({t:"z"}/*:any*/);
    			if(dense) sheet[r.r][r.c] = cell;
    			else sheet[comment.ref] = cell;
    			var range = safe_decode_range(sheet["!ref"]||"BDWGO1000001:A1");
    			if(range.s.r > r.r) range.s.r = r.r;
    			if(range.e.r < r.r) range.e.r = r.r;
    			if(range.s.c > r.c) range.s.c = r.c;
    			if(range.e.c < r.c) range.e.c = r.c;
    			var encoded = encode_range(range);
    			if (encoded !== sheet["!ref"]) sheet["!ref"] = encoded;
    		}

    		if (!cell.c) cell.c = [];
    		var o/*:Comment*/ = ({a: comment.author, t: comment.t, r: comment.r, T: threaded});
    		if(comment.h) o.h = comment.h;

    		/* threaded comments always override */
    		for(var i = cell.c.length - 1; i >= 0; --i) {
    			if(!threaded && cell.c[i].T) return;
    			if(threaded && !cell.c[i].T) cell.c.splice(i, 1);
    		}
    		if(threaded && people) for(i = 0; i < people.length; ++i) {
    			if(o.a == people[i].id) { o.a = people[i].name || o.a; break; }
    		}
    		cell.c.push(o);
    	});
    }

    /* 18.7 Comments */
    function parse_comments_xml(data/*:string*/, opts)/*:Array<RawComment>*/ {
    	/* 18.7.6 CT_Comments */
    	if(data.match(/<(?:\w+:)?comments *\/>/)) return [];
    	var authors/*:Array<string>*/ = [];
    	var commentList/*:Array<RawComment>*/ = [];
    	var authtag = data.match(/<(?:\w+:)?authors>([\s\S]*)<\/(?:\w+:)?authors>/);
    	if(authtag && authtag[1]) authtag[1].split(/<\/\w*:?author>/).forEach(function(x) {
    		if(x === "" || x.trim() === "") return;
    		var a = x.match(/<(?:\w+:)?author[^>]*>(.*)/);
    		if(a) authors.push(a[1]);
    	});
    	var cmnttag = data.match(/<(?:\w+:)?commentList>([\s\S]*)<\/(?:\w+:)?commentList>/);
    	if(cmnttag && cmnttag[1]) cmnttag[1].split(/<\/\w*:?comment>/).forEach(function(x) {
    		if(x === "" || x.trim() === "") return;
    		var cm = x.match(/<(?:\w+:)?comment[^>]*>/);
    		if(!cm) return;
    		var y = parsexmltag(cm[0]);
    		var comment/*:RawComment*/ = ({ author: y.authorId && authors[y.authorId] || "sheetjsghost", ref: y.ref, guid: y.guid }/*:any*/);
    		var cell = decode_cell(y.ref);
    		if(opts.sheetRows && opts.sheetRows <= cell.r) return;
    		var textMatch = x.match(/<(?:\w+:)?text>([\s\S]*)<\/(?:\w+:)?text>/);
    		var rt = !!textMatch && !!textMatch[1] && parse_si(textMatch[1]) || {r:"",t:"",h:""};
    		comment.r = rt.r;
    		if(rt.r == "<t></t>") rt.t = rt.h = "";
    		comment.t = (rt.t||"").replace(/\r\n/g,"\n").replace(/\r/g,"\n");
    		if(opts.cellHTML) comment.h = rt.h;
    		commentList.push(comment);
    	});
    	return commentList;
    }

    /* [MS-XLSX] 2.1.17 */
    function parse_tcmnt_xml(data/*:string*/, opts)/*:Array<RawComment>*/ {
    	var out = [];
    	var pass = false, comment = {}, tidx = 0;
    	data.replace(tagregex, function xml_tcmnt(x, idx) {
    		var y/*:any*/ = parsexmltag(x);
    		switch(strip_ns(y[0])) {
    			case '<?xml': break;

    			/* 2.6.207 ThreadedComments CT_ThreadedComments */
    			case '<ThreadedComments': break;
    			case '</ThreadedComments>': break;

    			/* 2.6.205 threadedComment CT_ThreadedComment */
    			case '<threadedComment': comment = {author: y.personId, guid: y.id, ref: y.ref, T: 1}; break;
    			case '</threadedComment>': if(comment.t != null) out.push(comment); break;

    			case '<text>': case '<text': tidx = idx + x.length; break;
    			case '</text>': comment.t = data.slice(tidx, idx).replace(/\r\n/g, "\n").replace(/\r/g, "\n"); break;

    			/* 2.6.206 mentions CT_ThreadedCommentMentions TODO */
    			case '<mentions': case '<mentions>': pass = true; break;
    			case '</mentions>': pass = false; break;

    			/* 2.6.202 mention CT_Mention TODO */

    			/* 18.2.10 extLst CT_ExtensionList ? */
    			case '<extLst': case '<extLst>': case '</extLst>': case '<extLst/>': break;
    			/* 18.2.7  ext CT_Extension + */
    			case '<ext': pass=true; break;
    			case '</ext>': pass=false; break;

    			default: if(!pass && opts.WTF) throw new Error('unrecognized ' + y[0] + ' in threaded comments');
    		}
    		return x;
    	});
    	return out;
    }

    /* [MS-XLSX] 2.1.18 */
    function parse_people_xml(data/*:string*/, opts) {
    	var out = [];
    	var pass = false;
    	data.replace(tagregex, function xml_tcmnt(x) {
    		var y/*:any*/ = parsexmltag(x);
    		switch(strip_ns(y[0])) {
    			case '<?xml': break;

    			/* 2.4.85 personList CT_PersonList */
    			case '<personList': break;
    			case '</personList>': break;

    			/* 2.6.203 person CT_Person TODO: providers */
    			case '<person': out.push({name: y.displayname, id: y.id }); break;
    			case '</person>': break;

    			/* 18.2.10 extLst CT_ExtensionList ? */
    			case '<extLst': case '<extLst>': case '</extLst>': case '<extLst/>': break;
    			/* 18.2.7  ext CT_Extension + */
    			case '<ext': pass=true; break;
    			case '</ext>': pass=false; break;

    			default: if(!pass && opts.WTF) throw new Error('unrecognized ' + y[0] + ' in threaded comments');
    		}
    		return x;
    	});
    	return out;
    }
    /* [MS-XLSB] 2.4.28 BrtBeginComment */
    function parse_BrtBeginComment(data) {
    	var out = {};
    	out.iauthor = data.read_shift(4);
    	var rfx = parse_UncheckedRfX(data);
    	out.rfx = rfx.s;
    	out.ref = encode_cell(rfx.s);
    	data.l += 16; /*var guid = parse_GUID(data); */
    	return out;
    }

    /* [MS-XLSB] 2.4.327 BrtCommentAuthor */
    var parse_BrtCommentAuthor = parse_XLWideString;

    /* [MS-XLSB] 2.1.7.8 Comments */
    function parse_comments_bin(data, opts)/*:Array<RawComment>*/ {
    	var out/*:Array<RawComment>*/ = [];
    	var authors/*:Array<string>*/ = [];
    	var c = {};
    	var pass = false;
    	recordhopper(data, function hopper_cmnt(val, R, RT) {
    		switch(RT) {
    			case 0x0278: /* 'BrtCommentAuthor' */
    				authors.push(val); break;
    			case 0x027B: /* 'BrtBeginComment' */
    				c = val; break;
    			case 0x027D: /* 'BrtCommentText' */
    				c.t = val.t; c.h = val.h; c.r = val.r; break;
    			case 0x027C: /* 'BrtEndComment' */
    				c.author = authors[c.iauthor];
    				delete (c/*:any*/).iauthor;
    				if(opts.sheetRows && c.rfx && opts.sheetRows <= c.rfx.r) break;
    				if(!c.t) c.t = "";
    				delete c.rfx; out.push(c); break;

    			case 0x0C00: /* 'BrtUid' */
    				break;

    			case 0x0023: /* 'BrtFRTBegin' */
    				pass = true; break;
    			case 0x0024: /* 'BrtFRTEnd' */
    				pass = false; break;
    			case 0x0025: /* 'BrtACBegin' */ break;
    			case 0x0026: /* 'BrtACEnd' */ break;


    			default:
    				if(R.T);
    				else if(!pass || opts.WTF) throw new Error("Unexpected record 0x" + RT.toString(16));
    		}
    	});
    	return out;
    }
    var CT_VBA = "application/vnd.ms-office.vbaProject";
    function make_vba_xls(cfb) {
      var newcfb = CFB.utils.cfb_new({ root: "R" });
      cfb.FullPaths.forEach(function(p, i) {
        if (p.slice(-1) === "/" || !p.match(/_VBA_PROJECT_CUR/))
          return;
        var newpath = p.replace(/^[^\/]*/, "R").replace(/\/_VBA_PROJECT_CUR\u0000*/, "");
        CFB.utils.cfb_add(newcfb, newpath, cfb.FileIndex[i].content);
      });
      return CFB.write(newcfb);
    }
    /* macro and dialog sheet stubs */
    function parse_ds_bin(/*::data:any, opts, idx:number, rels, wb, themes, styles*/)/*:Worksheet*/ { return {'!type':'dialog'}; }
    function parse_ds_xml(/*::data:any, opts, idx:number, rels, wb, themes, styles*/)/*:Worksheet*/ { return {'!type':'dialog'}; }
    function parse_ms_bin(/*::data:any, opts, idx:number, rels, wb, themes, styles*/)/*:Worksheet*/ { return {'!type':'macro'}; }
    function parse_ms_xml(/*::data:any, opts, idx:number, rels, wb, themes, styles*/)/*:Worksheet*/ { return {'!type':'macro'}; }
    /* TODO: it will be useful to parse the function str */
    var rc_to_a1 = /*#__PURE__*/(function(){
    	var rcregex = /(^|[^A-Za-z_])R(\[?-?\d+\]|[1-9]\d*|)C(\[?-?\d+\]|[1-9]\d*|)(?![A-Za-z0-9_])/g;
    	var rcbase/*:Cell*/ = ({r:0,c:0}/*:any*/);
    	function rcfunc($$,$1,$2,$3) {
    		var cRel = false, rRel = false;

    		if($2.length == 0) rRel = true;
    		else if($2.charAt(0) == "[") { rRel = true; $2 = $2.slice(1, -1); }

    		if($3.length == 0) cRel = true;
    		else if($3.charAt(0) == "[") { cRel = true; $3 = $3.slice(1, -1); }

    		var R = $2.length>0?parseInt($2,10)|0:0, C = $3.length>0?parseInt($3,10)|0:0;

    		if(cRel) C += rcbase.c; else --C;
    		if(rRel) R += rcbase.r; else --R;
    		return $1 + (cRel ? "" : "$") + encode_col(C) + (rRel ? "" : "$") + encode_row(R);
    	}
    	return function rc_to_a1(fstr/*:string*/, base/*:Cell*/)/*:string*/ {
    		rcbase = base;
    		return fstr.replace(rcregex, rcfunc);
    	};
    })();

    var crefregex = /(^|[^._A-Z0-9])([$]?)([A-Z]{1,2}|[A-W][A-Z]{2}|X[A-E][A-Z]|XF[A-D])([$]?)(10[0-3]\d{4}|104[0-7]\d{3}|1048[0-4]\d{2}|10485[0-6]\d|104857[0-6]|[1-9]\d{0,5})(?![_.\(A-Za-z0-9])/g;
    var a1_to_rc = /*#__PURE__*/(function(){
    	return function a1_to_rc(fstr/*:string*/, base/*:CellAddress*/) {
    		return fstr.replace(crefregex, function($0, $1, $2, $3, $4, $5) {
    			var c = decode_col($3) - ($2 ? 0 : base.c);
    			var r = decode_row($5) - ($4 ? 0 : base.r);
    			var R = (r == 0 ? "" : !$4 ? "[" + r + "]" : (r+1));
    			var C = (c == 0 ? "" : !$2 ? "[" + c + "]" : (c+1));
    			return $1 + "R" + R + "C" + C;
    		});
    	};
    })();

    /* no defined name can collide with a valid cell address A1:XFD1048576 ... except LOG10! */
    function shift_formula_str(f/*:string*/, delta/*:Cell*/)/*:string*/ {
    	return f.replace(crefregex, function($0, $1, $2, $3, $4, $5) {
    		return $1+($2=="$" ? $2+$3 : encode_col(decode_col($3)+delta.c))+($4=="$" ? $4+$5 : encode_row(decode_row($5) + delta.r));
    	});
    }

    function shift_formula_xlsx(f/*:string*/, range/*:string*/, cell/*:string*/)/*:string*/ {
    	var r = decode_range(range), s = r.s, c = decode_cell(cell);
    	var delta = {r:c.r - s.r, c:c.c - s.c};
    	return shift_formula_str(f, delta);
    }

    /* TODO: parse formula */
    function fuzzyfmla(f/*:string*/)/*:boolean*/ {
    	if(f.length == 1) return false;
    	return true;
    }

    function _xlfn(f/*:string*/)/*:string*/ {
    	return f.replace(/_xlfn\./g,"");
    }
    function parseread1(blob) { blob.l+=1; return; }

    /* [MS-XLS] 2.5.51 */
    function parse_ColRelU(blob, length) {
    	var c = blob.read_shift(length == 1 ? 1 : 2);
    	return [c & 0x3FFF, (c >> 14) & 1, (c >> 15) & 1];
    }

    /* [MS-XLS] 2.5.198.105 ; [MS-XLSB] 2.5.97.89 */
    function parse_RgceArea(blob, length, opts) {
    	var w = 2;
    	if(opts) {
    		if(opts.biff >= 2 && opts.biff <= 5) return parse_RgceArea_BIFF2(blob);
    		else if(opts.biff == 12) w = 4;
    	}
    	var r=blob.read_shift(w), R=blob.read_shift(w);
    	var c=parse_ColRelU(blob, 2);
    	var C=parse_ColRelU(blob, 2);
    	return { s:{r:r, c:c[0], cRel:c[1], rRel:c[2]}, e:{r:R, c:C[0], cRel:C[1], rRel:C[2]} };
    }
    /* BIFF 2-5 encodes flags in the row field */
    function parse_RgceArea_BIFF2(blob/*::, length, opts*/) {
    	var r=parse_ColRelU(blob, 2), R=parse_ColRelU(blob, 2);
    	var c=blob.read_shift(1);
    	var C=blob.read_shift(1);
    	return { s:{r:r[0], c:c, cRel:r[1], rRel:r[2]}, e:{r:R[0], c:C, cRel:R[1], rRel:R[2]} };
    }

    /* [MS-XLS] 2.5.198.105 ; [MS-XLSB] 2.5.97.90 */
    function parse_RgceAreaRel(blob, length, opts) {
    	if(opts.biff < 8) return parse_RgceArea_BIFF2(blob);
    	var r=blob.read_shift(opts.biff == 12 ? 4 : 2), R=blob.read_shift(opts.biff == 12 ? 4 : 2);
    	var c=parse_ColRelU(blob, 2);
    	var C=parse_ColRelU(blob, 2);
    	return { s:{r:r, c:c[0], cRel:c[1], rRel:c[2]}, e:{r:R, c:C[0], cRel:C[1], rRel:C[2]} };
    }

    /* [MS-XLS] 2.5.198.109 ; [MS-XLSB] 2.5.97.91 */
    function parse_RgceLoc(blob, length, opts) {
    	if(opts && opts.biff >= 2 && opts.biff <= 5) return parse_RgceLoc_BIFF2(blob);
    	var r = blob.read_shift(opts && opts.biff == 12 ? 4 : 2);
    	var c = parse_ColRelU(blob, 2);
    	return {r:r, c:c[0], cRel:c[1], rRel:c[2]};
    }
    function parse_RgceLoc_BIFF2(blob/*::, length, opts*/) {
    	var r = parse_ColRelU(blob, 2);
    	var c = blob.read_shift(1);
    	return {r:r[0], c:c, cRel:r[1], rRel:r[2]};
    }

    /* [MS-XLS] 2.5.198.107, 2.5.47 */
    function parse_RgceElfLoc(blob/*::, length, opts*/) {
    	var r = blob.read_shift(2);
    	var c = blob.read_shift(2);
    	return {r:r, c:c & 0xFF, fQuoted:!!(c & 0x4000), cRel:c>>15, rRel:c>>15 };
    }

    /* [MS-XLS] 2.5.198.111 ; [MS-XLSB] 2.5.97.92 TODO */
    function parse_RgceLocRel(blob, length, opts) {
    	var biff = opts && opts.biff ? opts.biff : 8;
    	if(biff >= 2 && biff <= 5) return parse_RgceLocRel_BIFF2(blob);
    	var r = blob.read_shift(biff >= 12 ? 4 : 2);
    	var cl = blob.read_shift(2);
    	var cRel = (cl & 0x4000) >> 14, rRel = (cl & 0x8000) >> 15;
    	cl &= 0x3FFF;
    	if(rRel == 1) while(r > 0x7FFFF) r -= 0x100000;
    	if(cRel == 1) while(cl > 0x1FFF) cl = cl - 0x4000;
    	return {r:r,c:cl,cRel:cRel,rRel:rRel};
    }
    function parse_RgceLocRel_BIFF2(blob/*::, length:number, opts*/) {
    	var rl = blob.read_shift(2);
    	var c = blob.read_shift(1);
    	var rRel = (rl & 0x8000) >> 15, cRel = (rl & 0x4000) >> 14;
    	rl &= 0x3FFF;
    	if(rRel == 1 && rl >= 0x2000) rl = rl - 0x4000;
    	if(cRel == 1 && c >= 0x80) c = c - 0x100;
    	return {r:rl,c:c,cRel:cRel,rRel:rRel};
    }

    /* [MS-XLS] 2.5.198.27 ; [MS-XLSB] 2.5.97.18 */
    function parse_PtgArea(blob, length, opts) {
    	var type = (blob[blob.l++] & 0x60) >> 5;
    	var area = parse_RgceArea(blob, opts.biff >= 2 && opts.biff <= 5 ? 6 : 8, opts);
    	return [type, area];
    }

    /* [MS-XLS] 2.5.198.28 ; [MS-XLSB] 2.5.97.19 */
    function parse_PtgArea3d(blob, length, opts) {
    	var type = (blob[blob.l++] & 0x60) >> 5;
    	var ixti = blob.read_shift(2, 'i');
    	var w = 8;
    	if(opts) switch(opts.biff) {
    		case 5: blob.l += 12; w = 6; break;
    		case 12: w = 12; break;
    	}
    	var area = parse_RgceArea(blob, w, opts);
    	return [type, ixti, area];
    }

    /* [MS-XLS] 2.5.198.29 ; [MS-XLSB] 2.5.97.20 */
    function parse_PtgAreaErr(blob, length, opts) {
    	var type = (blob[blob.l++] & 0x60) >> 5;
    	blob.l += opts && (opts.biff > 8) ? 12 : (opts.biff < 8 ? 6 : 8);
    	return [type];
    }
    /* [MS-XLS] 2.5.198.30 ; [MS-XLSB] 2.5.97.21 */
    function parse_PtgAreaErr3d(blob, length, opts) {
    	var type = (blob[blob.l++] & 0x60) >> 5;
    	var ixti = blob.read_shift(2);
    	var w = 8;
    	if(opts) switch(opts.biff) {
    		case 5: blob.l += 12; w = 6; break;
    		case 12: w = 12; break;
    	}
    	blob.l += w;
    	return [type, ixti];
    }

    /* [MS-XLS] 2.5.198.31 ; [MS-XLSB] 2.5.97.22 */
    function parse_PtgAreaN(blob, length, opts) {
    	var type = (blob[blob.l++] & 0x60) >> 5;
    	var area = parse_RgceAreaRel(blob, length - 1, opts);
    	return [type, area];
    }

    /* [MS-XLS] 2.5.198.32 ; [MS-XLSB] 2.5.97.23 */
    function parse_PtgArray(blob, length, opts) {
    	var type = (blob[blob.l++] & 0x60) >> 5;
    	blob.l += opts.biff == 2 ? 6 : opts.biff == 12 ? 14 : 7;
    	return [type];
    }

    /* [MS-XLS] 2.5.198.33 ; [MS-XLSB] 2.5.97.24 */
    function parse_PtgAttrBaxcel(blob) {
    	var bitSemi = blob[blob.l+1] & 0x01; /* 1 = volatile */
    	var bitBaxcel = 1;
    	blob.l += 4;
    	return [bitSemi, bitBaxcel];
    }

    /* [MS-XLS] 2.5.198.34 ; [MS-XLSB] 2.5.97.25 */
    function parse_PtgAttrChoose(blob, length, opts)/*:Array<number>*/ {
    	blob.l +=2;
    	var offset = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
    	var o/*:Array<number>*/ = [];
    	/* offset is 1 less than the number of elements */
    	for(var i = 0; i <= offset; ++i) o.push(blob.read_shift(opts && opts.biff == 2 ? 1 : 2));
    	return o;
    }

    /* [MS-XLS] 2.5.198.35 ; [MS-XLSB] 2.5.97.26 */
    function parse_PtgAttrGoto(blob, length, opts) {
    	var bitGoto = (blob[blob.l+1] & 0xFF) ? 1 : 0;
    	blob.l += 2;
    	return [bitGoto, blob.read_shift(opts && opts.biff == 2 ? 1 : 2)];
    }

    /* [MS-XLS] 2.5.198.36 ; [MS-XLSB] 2.5.97.27 */
    function parse_PtgAttrIf(blob, length, opts) {
    	var bitIf = (blob[blob.l+1] & 0xFF) ? 1 : 0;
    	blob.l += 2;
    	return [bitIf, blob.read_shift(opts && opts.biff == 2 ? 1 : 2)];
    }

    /* [MS-XLSB] 2.5.97.28 */
    function parse_PtgAttrIfError(blob) {
    	var bitIf = (blob[blob.l+1] & 0xFF) ? 1 : 0;
    	blob.l += 2;
    	return [bitIf, blob.read_shift(2)];
    }

    /* [MS-XLS] 2.5.198.37 ; [MS-XLSB] 2.5.97.29 */
    function parse_PtgAttrSemi(blob, length, opts) {
    	var bitSemi = (blob[blob.l+1] & 0xFF) ? 1 : 0;
    	blob.l += opts && opts.biff == 2 ? 3 : 4;
    	return [bitSemi];
    }

    /* [MS-XLS] 2.5.198.40 ; [MS-XLSB] 2.5.97.32 */
    function parse_PtgAttrSpaceType(blob/*::, length*/) {
    	var type = blob.read_shift(1), cch = blob.read_shift(1);
    	return [type, cch];
    }

    /* [MS-XLS] 2.5.198.38 ; [MS-XLSB] 2.5.97.30 */
    function parse_PtgAttrSpace(blob) {
    	blob.read_shift(2);
    	return parse_PtgAttrSpaceType(blob);
    }

    /* [MS-XLS] 2.5.198.39 ; [MS-XLSB] 2.5.97.31 */
    function parse_PtgAttrSpaceSemi(blob) {
    	blob.read_shift(2);
    	return parse_PtgAttrSpaceType(blob);
    }

    /* [MS-XLS] 2.5.198.84 ; [MS-XLSB] 2.5.97.68 TODO */
    function parse_PtgRef(blob, length, opts) {
    	//var ptg = blob[blob.l] & 0x1F;
    	var type = (blob[blob.l] & 0x60)>>5;
    	blob.l += 1;
    	var loc = parse_RgceLoc(blob, 0, opts);
    	return [type, loc];
    }

    /* [MS-XLS] 2.5.198.88 ; [MS-XLSB] 2.5.97.72 TODO */
    function parse_PtgRefN(blob, length, opts) {
    	var type = (blob[blob.l] & 0x60)>>5;
    	blob.l += 1;
    	var loc = parse_RgceLocRel(blob, 0, opts);
    	return [type, loc];
    }

    /* [MS-XLS] 2.5.198.85 ; [MS-XLSB] 2.5.97.69 TODO */
    function parse_PtgRef3d(blob, length, opts) {
    	var type = (blob[blob.l] & 0x60)>>5;
    	blob.l += 1;
    	var ixti = blob.read_shift(2); // XtiIndex
    	if(opts && opts.biff == 5) blob.l += 12;
    	var loc = parse_RgceLoc(blob, 0, opts); // TODO: or RgceLocRel
    	return [type, ixti, loc];
    }


    /* [MS-XLS] 2.5.198.62 ; [MS-XLSB] 2.5.97.45 TODO */
    function parse_PtgFunc(blob, length, opts) {
    	//var ptg = blob[blob.l] & 0x1F;
    	var type = (blob[blob.l] & 0x60)>>5;
    	blob.l += 1;
    	var iftab = blob.read_shift(opts && opts.biff <= 3 ? 1 : 2);
    	return [FtabArgc[iftab], Ftab[iftab], type];
    }
    /* [MS-XLS] 2.5.198.63 ; [MS-XLSB] 2.5.97.46 TODO */
    function parse_PtgFuncVar(blob, length, opts) {
    	var type = blob[blob.l++];
    	var cparams = blob.read_shift(1), tab = opts && opts.biff <= 3 ? [(type == 0x58 ? -1 : 0), blob.read_shift(1)]: parsetab(blob);
    	return [cparams, (tab[0] === 0 ? Ftab : Cetab)[tab[1]]];
    }

    function parsetab(blob) {
    	return [blob[blob.l+1]>>7, blob.read_shift(2) & 0x7FFF];
    }

    /* [MS-XLS] 2.5.198.41 ; [MS-XLSB] 2.5.97.33 */
    function parse_PtgAttrSum(blob, length, opts) {
    	blob.l += opts && opts.biff == 2 ? 3 : 4; return;
    }

    /* [MS-XLS] 2.5.198.58 ; [MS-XLSB] 2.5.97.40 */
    function parse_PtgExp(blob, length, opts) {
    	blob.l++;
    	if(opts && opts.biff == 12) return [blob.read_shift(4, 'i'), 0];
    	var row = blob.read_shift(2);
    	var col = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
    	return [row, col];
    }

    /* [MS-XLS] 2.5.198.57 ; [MS-XLSB] 2.5.97.39 */
    function parse_PtgErr(blob) { blob.l++; return BErr[blob.read_shift(1)]; }

    /* [MS-XLS] 2.5.198.66 ; [MS-XLSB] 2.5.97.49 */
    function parse_PtgInt(blob) { blob.l++; return blob.read_shift(2); }

    /* [MS-XLS] 2.5.198.42 ; [MS-XLSB] 2.5.97.34 */
    function parse_PtgBool(blob) { blob.l++; return blob.read_shift(1)!==0;}

    /* [MS-XLS] 2.5.198.79 ; [MS-XLSB] 2.5.97.63 */
    function parse_PtgNum(blob) { blob.l++; return parse_Xnum(blob); }

    /* [MS-XLS] 2.5.198.89 ; [MS-XLSB] 2.5.97.74 */
    function parse_PtgStr(blob, length, opts) { blob.l++; return parse_ShortXLUnicodeString(blob, length-1, opts); }

    /* [MS-XLS] 2.5.192.112 + 2.5.192.11{3,4,5,6,7} */
    /* [MS-XLSB] 2.5.97.93 + 2.5.97.9{4,5,6,7} */
    function parse_SerAr(blob, biff/*:number*/) {
    	var val = [blob.read_shift(1)];
    	if(biff == 12) switch(val[0]) {
    		case 0x02: val[0] = 0x04; break; /* SerBool */
    		case 0x04: val[0] = 0x10; break; /* SerErr */
    		case 0x00: val[0] = 0x01; break; /* SerNum */
    		case 0x01: val[0] = 0x02; break; /* SerStr */
    	}
    	switch(val[0]) {
    		case 0x04: /* SerBool -- boolean */
    			val[1] = parsebool(blob, 1) ? 'TRUE' : 'FALSE';
    			if(biff != 12) blob.l += 7; break;
    		case 0x25: /* appears to be an alias */
    		case 0x10: /* SerErr -- error */
    			val[1] = BErr[blob[blob.l]];
    			blob.l += ((biff == 12) ? 4 : 8); break;
    		case 0x00: /* SerNil -- honestly, I'm not sure how to reproduce this */
    			blob.l += 8; break;
    		case 0x01: /* SerNum -- Xnum */
    			val[1] = parse_Xnum(blob); break;
    		case 0x02: /* SerStr -- XLUnicodeString (<256 chars) */
    			val[1] = parse_XLUnicodeString2(blob, 0, {biff:biff > 0 && biff < 8 ? 2 : biff}); break;
    		default: throw new Error("Bad SerAr: " + val[0]); /* Unreachable */
    	}
    	return val;
    }

    /* [MS-XLS] 2.5.198.61 ; [MS-XLSB] 2.5.97.44 */
    function parse_PtgExtraMem(blob, cce, opts) {
    	var count = blob.read_shift((opts.biff == 12) ? 4 : 2);
    	var out/*:Array<Range>*/ = [];
    	for(var i = 0; i != count; ++i) out.push(((opts.biff == 12) ? parse_UncheckedRfX : parse_Ref8U)(blob));
    	return out;
    }

    /* [MS-XLS] 2.5.198.59 ; [MS-XLSB] 2.5.97.41 */
    function parse_PtgExtraArray(blob, length, opts) {
    	var rows = 0, cols = 0;
    	if(opts.biff == 12) {
    		rows = blob.read_shift(4); // DRw
    		cols = blob.read_shift(4); // DCol
    	} else {
    		cols = 1 + blob.read_shift(1); //DColByteU
    		rows = 1 + blob.read_shift(2); //DRw
    	}
    	if(opts.biff >= 2 && opts.biff < 8) { --rows; if(--cols == 0) cols = 0x100; }
    	// $FlowIgnore
    	for(var i = 0, o/*:Array<Array<any>>*/ = []; i != rows && (o[i] = []); ++i)
    		for(var j = 0; j != cols; ++j) o[i][j] = parse_SerAr(blob, opts.biff);
    	return o;
    }

    /* [MS-XLS] 2.5.198.76 ; [MS-XLSB] 2.5.97.60 */
    function parse_PtgName(blob, length, opts) {
    	var type = (blob.read_shift(1) >>> 5) & 0x03;
    	var w = (!opts || (opts.biff >= 8)) ? 4 : 2;
    	var nameindex = blob.read_shift(w);
    	switch(opts.biff) {
    		case 2: blob.l += 5; break;
    		case 3: case 4: blob.l += 8; break;
    		case 5: blob.l += 12; break;
    	}
    	return [type, 0, nameindex];
    }

    /* [MS-XLS] 2.5.198.77 ; [MS-XLSB] 2.5.97.61 */
    function parse_PtgNameX(blob, length, opts) {
    	if(opts.biff == 5) return parse_PtgNameX_BIFF5(blob);
    	var type = (blob.read_shift(1) >>> 5) & 0x03;
    	var ixti = blob.read_shift(2); // XtiIndex
    	var nameindex = blob.read_shift(4);
    	return [type, ixti, nameindex];
    }
    function parse_PtgNameX_BIFF5(blob/*::, length, opts*/) {
    	var type = (blob.read_shift(1) >>> 5) & 0x03;
    	var ixti = blob.read_shift(2, 'i'); // XtiIndex
    	blob.l += 8;
    	var nameindex = blob.read_shift(2);
    	blob.l += 12;
    	return [type, ixti, nameindex];
    }

    /* [MS-XLS] 2.5.198.70 ; [MS-XLSB] 2.5.97.54 */
    function parse_PtgMemArea(blob, length, opts) {
    	var type = (blob.read_shift(1) >>> 5) & 0x03;
    	blob.l += (opts && opts.biff == 2 ? 3 : 4);
    	var cce = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
    	return [type, cce];
    }

    /* [MS-XLS] 2.5.198.72 ; [MS-XLSB] 2.5.97.56 */
    function parse_PtgMemFunc(blob, length, opts) {
    	var type = (blob.read_shift(1) >>> 5) & 0x03;
    	var cce = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
    	return [type, cce];
    }


    /* [MS-XLS] 2.5.198.86 ; [MS-XLSB] 2.5.97.69 */
    function parse_PtgRefErr(blob, length, opts) {
    	var type = (blob.read_shift(1) >>> 5) & 0x03;
    	blob.l += 4;
    	if(opts.biff < 8) blob.l--;
    	if(opts.biff == 12) blob.l += 2;
    	return [type];
    }

    /* [MS-XLS] 2.5.198.87 ; [MS-XLSB] 2.5.97.71 */
    function parse_PtgRefErr3d(blob, length, opts) {
    	var type = (blob[blob.l++] & 0x60) >> 5;
    	var ixti = blob.read_shift(2);
    	var w = 4;
    	if(opts) switch(opts.biff) {
    		case 5: w = 15; break;
    		case 12: w = 6; break;
    	}
    	blob.l += w;
    	return [type, ixti];
    }

    /* [MS-XLS] 2.5.198.71 ; [MS-XLSB] 2.5.97.55 */
    var parse_PtgMemErr = parsenoop;
    /* [MS-XLS] 2.5.198.73  ; [MS-XLSB] 2.5.97.57 */
    var parse_PtgMemNoMem = parsenoop;
    /* [MS-XLS] 2.5.198.92 */
    var parse_PtgTbl = parsenoop;

    function parse_PtgElfLoc(blob, length, opts) {
    	blob.l += 2;
    	return [parse_RgceElfLoc(blob)];
    }
    function parse_PtgElfNoop(blob/*::, length, opts*/) {
    	blob.l += 6;
    	return [];
    }
    /* [MS-XLS] 2.5.198.46 */
    var parse_PtgElfCol = parse_PtgElfLoc;
    /* [MS-XLS] 2.5.198.47 */
    var parse_PtgElfColS = parse_PtgElfNoop;
    /* [MS-XLS] 2.5.198.48 */
    var parse_PtgElfColSV = parse_PtgElfNoop;
    /* [MS-XLS] 2.5.198.49 */
    var parse_PtgElfColV = parse_PtgElfLoc;
    /* [MS-XLS] 2.5.198.50 */
    function parse_PtgElfLel(blob/*::, length, opts*/) {
    	blob.l += 2;
    	return [parseuint16(blob), blob.read_shift(2) & 0x01];
    }
    /* [MS-XLS] 2.5.198.51 */
    var parse_PtgElfRadical = parse_PtgElfLoc;
    /* [MS-XLS] 2.5.198.52 */
    var parse_PtgElfRadicalLel = parse_PtgElfLel;
    /* [MS-XLS] 2.5.198.53 */
    var parse_PtgElfRadicalS = parse_PtgElfNoop;
    /* [MS-XLS] 2.5.198.54 */
    var parse_PtgElfRw = parse_PtgElfLoc;
    /* [MS-XLS] 2.5.198.55 */
    var parse_PtgElfRwV = parse_PtgElfLoc;

    /* [MS-XLSB] 2.5.97.52 TODO */
    var PtgListRT = [
    	"Data",
    	"All",
    	"Headers",
    	"??",
    	"?Data2",
    	"??",
    	"?DataHeaders",
    	"??",
    	"Totals",
    	"??",
    	"??",
    	"??",
    	"?DataTotals",
    	"??",
    	"??",
    	"??",
    	"?Current"
    ];
    function parse_PtgList(blob/*::, length, opts*/) {
    	blob.l += 2;
    	var ixti = blob.read_shift(2);
    	var flags = blob.read_shift(2);
    	var idx = blob.read_shift(4);
    	var c = blob.read_shift(2);
    	var C = blob.read_shift(2);
    	var rt = PtgListRT[(flags >> 2) & 0x1F];
    	return {ixti: ixti, coltype:(flags&0x3), rt:rt, idx:idx, c:c, C:C};
    }
    /* [MS-XLS] 2.5.198.91 ; [MS-XLSB] 2.5.97.76 */
    function parse_PtgSxName(blob/*::, length, opts*/) {
    	blob.l += 2;
    	return [blob.read_shift(4)];
    }

    /* [XLS] old spec */
    function parse_PtgSheet(blob, length, opts) {
    	blob.l += 5;
    	blob.l += 2;
    	blob.l += (opts.biff == 2 ? 1 : 4);
    	return ["PTGSHEET"];
    }
    function parse_PtgEndSheet(blob, length, opts) {
    	blob.l += (opts.biff == 2 ? 4 : 5);
    	return ["PTGENDSHEET"];
    }
    function parse_PtgMemAreaN(blob/*::, length, opts*/) {
    	var type = (blob.read_shift(1) >>> 5) & 0x03;
    	var cce = blob.read_shift(2);
    	return [type, cce];
    }
    function parse_PtgMemNoMemN(blob/*::, length, opts*/) {
    	var type = (blob.read_shift(1) >>> 5) & 0x03;
    	var cce = blob.read_shift(2);
    	return [type, cce];
    }
    function parse_PtgAttrNoop(blob/*::, length, opts*/) {
    	blob.l += 4;
    	return [0, 0];
    }

    /* [MS-XLS] 2.5.198.25 ; [MS-XLSB] 2.5.97.16 */
    var PtgTypes = {
    	/*::[*/0x01/*::]*/: { n:'PtgExp', f:parse_PtgExp },
    	/*::[*/0x02/*::]*/: { n:'PtgTbl', f:parse_PtgTbl },
    	/*::[*/0x03/*::]*/: { n:'PtgAdd', f:parseread1 },
    	/*::[*/0x04/*::]*/: { n:'PtgSub', f:parseread1 },
    	/*::[*/0x05/*::]*/: { n:'PtgMul', f:parseread1 },
    	/*::[*/0x06/*::]*/: { n:'PtgDiv', f:parseread1 },
    	/*::[*/0x07/*::]*/: { n:'PtgPower', f:parseread1 },
    	/*::[*/0x08/*::]*/: { n:'PtgConcat', f:parseread1 },
    	/*::[*/0x09/*::]*/: { n:'PtgLt', f:parseread1 },
    	/*::[*/0x0A/*::]*/: { n:'PtgLe', f:parseread1 },
    	/*::[*/0x0B/*::]*/: { n:'PtgEq', f:parseread1 },
    	/*::[*/0x0C/*::]*/: { n:'PtgGe', f:parseread1 },
    	/*::[*/0x0D/*::]*/: { n:'PtgGt', f:parseread1 },
    	/*::[*/0x0E/*::]*/: { n:'PtgNe', f:parseread1 },
    	/*::[*/0x0F/*::]*/: { n:'PtgIsect', f:parseread1 },
    	/*::[*/0x10/*::]*/: { n:'PtgUnion', f:parseread1 },
    	/*::[*/0x11/*::]*/: { n:'PtgRange', f:parseread1 },
    	/*::[*/0x12/*::]*/: { n:'PtgUplus', f:parseread1 },
    	/*::[*/0x13/*::]*/: { n:'PtgUminus', f:parseread1 },
    	/*::[*/0x14/*::]*/: { n:'PtgPercent', f:parseread1 },
    	/*::[*/0x15/*::]*/: { n:'PtgParen', f:parseread1 },
    	/*::[*/0x16/*::]*/: { n:'PtgMissArg', f:parseread1 },
    	/*::[*/0x17/*::]*/: { n:'PtgStr', f:parse_PtgStr },
    	/*::[*/0x1A/*::]*/: { n:'PtgSheet', f:parse_PtgSheet },
    	/*::[*/0x1B/*::]*/: { n:'PtgEndSheet', f:parse_PtgEndSheet },
    	/*::[*/0x1C/*::]*/: { n:'PtgErr', f:parse_PtgErr },
    	/*::[*/0x1D/*::]*/: { n:'PtgBool', f:parse_PtgBool },
    	/*::[*/0x1E/*::]*/: { n:'PtgInt', f:parse_PtgInt },
    	/*::[*/0x1F/*::]*/: { n:'PtgNum', f:parse_PtgNum },
    	/*::[*/0x20/*::]*/: { n:'PtgArray', f:parse_PtgArray },
    	/*::[*/0x21/*::]*/: { n:'PtgFunc', f:parse_PtgFunc },
    	/*::[*/0x22/*::]*/: { n:'PtgFuncVar', f:parse_PtgFuncVar },
    	/*::[*/0x23/*::]*/: { n:'PtgName', f:parse_PtgName },
    	/*::[*/0x24/*::]*/: { n:'PtgRef', f:parse_PtgRef },
    	/*::[*/0x25/*::]*/: { n:'PtgArea', f:parse_PtgArea },
    	/*::[*/0x26/*::]*/: { n:'PtgMemArea', f:parse_PtgMemArea },
    	/*::[*/0x27/*::]*/: { n:'PtgMemErr', f:parse_PtgMemErr },
    	/*::[*/0x28/*::]*/: { n:'PtgMemNoMem', f:parse_PtgMemNoMem },
    	/*::[*/0x29/*::]*/: { n:'PtgMemFunc', f:parse_PtgMemFunc },
    	/*::[*/0x2A/*::]*/: { n:'PtgRefErr', f:parse_PtgRefErr },
    	/*::[*/0x2B/*::]*/: { n:'PtgAreaErr', f:parse_PtgAreaErr },
    	/*::[*/0x2C/*::]*/: { n:'PtgRefN', f:parse_PtgRefN },
    	/*::[*/0x2D/*::]*/: { n:'PtgAreaN', f:parse_PtgAreaN },
    	/*::[*/0x2E/*::]*/: { n:'PtgMemAreaN', f:parse_PtgMemAreaN },
    	/*::[*/0x2F/*::]*/: { n:'PtgMemNoMemN', f:parse_PtgMemNoMemN },
    	/*::[*/0x39/*::]*/: { n:'PtgNameX', f:parse_PtgNameX },
    	/*::[*/0x3A/*::]*/: { n:'PtgRef3d', f:parse_PtgRef3d },
    	/*::[*/0x3B/*::]*/: { n:'PtgArea3d', f:parse_PtgArea3d },
    	/*::[*/0x3C/*::]*/: { n:'PtgRefErr3d', f:parse_PtgRefErr3d },
    	/*::[*/0x3D/*::]*/: { n:'PtgAreaErr3d', f:parse_PtgAreaErr3d },
    	/*::[*/0xFF/*::]*/: {}
    };
    /* These are duplicated in the PtgTypes table */
    var PtgDupes = {
    	/*::[*/0x40/*::]*/: 0x20, /*::[*/0x60/*::]*/: 0x20,
    	/*::[*/0x41/*::]*/: 0x21, /*::[*/0x61/*::]*/: 0x21,
    	/*::[*/0x42/*::]*/: 0x22, /*::[*/0x62/*::]*/: 0x22,
    	/*::[*/0x43/*::]*/: 0x23, /*::[*/0x63/*::]*/: 0x23,
    	/*::[*/0x44/*::]*/: 0x24, /*::[*/0x64/*::]*/: 0x24,
    	/*::[*/0x45/*::]*/: 0x25, /*::[*/0x65/*::]*/: 0x25,
    	/*::[*/0x46/*::]*/: 0x26, /*::[*/0x66/*::]*/: 0x26,
    	/*::[*/0x47/*::]*/: 0x27, /*::[*/0x67/*::]*/: 0x27,
    	/*::[*/0x48/*::]*/: 0x28, /*::[*/0x68/*::]*/: 0x28,
    	/*::[*/0x49/*::]*/: 0x29, /*::[*/0x69/*::]*/: 0x29,
    	/*::[*/0x4A/*::]*/: 0x2A, /*::[*/0x6A/*::]*/: 0x2A,
    	/*::[*/0x4B/*::]*/: 0x2B, /*::[*/0x6B/*::]*/: 0x2B,
    	/*::[*/0x4C/*::]*/: 0x2C, /*::[*/0x6C/*::]*/: 0x2C,
    	/*::[*/0x4D/*::]*/: 0x2D, /*::[*/0x6D/*::]*/: 0x2D,
    	/*::[*/0x4E/*::]*/: 0x2E, /*::[*/0x6E/*::]*/: 0x2E,
    	/*::[*/0x4F/*::]*/: 0x2F, /*::[*/0x6F/*::]*/: 0x2F,
    	/*::[*/0x58/*::]*/: 0x22, /*::[*/0x78/*::]*/: 0x22,
    	/*::[*/0x59/*::]*/: 0x39, /*::[*/0x79/*::]*/: 0x39,
    	/*::[*/0x5A/*::]*/: 0x3A, /*::[*/0x7A/*::]*/: 0x3A,
    	/*::[*/0x5B/*::]*/: 0x3B, /*::[*/0x7B/*::]*/: 0x3B,
    	/*::[*/0x5C/*::]*/: 0x3C, /*::[*/0x7C/*::]*/: 0x3C,
    	/*::[*/0x5D/*::]*/: 0x3D, /*::[*/0x7D/*::]*/: 0x3D
    };

    var Ptg18 = {
    	/*::[*/0x01/*::]*/: { n:'PtgElfLel', f:parse_PtgElfLel },
    	/*::[*/0x02/*::]*/: { n:'PtgElfRw', f:parse_PtgElfRw },
    	/*::[*/0x03/*::]*/: { n:'PtgElfCol', f:parse_PtgElfCol },
    	/*::[*/0x06/*::]*/: { n:'PtgElfRwV', f:parse_PtgElfRwV },
    	/*::[*/0x07/*::]*/: { n:'PtgElfColV', f:parse_PtgElfColV },
    	/*::[*/0x0A/*::]*/: { n:'PtgElfRadical', f:parse_PtgElfRadical },
    	/*::[*/0x0B/*::]*/: { n:'PtgElfRadicalS', f:parse_PtgElfRadicalS },
    	/*::[*/0x0D/*::]*/: { n:'PtgElfColS', f:parse_PtgElfColS },
    	/*::[*/0x0F/*::]*/: { n:'PtgElfColSV', f:parse_PtgElfColSV },
    	/*::[*/0x10/*::]*/: { n:'PtgElfRadicalLel', f:parse_PtgElfRadicalLel },
    	/*::[*/0x19/*::]*/: { n:'PtgList', f:parse_PtgList },
    	/*::[*/0x1D/*::]*/: { n:'PtgSxName', f:parse_PtgSxName },
    	/*::[*/0xFF/*::]*/: {}
    };
    var Ptg19 = {
    	/*::[*/0x00/*::]*/: { n:'PtgAttrNoop', f:parse_PtgAttrNoop },
    	/*::[*/0x01/*::]*/: { n:'PtgAttrSemi', f:parse_PtgAttrSemi },
    	/*::[*/0x02/*::]*/: { n:'PtgAttrIf', f:parse_PtgAttrIf },
    	/*::[*/0x04/*::]*/: { n:'PtgAttrChoose', f:parse_PtgAttrChoose },
    	/*::[*/0x08/*::]*/: { n:'PtgAttrGoto', f:parse_PtgAttrGoto },
    	/*::[*/0x10/*::]*/: { n:'PtgAttrSum', f:parse_PtgAttrSum },
    	/*::[*/0x20/*::]*/: { n:'PtgAttrBaxcel', f:parse_PtgAttrBaxcel },
    	/*::[*/0x21/*::]*/: { n:'PtgAttrBaxcel', f:parse_PtgAttrBaxcel },
    	/*::[*/0x40/*::]*/: { n:'PtgAttrSpace', f:parse_PtgAttrSpace },
    	/*::[*/0x41/*::]*/: { n:'PtgAttrSpaceSemi', f:parse_PtgAttrSpaceSemi },
    	/*::[*/0x80/*::]*/: { n:'PtgAttrIfError', f:parse_PtgAttrIfError },
    	/*::[*/0xFF/*::]*/: {}
    };

    /* [MS-XLS] 2.5.198.103 ; [MS-XLSB] 2.5.97.87 */
    function parse_RgbExtra(blob, length, rgce, opts) {
    	if(opts.biff < 8) return parsenoop(blob, length);
    	var target = blob.l + length;
    	var o = [];
    	for(var i = 0; i !== rgce.length; ++i) {
    		switch(rgce[i][0]) {
    			case 'PtgArray': /* PtgArray -> PtgExtraArray */
    				rgce[i][1] = parse_PtgExtraArray(blob, 0, opts);
    				o.push(rgce[i][1]);
    				break;
    			case 'PtgMemArea': /* PtgMemArea -> PtgExtraMem */
    				rgce[i][2] = parse_PtgExtraMem(blob, rgce[i][1], opts);
    				o.push(rgce[i][2]);
    				break;
    			case 'PtgExp': /* PtgExp -> PtgExtraCol */
    				if(opts && opts.biff == 12) {
    					rgce[i][1][1] = blob.read_shift(4);
    					o.push(rgce[i][1]);
    				} break;
    			case 'PtgList': /* TODO: PtgList -> PtgExtraList */
    			case 'PtgElfRadicalS': /* TODO: PtgElfRadicalS -> PtgExtraElf */
    			case 'PtgElfColS': /* TODO: PtgElfColS -> PtgExtraElf */
    			case 'PtgElfColSV': /* TODO: PtgElfColSV -> PtgExtraElf */
    				throw "Unsupported " + rgce[i][0];
    		}
    	}
    	length = target - blob.l;
    	/* note: this is technically an error but Excel disregards */
    	//if(target !== blob.l && blob.l !== target - length) throw new Error(target + " != " + blob.l);
    	if(length !== 0) o.push(parsenoop(blob, length));
    	return o;
    }

    /* [MS-XLS] 2.5.198.104 ; [MS-XLSB] 2.5.97.88 */
    function parse_Rgce(blob, length, opts) {
    	var target = blob.l + length;
    	var R, id, ptgs = [];
    	while(target != blob.l) {
    		length = target - blob.l;
    		id = blob[blob.l];
    		R = PtgTypes[id] || PtgTypes[PtgDupes[id]];
    		if(id === 0x18 || id === 0x19) R = (id === 0x18 ? Ptg18 : Ptg19)[blob[blob.l + 1]];
    		if(!R || !R.f) { /*ptgs.push*/(parsenoop(blob, length)); }
    		else { ptgs.push([R.n, R.f(blob, length, opts)]); }
    	}
    	return ptgs;
    }

    function stringify_array(f/*:Array<Array<string>>*/)/*:string*/ {
    	var o/*:Array<string>*/ = [];
    	for(var i = 0; i < f.length; ++i) {
    		var x = f[i], r/*:Array<string>*/ = [];
    		for(var j = 0; j < x.length; ++j) {
    			var y = x[j];
    			if(y) switch(y[0]) {
    				// TODO: handle embedded quotes
    				case 0x02:
    					/*:: if(typeof y[1] != 'string') throw "unreachable"; */
    					r.push('"' + y[1].replace(/"/g,'""') + '"'); break;
    				default: r.push(y[1]);
    			} else r.push("");
    		}
    		o.push(r.join(","));
    	}
    	return o.join(";");
    }

    /* [MS-XLS] 2.2.2 ; [MS-XLSB] 2.2.2 TODO */
    var PtgBinOp = {
    	PtgAdd: "+",
    	PtgConcat: "&",
    	PtgDiv: "/",
    	PtgEq: "=",
    	PtgGe: ">=",
    	PtgGt: ">",
    	PtgLe: "<=",
    	PtgLt: "<",
    	PtgMul: "*",
    	PtgNe: "<>",
    	PtgPower: "^",
    	PtgSub: "-"
    };

    // List of invalid characters needs to be tested further
    function formula_quote_sheet_name(sname/*:string*/, opts)/*:string*/ {
    	if(!sname && !(opts && opts.biff <= 5 && opts.biff >= 2)) throw new Error("empty sheet name");
    	if (/[^\w\u4E00-\u9FFF\u3040-\u30FF]/.test(sname)) return "'" + sname + "'";
    	return sname;
    }
    function get_ixti_raw(supbooks, ixti/*:number*/, opts)/*:string*/ {
    	if(!supbooks) return "SH33TJSERR0";
    	if(opts.biff > 8 && (!supbooks.XTI || !supbooks.XTI[ixti])) return supbooks.SheetNames[ixti];
    	if(!supbooks.XTI) return "SH33TJSERR6";
    	var XTI = supbooks.XTI[ixti];
    	if(opts.biff < 8) {
    		if(ixti > 10000) ixti-= 65536;
    		if(ixti < 0) ixti = -ixti;
    		return ixti == 0 ? "" : supbooks.XTI[ixti - 1];
    	}
    	if(!XTI) return "SH33TJSERR1";
    	var o = "";
    	if(opts.biff > 8) switch(supbooks[XTI[0]][0]) {
    		case 0x0165: /* 'BrtSupSelf' */
    			o = XTI[1] == -1 ? "#REF" : supbooks.SheetNames[XTI[1]];
    			return XTI[1] == XTI[2] ? o : o + ":" + supbooks.SheetNames[XTI[2]];
    		case 0x0166: /* 'BrtSupSame' */
    			if(opts.SID != null) return supbooks.SheetNames[opts.SID];
    			return "SH33TJSSAME" + supbooks[XTI[0]][0];
    		case 0x0163: /* 'BrtSupBookSrc' */
    			/* falls through */
    		default: return "SH33TJSSRC" + supbooks[XTI[0]][0];
    	}
    	switch(supbooks[XTI[0]][0][0]) {
    		case 0x0401:
    			o = XTI[1] == -1 ? "#REF" : (supbooks.SheetNames[XTI[1]] || "SH33TJSERR3");
    			return XTI[1] == XTI[2] ? o : o + ":" + supbooks.SheetNames[XTI[2]];
    		case 0x3A01: return supbooks[XTI[0]].slice(1).map(function(name) { return name.Name; }).join(";;"); //return "SH33TJSERR8";
    		default:
    			if(!supbooks[XTI[0]][0][3]) return "SH33TJSERR2";
    			o = XTI[1] == -1 ? "#REF" : (supbooks[XTI[0]][0][3][XTI[1]] || "SH33TJSERR4");
    			return XTI[1] == XTI[2] ? o : o + ":" + supbooks[XTI[0]][0][3][XTI[2]];
    	}
    }
    function get_ixti(supbooks, ixti/*:number*/, opts)/*:string*/ {
    	var ixtiraw = get_ixti_raw(supbooks, ixti, opts);
    	return ixtiraw == "#REF" ? ixtiraw : formula_quote_sheet_name(ixtiraw, opts);
    }
    function stringify_formula(formula/*Array<any>*/, range, cell/*:any*/, supbooks, opts)/*:string*/ {
    	var biff = (opts && opts.biff) || 8;
    	var _range = /*range != null ? range :*/ {s:{c:0, r:0},e:{c:0, r:0}};
    	var stack/*:Array<string>*/ = [], e1, e2, /*::type,*/ c/*:CellAddress*/, ixti=0, nameidx=0, r, sname="";
    	if(!formula[0] || !formula[0][0]) return "";
    	var last_sp = -1, sp = "";
    	for(var ff = 0, fflen = formula[0].length; ff < fflen; ++ff) {
    		var f = formula[0][ff];
    		switch(f[0]) {
    			case 'PtgUminus': /* [MS-XLS] 2.5.198.93 */
    				stack.push("-" + stack.pop()); break;
    			case 'PtgUplus': /* [MS-XLS] 2.5.198.95 */
    				stack.push("+" + stack.pop()); break;
    			case 'PtgPercent': /* [MS-XLS] 2.5.198.81 */
    				stack.push(stack.pop() + "%"); break;

    			case 'PtgAdd':    /* [MS-XLS] 2.5.198.26 */
    			case 'PtgConcat': /* [MS-XLS] 2.5.198.43 */
    			case 'PtgDiv':    /* [MS-XLS] 2.5.198.45 */
    			case 'PtgEq':     /* [MS-XLS] 2.5.198.56 */
    			case 'PtgGe':     /* [MS-XLS] 2.5.198.64 */
    			case 'PtgGt':     /* [MS-XLS] 2.5.198.65 */
    			case 'PtgLe':     /* [MS-XLS] 2.5.198.68 */
    			case 'PtgLt':     /* [MS-XLS] 2.5.198.69 */
    			case 'PtgMul':    /* [MS-XLS] 2.5.198.75 */
    			case 'PtgNe':     /* [MS-XLS] 2.5.198.78 */
    			case 'PtgPower':  /* [MS-XLS] 2.5.198.82 */
    			case 'PtgSub':    /* [MS-XLS] 2.5.198.90 */
    				e1 = stack.pop(); e2 = stack.pop();
    				if(last_sp >= 0) {
    					switch(formula[0][last_sp][1][0]) {
    						case 0:
    							// $FlowIgnore
    							sp = fill(" ", formula[0][last_sp][1][1]); break;
    						case 1:
    							// $FlowIgnore
    							sp = fill("\r", formula[0][last_sp][1][1]); break;
    						default:
    							sp = "";
    							// $FlowIgnore
    							if(opts.WTF) throw new Error("Unexpected PtgAttrSpaceType " + formula[0][last_sp][1][0]);
    					}
    					e2 = e2 + sp;
    					last_sp = -1;
    				}
    				stack.push(e2+PtgBinOp[f[0]]+e1);
    				break;

    			case 'PtgIsect': /* [MS-XLS] 2.5.198.67 */
    				e1 = stack.pop(); e2 = stack.pop();
    				stack.push(e2+" "+e1);
    				break;
    			case 'PtgUnion': /* [MS-XLS] 2.5.198.94 */
    				e1 = stack.pop(); e2 = stack.pop();
    				stack.push(e2+","+e1);
    				break;
    			case 'PtgRange': /* [MS-XLS] 2.5.198.83 */
    				e1 = stack.pop(); e2 = stack.pop();
    				stack.push(e2+":"+e1);
    				break;

    			case 'PtgAttrChoose': /* [MS-XLS] 2.5.198.34 */
    				break;
    			case 'PtgAttrGoto': /* [MS-XLS] 2.5.198.35 */
    				break;
    			case 'PtgAttrIf': /* [MS-XLS] 2.5.198.36 */
    				break;
    			case 'PtgAttrIfError': /* [MS-XLSB] 2.5.97.28 */
    				break;


    			case 'PtgRef': /* [MS-XLS] 2.5.198.84 */
    				/*::type = f[1][0]; */c = shift_cell_xls((f[1][1]/*:any*/), _range, opts);
    				stack.push(encode_cell_xls(c, biff));
    				break;
    			case 'PtgRefN': /* [MS-XLS] 2.5.198.88 */
    				/*::type = f[1][0]; */c = cell ? shift_cell_xls((f[1][1]/*:any*/), cell, opts) : (f[1][1]/*:any*/);
    				stack.push(encode_cell_xls(c, biff));
    				break;
    			case 'PtgRef3d': /* [MS-XLS] 2.5.198.85 */
    				/*::type = f[1][0]; */ixti = /*::Number(*/f[1][1]/*::)*/; c = shift_cell_xls((f[1][2]/*:any*/), _range, opts);
    				sname = get_ixti(supbooks, ixti, opts);
    				stack.push(sname + "!" + encode_cell_xls(c, biff));
    				break;

    			case 'PtgFunc': /* [MS-XLS] 2.5.198.62 */
    			case 'PtgFuncVar': /* [MS-XLS] 2.5.198.63 */
    				/* f[1] = [argc, func, type] */
    				var argc/*:number*/ = (f[1][0]/*:any*/), func/*:string*/ = (f[1][1]/*:any*/);
    				if(!argc) argc = 0;
    				argc &= 0x7F;
    				var args = argc == 0 ? [] : stack.slice(-argc);
    				stack.length -= argc;
    				if(func === 'User') func = args.shift();
    				stack.push(func + "(" + args.join(",") + ")");
    				break;

    			case 'PtgBool': /* [MS-XLS] 2.5.198.42 */
    				stack.push(f[1] ? "TRUE" : "FALSE"); break;
    			case 'PtgInt': /* [MS-XLS] 2.5.198.66 */
    				stack.push(/*::String(*/f[1]/*::)*/); break;
    			case 'PtgNum': /* [MS-XLS] 2.5.198.79 TODO: precision? */
    				stack.push(String(f[1])); break;
    			case 'PtgStr': /* [MS-XLS] 2.5.198.89 */
    				// $FlowIgnore
    				stack.push('"' + f[1].replace(/"/g, '""') + '"'); break;
    			case 'PtgErr': /* [MS-XLS] 2.5.198.57 */
    				stack.push(/*::String(*/f[1]/*::)*/); break;
    			case 'PtgAreaN': /* [MS-XLS] 2.5.198.31 TODO */
    				/*::type = f[1][0]; */r = shift_range_xls(f[1][1], cell ? {s:cell} : _range, opts);
    				stack.push(encode_range_xls((r/*:any*/), opts));
    				break;
    			case 'PtgArea': /* [MS-XLS] 2.5.198.27 TODO: fixed points */
    				/*::type = f[1][0]; */r = shift_range_xls(f[1][1], _range, opts);
    				stack.push(encode_range_xls((r/*:any*/), opts));
    				break;
    			case 'PtgArea3d': /* [MS-XLS] 2.5.198.28 TODO */
    				/*::type = f[1][0]; */ixti = /*::Number(*/f[1][1]/*::)*/; r = f[1][2];
    				sname = get_ixti(supbooks, ixti, opts);
    				stack.push(sname + "!" + encode_range_xls((r/*:any*/), opts));
    				break;
    			case 'PtgAttrSum': /* [MS-XLS] 2.5.198.41 */
    				stack.push("SUM(" + stack.pop() + ")");
    				break;

    			case 'PtgAttrBaxcel': /* [MS-XLS] 2.5.198.33 */
    			case 'PtgAttrSemi': /* [MS-XLS] 2.5.198.37 */
    				break;

    			case 'PtgName': /* [MS-XLS] 2.5.198.76 ; [MS-XLSB] 2.5.97.60 TODO: revisions */
    				/* f[1] = type, 0, nameindex */
    				nameidx = (f[1][2]/*:any*/);
    				var lbl = (supbooks.names||[])[nameidx-1] || (supbooks[0]||[])[nameidx];
    				var name = lbl ? lbl.Name : "SH33TJSNAME" + String(nameidx);
    				/* [MS-XLSB] 2.5.97.10 Ftab -- last verified 20220204 */
    				if(name && name.slice(0,6) == "_xlfn." && !opts.xlfn) name = name.slice(6);
    				stack.push(name);
    				break;

    			case 'PtgNameX': /* [MS-XLS] 2.5.198.77 ; [MS-XLSB] 2.5.97.61 TODO: revisions */
    				/* f[1] = type, ixti, nameindex */
    				var bookidx/*:number*/ = (f[1][1]/*:any*/); nameidx = (f[1][2]/*:any*/); var externbook;
    				/* TODO: Properly handle missing values -- this should be using get_ixti_raw primarily */
    				if(opts.biff <= 5) {
    					if(bookidx < 0) bookidx = -bookidx;
    					if(supbooks[bookidx]) externbook = supbooks[bookidx][nameidx];
    				} else {
    					var o = "";
    					if(((supbooks[bookidx]||[])[0]||[])[0] == 0x3A01);
    					else if(((supbooks[bookidx]||[])[0]||[])[0] == 0x0401){
    						if(supbooks[bookidx][nameidx] && supbooks[bookidx][nameidx].itab > 0) {
    							o = supbooks.SheetNames[supbooks[bookidx][nameidx].itab-1] + "!";
    						}
    					}
    					else o = supbooks.SheetNames[nameidx-1]+ "!";
    					if(supbooks[bookidx] && supbooks[bookidx][nameidx]) o += supbooks[bookidx][nameidx].Name;
    					else if(supbooks[0] && supbooks[0][nameidx]) o += supbooks[0][nameidx].Name;
    					else {
    						var ixtidata = (get_ixti_raw(supbooks, bookidx, opts)||"").split(";;");
    						if(ixtidata[nameidx - 1]) o = ixtidata[nameidx - 1]; // TODO: confirm this is correct
    						else o += "SH33TJSERRX";
    					}
    					stack.push(o);
    					break;
    				}
    				if(!externbook) externbook = {Name: "SH33TJSERRY"};
    				stack.push(externbook.Name);
    				break;

    			case 'PtgParen': /* [MS-XLS] 2.5.198.80 */
    				var lp = '(', rp = ')';
    				if(last_sp >= 0) {
    					sp = "";
    					switch(formula[0][last_sp][1][0]) {
    						// $FlowIgnore
    						case 2: lp = fill(" ", formula[0][last_sp][1][1]) + lp; break;
    						// $FlowIgnore
    						case 3: lp = fill("\r", formula[0][last_sp][1][1]) + lp; break;
    						// $FlowIgnore
    						case 4: rp = fill(" ", formula[0][last_sp][1][1]) + rp; break;
    						// $FlowIgnore
    						case 5: rp = fill("\r", formula[0][last_sp][1][1]) + rp; break;
    						default:
    							// $FlowIgnore
    							if(opts.WTF) throw new Error("Unexpected PtgAttrSpaceType " + formula[0][last_sp][1][0]);
    					}
    					last_sp = -1;
    				}
    				stack.push(lp + stack.pop() + rp); break;

    			case 'PtgRefErr': /* [MS-XLS] 2.5.198.86 */
    				stack.push('#REF!'); break;

    			case 'PtgRefErr3d': /* [MS-XLS] 2.5.198.87 */
    				stack.push('#REF!'); break;

    			case 'PtgExp': /* [MS-XLS] 2.5.198.58 TODO */
    				c = {c:(f[1][1]/*:any*/),r:(f[1][0]/*:any*/)};
    				var q = ({c: cell.c, r:cell.r}/*:any*/);
    				if(supbooks.sharedf[encode_cell(c)]) {
    					var parsedf = (supbooks.sharedf[encode_cell(c)]);
    					stack.push(stringify_formula(parsedf, _range, q, supbooks, opts));
    				} else {
    					var fnd = false;
    					for(e1=0;e1!=supbooks.arrayf.length; ++e1) {
    						/* TODO: should be something like range_has */
    						e2 = supbooks.arrayf[e1];
    						if(c.c < e2[0].s.c || c.c > e2[0].e.c) continue;
    						if(c.r < e2[0].s.r || c.r > e2[0].e.r) continue;
    						stack.push(stringify_formula(e2[1], _range, q, supbooks, opts));
    						fnd = true;
    						break;
    					}
    					if(!fnd) stack.push(/*::String(*/f[1]/*::)*/);
    				}
    				break;

    			case 'PtgArray': /* [MS-XLS] 2.5.198.32 TODO */
    				stack.push("{" + stringify_array(/*::(*/f[1]/*:: :any)*/) + "}");
    				break;

    			case 'PtgMemArea': /* [MS-XLS] 2.5.198.70 TODO: confirm this is a non-display */
    				//stack.push("(" + f[2].map(encode_range).join(",") + ")");
    				break;

    			case 'PtgAttrSpace': /* [MS-XLS] 2.5.198.38 */
    			case 'PtgAttrSpaceSemi': /* [MS-XLS] 2.5.198.39 */
    				last_sp = ff;
    				break;

    			case 'PtgTbl': /* [MS-XLS] 2.5.198.92 TODO */
    				break;

    			case 'PtgMemErr': /* [MS-XLS] 2.5.198.71 */
    				break;

    			case 'PtgMissArg': /* [MS-XLS] 2.5.198.74 */
    				stack.push("");
    				break;

    			case 'PtgAreaErr': /* [MS-XLS] 2.5.198.29 */
    				stack.push("#REF!"); break;

    			case 'PtgAreaErr3d': /* [MS-XLS] 2.5.198.30 */
    				stack.push("#REF!"); break;

    			case 'PtgList': /* [MS-XLSB] 2.5.97.52 */
    				// $FlowIgnore
    				stack.push("Table" + f[1].idx + "[#" + f[1].rt + "]");
    				break;

    			case 'PtgMemAreaN':
    			case 'PtgMemNoMemN':
    			case 'PtgAttrNoop':
    			case 'PtgSheet':
    			case 'PtgEndSheet':
    				break;

    			case 'PtgMemFunc': /* [MS-XLS] 2.5.198.72 TODO */
    				break;
    			case 'PtgMemNoMem': /* [MS-XLS] 2.5.198.73 TODO */
    				break;

    			case 'PtgElfCol': /* [MS-XLS] 2.5.198.46 */
    			case 'PtgElfColS': /* [MS-XLS] 2.5.198.47 */
    			case 'PtgElfColSV': /* [MS-XLS] 2.5.198.48 */
    			case 'PtgElfColV': /* [MS-XLS] 2.5.198.49 */
    			case 'PtgElfLel': /* [MS-XLS] 2.5.198.50 */
    			case 'PtgElfRadical': /* [MS-XLS] 2.5.198.51 */
    			case 'PtgElfRadicalLel': /* [MS-XLS] 2.5.198.52 */
    			case 'PtgElfRadicalS': /* [MS-XLS] 2.5.198.53 */
    			case 'PtgElfRw': /* [MS-XLS] 2.5.198.54 */
    			case 'PtgElfRwV': /* [MS-XLS] 2.5.198.55 */
    				throw new Error("Unsupported ELFs");

    			case 'PtgSxName': /* [MS-XLS] 2.5.198.91 TODO -- find a test case */
    				throw new Error('Unrecognized Formula Token: ' + String(f));
    			default: throw new Error('Unrecognized Formula Token: ' + String(f));
    		}
    		var PtgNonDisp = ['PtgAttrSpace', 'PtgAttrSpaceSemi', 'PtgAttrGoto'];
    		if(opts.biff != 3) if(last_sp >= 0 && PtgNonDisp.indexOf(formula[0][ff][0]) == -1) {
    			f = formula[0][last_sp];
    			var _left = true;
    			switch(f[1][0]) {
    				/* note: some bad XLSB files omit the PtgParen */
    				case 4: _left = false;
    				/* falls through */
    				case 0:
    					// $FlowIgnore
    					sp = fill(" ", f[1][1]); break;
    				case 5: _left = false;
    				/* falls through */
    				case 1:
    					// $FlowIgnore
    					sp = fill("\r", f[1][1]); break;
    				default:
    					sp = "";
    					// $FlowIgnore
    					if(opts.WTF) throw new Error("Unexpected PtgAttrSpaceType " + f[1][0]);
    			}
    			stack.push((_left ? sp : "") + stack.pop() + (_left ? "" : sp));
    			last_sp = -1;
    		}
    	}
    	if(stack.length > 1 && opts.WTF) throw new Error("bad formula stack");
    	return stack[0];
    }

    /* [MS-XLS] 2.5.198.1 TODO */
    function parse_ArrayParsedFormula(blob, length, opts/*::, ref*/) {
    	var target = blob.l + length, len = opts.biff == 2 ? 1 : 2;
    	var rgcb, cce = blob.read_shift(len); // length of rgce
    	if(cce == 0xFFFF) return [[],parsenoop(blob, length-2)];
    	var rgce = parse_Rgce(blob, cce, opts);
    	if(length !== cce + len) rgcb = parse_RgbExtra(blob, length - cce - len, rgce, opts);
    	blob.l = target;
    	return [rgce, rgcb];
    }

    /* [MS-XLS] 2.5.198.3 TODO */
    function parse_XLSCellParsedFormula(blob, length, opts) {
    	var target = blob.l + length, len = opts.biff == 2 ? 1 : 2;
    	var rgcb, cce = blob.read_shift(len); // length of rgce
    	if(cce == 0xFFFF) return [[],parsenoop(blob, length-2)];
    	var rgce = parse_Rgce(blob, cce, opts);
    	if(length !== cce + len) rgcb = parse_RgbExtra(blob, length - cce - len, rgce, opts);
    	blob.l = target;
    	return [rgce, rgcb];
    }

    /* [MS-XLS] 2.5.198.21 */
    function parse_NameParsedFormula(blob, length, opts, cce) {
    	var target = blob.l + length;
    	var rgce = parse_Rgce(blob, cce, opts);
    	var rgcb;
    	if(target !== blob.l) rgcb = parse_RgbExtra(blob, target - blob.l, rgce, opts);
    	return [rgce, rgcb];
    }

    /* [MS-XLS] 2.5.198.118 TODO */
    function parse_SharedParsedFormula(blob, length, opts) {
    	var target = blob.l + length;
    	var rgcb, cce = blob.read_shift(2); // length of rgce
    	var rgce = parse_Rgce(blob, cce, opts);
    	if(cce == 0xFFFF) return [[],parsenoop(blob, length-2)];
    	if(length !== cce + 2) rgcb = parse_RgbExtra(blob, target - cce - 2, rgce, opts);
    	return [rgce, rgcb];
    }

    /* [MS-XLS] 2.5.133 TODO: how to emit empty strings? */
    function parse_FormulaValue(blob/*::, length*/) {
    	var b;
    	if(__readUInt16LE(blob,blob.l + 6) !== 0xFFFF) return [parse_Xnum(blob),'n'];
    	switch(blob[blob.l]) {
    		case 0x00: blob.l += 8; return ["String", 's'];
    		case 0x01: b = blob[blob.l+2] === 0x1; blob.l += 8; return [b,'b'];
    		case 0x02: b = blob[blob.l+2]; blob.l += 8; return [b,'e'];
    		case 0x03: blob.l += 8; return ["",'s'];
    	}
    	return [];
    }

    /* [MS-XLS] 2.4.127 TODO */
    function parse_Formula(blob, length, opts) {
    	var end = blob.l + length;
    	var cell = parse_XLSCell(blob);
    	if(opts.biff == 2) ++blob.l;
    	var val = parse_FormulaValue(blob);
    	var flags = blob.read_shift(1);
    	if(opts.biff != 2) {
    		blob.read_shift(1);
    		if(opts.biff >= 5) {
    			/*var chn = */blob.read_shift(4);
    		}
    	}
    	var cbf = parse_XLSCellParsedFormula(blob, end - blob.l, opts);
    	return {cell:cell, val:val[0], formula:cbf, shared: (flags >> 3) & 1, tt:val[1]};
    }


    /* XLSB Parsed Formula records have the same shape */
    function parse_XLSBParsedFormula(data, length, opts) {
    	var cce = data.read_shift(4);
    	var rgce = parse_Rgce(data, cce, opts);
    	var cb = data.read_shift(4);
    	var rgcb = cb > 0 ? parse_RgbExtra(data, cb, rgce, opts) : null;
    	return [rgce, rgcb];
    }

    /* [MS-XLSB] 2.5.97.1 ArrayParsedFormula */
    var parse_XLSBArrayParsedFormula = parse_XLSBParsedFormula;
    /* [MS-XLSB] 2.5.97.4 CellParsedFormula */
    var parse_XLSBCellParsedFormula = parse_XLSBParsedFormula;
    /* [MS-XLSB] 2.5.97.8 DVParsedFormula */
    //var parse_XLSBDVParsedFormula = parse_XLSBParsedFormula;
    /* [MS-XLSB] 2.5.97.9 FRTParsedFormula */
    //var parse_XLSBFRTParsedFormula = parse_XLSBParsedFormula2;
    /* [MS-XLSB] 2.5.97.12 NameParsedFormula */
    var parse_XLSBNameParsedFormula = parse_XLSBParsedFormula;
    /* [MS-XLSB] 2.5.97.98 SharedParsedFormula */
    var parse_XLSBSharedParsedFormula = parse_XLSBParsedFormula;
    var Cetab = {
      0: "BEEP",
      1: "OPEN",
      2: "OPEN.LINKS",
      3: "CLOSE.ALL",
      4: "SAVE",
      5: "SAVE.AS",
      6: "FILE.DELETE",
      7: "PAGE.SETUP",
      8: "PRINT",
      9: "PRINTER.SETUP",
      10: "QUIT",
      11: "NEW.WINDOW",
      12: "ARRANGE.ALL",
      13: "WINDOW.SIZE",
      14: "WINDOW.MOVE",
      15: "FULL",
      16: "CLOSE",
      17: "RUN",
      22: "SET.PRINT.AREA",
      23: "SET.PRINT.TITLES",
      24: "SET.PAGE.BREAK",
      25: "REMOVE.PAGE.BREAK",
      26: "FONT",
      27: "DISPLAY",
      28: "PROTECT.DOCUMENT",
      29: "PRECISION",
      30: "A1.R1C1",
      31: "CALCULATE.NOW",
      32: "CALCULATION",
      34: "DATA.FIND",
      35: "EXTRACT",
      36: "DATA.DELETE",
      37: "SET.DATABASE",
      38: "SET.CRITERIA",
      39: "SORT",
      40: "DATA.SERIES",
      41: "TABLE",
      42: "FORMAT.NUMBER",
      43: "ALIGNMENT",
      44: "STYLE",
      45: "BORDER",
      46: "CELL.PROTECTION",
      47: "COLUMN.WIDTH",
      48: "UNDO",
      49: "CUT",
      50: "COPY",
      51: "PASTE",
      52: "CLEAR",
      53: "PASTE.SPECIAL",
      54: "EDIT.DELETE",
      55: "INSERT",
      56: "FILL.RIGHT",
      57: "FILL.DOWN",
      61: "DEFINE.NAME",
      62: "CREATE.NAMES",
      63: "FORMULA.GOTO",
      64: "FORMULA.FIND",
      65: "SELECT.LAST.CELL",
      66: "SHOW.ACTIVE.CELL",
      67: "GALLERY.AREA",
      68: "GALLERY.BAR",
      69: "GALLERY.COLUMN",
      70: "GALLERY.LINE",
      71: "GALLERY.PIE",
      72: "GALLERY.SCATTER",
      73: "COMBINATION",
      74: "PREFERRED",
      75: "ADD.OVERLAY",
      76: "GRIDLINES",
      77: "SET.PREFERRED",
      78: "AXES",
      79: "LEGEND",
      80: "ATTACH.TEXT",
      81: "ADD.ARROW",
      82: "SELECT.CHART",
      83: "SELECT.PLOT.AREA",
      84: "PATTERNS",
      85: "MAIN.CHART",
      86: "OVERLAY",
      87: "SCALE",
      88: "FORMAT.LEGEND",
      89: "FORMAT.TEXT",
      90: "EDIT.REPEAT",
      91: "PARSE",
      92: "JUSTIFY",
      93: "HIDE",
      94: "UNHIDE",
      95: "WORKSPACE",
      96: "FORMULA",
      97: "FORMULA.FILL",
      98: "FORMULA.ARRAY",
      99: "DATA.FIND.NEXT",
      100: "DATA.FIND.PREV",
      101: "FORMULA.FIND.NEXT",
      102: "FORMULA.FIND.PREV",
      103: "ACTIVATE",
      104: "ACTIVATE.NEXT",
      105: "ACTIVATE.PREV",
      106: "UNLOCKED.NEXT",
      107: "UNLOCKED.PREV",
      108: "COPY.PICTURE",
      109: "SELECT",
      110: "DELETE.NAME",
      111: "DELETE.FORMAT",
      112: "VLINE",
      113: "HLINE",
      114: "VPAGE",
      115: "HPAGE",
      116: "VSCROLL",
      117: "HSCROLL",
      118: "ALERT",
      119: "NEW",
      120: "CANCEL.COPY",
      121: "SHOW.CLIPBOARD",
      122: "MESSAGE",
      124: "PASTE.LINK",
      125: "APP.ACTIVATE",
      126: "DELETE.ARROW",
      127: "ROW.HEIGHT",
      128: "FORMAT.MOVE",
      129: "FORMAT.SIZE",
      130: "FORMULA.REPLACE",
      131: "SEND.KEYS",
      132: "SELECT.SPECIAL",
      133: "APPLY.NAMES",
      134: "REPLACE.FONT",
      135: "FREEZE.PANES",
      136: "SHOW.INFO",
      137: "SPLIT",
      138: "ON.WINDOW",
      139: "ON.DATA",
      140: "DISABLE.INPUT",
      142: "OUTLINE",
      143: "LIST.NAMES",
      144: "FILE.CLOSE",
      145: "SAVE.WORKBOOK",
      146: "DATA.FORM",
      147: "COPY.CHART",
      148: "ON.TIME",
      149: "WAIT",
      150: "FORMAT.FONT",
      151: "FILL.UP",
      152: "FILL.LEFT",
      153: "DELETE.OVERLAY",
      155: "SHORT.MENUS",
      159: "SET.UPDATE.STATUS",
      161: "COLOR.PALETTE",
      162: "DELETE.STYLE",
      163: "WINDOW.RESTORE",
      164: "WINDOW.MAXIMIZE",
      166: "CHANGE.LINK",
      167: "CALCULATE.DOCUMENT",
      168: "ON.KEY",
      169: "APP.RESTORE",
      170: "APP.MOVE",
      171: "APP.SIZE",
      172: "APP.MINIMIZE",
      173: "APP.MAXIMIZE",
      174: "BRING.TO.FRONT",
      175: "SEND.TO.BACK",
      185: "MAIN.CHART.TYPE",
      186: "OVERLAY.CHART.TYPE",
      187: "SELECT.END",
      188: "OPEN.MAIL",
      189: "SEND.MAIL",
      190: "STANDARD.FONT",
      191: "CONSOLIDATE",
      192: "SORT.SPECIAL",
      193: "GALLERY.3D.AREA",
      194: "GALLERY.3D.COLUMN",
      195: "GALLERY.3D.LINE",
      196: "GALLERY.3D.PIE",
      197: "VIEW.3D",
      198: "GOAL.SEEK",
      199: "WORKGROUP",
      200: "FILL.GROUP",
      201: "UPDATE.LINK",
      202: "PROMOTE",
      203: "DEMOTE",
      204: "SHOW.DETAIL",
      206: "UNGROUP",
      207: "OBJECT.PROPERTIES",
      208: "SAVE.NEW.OBJECT",
      209: "SHARE",
      210: "SHARE.NAME",
      211: "DUPLICATE",
      212: "APPLY.STYLE",
      213: "ASSIGN.TO.OBJECT",
      214: "OBJECT.PROTECTION",
      215: "HIDE.OBJECT",
      216: "SET.EXTRACT",
      217: "CREATE.PUBLISHER",
      218: "SUBSCRIBE.TO",
      219: "ATTRIBUTES",
      220: "SHOW.TOOLBAR",
      222: "PRINT.PREVIEW",
      223: "EDIT.COLOR",
      224: "SHOW.LEVELS",
      225: "FORMAT.MAIN",
      226: "FORMAT.OVERLAY",
      227: "ON.RECALC",
      228: "EDIT.SERIES",
      229: "DEFINE.STYLE",
      240: "LINE.PRINT",
      243: "ENTER.DATA",
      249: "GALLERY.RADAR",
      250: "MERGE.STYLES",
      251: "EDITION.OPTIONS",
      252: "PASTE.PICTURE",
      253: "PASTE.PICTURE.LINK",
      254: "SPELLING",
      256: "ZOOM",
      259: "INSERT.OBJECT",
      260: "WINDOW.MINIMIZE",
      265: "SOUND.NOTE",
      266: "SOUND.PLAY",
      267: "FORMAT.SHAPE",
      268: "EXTEND.POLYGON",
      269: "FORMAT.AUTO",
      272: "GALLERY.3D.BAR",
      273: "GALLERY.3D.SURFACE",
      274: "FILL.AUTO",
      276: "CUSTOMIZE.TOOLBAR",
      277: "ADD.TOOL",
      278: "EDIT.OBJECT",
      279: "ON.DOUBLECLICK",
      280: "ON.ENTRY",
      281: "WORKBOOK.ADD",
      282: "WORKBOOK.MOVE",
      283: "WORKBOOK.COPY",
      284: "WORKBOOK.OPTIONS",
      285: "SAVE.WORKSPACE",
      288: "CHART.WIZARD",
      289: "DELETE.TOOL",
      290: "MOVE.TOOL",
      291: "WORKBOOK.SELECT",
      292: "WORKBOOK.ACTIVATE",
      293: "ASSIGN.TO.TOOL",
      295: "COPY.TOOL",
      296: "RESET.TOOL",
      297: "CONSTRAIN.NUMERIC",
      298: "PASTE.TOOL",
      302: "WORKBOOK.NEW",
      305: "SCENARIO.CELLS",
      306: "SCENARIO.DELETE",
      307: "SCENARIO.ADD",
      308: "SCENARIO.EDIT",
      309: "SCENARIO.SHOW",
      310: "SCENARIO.SHOW.NEXT",
      311: "SCENARIO.SUMMARY",
      312: "PIVOT.TABLE.WIZARD",
      313: "PIVOT.FIELD.PROPERTIES",
      314: "PIVOT.FIELD",
      315: "PIVOT.ITEM",
      316: "PIVOT.ADD.FIELDS",
      318: "OPTIONS.CALCULATION",
      319: "OPTIONS.EDIT",
      320: "OPTIONS.VIEW",
      321: "ADDIN.MANAGER",
      322: "MENU.EDITOR",
      323: "ATTACH.TOOLBARS",
      324: "VBAActivate",
      325: "OPTIONS.CHART",
      328: "VBA.INSERT.FILE",
      330: "VBA.PROCEDURE.DEFINITION",
      336: "ROUTING.SLIP",
      338: "ROUTE.DOCUMENT",
      339: "MAIL.LOGON",
      342: "INSERT.PICTURE",
      343: "EDIT.TOOL",
      344: "GALLERY.DOUGHNUT",
      350: "CHART.TREND",
      352: "PIVOT.ITEM.PROPERTIES",
      354: "WORKBOOK.INSERT",
      355: "OPTIONS.TRANSITION",
      356: "OPTIONS.GENERAL",
      370: "FILTER.ADVANCED",
      373: "MAIL.ADD.MAILER",
      374: "MAIL.DELETE.MAILER",
      375: "MAIL.REPLY",
      376: "MAIL.REPLY.ALL",
      377: "MAIL.FORWARD",
      378: "MAIL.NEXT.LETTER",
      379: "DATA.LABEL",
      380: "INSERT.TITLE",
      381: "FONT.PROPERTIES",
      382: "MACRO.OPTIONS",
      383: "WORKBOOK.HIDE",
      384: "WORKBOOK.UNHIDE",
      385: "WORKBOOK.DELETE",
      386: "WORKBOOK.NAME",
      388: "GALLERY.CUSTOM",
      390: "ADD.CHART.AUTOFORMAT",
      391: "DELETE.CHART.AUTOFORMAT",
      392: "CHART.ADD.DATA",
      393: "AUTO.OUTLINE",
      394: "TAB.ORDER",
      395: "SHOW.DIALOG",
      396: "SELECT.ALL",
      397: "UNGROUP.SHEETS",
      398: "SUBTOTAL.CREATE",
      399: "SUBTOTAL.REMOVE",
      400: "RENAME.OBJECT",
      412: "WORKBOOK.SCROLL",
      413: "WORKBOOK.NEXT",
      414: "WORKBOOK.PREV",
      415: "WORKBOOK.TAB.SPLIT",
      416: "FULL.SCREEN",
      417: "WORKBOOK.PROTECT",
      420: "SCROLLBAR.PROPERTIES",
      421: "PIVOT.SHOW.PAGES",
      422: "TEXT.TO.COLUMNS",
      423: "FORMAT.CHARTTYPE",
      424: "LINK.FORMAT",
      425: "TRACER.DISPLAY",
      430: "TRACER.NAVIGATE",
      431: "TRACER.CLEAR",
      432: "TRACER.ERROR",
      433: "PIVOT.FIELD.GROUP",
      434: "PIVOT.FIELD.UNGROUP",
      435: "CHECKBOX.PROPERTIES",
      436: "LABEL.PROPERTIES",
      437: "LISTBOX.PROPERTIES",
      438: "EDITBOX.PROPERTIES",
      439: "PIVOT.REFRESH",
      440: "LINK.COMBO",
      441: "OPEN.TEXT",
      442: "HIDE.DIALOG",
      443: "SET.DIALOG.FOCUS",
      444: "ENABLE.OBJECT",
      445: "PUSHBUTTON.PROPERTIES",
      446: "SET.DIALOG.DEFAULT",
      447: "FILTER",
      448: "FILTER.SHOW.ALL",
      449: "CLEAR.OUTLINE",
      450: "FUNCTION.WIZARD",
      451: "ADD.LIST.ITEM",
      452: "SET.LIST.ITEM",
      453: "REMOVE.LIST.ITEM",
      454: "SELECT.LIST.ITEM",
      455: "SET.CONTROL.VALUE",
      456: "SAVE.COPY.AS",
      458: "OPTIONS.LISTS.ADD",
      459: "OPTIONS.LISTS.DELETE",
      460: "SERIES.AXES",
      461: "SERIES.X",
      462: "SERIES.Y",
      463: "ERRORBAR.X",
      464: "ERRORBAR.Y",
      465: "FORMAT.CHART",
      466: "SERIES.ORDER",
      467: "MAIL.LOGOFF",
      468: "CLEAR.ROUTING.SLIP",
      469: "APP.ACTIVATE.MICROSOFT",
      470: "MAIL.EDIT.MAILER",
      471: "ON.SHEET",
      472: "STANDARD.WIDTH",
      473: "SCENARIO.MERGE",
      474: "SUMMARY.INFO",
      475: "FIND.FILE",
      476: "ACTIVE.CELL.FONT",
      477: "ENABLE.TIPWIZARD",
      478: "VBA.MAKE.ADDIN",
      480: "INSERTDATATABLE",
      481: "WORKGROUP.OPTIONS",
      482: "MAIL.SEND.MAILER",
      485: "AUTOCORRECT",
      489: "POST.DOCUMENT",
      491: "PICKLIST",
      493: "VIEW.SHOW",
      494: "VIEW.DEFINE",
      495: "VIEW.DELETE",
      509: "SHEET.BACKGROUND",
      510: "INSERT.MAP.OBJECT",
      511: "OPTIONS.MENONO",
      517: "MSOCHECKS",
      518: "NORMAL",
      519: "LAYOUT",
      520: "RM.PRINT.AREA",
      521: "CLEAR.PRINT.AREA",
      522: "ADD.PRINT.AREA",
      523: "MOVE.BRK",
      545: "HIDECURR.NOTE",
      546: "HIDEALL.NOTES",
      547: "DELETE.NOTE",
      548: "TRAVERSE.NOTES",
      549: "ACTIVATE.NOTES",
      620: "PROTECT.REVISIONS",
      621: "UNPROTECT.REVISIONS",
      647: "OPTIONS.ME",
      653: "WEB.PUBLISH",
      667: "NEWWEBQUERY",
      673: "PIVOT.TABLE.CHART",
      753: "OPTIONS.SAVE",
      755: "OPTIONS.SPELL",
      808: "HIDEALL.INKANNOTS"
    };
    var Ftab = {
      0: "COUNT",
      1: "IF",
      2: "ISNA",
      3: "ISERROR",
      4: "SUM",
      5: "AVERAGE",
      6: "MIN",
      7: "MAX",
      8: "ROW",
      9: "COLUMN",
      10: "NA",
      11: "NPV",
      12: "STDEV",
      13: "DOLLAR",
      14: "FIXED",
      15: "SIN",
      16: "COS",
      17: "TAN",
      18: "ATAN",
      19: "PI",
      20: "SQRT",
      21: "EXP",
      22: "LN",
      23: "LOG10",
      24: "ABS",
      25: "INT",
      26: "SIGN",
      27: "ROUND",
      28: "LOOKUP",
      29: "INDEX",
      30: "REPT",
      31: "MID",
      32: "LEN",
      33: "VALUE",
      34: "TRUE",
      35: "FALSE",
      36: "AND",
      37: "OR",
      38: "NOT",
      39: "MOD",
      40: "DCOUNT",
      41: "DSUM",
      42: "DAVERAGE",
      43: "DMIN",
      44: "DMAX",
      45: "DSTDEV",
      46: "VAR",
      47: "DVAR",
      48: "TEXT",
      49: "LINEST",
      50: "TREND",
      51: "LOGEST",
      52: "GROWTH",
      53: "GOTO",
      54: "HALT",
      55: "RETURN",
      56: "PV",
      57: "FV",
      58: "NPER",
      59: "PMT",
      60: "RATE",
      61: "MIRR",
      62: "IRR",
      63: "RAND",
      64: "MATCH",
      65: "DATE",
      66: "TIME",
      67: "DAY",
      68: "MONTH",
      69: "YEAR",
      70: "WEEKDAY",
      71: "HOUR",
      72: "MINUTE",
      73: "SECOND",
      74: "NOW",
      75: "AREAS",
      76: "ROWS",
      77: "COLUMNS",
      78: "OFFSET",
      79: "ABSREF",
      80: "RELREF",
      81: "ARGUMENT",
      82: "SEARCH",
      83: "TRANSPOSE",
      84: "ERROR",
      85: "STEP",
      86: "TYPE",
      87: "ECHO",
      88: "SET.NAME",
      89: "CALLER",
      90: "DEREF",
      91: "WINDOWS",
      92: "SERIES",
      93: "DOCUMENTS",
      94: "ACTIVE.CELL",
      95: "SELECTION",
      96: "RESULT",
      97: "ATAN2",
      98: "ASIN",
      99: "ACOS",
      100: "CHOOSE",
      101: "HLOOKUP",
      102: "VLOOKUP",
      103: "LINKS",
      104: "INPUT",
      105: "ISREF",
      106: "GET.FORMULA",
      107: "GET.NAME",
      108: "SET.VALUE",
      109: "LOG",
      110: "EXEC",
      111: "CHAR",
      112: "LOWER",
      113: "UPPER",
      114: "PROPER",
      115: "LEFT",
      116: "RIGHT",
      117: "EXACT",
      118: "TRIM",
      119: "REPLACE",
      120: "SUBSTITUTE",
      121: "CODE",
      122: "NAMES",
      123: "DIRECTORY",
      124: "FIND",
      125: "CELL",
      126: "ISERR",
      127: "ISTEXT",
      128: "ISNUMBER",
      129: "ISBLANK",
      130: "T",
      131: "N",
      132: "FOPEN",
      133: "FCLOSE",
      134: "FSIZE",
      135: "FREADLN",
      136: "FREAD",
      137: "FWRITELN",
      138: "FWRITE",
      139: "FPOS",
      140: "DATEVALUE",
      141: "TIMEVALUE",
      142: "SLN",
      143: "SYD",
      144: "DDB",
      145: "GET.DEF",
      146: "REFTEXT",
      147: "TEXTREF",
      148: "INDIRECT",
      149: "REGISTER",
      150: "CALL",
      151: "ADD.BAR",
      152: "ADD.MENU",
      153: "ADD.COMMAND",
      154: "ENABLE.COMMAND",
      155: "CHECK.COMMAND",
      156: "RENAME.COMMAND",
      157: "SHOW.BAR",
      158: "DELETE.MENU",
      159: "DELETE.COMMAND",
      160: "GET.CHART.ITEM",
      161: "DIALOG.BOX",
      162: "CLEAN",
      163: "MDETERM",
      164: "MINVERSE",
      165: "MMULT",
      166: "FILES",
      167: "IPMT",
      168: "PPMT",
      169: "COUNTA",
      170: "CANCEL.KEY",
      171: "FOR",
      172: "WHILE",
      173: "BREAK",
      174: "NEXT",
      175: "INITIATE",
      176: "REQUEST",
      177: "POKE",
      178: "EXECUTE",
      179: "TERMINATE",
      180: "RESTART",
      181: "HELP",
      182: "GET.BAR",
      183: "PRODUCT",
      184: "FACT",
      185: "GET.CELL",
      186: "GET.WORKSPACE",
      187: "GET.WINDOW",
      188: "GET.DOCUMENT",
      189: "DPRODUCT",
      190: "ISNONTEXT",
      191: "GET.NOTE",
      192: "NOTE",
      193: "STDEVP",
      194: "VARP",
      195: "DSTDEVP",
      196: "DVARP",
      197: "TRUNC",
      198: "ISLOGICAL",
      199: "DCOUNTA",
      200: "DELETE.BAR",
      201: "UNREGISTER",
      204: "USDOLLAR",
      205: "FINDB",
      206: "SEARCHB",
      207: "REPLACEB",
      208: "LEFTB",
      209: "RIGHTB",
      210: "MIDB",
      211: "LENB",
      212: "ROUNDUP",
      213: "ROUNDDOWN",
      214: "ASC",
      215: "DBCS",
      216: "RANK",
      219: "ADDRESS",
      220: "DAYS360",
      221: "TODAY",
      222: "VDB",
      223: "ELSE",
      224: "ELSE.IF",
      225: "END.IF",
      226: "FOR.CELL",
      227: "MEDIAN",
      228: "SUMPRODUCT",
      229: "SINH",
      230: "COSH",
      231: "TANH",
      232: "ASINH",
      233: "ACOSH",
      234: "ATANH",
      235: "DGET",
      236: "CREATE.OBJECT",
      237: "VOLATILE",
      238: "LAST.ERROR",
      239: "CUSTOM.UNDO",
      240: "CUSTOM.REPEAT",
      241: "FORMULA.CONVERT",
      242: "GET.LINK.INFO",
      243: "TEXT.BOX",
      244: "INFO",
      245: "GROUP",
      246: "GET.OBJECT",
      247: "DB",
      248: "PAUSE",
      251: "RESUME",
      252: "FREQUENCY",
      253: "ADD.TOOLBAR",
      254: "DELETE.TOOLBAR",
      255: "User",
      256: "RESET.TOOLBAR",
      257: "EVALUATE",
      258: "GET.TOOLBAR",
      259: "GET.TOOL",
      260: "SPELLING.CHECK",
      261: "ERROR.TYPE",
      262: "APP.TITLE",
      263: "WINDOW.TITLE",
      264: "SAVE.TOOLBAR",
      265: "ENABLE.TOOL",
      266: "PRESS.TOOL",
      267: "REGISTER.ID",
      268: "GET.WORKBOOK",
      269: "AVEDEV",
      270: "BETADIST",
      271: "GAMMALN",
      272: "BETAINV",
      273: "BINOMDIST",
      274: "CHIDIST",
      275: "CHIINV",
      276: "COMBIN",
      277: "CONFIDENCE",
      278: "CRITBINOM",
      279: "EVEN",
      280: "EXPONDIST",
      281: "FDIST",
      282: "FINV",
      283: "FISHER",
      284: "FISHERINV",
      285: "FLOOR",
      286: "GAMMADIST",
      287: "GAMMAINV",
      288: "CEILING",
      289: "HYPGEOMDIST",
      290: "LOGNORMDIST",
      291: "LOGINV",
      292: "NEGBINOMDIST",
      293: "NORMDIST",
      294: "NORMSDIST",
      295: "NORMINV",
      296: "NORMSINV",
      297: "STANDARDIZE",
      298: "ODD",
      299: "PERMUT",
      300: "POISSON",
      301: "TDIST",
      302: "WEIBULL",
      303: "SUMXMY2",
      304: "SUMX2MY2",
      305: "SUMX2PY2",
      306: "CHITEST",
      307: "CORREL",
      308: "COVAR",
      309: "FORECAST",
      310: "FTEST",
      311: "INTERCEPT",
      312: "PEARSON",
      313: "RSQ",
      314: "STEYX",
      315: "SLOPE",
      316: "TTEST",
      317: "PROB",
      318: "DEVSQ",
      319: "GEOMEAN",
      320: "HARMEAN",
      321: "SUMSQ",
      322: "KURT",
      323: "SKEW",
      324: "ZTEST",
      325: "LARGE",
      326: "SMALL",
      327: "QUARTILE",
      328: "PERCENTILE",
      329: "PERCENTRANK",
      330: "MODE",
      331: "TRIMMEAN",
      332: "TINV",
      334: "MOVIE.COMMAND",
      335: "GET.MOVIE",
      336: "CONCATENATE",
      337: "POWER",
      338: "PIVOT.ADD.DATA",
      339: "GET.PIVOT.TABLE",
      340: "GET.PIVOT.FIELD",
      341: "GET.PIVOT.ITEM",
      342: "RADIANS",
      343: "DEGREES",
      344: "SUBTOTAL",
      345: "SUMIF",
      346: "COUNTIF",
      347: "COUNTBLANK",
      348: "SCENARIO.GET",
      349: "OPTIONS.LISTS.GET",
      350: "ISPMT",
      351: "DATEDIF",
      352: "DATESTRING",
      353: "NUMBERSTRING",
      354: "ROMAN",
      355: "OPEN.DIALOG",
      356: "SAVE.DIALOG",
      357: "VIEW.GET",
      358: "GETPIVOTDATA",
      359: "HYPERLINK",
      360: "PHONETIC",
      361: "AVERAGEA",
      362: "MAXA",
      363: "MINA",
      364: "STDEVPA",
      365: "VARPA",
      366: "STDEVA",
      367: "VARA",
      368: "BAHTTEXT",
      369: "THAIDAYOFWEEK",
      370: "THAIDIGIT",
      371: "THAIMONTHOFYEAR",
      372: "THAINUMSOUND",
      373: "THAINUMSTRING",
      374: "THAISTRINGLENGTH",
      375: "ISTHAIDIGIT",
      376: "ROUNDBAHTDOWN",
      377: "ROUNDBAHTUP",
      378: "THAIYEAR",
      379: "RTD",
      380: "CUBEVALUE",
      381: "CUBEMEMBER",
      382: "CUBEMEMBERPROPERTY",
      383: "CUBERANKEDMEMBER",
      384: "HEX2BIN",
      385: "HEX2DEC",
      386: "HEX2OCT",
      387: "DEC2BIN",
      388: "DEC2HEX",
      389: "DEC2OCT",
      390: "OCT2BIN",
      391: "OCT2HEX",
      392: "OCT2DEC",
      393: "BIN2DEC",
      394: "BIN2OCT",
      395: "BIN2HEX",
      396: "IMSUB",
      397: "IMDIV",
      398: "IMPOWER",
      399: "IMABS",
      400: "IMSQRT",
      401: "IMLN",
      402: "IMLOG2",
      403: "IMLOG10",
      404: "IMSIN",
      405: "IMCOS",
      406: "IMEXP",
      407: "IMARGUMENT",
      408: "IMCONJUGATE",
      409: "IMAGINARY",
      410: "IMREAL",
      411: "COMPLEX",
      412: "IMSUM",
      413: "IMPRODUCT",
      414: "SERIESSUM",
      415: "FACTDOUBLE",
      416: "SQRTPI",
      417: "QUOTIENT",
      418: "DELTA",
      419: "GESTEP",
      420: "ISEVEN",
      421: "ISODD",
      422: "MROUND",
      423: "ERF",
      424: "ERFC",
      425: "BESSELJ",
      426: "BESSELK",
      427: "BESSELY",
      428: "BESSELI",
      429: "XIRR",
      430: "XNPV",
      431: "PRICEMAT",
      432: "YIELDMAT",
      433: "INTRATE",
      434: "RECEIVED",
      435: "DISC",
      436: "PRICEDISC",
      437: "YIELDDISC",
      438: "TBILLEQ",
      439: "TBILLPRICE",
      440: "TBILLYIELD",
      441: "PRICE",
      442: "YIELD",
      443: "DOLLARDE",
      444: "DOLLARFR",
      445: "NOMINAL",
      446: "EFFECT",
      447: "CUMPRINC",
      448: "CUMIPMT",
      449: "EDATE",
      450: "EOMONTH",
      451: "YEARFRAC",
      452: "COUPDAYBS",
      453: "COUPDAYS",
      454: "COUPDAYSNC",
      455: "COUPNCD",
      456: "COUPNUM",
      457: "COUPPCD",
      458: "DURATION",
      459: "MDURATION",
      460: "ODDLPRICE",
      461: "ODDLYIELD",
      462: "ODDFPRICE",
      463: "ODDFYIELD",
      464: "RANDBETWEEN",
      465: "WEEKNUM",
      466: "AMORDEGRC",
      467: "AMORLINC",
      468: "CONVERT",
      724: "SHEETJS",
      469: "ACCRINT",
      470: "ACCRINTM",
      471: "WORKDAY",
      472: "NETWORKDAYS",
      473: "GCD",
      474: "MULTINOMIAL",
      475: "LCM",
      476: "FVSCHEDULE",
      477: "CUBEKPIMEMBER",
      478: "CUBESET",
      479: "CUBESETCOUNT",
      480: "IFERROR",
      481: "COUNTIFS",
      482: "SUMIFS",
      483: "AVERAGEIF",
      484: "AVERAGEIFS"
    };
    var FtabArgc = {
      2: 1,
      3: 1,
      10: 0,
      15: 1,
      16: 1,
      17: 1,
      18: 1,
      19: 0,
      20: 1,
      21: 1,
      22: 1,
      23: 1,
      24: 1,
      25: 1,
      26: 1,
      27: 2,
      30: 2,
      31: 3,
      32: 1,
      33: 1,
      34: 0,
      35: 0,
      38: 1,
      39: 2,
      40: 3,
      41: 3,
      42: 3,
      43: 3,
      44: 3,
      45: 3,
      47: 3,
      48: 2,
      53: 1,
      61: 3,
      63: 0,
      65: 3,
      66: 3,
      67: 1,
      68: 1,
      69: 1,
      70: 1,
      71: 1,
      72: 1,
      73: 1,
      74: 0,
      75: 1,
      76: 1,
      77: 1,
      79: 2,
      80: 2,
      83: 1,
      85: 0,
      86: 1,
      89: 0,
      90: 1,
      94: 0,
      95: 0,
      97: 2,
      98: 1,
      99: 1,
      101: 3,
      102: 3,
      105: 1,
      106: 1,
      108: 2,
      111: 1,
      112: 1,
      113: 1,
      114: 1,
      117: 2,
      118: 1,
      119: 4,
      121: 1,
      126: 1,
      127: 1,
      128: 1,
      129: 1,
      130: 1,
      131: 1,
      133: 1,
      134: 1,
      135: 1,
      136: 2,
      137: 2,
      138: 2,
      140: 1,
      141: 1,
      142: 3,
      143: 4,
      144: 4,
      161: 1,
      162: 1,
      163: 1,
      164: 1,
      165: 2,
      172: 1,
      175: 2,
      176: 2,
      177: 3,
      178: 2,
      179: 1,
      184: 1,
      186: 1,
      189: 3,
      190: 1,
      195: 3,
      196: 3,
      197: 1,
      198: 1,
      199: 3,
      201: 1,
      207: 4,
      210: 3,
      211: 1,
      212: 2,
      213: 2,
      214: 1,
      215: 1,
      225: 0,
      229: 1,
      230: 1,
      231: 1,
      232: 1,
      233: 1,
      234: 1,
      235: 3,
      244: 1,
      247: 4,
      252: 2,
      257: 1,
      261: 1,
      271: 1,
      273: 4,
      274: 2,
      275: 2,
      276: 2,
      277: 3,
      278: 3,
      279: 1,
      280: 3,
      281: 3,
      282: 3,
      283: 1,
      284: 1,
      285: 2,
      286: 4,
      287: 3,
      288: 2,
      289: 4,
      290: 3,
      291: 3,
      292: 3,
      293: 4,
      294: 1,
      295: 3,
      296: 1,
      297: 3,
      298: 1,
      299: 2,
      300: 3,
      301: 3,
      302: 4,
      303: 2,
      304: 2,
      305: 2,
      306: 2,
      307: 2,
      308: 2,
      309: 3,
      310: 2,
      311: 2,
      312: 2,
      313: 2,
      314: 2,
      315: 2,
      316: 4,
      325: 2,
      326: 2,
      327: 2,
      328: 2,
      331: 2,
      332: 2,
      337: 2,
      342: 1,
      343: 1,
      346: 2,
      347: 1,
      350: 4,
      351: 3,
      352: 1,
      353: 2,
      360: 1,
      368: 1,
      369: 1,
      370: 1,
      371: 1,
      372: 1,
      373: 1,
      374: 1,
      375: 1,
      376: 1,
      377: 1,
      378: 1,
      382: 3,
      385: 1,
      392: 1,
      393: 1,
      396: 2,
      397: 2,
      398: 2,
      399: 1,
      400: 1,
      401: 1,
      402: 1,
      403: 1,
      404: 1,
      405: 1,
      406: 1,
      407: 1,
      408: 1,
      409: 1,
      410: 1,
      414: 4,
      415: 1,
      416: 1,
      417: 2,
      420: 1,
      421: 1,
      422: 2,
      424: 1,
      425: 2,
      426: 2,
      427: 2,
      428: 2,
      430: 3,
      438: 3,
      439: 3,
      440: 3,
      443: 2,
      444: 2,
      445: 2,
      446: 2,
      447: 6,
      448: 6,
      449: 2,
      450: 2,
      464: 2,
      468: 3,
      476: 2,
      479: 1,
      480: 2,
      65535: 0
    };
    /* Part 3 TODO: actually parse formulae */
    function ods_to_csf_formula(f/*:string*/)/*:string*/ {
    	if(f.slice(0,3) == "of:") f = f.slice(3);
    	/* 5.2 Basic Expressions */
    	if(f.charCodeAt(0) == 61) {
    		f = f.slice(1);
    		if(f.charCodeAt(0) == 61) f = f.slice(1);
    	}
    	f = f.replace(/COM\.MICROSOFT\./g, "");
    	/* Part 3 Section 5.8 References */
    	f = f.replace(/\[((?:\.[A-Z]+[0-9]+)(?::\.[A-Z]+[0-9]+)?)\]/g, function($$, $1) { return $1.replace(/\./g,""); });
    	/* TODO: something other than this */
    	f = f.replace(/\[.(#[A-Z]*[?!])\]/g, "$1");
    	return f.replace(/[;~]/g,",").replace(/\|/g,";");
    }

    function ods_to_csf_3D(r/*:string*/)/*:[string, string]*/ {
    	var a = r.split(":");
    	var s = a[0].split(".")[0];
    	return [s, a[0].split(".")[1] + (a.length > 1 ? (":" + (a[1].split(".")[1] || a[1].split(".")[0])) : "")];
    }

    var strs = {}; // shared strings
    var _ssfopts = {}; // spreadsheet formatting options

    function default_margins(margins/*:Margins*/, mode/*:?string*/) {
    	if(!margins) return;
    	var defs = [0.7, 0.7, 0.75, 0.75, 0.3, 0.3];
    	if(mode == 'xlml') defs = [1, 1, 1, 1, 0.5, 0.5];
    	if(margins.left   == null) margins.left   = defs[0];
    	if(margins.right  == null) margins.right  = defs[1];
    	if(margins.top    == null) margins.top    = defs[2];
    	if(margins.bottom == null) margins.bottom = defs[3];
    	if(margins.header == null) margins.header = defs[4];
    	if(margins.footer == null) margins.footer = defs[5];
    }

    function safe_format(p/*:Cell*/, fmtid/*:number*/, fillid/*:?number*/, opts, themes, styles) {
    	try {
    		if(opts.cellNF) p.z = table_fmt[fmtid];
    	} catch(e) { if(opts.WTF) throw e; }
    	if(p.t === 'z' && !opts.cellStyles) return;
    	if(p.t === 'd' && typeof p.v === 'string') p.v = parseDate(p.v);
    	if((!opts || opts.cellText !== false) && p.t !== 'z') try {
    		if(table_fmt[fmtid] == null) SSF_load(SSFImplicit[fmtid] || "General", fmtid);
    		if(p.t === 'e') p.w = p.w || BErr[p.v];
    		else if(fmtid === 0) {
    			if(p.t === 'n') {
    				if((p.v|0) === p.v) p.w = p.v.toString(10);
    				else p.w = SSF_general_num(p.v);
    			}
    			else if(p.t === 'd') {
    				var dd = datenum(p.v);
    				if((dd|0) === dd) p.w = dd.toString(10);
    				else p.w = SSF_general_num(dd);
    			}
    			else if(p.v === undefined) return "";
    			else p.w = SSF_general(p.v,_ssfopts);
    		}
    		else if(p.t === 'd') p.w = SSF_format(fmtid,datenum(p.v),_ssfopts);
    		else p.w = SSF_format(fmtid,p.v,_ssfopts);
    	} catch(e) { if(opts.WTF) throw e; }
    	if(!opts.cellStyles) return;
    	if(fillid != null) try {
    		p.s = styles.Fills[fillid];
    		if (p.s.fgColor && p.s.fgColor.theme && !p.s.fgColor.rgb) {
    			p.s.fgColor.rgb = rgb_tint(themes.themeElements.clrScheme[p.s.fgColor.theme].rgb, p.s.fgColor.tint || 0);
    			if(opts.WTF) p.s.fgColor.raw_rgb = themes.themeElements.clrScheme[p.s.fgColor.theme].rgb;
    		}
    		if (p.s.bgColor && p.s.bgColor.theme) {
    			p.s.bgColor.rgb = rgb_tint(themes.themeElements.clrScheme[p.s.bgColor.theme].rgb, p.s.bgColor.tint || 0);
    			if(opts.WTF) p.s.bgColor.raw_rgb = themes.themeElements.clrScheme[p.s.bgColor.theme].rgb;
    		}
    	} catch(e) { if(opts.WTF && styles.Fills) throw e; }
    }
    function parse_ws_xml_dim(ws/*:Worksheet*/, s/*:string*/) {
    	var d = safe_decode_range(s);
    	if(d.s.r<=d.e.r && d.s.c<=d.e.c && d.s.r>=0 && d.s.c>=0) ws["!ref"] = encode_range(d);
    }
    var mergecregex = /<(?:\w:)?mergeCell ref="[A-Z0-9:]+"\s*[\/]?>/g;
    var sheetdataregex = /<(?:\w+:)?sheetData[^>]*>([\s\S]*)<\/(?:\w+:)?sheetData>/;
    var hlinkregex = /<(?:\w:)?hyperlink [^>]*>/mg;
    var dimregex = /"(\w*:\w*)"/;
    var colregex = /<(?:\w:)?col\b[^>]*[\/]?>/g;
    var afregex = /<(?:\w:)?autoFilter[^>]*([\/]|>([\s\S]*)<\/(?:\w:)?autoFilter)>/g;
    var marginregex= /<(?:\w:)?pageMargins[^>]*\/>/g;
    var sheetprregex = /<(?:\w:)?sheetPr\b(?:[^>a-z][^>]*)?\/>/;
    var sheetprregex2= /<(?:\w:)?sheetPr[^>]*(?:[\/]|>([\s\S]*)<\/(?:\w:)?sheetPr)>/;
    var svsregex = /<(?:\w:)?sheetViews[^>]*(?:[\/]|>([\s\S]*)<\/(?:\w:)?sheetViews)>/;

    /* 18.3 Worksheets */
    function parse_ws_xml(data/*:?string*/, opts, idx/*:number*/, rels, wb/*:WBWBProps*/, themes, styles)/*:Worksheet*/ {
    	if(!data) return data;
    	if(!rels) rels = {'!id':{}};

    	/* 18.3.1.99 worksheet CT_Worksheet */
    	var s = opts.dense ? ([]/*:any*/) : ({}/*:any*/);
    	var refguess/*:Range*/ = ({s: {r:2000000, c:2000000}, e: {r:0, c:0} }/*:any*/);

    	var data1 = "", data2 = "";
    	var mtch/*:?any*/ = data.match(sheetdataregex);
    	if(mtch) {
    		data1 = data.slice(0, mtch.index);
    		data2 = data.slice(mtch.index + mtch[0].length);
    	} else data1 = data2 = data;

    	/* 18.3.1.82 sheetPr CT_SheetPr */
    	var sheetPr = data1.match(sheetprregex);
    	if(sheetPr) parse_ws_xml_sheetpr(sheetPr[0], s, wb, idx);
    	else if((sheetPr = data1.match(sheetprregex2))) parse_ws_xml_sheetpr2(sheetPr[0], sheetPr[1]||"", s, wb, idx);

    	/* 18.3.1.35 dimension CT_SheetDimension */
    	var ridx = (data1.match(/<(?:\w*:)?dimension/)||{index:-1}).index;
    	if(ridx > 0) {
    		var ref = data1.slice(ridx,ridx+50).match(dimregex);
    		if(ref) parse_ws_xml_dim(s, ref[1]);
    	}

    	/* 18.3.1.88 sheetViews CT_SheetViews */
    	var svs = data1.match(svsregex);
    	if(svs && svs[1]) parse_ws_xml_sheetviews(svs[1], wb);

    	/* 18.3.1.17 cols CT_Cols */
    	var columns/*:Array<ColInfo>*/ = [];
    	if(opts.cellStyles) {
    		/* 18.3.1.13 col CT_Col */
    		var cols = data1.match(colregex);
    		if(cols) parse_ws_xml_cols(columns, cols);
    	}

    	/* 18.3.1.80 sheetData CT_SheetData ? */
    	if(mtch) parse_ws_xml_data(mtch[1], s, opts, refguess, themes, styles);

    	/* 18.3.1.2  autoFilter CT_AutoFilter */
    	var afilter = data2.match(afregex);
    	if(afilter) s['!autofilter'] = parse_ws_xml_autofilter(afilter[0]);

    	/* 18.3.1.55 mergeCells CT_MergeCells */
    	var merges/*:Array<Range>*/ = [];
    	var _merge = data2.match(mergecregex);
    	if(_merge) for(ridx = 0; ridx != _merge.length; ++ridx)
    		merges[ridx] = safe_decode_range(_merge[ridx].slice(_merge[ridx].indexOf("\"")+1));

    	/* 18.3.1.48 hyperlinks CT_Hyperlinks */
    	var hlink = data2.match(hlinkregex);
    	if(hlink) parse_ws_xml_hlinks(s, hlink, rels);

    	/* 18.3.1.62 pageMargins CT_PageMargins */
    	var margins = data2.match(marginregex);
    	if(margins) s['!margins'] = parse_ws_xml_margins(parsexmltag(margins[0]));

    	if(!s["!ref"] && refguess.e.c >= refguess.s.c && refguess.e.r >= refguess.s.r) s["!ref"] = encode_range(refguess);
    	if(opts.sheetRows > 0 && s["!ref"]) {
    		var tmpref = safe_decode_range(s["!ref"]);
    		if(opts.sheetRows <= +tmpref.e.r) {
    			tmpref.e.r = opts.sheetRows - 1;
    			if(tmpref.e.r > refguess.e.r) tmpref.e.r = refguess.e.r;
    			if(tmpref.e.r < tmpref.s.r) tmpref.s.r = tmpref.e.r;
    			if(tmpref.e.c > refguess.e.c) tmpref.e.c = refguess.e.c;
    			if(tmpref.e.c < tmpref.s.c) tmpref.s.c = tmpref.e.c;
    			s["!fullref"] = s["!ref"];
    			s["!ref"] = encode_range(tmpref);
    		}
    	}
    	if(columns.length > 0) s["!cols"] = columns;
    	if(merges.length > 0) s["!merges"] = merges;
    	return s;
    }

    /* 18.3.1.82-3 sheetPr CT_ChartsheetPr / CT_SheetPr */
    function parse_ws_xml_sheetpr(sheetPr/*:string*/, s, wb/*:WBWBProps*/, idx/*:number*/) {
    	var data = parsexmltag(sheetPr);
    	if(!wb.Sheets[idx]) wb.Sheets[idx] = {};
    	if(data.codeName) wb.Sheets[idx].CodeName = unescapexml(utf8read(data.codeName));
    }
    function parse_ws_xml_sheetpr2(sheetPr/*:string*/, body/*:string*/, s, wb/*:WBWBProps*/, idx/*:number*/) {
    	parse_ws_xml_sheetpr(sheetPr.slice(0, sheetPr.indexOf(">")), s, wb, idx);
    }

    function parse_ws_xml_hlinks(s, data/*:Array<string>*/, rels) {
    	var dense = Array.isArray(s);
    	for(var i = 0; i != data.length; ++i) {
    		var val = parsexmltag(utf8read(data[i]), true);
    		if(!val.ref) return;
    		var rel = ((rels || {})['!id']||[])[val.id];
    		if(rel) {
    			val.Target = rel.Target;
    			if(val.location) val.Target += "#"+unescapexml(val.location);
    		} else {
    			val.Target = "#" + unescapexml(val.location);
    			rel = {Target: val.Target, TargetMode: 'Internal'};
    		}
    		val.Rel = rel;
    		if(val.tooltip) { val.Tooltip = val.tooltip; delete val.tooltip; }
    		var rng = safe_decode_range(val.ref);
    		for(var R=rng.s.r;R<=rng.e.r;++R) for(var C=rng.s.c;C<=rng.e.c;++C) {
    			var addr = encode_cell({c:C,r:R});
    			if(dense) {
    				if(!s[R]) s[R] = [];
    				if(!s[R][C]) s[R][C] = {t:"z",v:undefined};
    				s[R][C].l = val;
    			} else {
    				if(!s[addr]) s[addr] = {t:"z",v:undefined};
    				s[addr].l = val;
    			}
    		}
    	}
    }

    function parse_ws_xml_margins(margin) {
    	var o = {};
    	["left", "right", "top", "bottom", "header", "footer"].forEach(function(k) {
    		if(margin[k]) o[k] = parseFloat(margin[k]);
    	});
    	return o;
    }

    function parse_ws_xml_cols(columns, cols) {
    	var seencol = false;
    	for(var coli = 0; coli != cols.length; ++coli) {
    		var coll = parsexmltag(cols[coli], true);
    		if(coll.hidden) coll.hidden = parsexmlbool(coll.hidden);
    		var colm=parseInt(coll.min, 10)-1, colM=parseInt(coll.max,10)-1;
    		if(coll.outlineLevel) coll.level = (+coll.outlineLevel || 0);
    		delete coll.min; delete coll.max; coll.width = +coll.width;
    		if(!seencol && coll.width) { seencol = true; find_mdw_colw(coll.width); }
    		process_col(coll);
    		while(colm <= colM) columns[colm++] = dup(coll);
    	}
    }

    function parse_ws_xml_autofilter(data/*:string*/) {
    	var o = { ref: (data.match(/ref="([^"]*)"/)||[])[1]};
    	return o;
    }

    /* 18.3.1.88 sheetViews CT_SheetViews */
    /* 18.3.1.87 sheetView CT_SheetView */
    var sviewregex = /<(?:\w:)?sheetView(?:[^>a-z][^>]*)?\/?>/;
    function parse_ws_xml_sheetviews(data, wb/*:WBWBProps*/) {
    	if(!wb.Views) wb.Views = [{}];
    	(data.match(sviewregex)||[]).forEach(function(r/*:string*/, i/*:number*/) {
    		var tag = parsexmltag(r);
    		// $FlowIgnore
    		if(!wb.Views[i]) wb.Views[i] = {};
    		// $FlowIgnore
    		if(+tag.zoomScale) wb.Views[i].zoom = +tag.zoomScale;
    		// $FlowIgnore
    		if(parsexmlbool(tag.rightToLeft)) wb.Views[i].RTL = true;
    	});
    }

    var parse_ws_xml_data = /*#__PURE__*/(function() {
    	var cellregex = /<(?:\w+:)?c[ \/>]/, rowregex = /<\/(?:\w+:)?row>/;
    	var rregex = /r=["']([^"']*)["']/, isregex = /<(?:\w+:)?is>([\S\s]*?)<\/(?:\w+:)?is>/;
    	var refregex = /ref=["']([^"']*)["']/;
    	var match_v = matchtag("v"), match_f = matchtag("f");

    return function parse_ws_xml_data(sdata/*:string*/, s, opts, guess/*:Range*/, themes, styles) {
    	var ri = 0, x = "", cells/*:Array<string>*/ = [], cref/*:?Array<string>*/ = [], idx=0, i=0, cc=0, d="", p/*:any*/;
    	var tag, tagr = 0, tagc = 0;
    	var sstr, ftag;
    	var fmtid = 0, fillid = 0;
    	var do_format = Array.isArray(styles.CellXf), cf;
    	var arrayf/*:Array<[Range, string]>*/ = [];
    	var sharedf = [];
    	var dense = Array.isArray(s);
    	var rows/*:Array<RowInfo>*/ = [], rowobj = {}, rowrite = false;
    	var sheetStubs = !!opts.sheetStubs;
    	for(var marr = sdata.split(rowregex), mt = 0, marrlen = marr.length; mt != marrlen; ++mt) {
    		x = marr[mt].trim();
    		var xlen = x.length;
    		if(xlen === 0) continue;

    		/* 18.3.1.73 row CT_Row */
    		var rstarti = 0;
    		outa: for(ri = 0; ri < xlen; ++ri) switch(/*x.charCodeAt(ri)*/x[ri]) {
    			case ">" /*62*/:
    				if(/*x.charCodeAt(ri-1) != 47*/x[ri-1] != "/") { ++ri; break outa; }
    				if(opts && opts.cellStyles) {
    					// TODO: avoid duplication
    					tag = parsexmltag(x.slice(rstarti,ri), true);
    					tagr = tag.r != null ? parseInt(tag.r, 10) : tagr+1; tagc = -1;
    					if(opts.sheetRows && opts.sheetRows < tagr) continue;
    					rowobj = {}; rowrite = false;
    					if(tag.ht) { rowrite = true; rowobj.hpt = parseFloat(tag.ht); rowobj.hpx = pt2px(rowobj.hpt); }
    					if(tag.hidden == "1") { rowrite = true; rowobj.hidden = true; }
    					if(tag.outlineLevel != null) { rowrite = true; rowobj.level = +tag.outlineLevel; }
    					if(rowrite) rows[tagr-1] = rowobj;
    				}
    				break;
    			case "<" /*60*/: rstarti = ri; break;
    		}
    		if(rstarti >= ri) break;
    		tag = parsexmltag(x.slice(rstarti,ri), true);
    		tagr = tag.r != null ? parseInt(tag.r, 10) : tagr+1; tagc = -1;
    		if(opts.sheetRows && opts.sheetRows < tagr) continue;
    		if(guess.s.r > tagr - 1) guess.s.r = tagr - 1;
    		if(guess.e.r < tagr - 1) guess.e.r = tagr - 1;

    		if(opts && opts.cellStyles) {
    			rowobj = {}; rowrite = false;
    			if(tag.ht) { rowrite = true; rowobj.hpt = parseFloat(tag.ht); rowobj.hpx = pt2px(rowobj.hpt); }
    			if(tag.hidden == "1") { rowrite = true; rowobj.hidden = true; }
    			if(tag.outlineLevel != null) { rowrite = true; rowobj.level = +tag.outlineLevel; }
    			if(rowrite) rows[tagr-1] = rowobj;
    		}

    		/* 18.3.1.4 c CT_Cell */
    		cells = x.slice(ri).split(cellregex);
    		for(var rslice = 0; rslice != cells.length; ++rslice) if(cells[rslice].trim().charAt(0) != "<") break;
    		cells = cells.slice(rslice);
    		for(ri = 0; ri != cells.length; ++ri) {
    			x = cells[ri].trim();
    			if(x.length === 0) continue;
    			cref = x.match(rregex); idx = ri; i=0; cc=0;
    			x = "<c " + (x.slice(0,1)=="<"?">":"") + x;
    			if(cref != null && cref.length === 2) {
    				idx = 0; d=cref[1];
    				for(i=0; i != d.length; ++i) {
    					if((cc=d.charCodeAt(i)-64) < 1 || cc > 26) break;
    					idx = 26*idx + cc;
    				}
    				--idx;
    				tagc = idx;
    			} else ++tagc;
    			for(i = 0; i != x.length; ++i) if(x.charCodeAt(i) === 62) break; ++i;
    			tag = parsexmltag(x.slice(0,i), true);
    			if(!tag.r) tag.r = encode_cell({r:tagr-1, c:tagc});
    			d = x.slice(i);
    			p = ({t:""}/*:any*/);

    			if((cref=d.match(match_v))!= null && /*::cref != null && */cref[1] !== '') p.v=unescapexml(cref[1]);
    			if(opts.cellFormula) {
    				if((cref=d.match(match_f))!= null && /*::cref != null && */cref[1] !== '') {
    					/* TODO: match against XLSXFutureFunctions */
    					p.f=unescapexml(utf8read(cref[1])).replace(/\r\n/g, "\n");
    					if(!opts.xlfn) p.f = _xlfn(p.f);
    					if(/*::cref != null && cref[0] != null && */cref[0].indexOf('t="array"') > -1) {
    						p.F = (d.match(refregex)||[])[1];
    						if(p.F.indexOf(":") > -1) arrayf.push([safe_decode_range(p.F), p.F]);
    					} else if(/*::cref != null && cref[0] != null && */cref[0].indexOf('t="shared"') > -1) {
    						// TODO: parse formula
    						ftag = parsexmltag(cref[0]);
    						var ___f = unescapexml(utf8read(cref[1]));
    						if(!opts.xlfn) ___f = _xlfn(___f);
    						sharedf[parseInt(ftag.si, 10)] = [ftag, ___f, tag.r];
    					}
    				} else if((cref=d.match(/<f[^>]*\/>/))) {
    					ftag = parsexmltag(cref[0]);
    					if(sharedf[ftag.si]) p.f = shift_formula_xlsx(sharedf[ftag.si][1], sharedf[ftag.si][2]/*[0].ref*/, tag.r);
    				}
    				/* TODO: factor out contains logic */
    				var _tag = decode_cell(tag.r);
    				for(i = 0; i < arrayf.length; ++i)
    					if(_tag.r >= arrayf[i][0].s.r && _tag.r <= arrayf[i][0].e.r)
    						if(_tag.c >= arrayf[i][0].s.c && _tag.c <= arrayf[i][0].e.c)
    							p.F = arrayf[i][1];
    			}

    			if(tag.t == null && p.v === undefined) {
    				if(p.f || p.F) {
    					p.v = 0; p.t = "n";
    				} else if(!sheetStubs) continue;
    				else p.t = "z";
    			}
    			else p.t = tag.t || "n";
    			if(guess.s.c > tagc) guess.s.c = tagc;
    			if(guess.e.c < tagc) guess.e.c = tagc;
    			/* 18.18.11 t ST_CellType */
    			switch(p.t) {
    				case 'n':
    					if(p.v == "" || p.v == null) {
    						if(!sheetStubs) continue;
    						p.t = 'z';
    					} else p.v = parseFloat(p.v);
    					break;
    				case 's':
    					if(typeof p.v == 'undefined') {
    						if(!sheetStubs) continue;
    						p.t = 'z';
    					} else {
    						sstr = strs[parseInt(p.v, 10)];
    						p.v = sstr.t;
    						p.r = sstr.r;
    						if(opts.cellHTML) p.h = sstr.h;
    					}
    					break;
    				case 'str':
    					p.t = "s";
    					p.v = (p.v!=null) ? utf8read(p.v) : '';
    					if(opts.cellHTML) p.h = escapehtml(p.v);
    					break;
    				case 'inlineStr':
    					cref = d.match(isregex);
    					p.t = 's';
    					if(cref != null && (sstr = parse_si(cref[1]))) {
    						p.v = sstr.t;
    						if(opts.cellHTML) p.h = sstr.h;
    					} else p.v = "";
    					break;
    				case 'b': p.v = parsexmlbool(p.v); break;
    				case 'd':
    					if(opts.cellDates) p.v = parseDate(p.v, 1);
    					else { p.v = datenum(parseDate(p.v, 1)); p.t = 'n'; }
    					break;
    				/* error string in .w, number in .v */
    				case 'e':
    					if(!opts || opts.cellText !== false) p.w = p.v;
    					p.v = RBErr[p.v]; break;
    			}
    			/* formatting */
    			fmtid = fillid = 0;
    			cf = null;
    			if(do_format && tag.s !== undefined) {
    				cf = styles.CellXf[tag.s];
    				if(cf != null) {
    					if(cf.numFmtId != null) fmtid = cf.numFmtId;
    					if(opts.cellStyles) {
    						if(cf.fillId != null) fillid = cf.fillId;
    					}
    				}
    			}
    			safe_format(p, fmtid, fillid, opts, themes, styles);
    			if(opts.cellDates && do_format && p.t == 'n' && fmt_is_date(table_fmt[fmtid])) { p.t = 'd'; p.v = numdate(p.v); }
    			if(tag.cm && opts.xlmeta) {
    				var cm = (opts.xlmeta.Cell||[])[+tag.cm-1];
    				if(cm && cm.type == 'XLDAPR') p.D = true;
    			}
    			if(dense) {
    				var _r = decode_cell(tag.r);
    				if(!s[_r.r]) s[_r.r] = [];
    				s[_r.r][_r.c] = p;
    			} else s[tag.r] = p;
    		}
    	}
    	if(rows.length > 0) s['!rows'] = rows;
    }; })();

    /* [MS-XLSB] 2.4.726 BrtRowHdr */
    function parse_BrtRowHdr(data, length) {
    	var z = ({}/*:any*/);
    	var tgt = data.l + length;
    	z.r = data.read_shift(4);
    	data.l += 4; // TODO: ixfe
    	var miyRw = data.read_shift(2);
    	data.l += 1; // TODO: top/bot padding
    	var flags = data.read_shift(1);
    	data.l = tgt;
    	if(flags & 0x07) z.level = flags & 0x07;
    	if(flags & 0x10) z.hidden = true;
    	if(flags & 0x20) z.hpt = miyRw / 20;
    	return z;
    }

    /* [MS-XLSB] 2.4.820 BrtWsDim */
    var parse_BrtWsDim = parse_UncheckedRfX;

    /* [MS-XLSB] 2.4.821 BrtWsFmtInfo */
    function parse_BrtWsFmtInfo(/*::data, length*/) {
    }
    //function write_BrtWsFmtInfo(ws, o) { }

    /* [MS-XLSB] 2.4.823 BrtWsProp */
    function parse_BrtWsProp(data, length) {
    	var z = {};
    	var f = data[data.l]; ++data.l;
    	z.above = !(f & 0x40);
    	z.left  = !(f & 0x80);
    	/* TODO: pull flags */
    	data.l += 18;
    	z.name = parse_XLSBCodeName(data);
    	return z;
    }

    /* [MS-XLSB] 2.4.306 BrtCellBlank */
    function parse_BrtCellBlank(data) {
    	var cell = parse_XLSBCell(data);
    	return [cell];
    }
    function parse_BrtShortBlank(data) {
    	var cell = parse_XLSBShortCell(data);
    	return [cell];
    }

    /* [MS-XLSB] 2.4.307 BrtCellBool */
    function parse_BrtCellBool(data) {
    	var cell = parse_XLSBCell(data);
    	var fBool = data.read_shift(1);
    	return [cell, fBool, 'b'];
    }
    function parse_BrtShortBool(data) {
    	var cell = parse_XLSBShortCell(data);
    	var fBool = data.read_shift(1);
    	return [cell, fBool, 'b'];
    }

    /* [MS-XLSB] 2.4.308 BrtCellError */
    function parse_BrtCellError(data) {
    	var cell = parse_XLSBCell(data);
    	var bError = data.read_shift(1);
    	return [cell, bError, 'e'];
    }
    function parse_BrtShortError(data) {
    	var cell = parse_XLSBShortCell(data);
    	var bError = data.read_shift(1);
    	return [cell, bError, 'e'];
    }


    /* [MS-XLSB] 2.4.311 BrtCellIsst */
    function parse_BrtCellIsst(data) {
    	var cell = parse_XLSBCell(data);
    	var isst = data.read_shift(4);
    	return [cell, isst, 's'];
    }
    function parse_BrtShortIsst(data) {
    	var cell = parse_XLSBShortCell(data);
    	var isst = data.read_shift(4);
    	return [cell, isst, 's'];
    }

    /* [MS-XLSB] 2.4.313 BrtCellReal */
    function parse_BrtCellReal(data) {
    	var cell = parse_XLSBCell(data);
    	var value = parse_Xnum(data);
    	return [cell, value, 'n'];
    }
    function parse_BrtShortReal(data) {
    	var cell = parse_XLSBShortCell(data);
    	var value = parse_Xnum(data);
    	return [cell, value, 'n'];
    }

    /* [MS-XLSB] 2.4.314 BrtCellRk */
    function parse_BrtCellRk(data) {
    	var cell = parse_XLSBCell(data);
    	var value = parse_RkNumber(data);
    	return [cell, value, 'n'];
    }
    function parse_BrtShortRk(data) {
    	var cell = parse_XLSBShortCell(data);
    	var value = parse_RkNumber(data);
    	return [cell, value, 'n'];
    }

    /* [MS-XLSB] 2.4.323 BrtCellRString */
    function parse_BrtCellRString(data) {
    	var cell = parse_XLSBCell(data);
    	var value = parse_RichStr(data);
    	return [cell, value, 'is'];
    }

    /* [MS-XLSB] 2.4.317 BrtCellSt */
    function parse_BrtCellSt(data) {
    	var cell = parse_XLSBCell(data);
    	var value = parse_XLWideString(data);
    	return [cell, value, 'str'];
    }
    function parse_BrtShortSt(data) {
    	var cell = parse_XLSBShortCell(data);
    	var value = parse_XLWideString(data);
    	return [cell, value, 'str'];
    }

    /* [MS-XLSB] 2.4.653 BrtFmlaBool */
    function parse_BrtFmlaBool(data, length, opts) {
    	var end = data.l + length;
    	var cell = parse_XLSBCell(data);
    	cell.r = opts['!row'];
    	var value = data.read_shift(1);
    	var o = [cell, value, 'b'];
    	if(opts.cellFormula) {
    		data.l += 2;
    		var formula = parse_XLSBCellParsedFormula(data, end - data.l, opts);
    		o[3] = stringify_formula(formula, null/*range*/, cell, opts.supbooks, opts);/* TODO */
    	}
    	else data.l = end;
    	return o;
    }

    /* [MS-XLSB] 2.4.654 BrtFmlaError */
    function parse_BrtFmlaError(data, length, opts) {
    	var end = data.l + length;
    	var cell = parse_XLSBCell(data);
    	cell.r = opts['!row'];
    	var value = data.read_shift(1);
    	var o = [cell, value, 'e'];
    	if(opts.cellFormula) {
    		data.l += 2;
    		var formula = parse_XLSBCellParsedFormula(data, end - data.l, opts);
    		o[3] = stringify_formula(formula, null/*range*/, cell, opts.supbooks, opts);/* TODO */
    	}
    	else data.l = end;
    	return o;
    }

    /* [MS-XLSB] 2.4.655 BrtFmlaNum */
    function parse_BrtFmlaNum(data, length, opts) {
    	var end = data.l + length;
    	var cell = parse_XLSBCell(data);
    	cell.r = opts['!row'];
    	var value = parse_Xnum(data);
    	var o = [cell, value, 'n'];
    	if(opts.cellFormula) {
    		data.l += 2;
    		var formula = parse_XLSBCellParsedFormula(data, end - data.l, opts);
    		o[3] = stringify_formula(formula, null/*range*/, cell, opts.supbooks, opts);/* TODO */
    	}
    	else data.l = end;
    	return o;
    }

    /* [MS-XLSB] 2.4.656 BrtFmlaString */
    function parse_BrtFmlaString(data, length, opts) {
    	var end = data.l + length;
    	var cell = parse_XLSBCell(data);
    	cell.r = opts['!row'];
    	var value = parse_XLWideString(data);
    	var o = [cell, value, 'str'];
    	if(opts.cellFormula) {
    		data.l += 2;
    		var formula = parse_XLSBCellParsedFormula(data, end - data.l, opts);
    		o[3] = stringify_formula(formula, null/*range*/, cell, opts.supbooks, opts);/* TODO */
    	}
    	else data.l = end;
    	return o;
    }

    /* [MS-XLSB] 2.4.682 BrtMergeCell */
    var parse_BrtMergeCell = parse_UncheckedRfX;

    /* [MS-XLSB] 2.4.662 BrtHLink */
    function parse_BrtHLink(data, length/*::, opts*/) {
    	var end = data.l + length;
    	var rfx = parse_UncheckedRfX(data);
    	var relId = parse_XLNullableWideString(data);
    	var loc = parse_XLWideString(data);
    	var tooltip = parse_XLWideString(data);
    	var display = parse_XLWideString(data);
    	data.l = end;
    	var o = ({rfx:rfx, relId:relId, loc:loc, display:display}/*:any*/);
    	if(tooltip) o.Tooltip = tooltip;
    	return o;
    }

    /* [MS-XLSB] 2.4.692 BrtPane */
    function parse_BrtPane(/*data, length, opts*/) {
    }

    /* [MS-XLSB] 2.4.6 BrtArrFmla */
    function parse_BrtArrFmla(data, length, opts) {
    	var end = data.l + length;
    	var rfx = parse_RfX(data);
    	var fAlwaysCalc = data.read_shift(1);
    	var o = [rfx]; o[2] = fAlwaysCalc;
    	if(opts.cellFormula) {
    		var formula = parse_XLSBArrayParsedFormula(data, end - data.l, opts);
    		o[1] = formula;
    	} else data.l = end;
    	return o;
    }

    /* [MS-XLSB] 2.4.750 BrtShrFmla */
    function parse_BrtShrFmla(data, length, opts) {
    	var end = data.l + length;
    	var rfx = parse_UncheckedRfX(data);
    	var o = [rfx];
    	if(opts.cellFormula) {
    		var formula = parse_XLSBSharedParsedFormula(data, end - data.l, opts);
    		o[1] = formula;
    		data.l = end;
    	} else data.l = end;
    	return o;
    }

    /* [MS-XLSB] 2.4.678 BrtMargins */
    var BrtMarginKeys = ["left","right","top","bottom","header","footer"];
    function parse_BrtMargins(data/*::, length, opts*/)/*:Margins*/ {
    	var margins = ({}/*:any*/);
    	BrtMarginKeys.forEach(function(k) { margins[k] = parse_Xnum(data); });
    	return margins;
    }

    /* [MS-XLSB] 2.4.299 BrtBeginWsView */
    function parse_BrtBeginWsView(data/*::, length, opts*/) {
    	var f = data.read_shift(2);
    	data.l += 28;
    	return { RTL: f & 0x20 };
    }

    function parse_BrtDVal(/*data, length, opts*/) {
    }
    function parse_BrtDVal14(/*data, length, opts*/) {
    }
    /* [MS-XLSB] 2.1.7.61 Worksheet */
    function parse_ws_bin(data, _opts, idx, rels, wb/*:WBWBProps*/, themes, styles)/*:Worksheet*/ {
    	if(!data) return data;
    	var opts = _opts || {};
    	if(!rels) rels = {'!id':{}};
    	var s/*:Worksheet*/ = (opts.dense ? [] : {});

    	var ref;
    	var refguess = {s: {r:2000000, c:2000000}, e: {r:0, c:0} };
    	var pass = false, end = false;
    	var row, p, cf, R, C, addr, sstr, rr, cell/*:Cell*/;
    	var merges/*:Array<Range>*/ = [];
    	opts.biff = 12;
    	opts['!row'] = 0;

    	var ai = 0, af = false;

    	var arrayf/*:Array<[Range, string]>*/ = [];
    	var sharedf = {};
    	var supbooks = opts.supbooks || /*::(*/wb/*:: :any)*/.supbooks || ([[]]/*:any*/);
    	supbooks.sharedf = sharedf;
    	supbooks.arrayf = arrayf;
    	supbooks.SheetNames = wb.SheetNames || wb.Sheets.map(function(x) { return x.name; });
    	if(!opts.supbooks) {
    		opts.supbooks = supbooks;
    		if(wb.Names) for(var i = 0; i < wb.Names.length; ++i) supbooks[0][i+1] = wb.Names[i];
    	}

    	var colinfo/*:Array<ColInfo>*/ = [], rowinfo/*:Array<RowInfo>*/ = [];
    	var seencol = false;

    	XLSBRecordEnum[0x0010] = { n:"BrtShortReal", f:parse_BrtShortReal };

    	var cm;

    	recordhopper(data, function ws_parse(val, RR, RT) {
    		if(end) return;
    		switch(RT) {
    			case 0x0094: /* 'BrtWsDim' */
    				ref = val; break;
    			case 0x0000: /* 'BrtRowHdr' */
    				row = val;
    				if(opts.sheetRows && opts.sheetRows <= row.r) end=true;
    				rr = encode_row(R = row.r);
    				opts['!row'] = row.r;
    				if(val.hidden || val.hpt || val.level != null) {
    					if(val.hpt) val.hpx = pt2px(val.hpt);
    					rowinfo[val.r] = val;
    				}
    				break;

    			case 0x0002: /* 'BrtCellRk' */
    			case 0x0003: /* 'BrtCellError' */
    			case 0x0004: /* 'BrtCellBool' */
    			case 0x0005: /* 'BrtCellReal' */
    			case 0x0006: /* 'BrtCellSt' */
    			case 0x0007: /* 'BrtCellIsst' */
    			case 0x0008: /* 'BrtFmlaString' */
    			case 0x0009: /* 'BrtFmlaNum' */
    			case 0x000A: /* 'BrtFmlaBool' */
    			case 0x000B: /* 'BrtFmlaError' */
    			case 0x000D: /* 'BrtShortRk' */
    			case 0x000E: /* 'BrtShortError' */
    			case 0x000F: /* 'BrtShortBool' */
    			case 0x0010: /* 'BrtShortReal' */
    			case 0x0011: /* 'BrtShortSt' */
    			case 0x0012: /* 'BrtShortIsst' */
    			case 0x003E: /* 'BrtCellRString' */
    				p = ({t:val[2]}/*:any*/);
    				switch(val[2]) {
    					case 'n': p.v = val[1]; break;
    					case 's': sstr = strs[val[1]]; p.v = sstr.t; p.r = sstr.r; break;
    					case 'b': p.v = val[1] ? true : false; break;
    					case 'e': p.v = val[1]; if(opts.cellText !== false) p.w = BErr[p.v]; break;
    					case 'str': p.t = 's'; p.v = val[1]; break;
    					case 'is': p.t = 's'; p.v = val[1].t; break;
    				}
    				if((cf = styles.CellXf[val[0].iStyleRef])) safe_format(p,cf.numFmtId,null,opts, themes, styles);
    				C = val[0].c == -1 ? C + 1 : val[0].c;
    				if(opts.dense) { if(!s[R]) s[R] = []; s[R][C] = p; }
    				else s[encode_col(C) + rr] = p;
    				if(opts.cellFormula) {
    					af = false;
    					for(ai = 0; ai < arrayf.length; ++ai) {
    						var aii = arrayf[ai];
    						if(row.r >= aii[0].s.r && row.r <= aii[0].e.r)
    							if(C >= aii[0].s.c && C <= aii[0].e.c) {
    								p.F = encode_range(aii[0]); af = true;
    							}
    					}
    					if(!af && val.length > 3) p.f = val[3];
    				}

    				if(refguess.s.r > row.r) refguess.s.r = row.r;
    				if(refguess.s.c > C) refguess.s.c = C;
    				if(refguess.e.r < row.r) refguess.e.r = row.r;
    				if(refguess.e.c < C) refguess.e.c = C;
    				if(opts.cellDates && cf && p.t == 'n' && fmt_is_date(table_fmt[cf.numFmtId])) {
    					var _d = SSF_parse_date_code(p.v); if(_d) { p.t = 'd'; p.v = new Date(_d.y, _d.m-1,_d.d,_d.H,_d.M,_d.S,_d.u); }
    				}
    				if(cm) {
    					if(cm.type == 'XLDAPR') p.D = true;
    					cm = void 0;
    				}
    				break;

    			case 0x0001: /* 'BrtCellBlank' */
    			case 0x000C: /* 'BrtShortBlank' */
    				if(!opts.sheetStubs || pass) break;
    				p = ({t:'z',v:void 0}/*:any*/);
    				C = val[0].c == -1 ? C + 1 : val[0].c;
    				if(opts.dense) { if(!s[R]) s[R] = []; s[R][C] = p; }
    				else s[encode_col(C) + rr] = p;
    				if(refguess.s.r > row.r) refguess.s.r = row.r;
    				if(refguess.s.c > C) refguess.s.c = C;
    				if(refguess.e.r < row.r) refguess.e.r = row.r;
    				if(refguess.e.c < C) refguess.e.c = C;
    				if(cm) {
    					if(cm.type == 'XLDAPR') p.D = true;
    					cm = void 0;
    				}
    				break;

    			case 0x00B0: /* 'BrtMergeCell' */
    				merges.push(val); break;

    			case 0x0031: { /* 'BrtCellMeta' */
    				cm = ((opts.xlmeta||{}).Cell||[])[val-1];
    			} break;

    			case 0x01EE: /* 'BrtHLink' */
    				var rel = rels['!id'][val.relId];
    				if(rel) {
    					val.Target = rel.Target;
    					if(val.loc) val.Target += "#"+val.loc;
    					val.Rel = rel;
    				} else if(val.relId == '') {
    					val.Target = "#" + val.loc;
    				}
    				for(R=val.rfx.s.r;R<=val.rfx.e.r;++R) for(C=val.rfx.s.c;C<=val.rfx.e.c;++C) {
    					if(opts.dense) {
    						if(!s[R]) s[R] = [];
    						if(!s[R][C]) s[R][C] = {t:'z',v:undefined};
    						s[R][C].l = val;
    					} else {
    						addr = encode_cell({c:C,r:R});
    						if(!s[addr]) s[addr] = {t:'z',v:undefined};
    						s[addr].l = val;
    					}
    				}
    				break;

    			case 0x01AA: /* 'BrtArrFmla' */
    				if(!opts.cellFormula) break;
    				arrayf.push(val);
    				cell = ((opts.dense ? s[R][C] : s[encode_col(C) + rr])/*:any*/);
    				cell.f = stringify_formula(val[1], refguess, {r:row.r, c:C}, supbooks, opts);
    				cell.F = encode_range(val[0]);
    				break;
    			case 0x01AB: /* 'BrtShrFmla' */
    				if(!opts.cellFormula) break;
    				sharedf[encode_cell(val[0].s)] = val[1];
    				cell = (opts.dense ? s[R][C] : s[encode_col(C) + rr]);
    				cell.f = stringify_formula(val[1], refguess, {r:row.r, c:C}, supbooks, opts);
    				break;

    			/* identical to 'ColInfo' in XLS */
    			case 0x003C: /* 'BrtColInfo' */
    				if(!opts.cellStyles) break;
    				while(val.e >= val.s) {
    					colinfo[val.e--] = { width: val.w/256, hidden: !!(val.flags & 0x01), level: val.level };
    					if(!seencol) { seencol = true; find_mdw_colw(val.w/256); }
    					process_col(colinfo[val.e+1]);
    				}
    				break;

    			case 0x00A1: /* 'BrtBeginAFilter' */
    				s['!autofilter'] = { ref:encode_range(val) };
    				break;

    			case 0x01DC: /* 'BrtMargins' */
    				s['!margins'] = val;
    				break;

    			case 0x0093: /* 'BrtWsProp' */
    				if(!wb.Sheets[idx]) wb.Sheets[idx] = {};
    				if(val.name) wb.Sheets[idx].CodeName = val.name;
    				if(val.above || val.left) s['!outline'] = { above: val.above, left: val.left };
    				break;

    			case 0x0089: /* 'BrtBeginWsView' */
    				if(!wb.Views) wb.Views = [{}];
    				if(!wb.Views[0]) wb.Views[0] = {};
    				if(val.RTL) wb.Views[0].RTL = true;
    				break;

    			case 0x01E5: /* 'BrtWsFmtInfo' */
    				break;

    			case 0x0040: /* 'BrtDVal' */
    			case 0x041D: /* 'BrtDVal14' */
    				break;

    			case 0x0097: /* 'BrtPane' */
    				break;
    			case 0x0098: /* 'BrtSel' */
    			case 0x00AF: /* 'BrtAFilterDateGroupItem' */
    			case 0x0284: /* 'BrtActiveX' */
    			case 0x0271: /* 'BrtBigName' */
    			case 0x0232: /* 'BrtBkHim' */
    			case 0x018C: /* 'BrtBrk' */
    			case 0x0458: /* 'BrtCFIcon' */
    			case 0x047A: /* 'BrtCFRuleExt' */
    			case 0x01D7: /* 'BrtCFVO' */
    			case 0x041A: /* 'BrtCFVO14' */
    			case 0x0289: /* 'BrtCellIgnoreEC' */
    			case 0x0451: /* 'BrtCellIgnoreEC14' */
    			case 0x024D: /* 'BrtCellSmartTagProperty' */
    			case 0x025F: /* 'BrtCellWatch' */
    			case 0x0234: /* 'BrtColor' */
    			case 0x041F: /* 'BrtColor14' */
    			case 0x00A8: /* 'BrtColorFilter' */
    			case 0x00AE: /* 'BrtCustomFilter' */
    			case 0x049C: /* 'BrtCustomFilter14' */
    			case 0x01F3: /* 'BrtDRef' */
    			case 0x01FB: /* 'BrtDXF' */
    			case 0x0226: /* 'BrtDrawing' */
    			case 0x00AB: /* 'BrtDynamicFilter' */
    			case 0x00A7: /* 'BrtFilter' */
    			case 0x0499: /* 'BrtFilter14' */
    			case 0x00A9: /* 'BrtIconFilter' */
    			case 0x049D: /* 'BrtIconFilter14' */
    			case 0x0227: /* 'BrtLegacyDrawing' */
    			case 0x0228: /* 'BrtLegacyDrawingHF' */
    			case 0x0295: /* 'BrtListPart' */
    			case 0x027F: /* 'BrtOleObject' */
    			case 0x01DE: /* 'BrtPageSetup' */
    			case 0x0219: /* 'BrtPhoneticInfo' */
    			case 0x01DD: /* 'BrtPrintOptions' */
    			case 0x0218: /* 'BrtRangeProtection' */
    			case 0x044F: /* 'BrtRangeProtection14' */
    			case 0x02A8: /* 'BrtRangeProtectionIso' */
    			case 0x0450: /* 'BrtRangeProtectionIso14' */
    			case 0x0400: /* 'BrtRwDescent' */
    			case 0x0297: /* 'BrtSheetCalcProp' */
    			case 0x0217: /* 'BrtSheetProtection' */
    			case 0x02A6: /* 'BrtSheetProtectionIso' */
    			case 0x01F8: /* 'BrtSlc' */
    			case 0x0413: /* 'BrtSparkline' */
    			case 0x01AC: /* 'BrtTable' */
    			case 0x00AA: /* 'BrtTop10Filter' */
    			case 0x0C00: /* 'BrtUid' */
    			case 0x0032: /* 'BrtValueMeta' */
    			case 0x0816: /* 'BrtWebExtension' */
    			case 0x0415: /* 'BrtWsFmtInfoEx14' */
    				break;

    			case 0x0023: /* 'BrtFRTBegin' */
    				pass = true; break;
    			case 0x0024: /* 'BrtFRTEnd' */
    				pass = false; break;
    			case 0x0025: /* 'BrtACBegin' */
     pass = true; break;
    			case 0x0026: /* 'BrtACEnd' */
     pass = false; break;

    			default:
    				if(RR.T);
    				else if(!pass || opts.WTF) throw new Error("Unexpected record 0x" + RT.toString(16));
    		}
    	}, opts);

    	delete opts.supbooks;
    	delete opts['!row'];

    	if(!s["!ref"] && (refguess.s.r < 2000000 || ref && (ref.e.r > 0 || ref.e.c > 0 || ref.s.r > 0 || ref.s.c > 0))) s["!ref"] = encode_range(ref || refguess);
    	if(opts.sheetRows && s["!ref"]) {
    		var tmpref = safe_decode_range(s["!ref"]);
    		if(opts.sheetRows <= +tmpref.e.r) {
    			tmpref.e.r = opts.sheetRows - 1;
    			if(tmpref.e.r > refguess.e.r) tmpref.e.r = refguess.e.r;
    			if(tmpref.e.r < tmpref.s.r) tmpref.s.r = tmpref.e.r;
    			if(tmpref.e.c > refguess.e.c) tmpref.e.c = refguess.e.c;
    			if(tmpref.e.c < tmpref.s.c) tmpref.s.c = tmpref.e.c;
    			s["!fullref"] = s["!ref"];
    			s["!ref"] = encode_range(tmpref);
    		}
    	}
    	if(merges.length > 0) s["!merges"] = merges;
    	if(colinfo.length > 0) s["!cols"] = colinfo;
    	if(rowinfo.length > 0) s["!rows"] = rowinfo;
    	return s;
    }
    function parse_Cache(data/*:string*/)/*:[Array<number|string>, string, ?string]*/ {
    	var col/*:Array<number|string>*/ = [];
    	var num = data.match(/^<c:numCache>/);
    	var f;

    	/* 21.2.2.150 pt CT_NumVal */
    	(data.match(/<c:pt idx="(\d*)">(.*?)<\/c:pt>/mg)||[]).forEach(function(pt) {
    		var q = pt.match(/<c:pt idx="(\d*?)"><c:v>(.*)<\/c:v><\/c:pt>/);
    		if(!q) return;
    		col[+q[1]] = num ? +q[2] : q[2];
    	});

    	/* 21.2.2.71 formatCode CT_Xstring */
    	var nf = unescapexml((data.match(/<c:formatCode>([\s\S]*?)<\/c:formatCode>/) || ["","General"])[1]);

    	(data.match(/<c:f>(.*?)<\/c:f>/mg)||[]).forEach(function(F) { f = F.replace(/<.*?>/g,""); });

    	return [col, nf, f];
    }

    /* 21.2 DrawingML - Charts */
    function parse_chart(data/*:?string*/, name/*:string*/, opts, rels, wb, csheet) {
    	var cs/*:Worksheet*/ = ((csheet || {"!type":"chart"})/*:any*/);
    	if(!data) return csheet;
    	/* 21.2.2.27 chart CT_Chart */

    	var C = 0, R = 0, col = "A";
    	var refguess = {s: {r:2000000, c:2000000}, e: {r:0, c:0} };

    	/* 21.2.2.120 numCache CT_NumData */
    	(data.match(/<c:numCache>[\s\S]*?<\/c:numCache>/gm)||[]).forEach(function(nc) {
    		var cache = parse_Cache(nc);
    		refguess.s.r = refguess.s.c = 0;
    		refguess.e.c = C;
    		col = encode_col(C);
    		cache[0].forEach(function(n,i) {
    			cs[col + encode_row(i)] = {t:'n', v:n, z:cache[1] };
    			R = i;
    		});
    		if(refguess.e.r < R) refguess.e.r = R;
    		++C;
    	});
    	if(C > 0) cs["!ref"] = encode_range(refguess);
    	return cs;
    }
    /* 18.3 Worksheets also covers Chartsheets */
    function parse_cs_xml(data/*:?string*/, opts, idx/*:number*/, rels, wb/*::, themes, styles*/)/*:Worksheet*/ {
    	if(!data) return data;
    	/* 18.3.1.12 chartsheet CT_ChartSheet */
    	if(!rels) rels = {'!id':{}};
    	var s = ({'!type':"chart", '!drawel':null, '!rel':""}/*:any*/);
    	var m;

    	/* 18.3.1.83 sheetPr CT_ChartsheetPr */
    	var sheetPr = data.match(sheetprregex);
    	if(sheetPr) parse_ws_xml_sheetpr(sheetPr[0], s, wb, idx);

    	/* 18.3.1.36 drawing CT_Drawing */
    	if((m = data.match(/drawing r:id="(.*?)"/))) s['!rel'] = m[1];

    	if(rels['!id'][s['!rel']]) s['!drawel'] = rels['!id'][s['!rel']];
    	return s;
    }

    /* [MS-XLSB] 2.4.331 BrtCsProp */
    function parse_BrtCsProp(data, length/*:number*/) {
    	data.l += 10;
    	var name = parse_XLWideString(data);
    	return { name: name };
    }

    /* [MS-XLSB] 2.1.7.7 Chart Sheet */
    function parse_cs_bin(data, opts, idx/*:number*/, rels, wb/*::, themes, styles*/)/*:Worksheet*/ {
    	if(!data) return data;
    	if(!rels) rels = {'!id':{}};
    	var s = {'!type':"chart", '!drawel':null, '!rel':""};
    	var pass = false;
    	recordhopper(data, function cs_parse(val, R, RT) {
    		switch(RT) {

    			case 0x0226: /* 'BrtDrawing' */
    				s['!rel'] = val; break;

    			case 0x028B: /* 'BrtCsProp' */
    				if(!wb.Sheets[idx]) wb.Sheets[idx] = {};
    				if(val.name) wb.Sheets[idx].CodeName = val.name;
    				break;

    			case 0x0232: /* 'BrtBkHim' */
    			case 0x028C: /* 'BrtCsPageSetup' */
    			case 0x029D: /* 'BrtCsProtection' */
    			case 0x02A7: /* 'BrtCsProtectionIso' */
    			case 0x0227: /* 'BrtLegacyDrawing' */
    			case 0x0228: /* 'BrtLegacyDrawingHF' */
    			case 0x01DC: /* 'BrtMargins' */
    			case 0x0C00: /* 'BrtUid' */
    				break;

    			case 0x0023: /* 'BrtFRTBegin' */
    				pass = true; break;
    			case 0x0024: /* 'BrtFRTEnd' */
    				pass = false; break;
    			case 0x0025: /* 'BrtACBegin' */
     break;
    			case 0x0026: /* 'BrtACEnd' */
     break;

    			default:
    				if(R.T > 0) ;
    				else if(R.T < 0) ;
    				else if(!pass || opts.WTF) throw new Error("Unexpected record 0x" + RT.toString(16));
    		}
    	}, opts);

    	if(rels['!id'][s['!rel']]) s['!drawel'] = rels['!id'][s['!rel']];
    	return s;
    }
    /* 18.2.28 (CT_WorkbookProtection) Defaults */
    var WBPropsDef = [
    	['allowRefreshQuery',           false, "bool"],
    	['autoCompressPictures',        true,  "bool"],
    	['backupFile',                  false, "bool"],
    	['checkCompatibility',          false, "bool"],
    	['CodeName',                    ''],
    	['date1904',                    false, "bool"],
    	['defaultThemeVersion',         0,      "int"],
    	['filterPrivacy',               false, "bool"],
    	['hidePivotFieldList',          false, "bool"],
    	['promptedSolutions',           false, "bool"],
    	['publishItems',                false, "bool"],
    	['refreshAllConnections',       false, "bool"],
    	['saveExternalLinkValues',      true,  "bool"],
    	['showBorderUnselectedTables',  true,  "bool"],
    	['showInkAnnotation',           true,  "bool"],
    	['showObjects',                 'all'],
    	['showPivotChartFilter',        false, "bool"],
    	['updateLinks', 'userSet']
    ];

    /* 18.2.30 (CT_BookView) Defaults */
    var WBViewDef = [
    	['activeTab',                   0,      "int"],
    	['autoFilterDateGrouping',      true,  "bool"],
    	['firstSheet',                  0,      "int"],
    	['minimized',                   false, "bool"],
    	['showHorizontalScroll',        true,  "bool"],
    	['showSheetTabs',               true,  "bool"],
    	['showVerticalScroll',          true,  "bool"],
    	['tabRatio',                    600,    "int"],
    	['visibility',                  'visible']
    	//window{Height,Width}, {x,y}Window
    ];

    /* 18.2.19 (CT_Sheet) Defaults */
    var SheetDef = [
    	//['state', 'visible']
    ];

    /* 18.2.2  (CT_CalcPr) Defaults */
    var CalcPrDef = [
    	['calcCompleted', 'true'],
    	['calcMode', 'auto'],
    	['calcOnSave', 'true'],
    	['concurrentCalc', 'true'],
    	['fullCalcOnLoad', 'false'],
    	['fullPrecision', 'true'],
    	['iterate', 'false'],
    	['iterateCount', '100'],
    	['iterateDelta', '0.001'],
    	['refMode', 'A1']
    ];

    /* 18.2.3 (CT_CustomWorkbookView) Defaults */
    /*var CustomWBViewDef = [
    	['autoUpdate', 'false'],
    	['changesSavedWin', 'false'],
    	['includeHiddenRowCol', 'true'],
    	['includePrintSettings', 'true'],
    	['maximized', 'false'],
    	['minimized', 'false'],
    	['onlySync', 'false'],
    	['personalView', 'false'],
    	['showComments', 'commIndicator'],
    	['showFormulaBar', 'true'],
    	['showHorizontalScroll', 'true'],
    	['showObjects', 'all'],
    	['showSheetTabs', 'true'],
    	['showStatusbar', 'true'],
    	['showVerticalScroll', 'true'],
    	['tabRatio', '600'],
    	['xWindow', '0'],
    	['yWindow', '0']
    ];*/

    function push_defaults_array(target, defaults) {
    	for(var j = 0; j != target.length; ++j) { var w = target[j];
    		for(var i=0; i != defaults.length; ++i) { var z = defaults[i];
    			if(w[z[0]] == null) w[z[0]] = z[1];
    			else switch(z[2]) {
    			case "bool": if(typeof w[z[0]] == "string") w[z[0]] = parsexmlbool(w[z[0]]); break;
    			case "int": if(typeof w[z[0]] == "string") w[z[0]] = parseInt(w[z[0]], 10); break;
    			}
    		}
    	}
    }
    function push_defaults(target, defaults) {
    	for(var i = 0; i != defaults.length; ++i) { var z = defaults[i];
    		if(target[z[0]] == null) target[z[0]] = z[1];
    		else switch(z[2]) {
    			case "bool": if(typeof target[z[0]] == "string") target[z[0]] = parsexmlbool(target[z[0]]); break;
    			case "int": if(typeof target[z[0]] == "string") target[z[0]] = parseInt(target[z[0]], 10); break;
    		}
    	}
    }

    function parse_wb_defaults(wb) {
    	push_defaults(wb.WBProps, WBPropsDef);
    	push_defaults(wb.CalcPr, CalcPrDef);

    	push_defaults_array(wb.WBView, WBViewDef);
    	push_defaults_array(wb.Sheets, SheetDef);

    	_ssfopts.date1904 = parsexmlbool(wb.WBProps.date1904);
    }

    var badchars = /*#__PURE__*/"][*?\/\\".split("");
    function check_ws_name(n/*:string*/, safe/*:?boolean*/)/*:boolean*/ {
    	if(n.length > 31) { if(safe) return false; throw new Error("Sheet names cannot exceed 31 chars"); }
    	var _good = true;
    	badchars.forEach(function(c) {
    		if(n.indexOf(c) == -1) return;
    		if(!safe) throw new Error("Sheet name cannot contain : \\ / ? * [ ]");
    		_good = false;
    	});
    	return _good;
    }
    /* 18.2 Workbook */
    var wbnsregex = /<\w+:workbook/;
    function parse_wb_xml(data, opts)/*:WorkbookFile*/ {
    	if(!data) throw new Error("Could not find file");
    	var wb = /*::(*/{ AppVersion:{}, WBProps:{}, WBView:[], Sheets:[], CalcPr:{}, Names:[], xmlns: "" }/*::)*/;
    	var pass = false, xmlns = "xmlns";
    	var dname = {}, dnstart = 0;
    	data.replace(tagregex, function xml_wb(x, idx) {
    		var y/*:any*/ = parsexmltag(x);
    		switch(strip_ns(y[0])) {
    			case '<?xml': break;

    			/* 18.2.27 workbook CT_Workbook 1 */
    			case '<workbook':
    				if(x.match(wbnsregex)) xmlns = "xmlns" + x.match(/<(\w+):/)[1];
    				wb.xmlns = y[xmlns];
    				break;
    			case '</workbook>': break;

    			/* 18.2.13 fileVersion CT_FileVersion ? */
    			case '<fileVersion': delete y[0]; wb.AppVersion = y; break;
    			case '<fileVersion/>': case '</fileVersion>': break;

    			/* 18.2.12 fileSharing CT_FileSharing ? */
    			case '<fileSharing':
    				break;
    			case '<fileSharing/>': break;

    			/* 18.2.28 workbookPr CT_WorkbookPr ? */
    			case '<workbookPr':
    			case '<workbookPr/>':
    				WBPropsDef.forEach(function(w) {
    					if(y[w[0]] == null) return;
    					switch(w[2]) {
    						case "bool": wb.WBProps[w[0]] = parsexmlbool(y[w[0]]); break;
    						case "int": wb.WBProps[w[0]] = parseInt(y[w[0]], 10); break;
    						default: wb.WBProps[w[0]] = y[w[0]];
    					}
    				});
    				if(y.codeName) wb.WBProps.CodeName = utf8read(y.codeName);
    				break;
    			case '</workbookPr>': break;

    			/* 18.2.29 workbookProtection CT_WorkbookProtection ? */
    			case '<workbookProtection':
    				break;
    			case '<workbookProtection/>': break;

    			/* 18.2.1  bookViews CT_BookViews ? */
    			case '<bookViews': case '<bookViews>': case '</bookViews>': break;
    			/* 18.2.30   workbookView CT_BookView + */
    			case '<workbookView': case '<workbookView/>': delete y[0]; wb.WBView.push(y); break;
    			case '</workbookView>': break;

    			/* 18.2.20 sheets CT_Sheets 1 */
    			case '<sheets': case '<sheets>': case '</sheets>': break; // aggregate sheet
    			/* 18.2.19   sheet CT_Sheet + */
    			case '<sheet':
    				switch(y.state) {
    					case "hidden": y.Hidden = 1; break;
    					case "veryHidden": y.Hidden = 2; break;
    					default: y.Hidden = 0;
    				}
    				delete y.state;
    				y.name = unescapexml(utf8read(y.name));
    				delete y[0]; wb.Sheets.push(y); break;
    			case '</sheet>': break;

    			/* 18.2.15 functionGroups CT_FunctionGroups ? */
    			case '<functionGroups': case '<functionGroups/>': break;
    			/* 18.2.14   functionGroup CT_FunctionGroup + */
    			case '<functionGroup': break;

    			/* 18.2.9  externalReferences CT_ExternalReferences ? */
    			case '<externalReferences': case '</externalReferences>': case '<externalReferences>': break;
    			/* 18.2.8    externalReference CT_ExternalReference + */
    			case '<externalReference': break;

    			/* 18.2.6  definedNames CT_DefinedNames ? */
    			case '<definedNames/>': break;
    			case '<definedNames>': case '<definedNames': pass=true; break;
    			case '</definedNames>': pass=false; break;
    			/* 18.2.5    definedName CT_DefinedName + */
    			case '<definedName': {
    				dname = {};
    				dname.Name = utf8read(y.name);
    				if(y.comment) dname.Comment = y.comment;
    				if(y.localSheetId) dname.Sheet = +y.localSheetId;
    				if(parsexmlbool(y.hidden||"0")) dname.Hidden = true;
    				dnstart = idx + x.length;
    			}	break;
    			case '</definedName>': {
    				dname.Ref = unescapexml(utf8read(data.slice(dnstart, idx)));
    				wb.Names.push(dname);
    			} break;
    			case '<definedName/>': break;

    			/* 18.2.2  calcPr CT_CalcPr ? */
    			case '<calcPr': delete y[0]; wb.CalcPr = y; break;
    			case '<calcPr/>': delete y[0]; wb.CalcPr = y; break;
    			case '</calcPr>': break;

    			/* 18.2.16 oleSize CT_OleSize ? (ref required) */
    			case '<oleSize': break;

    			/* 18.2.4  customWorkbookViews CT_CustomWorkbookViews ? */
    			case '<customWorkbookViews>': case '</customWorkbookViews>': case '<customWorkbookViews': break;
    			/* 18.2.3  customWorkbookView CT_CustomWorkbookView + */
    			case '<customWorkbookView': case '</customWorkbookView>': break;

    			/* 18.2.18 pivotCaches CT_PivotCaches ? */
    			case '<pivotCaches>': case '</pivotCaches>': case '<pivotCaches': break;
    			/* 18.2.17 pivotCache CT_PivotCache ? */
    			case '<pivotCache': break;

    			/* 18.2.21 smartTagPr CT_SmartTagPr ? */
    			case '<smartTagPr': case '<smartTagPr/>': break;

    			/* 18.2.23 smartTagTypes CT_SmartTagTypes ? */
    			case '<smartTagTypes': case '<smartTagTypes>': case '</smartTagTypes>': break;
    			/* 18.2.22 smartTagType CT_SmartTagType ? */
    			case '<smartTagType': break;

    			/* 18.2.24 webPublishing CT_WebPublishing ? */
    			case '<webPublishing': case '<webPublishing/>': break;

    			/* 18.2.11 fileRecoveryPr CT_FileRecoveryPr ? */
    			case '<fileRecoveryPr': case '<fileRecoveryPr/>': break;

    			/* 18.2.26 webPublishObjects CT_WebPublishObjects ? */
    			case '<webPublishObjects>': case '<webPublishObjects': case '</webPublishObjects>': break;
    			/* 18.2.25 webPublishObject CT_WebPublishObject ? */
    			case '<webPublishObject': break;

    			/* 18.2.10 extLst CT_ExtensionList ? */
    			case '<extLst': case '<extLst>': case '</extLst>': case '<extLst/>': break;
    			/* 18.2.7  ext CT_Extension + */
    			case '<ext': pass=true; break; //TODO: check with versions of excel
    			case '</ext>': pass=false; break;

    			/* Others */
    			case '<ArchID': break;
    			case '<AlternateContent':
    			case '<AlternateContent>': pass=true; break;
    			case '</AlternateContent>': pass=false; break;

    			/* TODO */
    			case '<revisionPtr': break;

    			default: if(!pass && opts.WTF) throw new Error('unrecognized ' + y[0] + ' in workbook');
    		}
    		return x;
    	});
    	if(XMLNS_main.indexOf(wb.xmlns) === -1) throw new Error("Unknown Namespace: " + wb.xmlns);

    	parse_wb_defaults(wb);

    	return wb;
    }
    /* [MS-XLSB] 2.4.304 BrtBundleSh */
    function parse_BrtBundleSh(data, length/*:number*/) {
    	var z = {};
    	z.Hidden = data.read_shift(4); //hsState ST_SheetState
    	z.iTabID = data.read_shift(4);
    	z.strRelID = parse_RelID(data);
    	z.name = parse_XLWideString(data);
    	return z;
    }

    /* [MS-XLSB] 2.4.815 BrtWbProp */
    function parse_BrtWbProp(data, length)/*:WBProps*/ {
    	var o/*:WBProps*/ = ({}/*:any*/);
    	var flags = data.read_shift(4);
    	o.defaultThemeVersion = data.read_shift(4);
    	var strName = (length > 8) ? parse_XLWideString(data) : "";
    	if(strName.length > 0) o.CodeName = strName;
    	o.autoCompressPictures = !!(flags & 0x10000);
    	o.backupFile = !!(flags & 0x40);
    	o.checkCompatibility = !!(flags & 0x1000);
    	o.date1904 = !!(flags & 0x01);
    	o.filterPrivacy = !!(flags & 0x08);
    	o.hidePivotFieldList = !!(flags & 0x400);
    	o.promptedSolutions = !!(flags & 0x10);
    	o.publishItems = !!(flags & 0x800);
    	o.refreshAllConnections = !!(flags & 0x40000);
    	o.saveExternalLinkValues = !!(flags & 0x80);
    	o.showBorderUnselectedTables = !!(flags & 0x04);
    	o.showInkAnnotation = !!(flags & 0x20);
    	o.showObjects = ["all", "placeholders", "none"][(flags >> 13) & 0x03];
    	o.showPivotChartFilter = !!(flags & 0x8000);
    	o.updateLinks = ["userSet", "never", "always"][(flags >> 8) & 0x03];
    	return o;
    }

    function parse_BrtFRTArchID$(data, length) {
    	var o = {};
    	data.read_shift(4);
    	o.ArchID = data.read_shift(4);
    	data.l += length - 8;
    	return o;
    }

    /* [MS-XLSB] 2.4.687 BrtName */
    function parse_BrtName(data, length, opts) {
    	var end = data.l + length;
    	data.l += 4; //var flags = data.read_shift(4);
    	data.l += 1; //var chKey = data.read_shift(1);
    	var itab = data.read_shift(4);
    	var name = parse_XLNameWideString(data);
    	var formula = parse_XLSBNameParsedFormula(data, 0, opts);
    	var comment = parse_XLNullableWideString(data);
    	//if(0 /* fProc */) {
    		// unusedstring1: XLNullableWideString
    		// description: XLNullableWideString
    		// helpTopic: XLNullableWideString
    		// unusedstring2: XLNullableWideString
    	//}
    	data.l = end;
    	var out = ({Name:name, Ptg:formula}/*:any*/);
    	if(itab < 0xFFFFFFF) out.Sheet = itab;
    	if(comment) out.Comment = comment;
    	return out;
    }

    /* [MS-XLSB] 2.1.7.61 Workbook */
    function parse_wb_bin(data, opts)/*:WorkbookFile*/ {
    	var wb = { AppVersion:{}, WBProps:{}, WBView:[], Sheets:[], CalcPr:{}, xmlns: "" };
    	var state/*:Array<string>*/ = [];
    	var pass = false;

    	if(!opts) opts = {};
    	opts.biff = 12;

    	var Names = [];
    	var supbooks = ([[]]/*:any*/);
    	supbooks.SheetNames = [];
    	supbooks.XTI = [];

    	XLSBRecordEnum[0x0010] = { n:"BrtFRTArchID$", f:parse_BrtFRTArchID$ };

    	recordhopper(data, function hopper_wb(val, R, RT) {
    		switch(RT) {
    			case 0x009C: /* 'BrtBundleSh' */
    				supbooks.SheetNames.push(val.name);
    				wb.Sheets.push(val); break;

    			case 0x0099: /* 'BrtWbProp' */
    				wb.WBProps = val; break;

    			case 0x0027: /* 'BrtName' */
    				if(val.Sheet != null) opts.SID = val.Sheet;
    				val.Ref = stringify_formula(val.Ptg, null, null, supbooks, opts);
    				delete opts.SID;
    				delete val.Ptg;
    				Names.push(val);
    				break;
    			case 0x040C: /* 'BrtNameExt' */ break;

    			case 0x0165: /* 'BrtSupSelf' */
    			case 0x0166: /* 'BrtSupSame' */
    			case 0x0163: /* 'BrtSupBookSrc' */
    			case 0x029B: /* 'BrtSupAddin' */
    				if(!supbooks[0].length) supbooks[0] = [RT, val];
    				else supbooks.push([RT, val]);
    				supbooks[supbooks.length - 1].XTI = [];
    				break;
    			case 0x016A: /* 'BrtExternSheet' */
    				if(supbooks.length === 0) { supbooks[0] = []; supbooks[0].XTI = []; }
    				supbooks[supbooks.length - 1].XTI = supbooks[supbooks.length - 1].XTI.concat(val);
    				supbooks.XTI = supbooks.XTI.concat(val);
    				break;
    			case 0x0169: /* 'BrtPlaceholderName' */
    				break;

    			case 0x0817: /* 'BrtAbsPath15' */
    			case 0x009E: /* 'BrtBookView' */
    			case 0x008F: /* 'BrtBeginBundleShs' */
    			case 0x0298: /* 'BrtBeginFnGroup' */
    			case 0x0161: /* 'BrtBeginExternals' */
    				break;

    			/* case 'BrtModelTimeGroupingCalcCol' */
    			case 0x0C00: /* 'BrtUid' */
    			case 0x0C01: /* 'BrtRevisionPtr' */
    			case 0x0216: /* 'BrtBookProtection' */
    			case 0x02A5: /* 'BrtBookProtectionIso' */
    			case 0x009D: /* 'BrtCalcProp' */
    			case 0x0262: /* 'BrtCrashRecErr' */
    			case 0x0802: /* 'BrtDecoupledPivotCacheID' */
    			case 0x009B: /* 'BrtFileRecover' */
    			case 0x0224: /* 'BrtFileSharing' */
    			case 0x02A4: /* 'BrtFileSharingIso' */
    			case 0x0080: /* 'BrtFileVersion' */
    			case 0x0299: /* 'BrtFnGroup' */
    			case 0x0850: /* 'BrtModelRelationship' */
    			case 0x084D: /* 'BrtModelTable' */
    			case 0x0225: /* 'BrtOleSize' */
    			case 0x0805: /* 'BrtPivotTableRef' */
    			case 0x0254: /* 'BrtSmartTagType' */
    			case 0x081C: /* 'BrtTableSlicerCacheID' */
    			case 0x081B: /* 'BrtTableSlicerCacheIDs' */
    			case 0x0822: /* 'BrtTimelineCachePivotCacheID' */
    			case 0x018D: /* 'BrtUserBookView' */
    			case 0x009A: /* 'BrtWbFactoid' */
    			case 0x045D: /* 'BrtWbProp14' */
    			case 0x0229: /* 'BrtWebOpt' */
    			case 0x082B: /* 'BrtWorkBookPr15' */
    				break;

    			case 0x0023: /* 'BrtFRTBegin' */
    				state.push(RT); pass = true; break;
    			case 0x0024: /* 'BrtFRTEnd' */
    				state.pop(); pass = false; break;
    			case 0x0025: /* 'BrtACBegin' */
    				state.push(RT); pass = true; break;
    			case 0x0026: /* 'BrtACEnd' */
    				state.pop(); pass = false; break;

    			case 0x0010: /* 'BrtFRTArchID$' */ break;

    			default:
    				if(R.T);
    				else if(!pass || (opts.WTF && state[state.length-1] != 0x0025 /* BrtACBegin */ && state[state.length-1] != 0x0023 /* BrtFRTBegin */)) throw new Error("Unexpected record 0x" + RT.toString(16));
    		}
    	}, opts);

    	parse_wb_defaults(wb);

    	// $FlowIgnore
    	wb.Names = Names;

    	(wb/*:any*/).supbooks = supbooks;
    	return wb;
    }
    function parse_wb(data, name/*:string*/, opts)/*:WorkbookFile*/ {
    	if(name.slice(-4)===".bin") return parse_wb_bin((data/*:any*/), opts);
    	return parse_wb_xml((data/*:any*/), opts);
    }

    function parse_ws(data, name/*:string*/, idx/*:number*/, opts, rels, wb, themes, styles)/*:Worksheet*/ {
    	if(name.slice(-4)===".bin") return parse_ws_bin((data/*:any*/), opts, idx, rels, wb, themes, styles);
    	return parse_ws_xml((data/*:any*/), opts, idx, rels, wb, themes, styles);
    }

    function parse_cs(data, name/*:string*/, idx/*:number*/, opts, rels, wb, themes, styles)/*:Worksheet*/ {
    	if(name.slice(-4)===".bin") return parse_cs_bin((data/*:any*/), opts, idx, rels, wb);
    	return parse_cs_xml((data/*:any*/), opts, idx, rels, wb);
    }

    function parse_ms(data, name/*:string*/, idx/*:number*/, opts, rels, wb, themes, styles)/*:Worksheet*/ {
    	if(name.slice(-4)===".bin") return parse_ms_bin();
    	return parse_ms_xml();
    }

    function parse_ds(data, name/*:string*/, idx/*:number*/, opts, rels, wb, themes, styles)/*:Worksheet*/ {
    	if(name.slice(-4)===".bin") return parse_ds_bin();
    	return parse_ds_xml();
    }

    function parse_sty(data, name/*:string*/, themes, opts) {
    	if(name.slice(-4)===".bin") return parse_sty_bin((data/*:any*/), themes, opts);
    	return parse_sty_xml((data/*:any*/), themes, opts);
    }

    function parse_theme(data/*:string*/, name/*:string*/, opts) {
    	return parse_theme_xml(data, opts);
    }

    function parse_sst(data, name/*:string*/, opts)/*:SST*/ {
    	if(name.slice(-4)===".bin") return parse_sst_bin((data/*:any*/), opts);
    	return parse_sst_xml((data/*:any*/), opts);
    }

    function parse_cmnt(data, name/*:string*/, opts)/*:Array<RawComment>*/ {
    	if(name.slice(-4)===".bin") return parse_comments_bin((data/*:any*/), opts);
    	return parse_comments_xml((data/*:any*/), opts);
    }

    function parse_cc(data, name/*:string*/, opts) {
    	if(name.slice(-4)===".bin") return parse_cc_bin((data/*:any*/));
    	return parse_cc_xml((data/*:any*/));
    }

    function parse_xlink(data, rel, name/*:string*/, opts) {
    	if(name.slice(-4)===".bin") return parse_xlink_bin((data/*:any*/), rel, name, opts);
    	return parse_xlink_xml();
    }

    function parse_xlmeta(data, name/*:string*/, opts) {
    	if(name.slice(-4)===".bin") return parse_xlmeta_bin((data/*:any*/), name, opts);
    	return parse_xlmeta_xml((data/*:any*/), name, opts);
    }
    var attregexg2=/([\w:]+)=((?:")([^"]*)(?:")|(?:')([^']*)(?:'))/g;
    var attregex2=/([\w:]+)=((?:")(?:[^"]*)(?:")|(?:')(?:[^']*)(?:'))/;
    function xlml_parsexmltag(tag/*:string*/, skip_root/*:?boolean*/) {
    	var words = tag.split(/\s+/);
    	var z/*:any*/ = ([]/*:any*/); if(!skip_root) z[0] = words[0];
    	if(words.length === 1) return z;
    	var m = tag.match(attregexg2), y, j, w, i;
    	if(m) for(i = 0; i != m.length; ++i) {
    		y = m[i].match(attregex2);
    /*:: if(!y || !y[2]) continue; */
    		if((j=y[1].indexOf(":")) === -1) z[y[1]] = y[2].slice(1,y[2].length-1);
    		else {
    			if(y[1].slice(0,6) === "xmlns:") w = "xmlns"+y[1].slice(6);
    			else w = y[1].slice(j+1);
    			z[w] = y[2].slice(1,y[2].length-1);
    		}
    	}
    	return z;
    }
    function xlml_parsexmltagobj(tag/*:string*/) {
    	var words = tag.split(/\s+/);
    	var z = {};
    	if(words.length === 1) return z;
    	var m = tag.match(attregexg2), y, j, w, i;
    	if(m) for(i = 0; i != m.length; ++i) {
    		y = m[i].match(attregex2);
    /*:: if(!y || !y[2]) continue; */
    		if((j=y[1].indexOf(":")) === -1) z[y[1]] = y[2].slice(1,y[2].length-1);
    		else {
    			if(y[1].slice(0,6) === "xmlns:") w = "xmlns"+y[1].slice(6);
    			else w = y[1].slice(j+1);
    			z[w] = y[2].slice(1,y[2].length-1);
    		}
    	}
    	return z;
    }

    // ----

    /* map from xlml named formats to SSF TODO: localize */
    var XLMLFormatMap/*: {[string]:string}*/;

    function xlml_format(format, value)/*:string*/ {
    	var fmt = XLMLFormatMap[format] || unescapexml(format);
    	if(fmt === "General") return SSF_general(value);
    	return SSF_format(fmt, value);
    }

    function xlml_set_custprop(Custprops, key, cp, val/*:string*/) {
    	var oval/*:any*/ = val;
    	switch((cp[0].match(/dt:dt="([\w.]+)"/)||["",""])[1]) {
    		case "boolean": oval = parsexmlbool(val); break;
    		case "i2": case "int": oval = parseInt(val, 10); break;
    		case "r4": case "float": oval = parseFloat(val); break;
    		case "date": case "dateTime.tz": oval = parseDate(val); break;
    		case "i8": case "string": case "fixed": case "uuid": case "bin.base64": break;
    		default: throw new Error("bad custprop:" + cp[0]);
    	}
    	Custprops[unescapexml(key)] = oval;
    }

    function safe_format_xlml(cell/*:Cell*/, nf, o) {
    	if(cell.t === 'z') return;
    	if(!o || o.cellText !== false) try {
    		if(cell.t === 'e') { cell.w = cell.w || BErr[cell.v]; }
    		else if(nf === "General") {
    			if(cell.t === 'n') {
    				if((cell.v|0) === cell.v) cell.w = cell.v.toString(10);
    				else cell.w = SSF_general_num(cell.v);
    			}
    			else cell.w = SSF_general(cell.v);
    		}
    		else cell.w = xlml_format(nf||"General", cell.v);
    	} catch(e) { if(o.WTF) throw e; }
    	try {
    		var z = XLMLFormatMap[nf]||nf||"General";
    		if(o.cellNF) cell.z = z;
    		if(o.cellDates && cell.t == 'n' && fmt_is_date(z)) {
    			var _d = SSF_parse_date_code(cell.v); if(_d) { cell.t = 'd'; cell.v = new Date(_d.y, _d.m-1,_d.d,_d.H,_d.M,_d.S,_d.u); }
    		}
    	} catch(e) { if(o.WTF) throw e; }
    }

    function process_style_xlml(styles, stag, opts) {
    	if(opts.cellStyles) {
    		if(stag.Interior) {
    			var I = stag.Interior;
    			if(I.Pattern) I.patternType = XLMLPatternTypeMap[I.Pattern] || I.Pattern;
    		}
    	}
    	styles[stag.ID] = stag;
    }

    /* TODO: there must exist some form of OSP-blessed spec */
    function parse_xlml_data(xml, ss, data, cell/*:any*/, base, styles, csty, row, arrayf, o) {
    	var nf = "General", sid = cell.StyleID, S = {}; o = o || {};
    	var interiors = [];
    	var i = 0;
    	if(sid === undefined && row) sid = row.StyleID;
    	if(sid === undefined && csty) sid = csty.StyleID;
    	while(styles[sid] !== undefined) {
    		if(styles[sid].nf) nf = styles[sid].nf;
    		if(styles[sid].Interior) interiors.push(styles[sid].Interior);
    		if(!styles[sid].Parent) break;
    		sid = styles[sid].Parent;
    	}
    	switch(data.Type) {
    		case 'Boolean':
    			cell.t = 'b';
    			cell.v = parsexmlbool(xml);
    			break;
    		case 'String':
    			cell.t = 's'; cell.r = xlml_fixstr(unescapexml(xml));
    			cell.v = (xml.indexOf("<") > -1 ? unescapexml(ss||xml).replace(/<.*?>/g, "") : cell.r); // todo: BR etc
    			break;
    		case 'DateTime':
    			if(xml.slice(-1) != "Z") xml += "Z";
    			cell.v = (parseDate(xml) - new Date(Date.UTC(1899, 11, 30))) / (24 * 60 * 60 * 1000);
    			if(cell.v !== cell.v) cell.v = unescapexml(xml);
    			else if(cell.v<60) cell.v = cell.v -1;
    			if(!nf || nf == "General") nf = "yyyy-mm-dd";
    			/* falls through */
    		case 'Number':
    			if(cell.v === undefined) cell.v=+xml;
    			if(!cell.t) cell.t = 'n';
    			break;
    		case 'Error': cell.t = 'e'; cell.v = RBErr[xml]; if(o.cellText !== false) cell.w = xml; break;
    		default:
    			if(xml == "" && ss == "") { cell.t = 'z'; }
    			else { cell.t = 's'; cell.v = xlml_fixstr(ss||xml); }
    			break;
    	}
    	safe_format_xlml(cell, nf, o);
    	if(o.cellFormula !== false) {
    		if(cell.Formula) {
    			var fstr = unescapexml(cell.Formula);
    			/* strictly speaking, the leading = is required but some writers omit */
    			if(fstr.charCodeAt(0) == 61 /* = */) fstr = fstr.slice(1);
    			cell.f = rc_to_a1(fstr, base);
    			delete cell.Formula;
    			if(cell.ArrayRange == "RC") cell.F = rc_to_a1("RC:RC", base);
    			else if(cell.ArrayRange) {
    				cell.F = rc_to_a1(cell.ArrayRange, base);
    				arrayf.push([safe_decode_range(cell.F), cell.F]);
    			}
    		} else {
    			for(i = 0; i < arrayf.length; ++i)
    				if(base.r >= arrayf[i][0].s.r && base.r <= arrayf[i][0].e.r)
    					if(base.c >= arrayf[i][0].s.c && base.c <= arrayf[i][0].e.c)
    						cell.F = arrayf[i][1];
    		}
    	}
    	if(o.cellStyles) {
    		interiors.forEach(function(x) {
    			if(!S.patternType && x.patternType) S.patternType = x.patternType;
    		});
    		cell.s = S;
    	}
    	if(cell.StyleID !== undefined) cell.ixfe = cell.StyleID;
    }

    function xlml_clean_comment(comment/*:any*/) {
    	comment.t = comment.v || "";
    	comment.t = comment.t.replace(/\r\n/g,"\n").replace(/\r/g,"\n");
    	comment.v = comment.w = comment.ixfe = undefined;
    }

    /* TODO: Everything */
    function parse_xlml_xml(d, _opts)/*:Workbook*/ {
    	var opts = _opts || {};
    	make_ssf();
    	var str = debom(xlml_normalize(d));
    	if(opts.type == 'binary' || opts.type == 'array' || opts.type == 'base64') {
    		str = utf8read(str);
    	}
    	var opening = str.slice(0, 1024).toLowerCase(), ishtml = false;
    	opening = opening.replace(/".*?"/g, "");
    	if((opening.indexOf(">") & 1023) > Math.min((opening.indexOf(",") & 1023), (opening.indexOf(";")&1023))) { var _o = dup(opts); _o.type = "string"; return PRN.to_workbook(str, _o); }
    	if(opening.indexOf("<?xml") == -1) ["html", "table", "head", "meta", "script", "style", "div"].forEach(function(tag) { if(opening.indexOf("<" + tag) >= 0) ishtml = true; });
    	if(ishtml) return html_to_workbook(str, opts);

    	XLMLFormatMap = ({
    		"General Number": "General",
    		"General Date": table_fmt[22],
    		"Long Date": "dddd, mmmm dd, yyyy",
    		"Medium Date": table_fmt[15],
    		"Short Date": table_fmt[14],
    		"Long Time": table_fmt[19],
    		"Medium Time": table_fmt[18],
    		"Short Time": table_fmt[20],
    		"Currency": '"$"#,##0.00_);[Red]\\("$"#,##0.00\\)',
    		"Fixed": table_fmt[2],
    		"Standard": table_fmt[4],
    		"Percent": table_fmt[10],
    		"Scientific": table_fmt[11],
    		"Yes/No": '"Yes";"Yes";"No";@',
    		"True/False": '"True";"True";"False";@',
    		"On/Off": '"Yes";"Yes";"No";@'
    	}/*:any*/);


    	var Rn;
    	var state = [], tmp;
    	var sheets = {}, sheetnames/*:Array<string>*/ = [], cursheet/*:Worksheet*/ = (opts.dense ? [] : {}), sheetname = "";
    	var cell = ({}/*:any*/), row = {};// eslint-disable-line no-unused-vars
    	var dtag = xlml_parsexmltag('<Data ss:Type="String">'), didx = 0;
    	var c = 0, r = 0;
    	var refguess/*:Range*/ = {s: {r:2000000, c:2000000}, e: {r:0, c:0} };
    	var styles = {}, stag = {};
    	var ss = "", fidx = 0;
    	var merges/*:Array<Range>*/ = [];
    	var Props = {}, Custprops = {}, pidx = 0, cp = [];
    	var comments/*:Array<Comment>*/ = [], comment/*:Comment*/ = ({}/*:any*/);
    	var cstys = [], csty, seencol = false;
    	var arrayf/*:Array<[Range, string]>*/ = [];
    	var rowinfo/*:Array<RowInfo>*/ = [], rowobj = {}, cc = 0, rr = 0;
    	var Workbook/*:WBWBProps*/ = ({ Sheets:[], WBProps:{date1904:false} }/*:any*/), wsprops = {};
    	xlmlregex.lastIndex = 0;
    	str = str.replace(/<!--([\s\S]*?)-->/mg,"");
    	var raw_Rn3 = "";
    	while((Rn = xlmlregex.exec(str))) switch((Rn[3] = (raw_Rn3 = Rn[3]).toLowerCase())) {
    		case 'data' /*case 'Data'*/:
    			if(raw_Rn3 == "data") {
    				if(Rn[1]==='/'){if((tmp=state.pop())[0]!==Rn[3]) throw new Error("Bad state: "+tmp.join("|"));}
    				else if(Rn[0].charAt(Rn[0].length-2) !== '/') state.push([Rn[3], true]);
    				break;
    			}
    			if(state[state.length-1][1]) break;
    			if(Rn[1]==='/') parse_xlml_data(str.slice(didx, Rn.index), ss, dtag, state[state.length-1][0]==/*"Comment"*/"comment"?comment:cell, {c:c,r:r}, styles, cstys[c], row, arrayf, opts);
    			else { ss = ""; dtag = xlml_parsexmltag(Rn[0]); didx = Rn.index + Rn[0].length; }
    			break;
    		case 'cell' /*case 'Cell'*/:
    			if(Rn[1]==='/'){
    				if(comments.length > 0) cell.c = comments;
    				if((!opts.sheetRows || opts.sheetRows > r) && cell.v !== undefined) {
    					if(opts.dense) {
    						if(!cursheet[r]) cursheet[r] = [];
    						cursheet[r][c] = cell;
    					} else cursheet[encode_col(c) + encode_row(r)] = cell;
    				}
    				if(cell.HRef) {
    					cell.l = ({Target:unescapexml(cell.HRef)}/*:any*/);
    					if(cell.HRefScreenTip) cell.l.Tooltip = cell.HRefScreenTip;
    					delete cell.HRef; delete cell.HRefScreenTip;
    				}
    				if(cell.MergeAcross || cell.MergeDown) {
    					cc = c + (parseInt(cell.MergeAcross,10)|0);
    					rr = r + (parseInt(cell.MergeDown,10)|0);
    					merges.push({s:{c:c,r:r},e:{c:cc,r:rr}});
    				}
    				if(!opts.sheetStubs) { if(cell.MergeAcross) c = cc + 1; else ++c; }
    				else if(cell.MergeAcross || cell.MergeDown) {
    					/*:: if(!cc) cc = 0; if(!rr) rr = 0; */
    					for(var cma = c; cma <= cc; ++cma) {
    						for(var cmd = r; cmd <= rr; ++cmd) {
    							if(cma > c || cmd > r) {
    								if(opts.dense) {
    									if(!cursheet[cmd]) cursheet[cmd] = [];
    									cursheet[cmd][cma] = {t:'z'};
    								} else cursheet[encode_col(cma) + encode_row(cmd)] = {t:'z'};
    							}
    						}
    					}
    					c = cc + 1;
    				}
    				else ++c;
    			} else {
    				cell = xlml_parsexmltagobj(Rn[0]);
    				if(cell.Index) c = +cell.Index - 1;
    				if(c < refguess.s.c) refguess.s.c = c;
    				if(c > refguess.e.c) refguess.e.c = c;
    				if(Rn[0].slice(-2) === "/>") ++c;
    				comments = [];
    			}
    			break;
    		case 'row' /*case 'Row'*/:
    			if(Rn[1]==='/' || Rn[0].slice(-2) === "/>") {
    				if(r < refguess.s.r) refguess.s.r = r;
    				if(r > refguess.e.r) refguess.e.r = r;
    				if(Rn[0].slice(-2) === "/>") {
    					row = xlml_parsexmltag(Rn[0]);
    					if(row.Index) r = +row.Index - 1;
    				}
    				c = 0; ++r;
    			} else {
    				row = xlml_parsexmltag(Rn[0]);
    				if(row.Index) r = +row.Index - 1;
    				rowobj = {};
    				if(row.AutoFitHeight == "0" || row.Height) {
    					rowobj.hpx = parseInt(row.Height, 10); rowobj.hpt = px2pt(rowobj.hpx);
    					rowinfo[r] = rowobj;
    				}
    				if(row.Hidden == "1") { rowobj.hidden = true; rowinfo[r] = rowobj; }
    			}
    			break;
    		case 'worksheet' /*case 'Worksheet'*/: /* TODO: read range from FullRows/FullColumns */
    			if(Rn[1]==='/'){
    				if((tmp=state.pop())[0]!==Rn[3]) throw new Error("Bad state: "+tmp.join("|"));
    				sheetnames.push(sheetname);
    				if(refguess.s.r <= refguess.e.r && refguess.s.c <= refguess.e.c) {
    					cursheet["!ref"] = encode_range(refguess);
    					if(opts.sheetRows && opts.sheetRows <= refguess.e.r) {
    						cursheet["!fullref"] = cursheet["!ref"];
    						refguess.e.r = opts.sheetRows - 1;
    						cursheet["!ref"] = encode_range(refguess);
    					}
    				}
    				if(merges.length) cursheet["!merges"] = merges;
    				if(cstys.length > 0) cursheet["!cols"] = cstys;
    				if(rowinfo.length > 0) cursheet["!rows"] = rowinfo;
    				sheets[sheetname] = cursheet;
    			} else {
    				refguess = {s: {r:2000000, c:2000000}, e: {r:0, c:0} };
    				r = c = 0;
    				state.push([Rn[3], false]);
    				tmp = xlml_parsexmltag(Rn[0]);
    				sheetname = unescapexml(tmp.Name);
    				cursheet = (opts.dense ? [] : {});
    				merges = [];
    				arrayf = [];
    				rowinfo = [];
    				wsprops = {name:sheetname, Hidden:0};
    				Workbook.Sheets.push(wsprops);
    			}
    			break;
    		case 'table' /*case 'Table'*/:
    			if(Rn[1]==='/'){if((tmp=state.pop())[0]!==Rn[3]) throw new Error("Bad state: "+tmp.join("|"));}
    			else if(Rn[0].slice(-2) == "/>") break;
    			else {
    				state.push([Rn[3], false]);
    				cstys = []; seencol = false;
    			}
    			break;

    		case 'style' /*case 'Style'*/:
    			if(Rn[1]==='/') process_style_xlml(styles, stag, opts);
    			else stag = xlml_parsexmltag(Rn[0]);
    			break;

    		case 'numberformat' /*case 'NumberFormat'*/:
    			stag.nf = unescapexml(xlml_parsexmltag(Rn[0]).Format || "General");
    			if(XLMLFormatMap[stag.nf]) stag.nf = XLMLFormatMap[stag.nf];
    			for(var ssfidx = 0; ssfidx != 0x188; ++ssfidx) if(table_fmt[ssfidx] == stag.nf) break;
    			if(ssfidx == 0x188) for(ssfidx = 0x39; ssfidx != 0x188; ++ssfidx) if(table_fmt[ssfidx] == null) { SSF_load(stag.nf, ssfidx); break; }
    			break;

    		case 'column' /*case 'Column'*/:
    			if(state[state.length-1][0] !== /*'Table'*/'table') break;
    			csty = xlml_parsexmltag(Rn[0]);
    			if(csty.Hidden) { csty.hidden = true; delete csty.Hidden; }
    			if(csty.Width) csty.wpx = parseInt(csty.Width, 10);
    			if(!seencol && csty.wpx > 10) {
    				seencol = true; MDW = DEF_MDW; //find_mdw_wpx(csty.wpx);
    				for(var _col = 0; _col < cstys.length; ++_col) if(cstys[_col]) process_col(cstys[_col]);
    			}
    			if(seencol) process_col(csty);
    			cstys[(csty.Index-1||cstys.length)] = csty;
    			for(var i = 0; i < +csty.Span; ++i) cstys[cstys.length] = dup(csty);
    			break;

    		case 'namedrange' /*case 'NamedRange'*/:
    			if(Rn[1]==='/') break;
    			if(!Workbook.Names) Workbook.Names = [];
    			var _NamedRange = parsexmltag(Rn[0]);
    			var _DefinedName/*:DefinedName*/ = ({
    				Name: _NamedRange.Name,
    				Ref: rc_to_a1(_NamedRange.RefersTo.slice(1), {r:0, c:0})
    			}/*:any*/);
    			if(Workbook.Sheets.length>0) _DefinedName.Sheet=Workbook.Sheets.length-1;
    			/*:: if(Workbook.Names) */Workbook.Names.push(_DefinedName);
    			break;

    		case 'namedcell' /*case 'NamedCell'*/: break;
    		case 'b' /*case 'B'*/: break;
    		case 'i' /*case 'I'*/: break;
    		case 'u' /*case 'U'*/: break;
    		case 's' /*case 'S'*/: break;
    		case 'em' /*case 'EM'*/: break;
    		case 'h2' /*case 'H2'*/: break;
    		case 'h3' /*case 'H3'*/: break;
    		case 'sub' /*case 'Sub'*/: break;
    		case 'sup' /*case 'Sup'*/: break;
    		case 'span' /*case 'Span'*/: break;
    		case 'alignment' /*case 'Alignment'*/:
    			break;
    		case 'borders' /*case 'Borders'*/: break;
    		case 'border' /*case 'Border'*/: break;
    		case 'font' /*case 'Font'*/:
    			if(Rn[0].slice(-2) === "/>") break;
    			else if(Rn[1]==="/") ss += str.slice(fidx, Rn.index);
    			else fidx = Rn.index + Rn[0].length;
    			break;
    		case 'interior' /*case 'Interior'*/:
    			if(!opts.cellStyles) break;
    			stag.Interior = xlml_parsexmltag(Rn[0]);
    			break;
    		case 'protection' /*case 'Protection'*/: break;

    		case 'author' /*case 'Author'*/:
    		case 'title' /*case 'Title'*/:
    		case 'description' /*case 'Description'*/:
    		case 'created' /*case 'Created'*/:
    		case 'keywords' /*case 'Keywords'*/:
    		case 'subject' /*case 'Subject'*/:
    		case 'category' /*case 'Category'*/:
    		case 'company' /*case 'Company'*/:
    		case 'lastauthor' /*case 'LastAuthor'*/:
    		case 'lastsaved' /*case 'LastSaved'*/:
    		case 'lastprinted' /*case 'LastPrinted'*/:
    		case 'version' /*case 'Version'*/:
    		case 'revision' /*case 'Revision'*/:
    		case 'totaltime' /*case 'TotalTime'*/:
    		case 'hyperlinkbase' /*case 'HyperlinkBase'*/:
    		case 'manager' /*case 'Manager'*/:
    		case 'contentstatus' /*case 'ContentStatus'*/:
    		case 'identifier' /*case 'Identifier'*/:
    		case 'language' /*case 'Language'*/:
    		case 'appname' /*case 'AppName'*/:
    			if(Rn[0].slice(-2) === "/>") break;
    			else if(Rn[1]==="/") xlml_set_prop(Props, raw_Rn3, str.slice(pidx, Rn.index));
    			else pidx = Rn.index + Rn[0].length;
    			break;
    		case 'paragraphs' /*case 'Paragraphs'*/: break;

    		case 'styles' /*case 'Styles'*/:
    		case 'workbook' /*case 'Workbook'*/:
    			if(Rn[1]==='/'){if((tmp=state.pop())[0]!==Rn[3]) throw new Error("Bad state: "+tmp.join("|"));}
    			else state.push([Rn[3], false]);
    			break;

    		case 'comment' /*case 'Comment'*/:
    			if(Rn[1]==='/'){
    				if((tmp=state.pop())[0]!==Rn[3]) throw new Error("Bad state: "+tmp.join("|"));
    				xlml_clean_comment(comment);
    				comments.push(comment);
    			} else {
    				state.push([Rn[3], false]);
    				tmp = xlml_parsexmltag(Rn[0]);
    				comment = ({a:tmp.Author}/*:any*/);
    			}
    			break;

    		case 'autofilter' /*case 'AutoFilter'*/:
    			if(Rn[1]==='/'){if((tmp=state.pop())[0]!==Rn[3]) throw new Error("Bad state: "+tmp.join("|"));}
    			else if(Rn[0].charAt(Rn[0].length-2) !== '/') {
    				var AutoFilter = xlml_parsexmltag(Rn[0]);
    				cursheet['!autofilter'] = { ref:rc_to_a1(AutoFilter.Range).replace(/\$/g,"") };
    				state.push([Rn[3], true]);
    			}
    			break;

    		case 'name' /*case 'Name'*/: break;

    		case 'datavalidation' /*case 'DataValidation'*/:
    			if(Rn[1]==='/'){
    				if((tmp=state.pop())[0]!==Rn[3]) throw new Error("Bad state: "+tmp.join("|"));
    			} else {
    				if(Rn[0].charAt(Rn[0].length-2) !== '/') state.push([Rn[3], true]);
    			}
    			break;

    		case 'pixelsperinch' /*case 'PixelsPerInch'*/:
    			break;
    		case 'componentoptions' /*case 'ComponentOptions'*/:
    		case 'documentproperties' /*case 'DocumentProperties'*/:
    		case 'customdocumentproperties' /*case 'CustomDocumentProperties'*/:
    		case 'officedocumentsettings' /*case 'OfficeDocumentSettings'*/:
    		case 'pivottable' /*case 'PivotTable'*/:
    		case 'pivotcache' /*case 'PivotCache'*/:
    		case 'names' /*case 'Names'*/:
    		case 'mapinfo' /*case 'MapInfo'*/:
    		case 'pagebreaks' /*case 'PageBreaks'*/:
    		case 'querytable' /*case 'QueryTable'*/:
    		case 'sorting' /*case 'Sorting'*/:
    		case 'schema' /*case 'Schema'*/: //case 'data' /*case 'data'*/:
    		case 'conditionalformatting' /*case 'ConditionalFormatting'*/:
    		case 'smarttagtype' /*case 'SmartTagType'*/:
    		case 'smarttags' /*case 'SmartTags'*/:
    		case 'excelworkbook' /*case 'ExcelWorkbook'*/:
    		case 'workbookoptions' /*case 'WorkbookOptions'*/:
    		case 'worksheetoptions' /*case 'WorksheetOptions'*/:
    			if(Rn[1]==='/'){if((tmp=state.pop())[0]!==Rn[3]) throw new Error("Bad state: "+tmp.join("|"));}
    			else if(Rn[0].charAt(Rn[0].length-2) !== '/') state.push([Rn[3], true]);
    			break;

    		case 'null' /*case 'Null'*/: break;

    		default:
    			/* FODS file root is <office:document> */
    			if(state.length == 0 && Rn[3] == "document") return parse_fods(str, opts);
    			/* UOS file root is <uof:UOF> */
    			if(state.length == 0 && Rn[3] == "uof"/*"UOF"*/) return parse_fods(str, opts);

    			var seen = true;
    			switch(state[state.length-1][0]) {
    				/* OfficeDocumentSettings */
    				case 'officedocumentsettings' /*case 'OfficeDocumentSettings'*/: switch(Rn[3]) {
    					case 'allowpng' /*case 'AllowPNG'*/: break;
    					case 'removepersonalinformation' /*case 'RemovePersonalInformation'*/: break;
    					case 'downloadcomponents' /*case 'DownloadComponents'*/: break;
    					case 'locationofcomponents' /*case 'LocationOfComponents'*/: break;
    					case 'colors' /*case 'Colors'*/: break;
    					case 'color' /*case 'Color'*/: break;
    					case 'index' /*case 'Index'*/: break;
    					case 'rgb' /*case 'RGB'*/: break;
    					case 'targetscreensize' /*case 'TargetScreenSize'*/: break;
    					case 'readonlyrecommended' /*case 'ReadOnlyRecommended'*/: break;
    					default: seen = false;
    				} break;

    				/* ComponentOptions */
    				case 'componentoptions' /*case 'ComponentOptions'*/: switch(Rn[3]) {
    					case 'toolbar' /*case 'Toolbar'*/: break;
    					case 'hideofficelogo' /*case 'HideOfficeLogo'*/: break;
    					case 'spreadsheetautofit' /*case 'SpreadsheetAutoFit'*/: break;
    					case 'label' /*case 'Label'*/: break;
    					case 'caption' /*case 'Caption'*/: break;
    					case 'maxheight' /*case 'MaxHeight'*/: break;
    					case 'maxwidth' /*case 'MaxWidth'*/: break;
    					case 'nextsheetnumber' /*case 'NextSheetNumber'*/: break;
    					default: seen = false;
    				} break;

    				/* ExcelWorkbook */
    				case 'excelworkbook' /*case 'ExcelWorkbook'*/: switch(Rn[3]) {
    					case 'date1904' /*case 'Date1904'*/:
    						/*:: if(!Workbook.WBProps) Workbook.WBProps = {}; */
    						Workbook.WBProps.date1904 = true;
    						break;
    					case 'windowheight' /*case 'WindowHeight'*/: break;
    					case 'windowwidth' /*case 'WindowWidth'*/: break;
    					case 'windowtopx' /*case 'WindowTopX'*/: break;
    					case 'windowtopy' /*case 'WindowTopY'*/: break;
    					case 'tabratio' /*case 'TabRatio'*/: break;
    					case 'protectstructure' /*case 'ProtectStructure'*/: break;
    					case 'protectwindow' /*case 'ProtectWindow'*/: break;
    					case 'protectwindows' /*case 'ProtectWindows'*/: break;
    					case 'activesheet' /*case 'ActiveSheet'*/: break;
    					case 'displayinknotes' /*case 'DisplayInkNotes'*/: break;
    					case 'firstvisiblesheet' /*case 'FirstVisibleSheet'*/: break;
    					case 'supbook' /*case 'SupBook'*/: break;
    					case 'sheetname' /*case 'SheetName'*/: break;
    					case 'sheetindex' /*case 'SheetIndex'*/: break;
    					case 'sheetindexfirst' /*case 'SheetIndexFirst'*/: break;
    					case 'sheetindexlast' /*case 'SheetIndexLast'*/: break;
    					case 'dll' /*case 'Dll'*/: break;
    					case 'acceptlabelsinformulas' /*case 'AcceptLabelsInFormulas'*/: break;
    					case 'donotsavelinkvalues' /*case 'DoNotSaveLinkValues'*/: break;
    					case 'iteration' /*case 'Iteration'*/: break;
    					case 'maxiterations' /*case 'MaxIterations'*/: break;
    					case 'maxchange' /*case 'MaxChange'*/: break;
    					case 'path' /*case 'Path'*/: break;
    					case 'xct' /*case 'Xct'*/: break;
    					case 'count' /*case 'Count'*/: break;
    					case 'selectedsheets' /*case 'SelectedSheets'*/: break;
    					case 'calculation' /*case 'Calculation'*/: break;
    					case 'uncalced' /*case 'Uncalced'*/: break;
    					case 'startupprompt' /*case 'StartupPrompt'*/: break;
    					case 'crn' /*case 'Crn'*/: break;
    					case 'externname' /*case 'ExternName'*/: break;
    					case 'formula' /*case 'Formula'*/: break;
    					case 'colfirst' /*case 'ColFirst'*/: break;
    					case 'collast' /*case 'ColLast'*/: break;
    					case 'wantadvise' /*case 'WantAdvise'*/: break;
    					case 'boolean' /*case 'Boolean'*/: break;
    					case 'error' /*case 'Error'*/: break;
    					case 'text' /*case 'Text'*/: break;
    					case 'ole' /*case 'OLE'*/: break;
    					case 'noautorecover' /*case 'NoAutoRecover'*/: break;
    					case 'publishobjects' /*case 'PublishObjects'*/: break;
    					case 'donotcalculatebeforesave' /*case 'DoNotCalculateBeforeSave'*/: break;
    					case 'number' /*case 'Number'*/: break;
    					case 'refmoder1c1' /*case 'RefModeR1C1'*/: break;
    					case 'embedsavesmarttags' /*case 'EmbedSaveSmartTags'*/: break;
    					default: seen = false;
    				} break;

    				/* WorkbookOptions */
    				case 'workbookoptions' /*case 'WorkbookOptions'*/: switch(Rn[3]) {
    					case 'owcversion' /*case 'OWCVersion'*/: break;
    					case 'height' /*case 'Height'*/: break;
    					case 'width' /*case 'Width'*/: break;
    					default: seen = false;
    				} break;

    				/* WorksheetOptions */
    				case 'worksheetoptions' /*case 'WorksheetOptions'*/: switch(Rn[3]) {
    					case 'visible' /*case 'Visible'*/:
    						if(Rn[0].slice(-2) === "/>");
    						else if(Rn[1]==="/") switch(str.slice(pidx, Rn.index)) {
    							case "SheetHidden": wsprops.Hidden = 1; break;
    							case "SheetVeryHidden": wsprops.Hidden = 2; break;
    						}
    						else pidx = Rn.index + Rn[0].length;
    						break;
    					case 'header' /*case 'Header'*/:
    						if(!cursheet['!margins']) default_margins(cursheet['!margins']={}, 'xlml');
    						if(!isNaN(+parsexmltag(Rn[0]).Margin)) cursheet['!margins'].header = +parsexmltag(Rn[0]).Margin;
    						break;
    					case 'footer' /*case 'Footer'*/:
    						if(!cursheet['!margins']) default_margins(cursheet['!margins']={}, 'xlml');
    						if(!isNaN(+parsexmltag(Rn[0]).Margin)) cursheet['!margins'].footer = +parsexmltag(Rn[0]).Margin;
    						break;
    					case 'pagemargins' /*case 'PageMargins'*/:
    						var pagemargins = parsexmltag(Rn[0]);
    						if(!cursheet['!margins']) default_margins(cursheet['!margins']={},'xlml');
    						if(!isNaN(+pagemargins.Top)) cursheet['!margins'].top = +pagemargins.Top;
    						if(!isNaN(+pagemargins.Left)) cursheet['!margins'].left = +pagemargins.Left;
    						if(!isNaN(+pagemargins.Right)) cursheet['!margins'].right = +pagemargins.Right;
    						if(!isNaN(+pagemargins.Bottom)) cursheet['!margins'].bottom = +pagemargins.Bottom;
    						break;
    					case 'displayrighttoleft' /*case 'DisplayRightToLeft'*/:
    						if(!Workbook.Views) Workbook.Views = [];
    						if(!Workbook.Views[0]) Workbook.Views[0] = {};
    						Workbook.Views[0].RTL = true;
    						break;

    					case 'freezepanes' /*case 'FreezePanes'*/: break;
    					case 'frozennosplit' /*case 'FrozenNoSplit'*/: break;

    					case 'splithorizontal' /*case 'SplitHorizontal'*/:
    					case 'splitvertical' /*case 'SplitVertical'*/:
    						break;

    					case 'donotdisplaygridlines' /*case 'DoNotDisplayGridlines'*/:
    						break;

    					case 'activerow' /*case 'ActiveRow'*/: break;
    					case 'activecol' /*case 'ActiveCol'*/: break;
    					case 'toprowbottompane' /*case 'TopRowBottomPane'*/: break;
    					case 'leftcolumnrightpane' /*case 'LeftColumnRightPane'*/: break;

    					case 'unsynced' /*case 'Unsynced'*/: break;
    					case 'print' /*case 'Print'*/: break;
    					case 'printerrors' /*case 'PrintErrors'*/: break;
    					case 'panes' /*case 'Panes'*/: break;
    					case 'scale' /*case 'Scale'*/: break;
    					case 'pane' /*case 'Pane'*/: break;
    					case 'number' /*case 'Number'*/: break;
    					case 'layout' /*case 'Layout'*/: break;
    					case 'pagesetup' /*case 'PageSetup'*/: break;
    					case 'selected' /*case 'Selected'*/: break;
    					case 'protectobjects' /*case 'ProtectObjects'*/: break;
    					case 'enableselection' /*case 'EnableSelection'*/: break;
    					case 'protectscenarios' /*case 'ProtectScenarios'*/: break;
    					case 'validprinterinfo' /*case 'ValidPrinterInfo'*/: break;
    					case 'horizontalresolution' /*case 'HorizontalResolution'*/: break;
    					case 'verticalresolution' /*case 'VerticalResolution'*/: break;
    					case 'numberofcopies' /*case 'NumberofCopies'*/: break;
    					case 'activepane' /*case 'ActivePane'*/: break;
    					case 'toprowvisible' /*case 'TopRowVisible'*/: break;
    					case 'leftcolumnvisible' /*case 'LeftColumnVisible'*/: break;
    					case 'fittopage' /*case 'FitToPage'*/: break;
    					case 'rangeselection' /*case 'RangeSelection'*/: break;
    					case 'papersizeindex' /*case 'PaperSizeIndex'*/: break;
    					case 'pagelayoutzoom' /*case 'PageLayoutZoom'*/: break;
    					case 'pagebreakzoom' /*case 'PageBreakZoom'*/: break;
    					case 'filteron' /*case 'FilterOn'*/: break;
    					case 'fitwidth' /*case 'FitWidth'*/: break;
    					case 'fitheight' /*case 'FitHeight'*/: break;
    					case 'commentslayout' /*case 'CommentsLayout'*/: break;
    					case 'zoom' /*case 'Zoom'*/: break;
    					case 'lefttoright' /*case 'LeftToRight'*/: break;
    					case 'gridlines' /*case 'Gridlines'*/: break;
    					case 'allowsort' /*case 'AllowSort'*/: break;
    					case 'allowfilter' /*case 'AllowFilter'*/: break;
    					case 'allowinsertrows' /*case 'AllowInsertRows'*/: break;
    					case 'allowdeleterows' /*case 'AllowDeleteRows'*/: break;
    					case 'allowinsertcols' /*case 'AllowInsertCols'*/: break;
    					case 'allowdeletecols' /*case 'AllowDeleteCols'*/: break;
    					case 'allowinserthyperlinks' /*case 'AllowInsertHyperlinks'*/: break;
    					case 'allowformatcells' /*case 'AllowFormatCells'*/: break;
    					case 'allowsizecols' /*case 'AllowSizeCols'*/: break;
    					case 'allowsizerows' /*case 'AllowSizeRows'*/: break;
    					case 'nosummaryrowsbelowdetail' /*case 'NoSummaryRowsBelowDetail'*/:
    						if(!cursheet["!outline"]) cursheet["!outline"] = {};
    						cursheet["!outline"].above = true;
    						break;
    					case 'tabcolorindex' /*case 'TabColorIndex'*/: break;
    					case 'donotdisplayheadings' /*case 'DoNotDisplayHeadings'*/: break;
    					case 'showpagelayoutzoom' /*case 'ShowPageLayoutZoom'*/: break;
    					case 'nosummarycolumnsrightdetail' /*case 'NoSummaryColumnsRightDetail'*/:
    						if(!cursheet["!outline"]) cursheet["!outline"] = {};
    						cursheet["!outline"].left = true;
    						break;
    					case 'blackandwhite' /*case 'BlackAndWhite'*/: break;
    					case 'donotdisplayzeros' /*case 'DoNotDisplayZeros'*/: break;
    					case 'displaypagebreak' /*case 'DisplayPageBreak'*/: break;
    					case 'rowcolheadings' /*case 'RowColHeadings'*/: break;
    					case 'donotdisplayoutline' /*case 'DoNotDisplayOutline'*/: break;
    					case 'noorientation' /*case 'NoOrientation'*/: break;
    					case 'allowusepivottables' /*case 'AllowUsePivotTables'*/: break;
    					case 'zeroheight' /*case 'ZeroHeight'*/: break;
    					case 'viewablerange' /*case 'ViewableRange'*/: break;
    					case 'selection' /*case 'Selection'*/: break;
    					case 'protectcontents' /*case 'ProtectContents'*/: break;
    					default: seen = false;
    				} break;

    				/* PivotTable */
    				case 'pivottable' /*case 'PivotTable'*/: case 'pivotcache' /*case 'PivotCache'*/: switch(Rn[3]) {
    					case 'immediateitemsondrop' /*case 'ImmediateItemsOnDrop'*/: break;
    					case 'showpagemultipleitemlabel' /*case 'ShowPageMultipleItemLabel'*/: break;
    					case 'compactrowindent' /*case 'CompactRowIndent'*/: break;
    					case 'location' /*case 'Location'*/: break;
    					case 'pivotfield' /*case 'PivotField'*/: break;
    					case 'orientation' /*case 'Orientation'*/: break;
    					case 'layoutform' /*case 'LayoutForm'*/: break;
    					case 'layoutsubtotallocation' /*case 'LayoutSubtotalLocation'*/: break;
    					case 'layoutcompactrow' /*case 'LayoutCompactRow'*/: break;
    					case 'position' /*case 'Position'*/: break;
    					case 'pivotitem' /*case 'PivotItem'*/: break;
    					case 'datatype' /*case 'DataType'*/: break;
    					case 'datafield' /*case 'DataField'*/: break;
    					case 'sourcename' /*case 'SourceName'*/: break;
    					case 'parentfield' /*case 'ParentField'*/: break;
    					case 'ptlineitems' /*case 'PTLineItems'*/: break;
    					case 'ptlineitem' /*case 'PTLineItem'*/: break;
    					case 'countofsameitems' /*case 'CountOfSameItems'*/: break;
    					case 'item' /*case 'Item'*/: break;
    					case 'itemtype' /*case 'ItemType'*/: break;
    					case 'ptsource' /*case 'PTSource'*/: break;
    					case 'cacheindex' /*case 'CacheIndex'*/: break;
    					case 'consolidationreference' /*case 'ConsolidationReference'*/: break;
    					case 'filename' /*case 'FileName'*/: break;
    					case 'reference' /*case 'Reference'*/: break;
    					case 'nocolumngrand' /*case 'NoColumnGrand'*/: break;
    					case 'norowgrand' /*case 'NoRowGrand'*/: break;
    					case 'blanklineafteritems' /*case 'BlankLineAfterItems'*/: break;
    					case 'hidden' /*case 'Hidden'*/: break;
    					case 'subtotal' /*case 'Subtotal'*/: break;
    					case 'basefield' /*case 'BaseField'*/: break;
    					case 'mapchilditems' /*case 'MapChildItems'*/: break;
    					case 'function' /*case 'Function'*/: break;
    					case 'refreshonfileopen' /*case 'RefreshOnFileOpen'*/: break;
    					case 'printsettitles' /*case 'PrintSetTitles'*/: break;
    					case 'mergelabels' /*case 'MergeLabels'*/: break;
    					case 'defaultversion' /*case 'DefaultVersion'*/: break;
    					case 'refreshname' /*case 'RefreshName'*/: break;
    					case 'refreshdate' /*case 'RefreshDate'*/: break;
    					case 'refreshdatecopy' /*case 'RefreshDateCopy'*/: break;
    					case 'versionlastrefresh' /*case 'VersionLastRefresh'*/: break;
    					case 'versionlastupdate' /*case 'VersionLastUpdate'*/: break;
    					case 'versionupdateablemin' /*case 'VersionUpdateableMin'*/: break;
    					case 'versionrefreshablemin' /*case 'VersionRefreshableMin'*/: break;
    					case 'calculation' /*case 'Calculation'*/: break;
    					default: seen = false;
    				} break;

    				/* PageBreaks */
    				case 'pagebreaks' /*case 'PageBreaks'*/: switch(Rn[3]) {
    					case 'colbreaks' /*case 'ColBreaks'*/: break;
    					case 'colbreak' /*case 'ColBreak'*/: break;
    					case 'rowbreaks' /*case 'RowBreaks'*/: break;
    					case 'rowbreak' /*case 'RowBreak'*/: break;
    					case 'colstart' /*case 'ColStart'*/: break;
    					case 'colend' /*case 'ColEnd'*/: break;
    					case 'rowend' /*case 'RowEnd'*/: break;
    					default: seen = false;
    				} break;

    				/* AutoFilter */
    				case 'autofilter' /*case 'AutoFilter'*/: switch(Rn[3]) {
    					case 'autofiltercolumn' /*case 'AutoFilterColumn'*/: break;
    					case 'autofiltercondition' /*case 'AutoFilterCondition'*/: break;
    					case 'autofilterand' /*case 'AutoFilterAnd'*/: break;
    					case 'autofilteror' /*case 'AutoFilterOr'*/: break;
    					default: seen = false;
    				} break;

    				/* QueryTable */
    				case 'querytable' /*case 'QueryTable'*/: switch(Rn[3]) {
    					case 'id' /*case 'Id'*/: break;
    					case 'autoformatfont' /*case 'AutoFormatFont'*/: break;
    					case 'autoformatpattern' /*case 'AutoFormatPattern'*/: break;
    					case 'querysource' /*case 'QuerySource'*/: break;
    					case 'querytype' /*case 'QueryType'*/: break;
    					case 'enableredirections' /*case 'EnableRedirections'*/: break;
    					case 'refreshedinxl9' /*case 'RefreshedInXl9'*/: break;
    					case 'urlstring' /*case 'URLString'*/: break;
    					case 'htmltables' /*case 'HTMLTables'*/: break;
    					case 'connection' /*case 'Connection'*/: break;
    					case 'commandtext' /*case 'CommandText'*/: break;
    					case 'refreshinfo' /*case 'RefreshInfo'*/: break;
    					case 'notitles' /*case 'NoTitles'*/: break;
    					case 'nextid' /*case 'NextId'*/: break;
    					case 'columninfo' /*case 'ColumnInfo'*/: break;
    					case 'overwritecells' /*case 'OverwriteCells'*/: break;
    					case 'donotpromptforfile' /*case 'DoNotPromptForFile'*/: break;
    					case 'textwizardsettings' /*case 'TextWizardSettings'*/: break;
    					case 'source' /*case 'Source'*/: break;
    					case 'number' /*case 'Number'*/: break;
    					case 'decimal' /*case 'Decimal'*/: break;
    					case 'thousandseparator' /*case 'ThousandSeparator'*/: break;
    					case 'trailingminusnumbers' /*case 'TrailingMinusNumbers'*/: break;
    					case 'formatsettings' /*case 'FormatSettings'*/: break;
    					case 'fieldtype' /*case 'FieldType'*/: break;
    					case 'delimiters' /*case 'Delimiters'*/: break;
    					case 'tab' /*case 'Tab'*/: break;
    					case 'comma' /*case 'Comma'*/: break;
    					case 'autoformatname' /*case 'AutoFormatName'*/: break;
    					case 'versionlastedit' /*case 'VersionLastEdit'*/: break;
    					case 'versionlastrefresh' /*case 'VersionLastRefresh'*/: break;
    					default: seen = false;
    				} break;

    				case 'datavalidation' /*case 'DataValidation'*/:
    				switch(Rn[3]) {
    					case 'range' /*case 'Range'*/: break;

    					case 'type' /*case 'Type'*/: break;
    					case 'min' /*case 'Min'*/: break;
    					case 'max' /*case 'Max'*/: break;
    					case 'sort' /*case 'Sort'*/: break;
    					case 'descending' /*case 'Descending'*/: break;
    					case 'order' /*case 'Order'*/: break;
    					case 'casesensitive' /*case 'CaseSensitive'*/: break;
    					case 'value' /*case 'Value'*/: break;
    					case 'errorstyle' /*case 'ErrorStyle'*/: break;
    					case 'errormessage' /*case 'ErrorMessage'*/: break;
    					case 'errortitle' /*case 'ErrorTitle'*/: break;
    					case 'inputmessage' /*case 'InputMessage'*/: break;
    					case 'inputtitle' /*case 'InputTitle'*/: break;
    					case 'combohide' /*case 'ComboHide'*/: break;
    					case 'inputhide' /*case 'InputHide'*/: break;
    					case 'condition' /*case 'Condition'*/: break;
    					case 'qualifier' /*case 'Qualifier'*/: break;
    					case 'useblank' /*case 'UseBlank'*/: break;
    					case 'value1' /*case 'Value1'*/: break;
    					case 'value2' /*case 'Value2'*/: break;
    					case 'format' /*case 'Format'*/: break;

    					case 'cellrangelist' /*case 'CellRangeList'*/: break;
    					default: seen = false;
    				} break;

    				case 'sorting' /*case 'Sorting'*/:
    				case 'conditionalformatting' /*case 'ConditionalFormatting'*/:
    				switch(Rn[3]) {
    					case 'range' /*case 'Range'*/: break;
    					case 'type' /*case 'Type'*/: break;
    					case 'min' /*case 'Min'*/: break;
    					case 'max' /*case 'Max'*/: break;
    					case 'sort' /*case 'Sort'*/: break;
    					case 'descending' /*case 'Descending'*/: break;
    					case 'order' /*case 'Order'*/: break;
    					case 'casesensitive' /*case 'CaseSensitive'*/: break;
    					case 'value' /*case 'Value'*/: break;
    					case 'errorstyle' /*case 'ErrorStyle'*/: break;
    					case 'errormessage' /*case 'ErrorMessage'*/: break;
    					case 'errortitle' /*case 'ErrorTitle'*/: break;
    					case 'cellrangelist' /*case 'CellRangeList'*/: break;
    					case 'inputmessage' /*case 'InputMessage'*/: break;
    					case 'inputtitle' /*case 'InputTitle'*/: break;
    					case 'combohide' /*case 'ComboHide'*/: break;
    					case 'inputhide' /*case 'InputHide'*/: break;
    					case 'condition' /*case 'Condition'*/: break;
    					case 'qualifier' /*case 'Qualifier'*/: break;
    					case 'useblank' /*case 'UseBlank'*/: break;
    					case 'value1' /*case 'Value1'*/: break;
    					case 'value2' /*case 'Value2'*/: break;
    					case 'format' /*case 'Format'*/: break;
    					default: seen = false;
    				} break;

    				/* MapInfo (schema) */
    				case 'mapinfo' /*case 'MapInfo'*/: case 'schema' /*case 'Schema'*/: case 'data' /*case 'data'*/: switch(Rn[3]) {
    					case 'map' /*case 'Map'*/: break;
    					case 'entry' /*case 'Entry'*/: break;
    					case 'range' /*case 'Range'*/: break;
    					case 'xpath' /*case 'XPath'*/: break;
    					case 'field' /*case 'Field'*/: break;
    					case 'xsdtype' /*case 'XSDType'*/: break;
    					case 'filteron' /*case 'FilterOn'*/: break;
    					case 'aggregate' /*case 'Aggregate'*/: break;
    					case 'elementtype' /*case 'ElementType'*/: break;
    					case 'attributetype' /*case 'AttributeType'*/: break;
    				/* These are from xsd (XML Schema Definition) */
    					case 'schema' /*case 'schema'*/:
    					case 'element' /*case 'element'*/:
    					case 'complextype' /*case 'complexType'*/:
    					case 'datatype' /*case 'datatype'*/:
    					case 'all' /*case 'all'*/:
    					case 'attribute' /*case 'attribute'*/:
    					case 'extends' /*case 'extends'*/: break;

    					case 'row' /*case 'row'*/: break;
    					default: seen = false;
    				} break;

    				/* SmartTags (can be anything) */
    				case 'smarttags' /*case 'SmartTags'*/: break;

    				default: seen = false; break;
    			}
    			if(seen) break;
    			/* CustomDocumentProperties */
    			if(Rn[3].match(/!\[CDATA/)) break;
    			if(!state[state.length-1][1]) throw 'Unrecognized tag: ' + Rn[3] + "|" + state.join("|");
    			if(state[state.length-1][0]===/*'CustomDocumentProperties'*/'customdocumentproperties') {
    				if(Rn[0].slice(-2) === "/>") break;
    				else if(Rn[1]==="/") xlml_set_custprop(Custprops, raw_Rn3, cp, str.slice(pidx, Rn.index));
    				else { cp = Rn; pidx = Rn.index + Rn[0].length; }
    				break;
    			}
    			if(opts.WTF) throw 'Unrecognized tag: ' + Rn[3] + "|" + state.join("|");
    	}
    	var out = ({}/*:any*/);
    	if(!opts.bookSheets && !opts.bookProps) out.Sheets = sheets;
    	out.SheetNames = sheetnames;
    	out.Workbook = Workbook;
    	out.SSF = dup(table_fmt);
    	out.Props = Props;
    	out.Custprops = Custprops;
    	return out;
    }

    function parse_xlml(data/*:RawBytes|string*/, opts)/*:Workbook*/ {
    	fix_read_opts(opts=opts||{});
    	switch(opts.type||"base64") {
    		case "base64": return parse_xlml_xml(Base64_decode(data), opts);
    		case "binary": case "buffer": case "file": return parse_xlml_xml(data, opts);
    		case "array": return parse_xlml_xml(a2s(data), opts);
    	}
    	/*:: throw new Error("unsupported type " + opts.type); */
    }
    /* [MS-OLEDS] 2.3.8 CompObjStream */
    function parse_compobj(obj/*:CFBEntry*/) {
    	var v = {};
    	var o = obj.content;
    	/*:: if(o == null) return; */

    	/* [MS-OLEDS] 2.3.7 CompObjHeader -- All fields MUST be ignored */
    	o.l = 28;

    	v.AnsiUserType = o.read_shift(0, "lpstr-ansi");
    	v.AnsiClipboardFormat = parse_ClipboardFormatOrAnsiString(o);

    	if(o.length - o.l <= 4) return v;

    	var m/*:number*/ = o.read_shift(4);
    	if(m == 0 || m > 40) return v;
    	o.l-=4; v.Reserved1 = o.read_shift(0, "lpstr-ansi");

    	if(o.length - o.l <= 4) return v;
    	m = o.read_shift(4);
    	if(m !== 0x71b239f4) return v;
    	v.UnicodeClipboardFormat = parse_ClipboardFormatOrUnicodeString(o);

    	m = o.read_shift(4);
    	if(m == 0 || m > 40) return v;
    	o.l-=4; v.Reserved2 = o.read_shift(0, "lpwstr");
    }

    /*
    	Continue logic for:
    	- 2.4.58 Continue          0x003c
    	- 2.4.59 ContinueBigName   0x043c
    	- 2.4.60 ContinueFrt       0x0812
    	- 2.4.61 ContinueFrt11     0x0875
    	- 2.4.62 ContinueFrt12     0x087f
    */
    var CONTINUE_RT = [ 0x003c, 0x043c, 0x0812, 0x0875, 0x087f ];
    function slurp(RecordType, R, blob, length/*:number*/, opts)/*:any*/ {
    	var l = length;
    	var bufs = [];
    	var d = blob.slice(blob.l,blob.l+l);
    	if(opts && opts.enc && opts.enc.insitu && d.length > 0) switch(RecordType) {
    	case 0x0009: case 0x0209: case 0x0409: case 0x0809/* BOF */: case 0x002f /* FilePass */: case 0x0195 /* FileLock */: case 0x00e1 /* InterfaceHdr */: case 0x0196 /* RRDInfo */: case 0x0138 /* RRDHead */: case 0x0194 /* UsrExcl */: case 0x000a /* EOF */:
    		break;
    	case 0x0085 /* BoundSheet8 */:
    		break;
    	default:
    		opts.enc.insitu(d);
    	}
    	bufs.push(d);
    	blob.l += l;
    	var nextrt = __readUInt16LE(blob,blob.l), next = XLSRecordEnum[nextrt];
    	var start = 0;
    	while(next != null && CONTINUE_RT.indexOf(nextrt) > -1) {
    		l = __readUInt16LE(blob,blob.l+2);
    		start = blob.l + 4;
    		if(nextrt == 0x0812 /* ContinueFrt */) start += 4;
    		else if(nextrt == 0x0875 || nextrt == 0x087f) {
    			start += 12;
    		}
    		d = blob.slice(start,blob.l+4+l);
    		bufs.push(d);
    		blob.l += 4+l;
    		next = (XLSRecordEnum[nextrt = __readUInt16LE(blob, blob.l)]);
    	}
    	var b = (bconcat(bufs)/*:any*/);
    	prep_blob(b, 0);
    	var ll = 0; b.lens = [];
    	for(var j = 0; j < bufs.length; ++j) { b.lens.push(ll); ll += bufs[j].length; }
    	if(b.length < length) throw "XLS Record 0x" + RecordType.toString(16) + " Truncated: " + b.length + " < " + length;
    	return R.f(b, b.length, opts);
    }

    function safe_format_xf(p/*:any*/, opts/*:ParseOpts*/, date1904/*:?boolean*/) {
    	if(p.t === 'z') return;
    	if(!p.XF) return;
    	var fmtid = 0;
    	try {
    		fmtid = p.z || p.XF.numFmtId || 0;
    		if(opts.cellNF) p.z = table_fmt[fmtid];
    	} catch(e) { if(opts.WTF) throw e; }
    	if(!opts || opts.cellText !== false) try {
    		if(p.t === 'e') { p.w = p.w || BErr[p.v]; }
    		else if(fmtid === 0 || fmtid == "General") {
    			if(p.t === 'n') {
    				if((p.v|0) === p.v) p.w = p.v.toString(10);
    				else p.w = SSF_general_num(p.v);
    			}
    			else p.w = SSF_general(p.v);
    		}
    		else p.w = SSF_format(fmtid,p.v, {date1904:!!date1904, dateNF: opts && opts.dateNF});
    	} catch(e) { if(opts.WTF) throw e; }
    	if(opts.cellDates && fmtid && p.t == 'n' && fmt_is_date(table_fmt[fmtid] || String(fmtid))) {
    		var _d = SSF_parse_date_code(p.v); if(_d) { p.t = 'd'; p.v = new Date(_d.y, _d.m-1,_d.d,_d.H,_d.M,_d.S,_d.u); }
    	}
    }

    function make_cell(val, ixfe, t)/*:Cell*/ {
    	return ({v:val, ixfe:ixfe, t:t}/*:any*/);
    }

    // 2.3.2
    function parse_workbook(blob, options/*:ParseOpts*/)/*:Workbook*/ {
    	var wb = ({opts:{}}/*:any*/);
    	var Sheets = {};
    	var out/*:Worksheet*/ = ((options.dense ? [] : {})/*:any*/);
    	var Directory = {};
    	var range/*:Range*/ = ({}/*:any*/);
    	var last_formula = null;
    	var sst/*:SST*/ = ([]/*:any*/);
    	var cur_sheet = "";
    	var Preamble = {};
    	var lastcell, last_cell = "", cc/*:Cell*/, cmnt, rngC, rngR;
    	var sharedf = {};
    	var arrayf/*:Array<[Range, string]>*/ = [];
    	var temp_val/*:Cell*/;
    	var country;
    	var XFs = []; /* XF records */
    	var palette/*:Array<[number, number, number]>*/ = [];
    	var Workbook/*:WBWBProps*/ = ({ Sheets:[], WBProps:{date1904:false}, Views:[{}] }/*:any*/), wsprops = {};
    	var get_rgb = function getrgb(icv/*:number*/)/*:[number, number, number]*/ {
    		if(icv < 8) return XLSIcv[icv];
    		if(icv < 64) return palette[icv-8] || XLSIcv[icv];
    		return XLSIcv[icv];
    	};
    	var process_cell_style = function pcs(cell, line/*:any*/, options) {
    		var xfd = line.XF.data;
    		if(!xfd || !xfd.patternType || !options || !options.cellStyles) return;
    		line.s = ({}/*:any*/);
    		line.s.patternType = xfd.patternType;
    		var t;
    		if((t = rgb2Hex(get_rgb(xfd.icvFore)))) { line.s.fgColor = {rgb:t}; }
    		if((t = rgb2Hex(get_rgb(xfd.icvBack)))) { line.s.bgColor = {rgb:t}; }
    	};
    	var addcell = function addcell(cell/*:any*/, line/*:any*/, options/*:any*/) {
    		if(file_depth > 1) return;
    		if(options.sheetRows && cell.r >= options.sheetRows) return;
    		if(options.cellStyles && line.XF && line.XF.data) process_cell_style(cell, line, options);
    		delete line.ixfe; delete line.XF;
    		lastcell = cell;
    		last_cell = encode_cell(cell);
    		if(!range || !range.s || !range.e) range = {s:{r:0,c:0},e:{r:0,c:0}};
    		if(cell.r < range.s.r) range.s.r = cell.r;
    		if(cell.c < range.s.c) range.s.c = cell.c;
    		if(cell.r + 1 > range.e.r) range.e.r = cell.r + 1;
    		if(cell.c + 1 > range.e.c) range.e.c = cell.c + 1;
    		if(options.cellFormula && line.f) {
    			for(var afi = 0; afi < arrayf.length; ++afi) {
    				if(arrayf[afi][0].s.c > cell.c || arrayf[afi][0].s.r > cell.r) continue;
    				if(arrayf[afi][0].e.c < cell.c || arrayf[afi][0].e.r < cell.r) continue;
    				line.F = encode_range(arrayf[afi][0]);
    				if(arrayf[afi][0].s.c != cell.c || arrayf[afi][0].s.r != cell.r) delete line.f;
    				if(line.f) line.f = "" + stringify_formula(arrayf[afi][1], range, cell, supbooks, opts);
    				break;
    			}
    		}
    		{
    			if(options.dense) {
    				if(!out[cell.r]) out[cell.r] = [];
    				out[cell.r][cell.c] = line;
    			} else out[last_cell] = line;
    		}
    	};
    	var opts = ({
    		enc: false, // encrypted
    		sbcch: 0, // cch in the preceding SupBook
    		snames: [], // sheetnames
    		sharedf: sharedf, // shared formulae by address
    		arrayf: arrayf, // array formulae array
    		rrtabid: [], // RRTabId
    		lastuser: "", // Last User from WriteAccess
    		biff: 8, // BIFF version
    		codepage: 0, // CP from CodePage record
    		winlocked: 0, // fLockWn from WinProtect
    		cellStyles: !!options && !!options.cellStyles,
    		WTF: !!options && !!options.wtf
    	}/*:any*/);
    	if(options.password) opts.password = options.password;
    	var themes;
    	var merges/*:Array<Range>*/ = [];
    	var objects = [];
    	var colinfo/*:Array<ColInfo>*/ = [], rowinfo/*:Array<RowInfo>*/ = [];
    	var seencol = false;
    	var supbooks = ([]/*:any*/); // 1-indexed, will hold extern names
    	supbooks.SheetNames = opts.snames;
    	supbooks.sharedf = opts.sharedf;
    	supbooks.arrayf = opts.arrayf;
    	supbooks.names = [];
    	supbooks.XTI = [];
    	var last_RT = 0;
    	var file_depth = 0; /* TODO: make a real stack */
    	var BIFF2Fmt = 0, BIFF2FmtTable/*:Array<string>*/ = [];
    	var FilterDatabases = []; /* TODO: sort out supbooks and process elsewhere */
    	var last_lbl/*:?DefinedName*/;

    	/* explicit override for some broken writers */
    	opts.codepage = 1200;
    	set_cp(1200);
    	var seen_codepage = false;
    	while(blob.l < blob.length - 1) {
    		var s = blob.l;
    		var RecordType = blob.read_shift(2);
    		if(RecordType === 0 && last_RT === 0x000a /* EOF */) break;
    		var length = (blob.l === blob.length ? 0 : blob.read_shift(2));
    		var R = XLSRecordEnum[RecordType];
    		//console.log(RecordType.toString(16), RecordType, R, blob.l, length, blob.length);
    		//if(!R) console.log(blob.slice(blob.l, blob.l + length));
    		if(R && R.f) {
    			if(options.bookSheets) {
    				if(last_RT === 0x0085 /* BoundSheet8 */ && RecordType !== 0x0085 /* R.n !== 'BoundSheet8' */) break;
    			}
    			last_RT = RecordType;
    			if(R.r === 2 || R.r == 12) {
    				var rt = blob.read_shift(2); length -= 2;
    				if(!opts.enc && rt !== RecordType && (((rt&0xFF)<<8)|(rt>>8)) !== RecordType) throw new Error("rt mismatch: " + rt + "!=" + RecordType);
    				if(R.r == 12){
    					blob.l += 10; length -= 10;
    				} // skip FRT
    			}
    			//console.error(R,blob.l,length,blob.length);
    			var val/*:any*/ = ({}/*:any*/);
    			if(RecordType === 0x000a /* EOF */) val = /*::(*/R.f(blob, length, opts)/*:: :any)*/;
    			else val = /*::(*/slurp(RecordType, R, blob, length, opts)/*:: :any)*/;
    			/*:: val = (val:any); */
    			if(file_depth == 0 && [0x0009, 0x0209, 0x0409, 0x0809].indexOf(last_RT) === -1 /* 'BOF' */) continue;
    			switch(RecordType) {
    				case 0x0022 /* Date1904 */:
    					/*:: if(!Workbook.WBProps) Workbook.WBProps = {}; */
    					wb.opts.Date1904 = Workbook.WBProps.date1904 = val; break;
    				case 0x0086 /* WriteProtect */: wb.opts.WriteProtect = true; break;
    				case 0x002f /* FilePass */:
    					if(!opts.enc) blob.l = 0;
    					opts.enc = val;
    					if(!options.password) throw new Error("File is password-protected");
    					if(val.valid == null) throw new Error("Encryption scheme unsupported");
    					if(!val.valid) throw new Error("Password is incorrect");
    					break;
    				case 0x005c /* WriteAccess */: opts.lastuser = val; break;
    				case 0x0042 /* CodePage */:
    					var cpval = Number(val);
    					/* overrides based on test cases */
    					switch(cpval) {
    						case 0x5212: cpval =  1200; break;
    						case 0x8000: cpval = 10000; break;
    						case 0x8001: cpval =  1252; break;
    					}
    					set_cp(opts.codepage = cpval);
    					seen_codepage = true;
    					break;
    				case 0x013d /* RRTabId */: opts.rrtabid = val; break;
    				case 0x0019 /* WinProtect */: opts.winlocked = val; break;
    				case 0x01b7 /* RefreshAll */: wb.opts["RefreshAll"] = val; break;
    				case 0x000c /* CalcCount */: wb.opts["CalcCount"] = val; break;
    				case 0x0010 /* CalcDelta */: wb.opts["CalcDelta"] = val; break;
    				case 0x0011 /* CalcIter */: wb.opts["CalcIter"] = val; break;
    				case 0x000d /* CalcMode */: wb.opts["CalcMode"] = val; break;
    				case 0x000e /* CalcPrecision */: wb.opts["CalcPrecision"] = val; break;
    				case 0x005f /* CalcSaveRecalc */: wb.opts["CalcSaveRecalc"] = val; break;
    				case 0x000f /* CalcRefMode */: opts.CalcRefMode = val; break; // TODO: implement R1C1
    				case 0x08a3 /* ForceFullCalculation */: wb.opts.FullCalc = val; break;
    				case 0x0081 /* WsBool */:
    					if(val.fDialog) out["!type"] = "dialog";
    					if(!val.fBelow) (out["!outline"] || (out["!outline"] = {})).above = true;
    					if(!val.fRight) (out["!outline"] || (out["!outline"] = {})).left = true;
    					break; // TODO
    				case 0x00e0 /* XF */:
    					XFs.push(val); break;
    				case 0x01ae /* SupBook */:
    					supbooks.push([val]);
    					supbooks[supbooks.length-1].XTI = [];
    					break;
    				case 0x0023: case 0x0223 /* ExternName */:
    					supbooks[supbooks.length-1].push(val);
    					break;
    				case 0x0018: case 0x0218 /* Lbl */:
    					last_lbl = ({
    						Name: val.Name,
    						Ref: stringify_formula(val.rgce,range,null,supbooks,opts)
    					}/*:DefinedName*/);
    					if(val.itab > 0) last_lbl.Sheet = val.itab - 1;
    					supbooks.names.push(last_lbl);
    					if(!supbooks[0]) { supbooks[0] = []; supbooks[0].XTI = []; }
    					supbooks[supbooks.length-1].push(val);
    					if(val.Name == "_xlnm._FilterDatabase" && val.itab > 0)
    						if(val.rgce && val.rgce[0] && val.rgce[0][0] && val.rgce[0][0][0] == 'PtgArea3d')
    							FilterDatabases[val.itab - 1] = { ref: encode_range(val.rgce[0][0][1][2]) };
    					break;
    				case 0x0016 /* ExternCount */: opts.ExternCount = val; break;
    				case 0x0017 /* ExternSheet */:
    					if(supbooks.length == 0) { supbooks[0] = []; supbooks[0].XTI = []; }
    					supbooks[supbooks.length - 1].XTI = supbooks[supbooks.length - 1].XTI.concat(val); supbooks.XTI = supbooks.XTI.concat(val); break;
    				case 0x0894 /* NameCmt */:
    					/* TODO: search for correct name */
    					if(opts.biff < 8) break;
    					if(last_lbl != null) last_lbl.Comment = val[1];
    					break;
    				case 0x0012 /* Protect */: out["!protect"] = val; break; /* for sheet or book */
    				case 0x0013 /* Password */: if(val !== 0 && opts.WTF) console.error("Password verifier: " + val); break;
    				case 0x0085 /* BoundSheet8 */: {
    					Directory[val.pos] = val;
    					opts.snames.push(val.name);
    				} break;
    				case 0x000a /* EOF */: {
    					if(--file_depth) break;
    					if(range.e) {
    						if(range.e.r > 0 && range.e.c > 0) {
    							range.e.r--; range.e.c--;
    							out["!ref"] = encode_range(range);
    							if(options.sheetRows && options.sheetRows <= range.e.r) {
    								var tmpri = range.e.r;
    								range.e.r = options.sheetRows - 1;
    								out["!fullref"] = out["!ref"];
    								out["!ref"] = encode_range(range);
    								range.e.r = tmpri;
    							}
    							range.e.r++; range.e.c++;
    						}
    						if(merges.length > 0) out["!merges"] = merges;
    						if(objects.length > 0) out["!objects"] = objects;
    						if(colinfo.length > 0) out["!cols"] = colinfo;
    						if(rowinfo.length > 0) out["!rows"] = rowinfo;
    						Workbook.Sheets.push(wsprops);
    					}
    					if(cur_sheet === "") Preamble = out; else Sheets[cur_sheet] = out;
    					out = ((options.dense ? [] : {})/*:any*/);
    				} break;
    				case 0x0009: case 0x0209: case 0x0409: case 0x0809 /* BOF */: {
    					if(opts.biff === 8) opts.biff = {
    						/*::[*/0x0009/*::]*/:2,
    						/*::[*/0x0209/*::]*/:3,
    						/*::[*/0x0409/*::]*/:4
    					}[RecordType] || {
    						/*::[*/0x0200/*::]*/:2,
    						/*::[*/0x0300/*::]*/:3,
    						/*::[*/0x0400/*::]*/:4,
    						/*::[*/0x0500/*::]*/:5,
    						/*::[*/0x0600/*::]*/:8,
    						/*::[*/0x0002/*::]*/:2,
    						/*::[*/0x0007/*::]*/:2
    					}[val.BIFFVer] || 8;
    					opts.biffguess = val.BIFFVer == 0;
    					if(val.BIFFVer == 0 && val.dt == 0x1000) { opts.biff = 5; seen_codepage = true; set_cp(opts.codepage = 28591); }
    					if(opts.biff == 8 && val.BIFFVer == 0 && val.dt == 16) opts.biff = 2;
    					if(file_depth++) break;
    					out = ((options.dense ? [] : {})/*:any*/);

    					if(opts.biff < 8 && !seen_codepage) { seen_codepage = true; set_cp(opts.codepage = options.codepage || 1252); }

    					if(opts.biff < 5 || val.BIFFVer == 0 && val.dt == 0x1000) {
    						if(cur_sheet === "") cur_sheet = "Sheet1";
    						range = {s:{r:0,c:0},e:{r:0,c:0}};
    						/* fake BoundSheet8 */
    						var fakebs8 = {pos: blob.l - length, name:cur_sheet};
    						Directory[fakebs8.pos] = fakebs8;
    						opts.snames.push(cur_sheet);
    					}
    					else cur_sheet = (Directory[s] || {name:""}).name;
    					if(val.dt == 0x20) out["!type"] = "chart";
    					if(val.dt == 0x40) out["!type"] = "macro";
    					merges = [];
    					objects = [];
    					opts.arrayf = arrayf = [];
    					colinfo = []; rowinfo = [];
    					seencol = false;
    					wsprops = {Hidden:(Directory[s]||{hs:0}).hs, name:cur_sheet };
    				} break;
    				case 0x0203 /* Number */: case 0x0003 /* BIFF2NUM */: case 0x0002 /* BIFF2INT */: {
    					if(out["!type"] == "chart") if(options.dense ? (out[val.r]||[])[val.c]: out[encode_cell({c:val.c, r:val.r})]) ++val.c;
    					temp_val = ({ixfe: val.ixfe, XF: XFs[val.ixfe]||{}, v:val.val, t:'n'}/*:any*/);
    					if(BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[(temp_val.ixfe>>8) & 0x3F];
    					safe_format_xf(temp_val, options, wb.opts.Date1904);
    					addcell({c:val.c, r:val.r}, temp_val, options);
    				} break;
    				case 0x0005: case 0x0205 /* BoolErr */: {
    					temp_val = ({ixfe: val.ixfe, XF: XFs[val.ixfe], v:val.val, t:val.t}/*:any*/);
    					if(BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[(temp_val.ixfe>>8) & 0x3F];
    					safe_format_xf(temp_val, options, wb.opts.Date1904);
    					addcell({c:val.c, r:val.r}, temp_val, options);
    				} break;
    				case 0x027e /* RK */: {
    					temp_val = ({ixfe: val.ixfe, XF: XFs[val.ixfe], v:val.rknum, t:'n'}/*:any*/);
    					if(BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[(temp_val.ixfe>>8) & 0x3F];
    					safe_format_xf(temp_val, options, wb.opts.Date1904);
    					addcell({c:val.c, r:val.r}, temp_val, options);
    				} break;
    				case 0x00bd /* MulRk */: {
    					for(var j = val.c; j <= val.C; ++j) {
    						var ixfe = val.rkrec[j-val.c][0];
    						temp_val= ({ixfe:ixfe, XF:XFs[ixfe], v:val.rkrec[j-val.c][1], t:'n'}/*:any*/);
    						if(BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[(temp_val.ixfe>>8) & 0x3F];
    						safe_format_xf(temp_val, options, wb.opts.Date1904);
    						addcell({c:j, r:val.r}, temp_val, options);
    					}
    				} break;
    				case 0x0006: case 0x0206: case 0x0406 /* Formula */: {
    					if(val.val == 'String') { last_formula = val; break; }
    					temp_val = make_cell(val.val, val.cell.ixfe, val.tt);
    					temp_val.XF = XFs[temp_val.ixfe];
    					if(options.cellFormula) {
    						var _f = val.formula;
    						if(_f && _f[0] && _f[0][0] && _f[0][0][0] == 'PtgExp') {
    							var _fr = _f[0][0][1][0], _fc = _f[0][0][1][1];
    							var _fe = encode_cell({r:_fr, c:_fc});
    							if(sharedf[_fe]) temp_val.f = ""+stringify_formula(val.formula,range,val.cell,supbooks, opts);
    							else temp_val.F = ((options.dense ? (out[_fr]||[])[_fc]: out[_fe]) || {}).F;
    						} else temp_val.f = ""+stringify_formula(val.formula,range,val.cell,supbooks, opts);
    					}
    					if(BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[(temp_val.ixfe>>8) & 0x3F];
    					safe_format_xf(temp_val, options, wb.opts.Date1904);
    					addcell(val.cell, temp_val, options);
    					last_formula = val;
    				} break;
    				case 0x0007: case 0x0207 /* String */: {
    					if(last_formula) { /* technically always true */
    						last_formula.val = val;
    						temp_val = make_cell(val, last_formula.cell.ixfe, 's');
    						temp_val.XF = XFs[temp_val.ixfe];
    						if(options.cellFormula) {
    							temp_val.f = ""+stringify_formula(last_formula.formula, range, last_formula.cell, supbooks, opts);
    						}
    						if(BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[(temp_val.ixfe>>8) & 0x3F];
    						safe_format_xf(temp_val, options, wb.opts.Date1904);
    						addcell(last_formula.cell, temp_val, options);
    						last_formula = null;
    					} else throw new Error("String record expects Formula");
    				} break;
    				case 0x0021: case 0x0221 /* Array */: {
    					arrayf.push(val);
    					var _arraystart = encode_cell(val[0].s);
    					cc = options.dense ? (out[val[0].s.r]||[])[val[0].s.c] : out[_arraystart];
    					if(options.cellFormula && cc) {
    						if(!last_formula) break; /* technically unreachable */
    						if(!_arraystart || !cc) break;
    						cc.f = ""+stringify_formula(val[1], range, val[0], supbooks, opts);
    						cc.F = encode_range(val[0]);
    					}
    				} break;
    				case 0x04bc /* ShrFmla */: {
    					if(!options.cellFormula) break;
    					if(last_cell) {
    						/* TODO: capture range */
    						if(!last_formula) break; /* technically unreachable */
    						sharedf[encode_cell(last_formula.cell)]= val[0];
    						cc = options.dense ? (out[last_formula.cell.r]||[])[last_formula.cell.c] : out[encode_cell(last_formula.cell)];
    						(cc||{}).f = ""+stringify_formula(val[0], range, lastcell, supbooks, opts);
    					}
    				} break;
    				case 0x00fd /* LabelSst */:
    					temp_val=make_cell(sst[val.isst].t, val.ixfe, 's');
    					if(sst[val.isst].h) temp_val.h = sst[val.isst].h;
    					temp_val.XF = XFs[temp_val.ixfe];
    					if(BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[(temp_val.ixfe>>8) & 0x3F];
    					safe_format_xf(temp_val, options, wb.opts.Date1904);
    					addcell({c:val.c, r:val.r}, temp_val, options);
    					break;
    				case 0x0201 /* Blank */: if(options.sheetStubs) {
    					temp_val = ({ixfe: val.ixfe, XF: XFs[val.ixfe], t:'z'}/*:any*/);
    					if(BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[(temp_val.ixfe>>8) & 0x3F];
    					safe_format_xf(temp_val, options, wb.opts.Date1904);
    					addcell({c:val.c, r:val.r}, temp_val, options);
    				} break;
    				case 0x00be /* MulBlank */: if(options.sheetStubs) {
    					for(var _j = val.c; _j <= val.C; ++_j) {
    						var _ixfe = val.ixfe[_j-val.c];
    						temp_val= ({ixfe:_ixfe, XF:XFs[_ixfe], t:'z'}/*:any*/);
    						if(BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[(temp_val.ixfe>>8) & 0x3F];
    						safe_format_xf(temp_val, options, wb.opts.Date1904);
    						addcell({c:_j, r:val.r}, temp_val, options);
    					}
    				} break;
    				case 0x00d6 /* RString */:
    				case 0x0204 /* Label */: case 0x0004 /* BIFF2STR */:
    					temp_val=make_cell(val.val, val.ixfe, 's');
    					temp_val.XF = XFs[temp_val.ixfe];
    					if(BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[(temp_val.ixfe>>8) & 0x3F];
    					safe_format_xf(temp_val, options, wb.opts.Date1904);
    					addcell({c:val.c, r:val.r}, temp_val, options);
    					break;

    				case 0x0000: case 0x0200 /* Dimensions */: {
    					if(file_depth === 1) range = val; /* TODO: stack */
    				} break;
    				case 0x00fc /* SST */: {
    					sst = val;
    				} break;
    				case 0x041e /* Format */: { /* val = [id, fmt] */
    					if(opts.biff == 4) {
    						BIFF2FmtTable[BIFF2Fmt++] = val[1];
    						for(var b4idx = 0; b4idx < BIFF2Fmt + 163; ++b4idx) if(table_fmt[b4idx] == val[1]) break;
    						if(b4idx >= 163) SSF_load(val[1], BIFF2Fmt + 163);
    					}
    					else SSF_load(val[1], val[0]);
    				} break;
    				case 0x001e /* BIFF2FORMAT */: {
    					BIFF2FmtTable[BIFF2Fmt++] = val;
    					for(var b2idx = 0; b2idx < BIFF2Fmt + 163; ++b2idx) if(table_fmt[b2idx] == val) break;
    					if(b2idx >= 163) SSF_load(val, BIFF2Fmt + 163);
    				} break;

    				case 0x00e5 /* MergeCells */: merges = merges.concat(val); break;

    				case 0x005d /* Obj */: objects[val.cmo[0]] = opts.lastobj = val; break;
    				case 0x01b6 /* TxO */: opts.lastobj.TxO = val; break;
    				case 0x007f /* ImData */: opts.lastobj.ImData = val; break;

    				case 0x01b8 /* HLink */: {
    					for(rngR = val[0].s.r; rngR <= val[0].e.r; ++rngR)
    						for(rngC = val[0].s.c; rngC <= val[0].e.c; ++rngC) {
    							cc = options.dense ? (out[rngR]||[])[rngC] : out[encode_cell({c:rngC,r:rngR})];
    							if(cc) cc.l = val[1];
    						}
    				} break;
    				case 0x0800 /* HLinkTooltip */: {
    					for(rngR = val[0].s.r; rngR <= val[0].e.r; ++rngR)
    						for(rngC = val[0].s.c; rngC <= val[0].e.c; ++rngC) {
    							cc = options.dense ? (out[rngR]||[])[rngC] : out[encode_cell({c:rngC,r:rngR})];
    							if(cc && cc.l) cc.l.Tooltip = val[1];
    							}
    				} break;
    				case 0x001c /* Note */: {
    					if(opts.biff <= 5 && opts.biff >= 2) break; /* TODO: BIFF5 */
    					cc = options.dense ? (out[val[0].r]||[])[val[0].c] : out[encode_cell(val[0])];
    					var noteobj = objects[val[2]];
    					if(!cc) {
    						if(options.dense) {
    							if(!out[val[0].r]) out[val[0].r] = [];
    							cc = out[val[0].r][val[0].c] = ({t:"z"}/*:any*/);
    						} else {
    							cc = out[encode_cell(val[0])] = ({t:"z"}/*:any*/);
    						}
    						range.e.r = Math.max(range.e.r, val[0].r);
    						range.s.r = Math.min(range.s.r, val[0].r);
    						range.e.c = Math.max(range.e.c, val[0].c);
    						range.s.c = Math.min(range.s.c, val[0].c);
    					}
    					if(!cc.c) cc.c = [];
    					cmnt = {a:val[1],t:noteobj.TxO.t};
    					cc.c.push(cmnt);
    				} break;
    				case 0x087d /* XFExt */: update_xfext(XFs[val.ixfe], val.ext); break;
    				case 0x007d /* ColInfo */: {
    					if(!opts.cellStyles) break;
    					while(val.e >= val.s) {
    						colinfo[val.e--] = { width: val.w/256, level: (val.level || 0), hidden: !!(val.flags & 1) };
    						if(!seencol) { seencol = true; find_mdw_colw(val.w/256); }
    						process_col(colinfo[val.e+1]);
    					}
    				} break;
    				case 0x0208 /* Row */: {
    					var rowobj = {};
    					if(val.level != null) { rowinfo[val.r] = rowobj; rowobj.level = val.level; }
    					if(val.hidden) { rowinfo[val.r] = rowobj; rowobj.hidden = true; }
    					if(val.hpt) {
    						rowinfo[val.r] = rowobj;
    						rowobj.hpt = val.hpt; rowobj.hpx = pt2px(val.hpt);
    					}
    				} break;
    				case 0x0026 /* LeftMargin */:
    				case 0x0027 /* RightMargin */:
    				case 0x0028 /* TopMargin */:
    				case 0x0029 /* BottomMargin */:
    					if(!out['!margins']) default_margins(out['!margins'] = {});
    					out['!margins'][({0x26: "left", 0x27:"right", 0x28:"top", 0x29:"bottom"})[RecordType]] = val;
    					break;
    				case 0x00a1 /* Setup */: // TODO
    					if(!out['!margins']) default_margins(out['!margins'] = {});
    					out['!margins'].header = val.header;
    					out['!margins'].footer = val.footer;
    					break;
    				case 0x023e /* Window2 */: // TODO
    					// $FlowIgnore
    					if(val.RTL) Workbook.Views[0].RTL = true;
    					break;
    				case 0x0092 /* Palette */: palette = val; break;
    				case 0x0896 /* Theme */: themes = val; break;
    				case 0x008c /* Country */: country = val; break;
    				case 0x01ba /* CodeName */: {
    					/*:: if(!Workbook.WBProps) Workbook.WBProps = {}; */
    					if(!cur_sheet) Workbook.WBProps.CodeName = val || "ThisWorkbook";
    					else wsprops.CodeName = val || wsprops.name;
    				} break;
    			}
    		} else {
    			if(!R) console.error("Missing Info for XLS Record 0x" + RecordType.toString(16));
    			blob.l += length;
    		}
    	}
    	wb.SheetNames=keys(Directory).sort(function(a,b) { return Number(a) - Number(b); }).map(function(x){return Directory[x].name;});
    	if(!options.bookSheets) wb.Sheets=Sheets;
    	if(!wb.SheetNames.length && Preamble["!ref"]) {
    		wb.SheetNames.push("Sheet1");
    		/*jshint -W069 */
    		if(wb.Sheets) wb.Sheets["Sheet1"] = Preamble;
    		/*jshint +W069 */
    	} else wb.Preamble=Preamble;
    	if(wb.Sheets) FilterDatabases.forEach(function(r,i) { wb.Sheets[wb.SheetNames[i]]['!autofilter'] = r; });
    	wb.Strings = sst;
    	wb.SSF = dup(table_fmt);
    	if(opts.enc) wb.Encryption = opts.enc;
    	if(themes) wb.Themes = themes;
    	wb.Metadata = {};
    	if(country !== undefined) wb.Metadata.Country = country;
    	if(supbooks.names.length > 0) Workbook.Names = supbooks.names;
    	wb.Workbook = Workbook;
    	return wb;
    }

    /* TODO: split props*/
    var PSCLSID = {
    	SI: "e0859ff2f94f6810ab9108002b27b3d9",
    	DSI: "02d5cdd59c2e1b10939708002b2cf9ae",
    	UDI: "05d5cdd59c2e1b10939708002b2cf9ae"
    };
    function parse_xls_props(cfb/*:CFBContainer*/, props, o) {
    	/* [MS-OSHARED] 2.3.3.2.2 Document Summary Information Property Set */
    	var DSI = CFB.find(cfb, '/!DocumentSummaryInformation');
    	if(DSI && DSI.size > 0) try {
    		var DocSummary = parse_PropertySetStream(DSI, DocSummaryPIDDSI, PSCLSID.DSI);
    		for(var d in DocSummary) props[d] = DocSummary[d];
    	} catch(e) {if(o.WTF) throw e;/* empty */}

    	/* [MS-OSHARED] 2.3.3.2.1 Summary Information Property Set*/
    	var SI = CFB.find(cfb, '/!SummaryInformation');
    	if(SI && SI.size > 0) try {
    		var Summary = parse_PropertySetStream(SI, SummaryPIDSI, PSCLSID.SI);
    		for(var s in Summary) if(props[s] == null) props[s] = Summary[s];
    	} catch(e) {if(o.WTF) throw e;/* empty */}

    	if(props.HeadingPairs && props.TitlesOfParts) {
    		load_props_pairs(props.HeadingPairs, props.TitlesOfParts, props, o);
    		delete props.HeadingPairs; delete props.TitlesOfParts;
    	}
    }

    function parse_xlscfb(cfb/*:any*/, options/*:?ParseOpts*/)/*:Workbook*/ {
    if(!options) options = {};
    fix_read_opts(options);
    reset_cp();
    if(options.codepage) set_ansi(options.codepage);
    var CompObj/*:?CFBEntry*/, WB/*:?any*/;
    if(cfb.FullPaths) {
    	if(CFB.find(cfb, '/encryption')) throw new Error("File is password-protected");
    	CompObj = CFB.find(cfb, '!CompObj');
    	WB = CFB.find(cfb, '/Workbook') || CFB.find(cfb, '/Book');
    } else {
    	switch(options.type) {
    		case 'base64': cfb = s2a(Base64_decode(cfb)); break;
    		case 'binary': cfb = s2a(cfb); break;
    		case 'buffer': break;
    		case 'array': if(!Array.isArray(cfb)) cfb = Array.prototype.slice.call(cfb); break;
    	}
    	prep_blob(cfb, 0);
    	WB = ({content: cfb}/*:any*/);
    }
    var /*::CompObjP, */WorkbookP/*:: :Workbook = XLSX.utils.book_new(); */;

    var _data/*:?any*/;
    if(CompObj) /*::CompObjP = */parse_compobj(CompObj);
    if(options.bookProps && !options.bookSheets) WorkbookP = ({}/*:any*/);
    else/*:: if(cfb instanceof CFBContainer) */ {
    	var T = has_buf ? 'buffer' : 'array';
    	if(WB && WB.content) WorkbookP = parse_workbook(WB.content, options);
    	/* Quattro Pro 7-8 */
    	else if((_data=CFB.find(cfb, 'PerfectOffice_MAIN')) && _data.content) WorkbookP = WK_.to_workbook(_data.content, (options.type = T, options));
    	/* Quattro Pro 9 */
    	else if((_data=CFB.find(cfb, 'NativeContent_MAIN')) && _data.content) WorkbookP = WK_.to_workbook(_data.content, (options.type = T, options));
    	/* Works 4 for Mac */
    	else if((_data=CFB.find(cfb, 'MN0')) && _data.content) throw new Error("Unsupported Works 4 for Mac file");
    	else throw new Error("Cannot find Workbook stream");
    	if(options.bookVBA && cfb.FullPaths && CFB.find(cfb, '/_VBA_PROJECT_CUR/VBA/dir')) WorkbookP.vbaraw = make_vba_xls(cfb);
    }

    var props = {};
    if(cfb.FullPaths) parse_xls_props(/*::((*/cfb/*:: :any):CFBContainer)*/, props, options);

    WorkbookP.Props = WorkbookP.Custprops = props; /* TODO: split up properties */
    if(options.bookFiles) WorkbookP.cfb = cfb;
    /*WorkbookP.CompObjP = CompObjP; // TODO: storage? */
    return WorkbookP;
    }
    /* [MS-XLSB] 2.3 Record Enumeration */
    var XLSBRecordEnum = {
    	/*::[*/0x0000/*::]*/: { /* n:"BrtRowHdr", */ f:parse_BrtRowHdr },
    	/*::[*/0x0001/*::]*/: { /* n:"BrtCellBlank", */ f:parse_BrtCellBlank },
    	/*::[*/0x0002/*::]*/: { /* n:"BrtCellRk", */ f:parse_BrtCellRk },
    	/*::[*/0x0003/*::]*/: { /* n:"BrtCellError", */ f:parse_BrtCellError },
    	/*::[*/0x0004/*::]*/: { /* n:"BrtCellBool", */ f:parse_BrtCellBool },
    	/*::[*/0x0005/*::]*/: { /* n:"BrtCellReal", */ f:parse_BrtCellReal },
    	/*::[*/0x0006/*::]*/: { /* n:"BrtCellSt", */ f:parse_BrtCellSt },
    	/*::[*/0x0007/*::]*/: { /* n:"BrtCellIsst", */ f:parse_BrtCellIsst },
    	/*::[*/0x0008/*::]*/: { /* n:"BrtFmlaString", */ f:parse_BrtFmlaString },
    	/*::[*/0x0009/*::]*/: { /* n:"BrtFmlaNum", */ f:parse_BrtFmlaNum },
    	/*::[*/0x000A/*::]*/: { /* n:"BrtFmlaBool", */ f:parse_BrtFmlaBool },
    	/*::[*/0x000B/*::]*/: { /* n:"BrtFmlaError", */ f:parse_BrtFmlaError },
    	/*::[*/0x000C/*::]*/: { /* n:"BrtShortBlank", */ f:parse_BrtShortBlank },
    	/*::[*/0x000D/*::]*/: { /* n:"BrtShortRk", */ f:parse_BrtShortRk },
    	/*::[*/0x000E/*::]*/: { /* n:"BrtShortError", */ f:parse_BrtShortError },
    	/*::[*/0x000F/*::]*/: { /* n:"BrtShortBool", */ f:parse_BrtShortBool },
    	/*::[*/0x0010/*::]*/: { /* n:"BrtShortReal", */ f:parse_BrtShortReal },
    	/*::[*/0x0011/*::]*/: { /* n:"BrtShortSt", */ f:parse_BrtShortSt },
    	/*::[*/0x0012/*::]*/: { /* n:"BrtShortIsst", */ f:parse_BrtShortIsst },
    	/*::[*/0x0013/*::]*/: { /* n:"BrtSSTItem", */ f:parse_RichStr },
    	/*::[*/0x0014/*::]*/: { /* n:"BrtPCDIMissing" */ },
    	/*::[*/0x0015/*::]*/: { /* n:"BrtPCDINumber" */ },
    	/*::[*/0x0016/*::]*/: { /* n:"BrtPCDIBoolean" */ },
    	/*::[*/0x0017/*::]*/: { /* n:"BrtPCDIError" */ },
    	/*::[*/0x0018/*::]*/: { /* n:"BrtPCDIString" */ },
    	/*::[*/0x0019/*::]*/: { /* n:"BrtPCDIDatetime" */ },
    	/*::[*/0x001A/*::]*/: { /* n:"BrtPCDIIndex" */ },
    	/*::[*/0x001B/*::]*/: { /* n:"BrtPCDIAMissing" */ },
    	/*::[*/0x001C/*::]*/: { /* n:"BrtPCDIANumber" */ },
    	/*::[*/0x001D/*::]*/: { /* n:"BrtPCDIABoolean" */ },
    	/*::[*/0x001E/*::]*/: { /* n:"BrtPCDIAError" */ },
    	/*::[*/0x001F/*::]*/: { /* n:"BrtPCDIAString" */ },
    	/*::[*/0x0020/*::]*/: { /* n:"BrtPCDIADatetime" */ },
    	/*::[*/0x0021/*::]*/: { /* n:"BrtPCRRecord" */ },
    	/*::[*/0x0022/*::]*/: { /* n:"BrtPCRRecordDt" */ },
    	/*::[*/0x0023/*::]*/: { /* n:"BrtFRTBegin", */ T:1 },
    	/*::[*/0x0024/*::]*/: { /* n:"BrtFRTEnd", */ T:-1 },
    	/*::[*/0x0025/*::]*/: { /* n:"BrtACBegin", */ T:1 },
    	/*::[*/0x0026/*::]*/: { /* n:"BrtACEnd", */ T:-1 },
    	/*::[*/0x0027/*::]*/: { /* n:"BrtName", */ f:parse_BrtName },
    	/*::[*/0x0028/*::]*/: { /* n:"BrtIndexRowBlock" */ },
    	/*::[*/0x002A/*::]*/: { /* n:"BrtIndexBlock" */ },
    	/*::[*/0x002B/*::]*/: { /* n:"BrtFont", */ f:parse_BrtFont },
    	/*::[*/0x002C/*::]*/: { /* n:"BrtFmt", */ f:parse_BrtFmt },
    	/*::[*/0x002D/*::]*/: { /* n:"BrtFill", */ f:parse_BrtFill },
    	/*::[*/0x002E/*::]*/: { /* n:"BrtBorder", */ f:parse_BrtBorder },
    	/*::[*/0x002F/*::]*/: { /* n:"BrtXF", */ f:parse_BrtXF },
    	/*::[*/0x0030/*::]*/: { /* n:"BrtStyle" */ },
    	/*::[*/0x0031/*::]*/: { /* n:"BrtCellMeta", */ f:parse_Int32LE },
    	/*::[*/0x0032/*::]*/: { /* n:"BrtValueMeta" */ },
    	/*::[*/0x0033/*::]*/: { /* n:"BrtMdb" */ f:parse_BrtMdb },
    	/*::[*/0x0034/*::]*/: { /* n:"BrtBeginFmd", */ T:1 },
    	/*::[*/0x0035/*::]*/: { /* n:"BrtEndFmd", */ T:-1 },
    	/*::[*/0x0036/*::]*/: { /* n:"BrtBeginMdx", */ T:1 },
    	/*::[*/0x0037/*::]*/: { /* n:"BrtEndMdx", */ T:-1 },
    	/*::[*/0x0038/*::]*/: { /* n:"BrtBeginMdxTuple", */ T:1 },
    	/*::[*/0x0039/*::]*/: { /* n:"BrtEndMdxTuple", */ T:-1 },
    	/*::[*/0x003A/*::]*/: { /* n:"BrtMdxMbrIstr" */ },
    	/*::[*/0x003B/*::]*/: { /* n:"BrtStr" */ },
    	/*::[*/0x003C/*::]*/: { /* n:"BrtColInfo", */ f:parse_ColInfo },
    	/*::[*/0x003E/*::]*/: { /* n:"BrtCellRString", */ f:parse_BrtCellRString },
    	/*::[*/0x003F/*::]*/: { /* n:"BrtCalcChainItem$", */ f:parse_BrtCalcChainItem$ },
    	/*::[*/0x0040/*::]*/: { /* n:"BrtDVal", */ f:parse_BrtDVal },
    	/*::[*/0x0041/*::]*/: { /* n:"BrtSxvcellNum" */ },
    	/*::[*/0x0042/*::]*/: { /* n:"BrtSxvcellStr" */ },
    	/*::[*/0x0043/*::]*/: { /* n:"BrtSxvcellBool" */ },
    	/*::[*/0x0044/*::]*/: { /* n:"BrtSxvcellErr" */ },
    	/*::[*/0x0045/*::]*/: { /* n:"BrtSxvcellDate" */ },
    	/*::[*/0x0046/*::]*/: { /* n:"BrtSxvcellNil" */ },
    	/*::[*/0x0080/*::]*/: { /* n:"BrtFileVersion" */ },
    	/*::[*/0x0081/*::]*/: { /* n:"BrtBeginSheet", */ T:1 },
    	/*::[*/0x0082/*::]*/: { /* n:"BrtEndSheet", */ T:-1 },
    	/*::[*/0x0083/*::]*/: { /* n:"BrtBeginBook", */ T:1, f:parsenoop, p:0 },
    	/*::[*/0x0084/*::]*/: { /* n:"BrtEndBook", */ T:-1 },
    	/*::[*/0x0085/*::]*/: { /* n:"BrtBeginWsViews", */ T:1 },
    	/*::[*/0x0086/*::]*/: { /* n:"BrtEndWsViews", */ T:-1 },
    	/*::[*/0x0087/*::]*/: { /* n:"BrtBeginBookViews", */ T:1 },
    	/*::[*/0x0088/*::]*/: { /* n:"BrtEndBookViews", */ T:-1 },
    	/*::[*/0x0089/*::]*/: { /* n:"BrtBeginWsView", */ T:1, f:parse_BrtBeginWsView },
    	/*::[*/0x008A/*::]*/: { /* n:"BrtEndWsView", */ T:-1 },
    	/*::[*/0x008B/*::]*/: { /* n:"BrtBeginCsViews", */ T:1 },
    	/*::[*/0x008C/*::]*/: { /* n:"BrtEndCsViews", */ T:-1 },
    	/*::[*/0x008D/*::]*/: { /* n:"BrtBeginCsView", */ T:1 },
    	/*::[*/0x008E/*::]*/: { /* n:"BrtEndCsView", */ T:-1 },
    	/*::[*/0x008F/*::]*/: { /* n:"BrtBeginBundleShs", */ T:1 },
    	/*::[*/0x0090/*::]*/: { /* n:"BrtEndBundleShs", */ T:-1 },
    	/*::[*/0x0091/*::]*/: { /* n:"BrtBeginSheetData", */ T:1 },
    	/*::[*/0x0092/*::]*/: { /* n:"BrtEndSheetData", */ T:-1 },
    	/*::[*/0x0093/*::]*/: { /* n:"BrtWsProp", */ f:parse_BrtWsProp },
    	/*::[*/0x0094/*::]*/: { /* n:"BrtWsDim", */ f:parse_BrtWsDim, p:16 },
    	/*::[*/0x0097/*::]*/: { /* n:"BrtPane", */ f:parse_BrtPane },
    	/*::[*/0x0098/*::]*/: { /* n:"BrtSel" */ },
    	/*::[*/0x0099/*::]*/: { /* n:"BrtWbProp", */ f:parse_BrtWbProp },
    	/*::[*/0x009A/*::]*/: { /* n:"BrtWbFactoid" */ },
    	/*::[*/0x009B/*::]*/: { /* n:"BrtFileRecover" */ },
    	/*::[*/0x009C/*::]*/: { /* n:"BrtBundleSh", */ f:parse_BrtBundleSh },
    	/*::[*/0x009D/*::]*/: { /* n:"BrtCalcProp" */ },
    	/*::[*/0x009E/*::]*/: { /* n:"BrtBookView" */ },
    	/*::[*/0x009F/*::]*/: { /* n:"BrtBeginSst", */ T:1, f:parse_BrtBeginSst },
    	/*::[*/0x00A0/*::]*/: { /* n:"BrtEndSst", */ T:-1 },
    	/*::[*/0x00A1/*::]*/: { /* n:"BrtBeginAFilter", */ T:1, f:parse_UncheckedRfX },
    	/*::[*/0x00A2/*::]*/: { /* n:"BrtEndAFilter", */ T:-1 },
    	/*::[*/0x00A3/*::]*/: { /* n:"BrtBeginFilterColumn", */ T:1 },
    	/*::[*/0x00A4/*::]*/: { /* n:"BrtEndFilterColumn", */ T:-1 },
    	/*::[*/0x00A5/*::]*/: { /* n:"BrtBeginFilters", */ T:1 },
    	/*::[*/0x00A6/*::]*/: { /* n:"BrtEndFilters", */ T:-1 },
    	/*::[*/0x00A7/*::]*/: { /* n:"BrtFilter" */ },
    	/*::[*/0x00A8/*::]*/: { /* n:"BrtColorFilter" */ },
    	/*::[*/0x00A9/*::]*/: { /* n:"BrtIconFilter" */ },
    	/*::[*/0x00AA/*::]*/: { /* n:"BrtTop10Filter" */ },
    	/*::[*/0x00AB/*::]*/: { /* n:"BrtDynamicFilter" */ },
    	/*::[*/0x00AC/*::]*/: { /* n:"BrtBeginCustomFilters", */ T:1 },
    	/*::[*/0x00AD/*::]*/: { /* n:"BrtEndCustomFilters", */ T:-1 },
    	/*::[*/0x00AE/*::]*/: { /* n:"BrtCustomFilter" */ },
    	/*::[*/0x00AF/*::]*/: { /* n:"BrtAFilterDateGroupItem" */ },
    	/*::[*/0x00B0/*::]*/: { /* n:"BrtMergeCell", */ f:parse_BrtMergeCell },
    	/*::[*/0x00B1/*::]*/: { /* n:"BrtBeginMergeCells", */ T:1 },
    	/*::[*/0x00B2/*::]*/: { /* n:"BrtEndMergeCells", */ T:-1 },
    	/*::[*/0x00B3/*::]*/: { /* n:"BrtBeginPivotCacheDef", */ T:1 },
    	/*::[*/0x00B4/*::]*/: { /* n:"BrtEndPivotCacheDef", */ T:-1 },
    	/*::[*/0x00B5/*::]*/: { /* n:"BrtBeginPCDFields", */ T:1 },
    	/*::[*/0x00B6/*::]*/: { /* n:"BrtEndPCDFields", */ T:-1 },
    	/*::[*/0x00B7/*::]*/: { /* n:"BrtBeginPCDField", */ T:1 },
    	/*::[*/0x00B8/*::]*/: { /* n:"BrtEndPCDField", */ T:-1 },
    	/*::[*/0x00B9/*::]*/: { /* n:"BrtBeginPCDSource", */ T:1 },
    	/*::[*/0x00BA/*::]*/: { /* n:"BrtEndPCDSource", */ T:-1 },
    	/*::[*/0x00BB/*::]*/: { /* n:"BrtBeginPCDSRange", */ T:1 },
    	/*::[*/0x00BC/*::]*/: { /* n:"BrtEndPCDSRange", */ T:-1 },
    	/*::[*/0x00BD/*::]*/: { /* n:"BrtBeginPCDFAtbl", */ T:1 },
    	/*::[*/0x00BE/*::]*/: { /* n:"BrtEndPCDFAtbl", */ T:-1 },
    	/*::[*/0x00BF/*::]*/: { /* n:"BrtBeginPCDIRun", */ T:1 },
    	/*::[*/0x00C0/*::]*/: { /* n:"BrtEndPCDIRun", */ T:-1 },
    	/*::[*/0x00C1/*::]*/: { /* n:"BrtBeginPivotCacheRecords", */ T:1 },
    	/*::[*/0x00C2/*::]*/: { /* n:"BrtEndPivotCacheRecords", */ T:-1 },
    	/*::[*/0x00C3/*::]*/: { /* n:"BrtBeginPCDHierarchies", */ T:1 },
    	/*::[*/0x00C4/*::]*/: { /* n:"BrtEndPCDHierarchies", */ T:-1 },
    	/*::[*/0x00C5/*::]*/: { /* n:"BrtBeginPCDHierarchy", */ T:1 },
    	/*::[*/0x00C6/*::]*/: { /* n:"BrtEndPCDHierarchy", */ T:-1 },
    	/*::[*/0x00C7/*::]*/: { /* n:"BrtBeginPCDHFieldsUsage", */ T:1 },
    	/*::[*/0x00C8/*::]*/: { /* n:"BrtEndPCDHFieldsUsage", */ T:-1 },
    	/*::[*/0x00C9/*::]*/: { /* n:"BrtBeginExtConnection", */ T:1 },
    	/*::[*/0x00CA/*::]*/: { /* n:"BrtEndExtConnection", */ T:-1 },
    	/*::[*/0x00CB/*::]*/: { /* n:"BrtBeginECDbProps", */ T:1 },
    	/*::[*/0x00CC/*::]*/: { /* n:"BrtEndECDbProps", */ T:-1 },
    	/*::[*/0x00CD/*::]*/: { /* n:"BrtBeginECOlapProps", */ T:1 },
    	/*::[*/0x00CE/*::]*/: { /* n:"BrtEndECOlapProps", */ T:-1 },
    	/*::[*/0x00CF/*::]*/: { /* n:"BrtBeginPCDSConsol", */ T:1 },
    	/*::[*/0x00D0/*::]*/: { /* n:"BrtEndPCDSConsol", */ T:-1 },
    	/*::[*/0x00D1/*::]*/: { /* n:"BrtBeginPCDSCPages", */ T:1 },
    	/*::[*/0x00D2/*::]*/: { /* n:"BrtEndPCDSCPages", */ T:-1 },
    	/*::[*/0x00D3/*::]*/: { /* n:"BrtBeginPCDSCPage", */ T:1 },
    	/*::[*/0x00D4/*::]*/: { /* n:"BrtEndPCDSCPage", */ T:-1 },
    	/*::[*/0x00D5/*::]*/: { /* n:"BrtBeginPCDSCPItem", */ T:1 },
    	/*::[*/0x00D6/*::]*/: { /* n:"BrtEndPCDSCPItem", */ T:-1 },
    	/*::[*/0x00D7/*::]*/: { /* n:"BrtBeginPCDSCSets", */ T:1 },
    	/*::[*/0x00D8/*::]*/: { /* n:"BrtEndPCDSCSets", */ T:-1 },
    	/*::[*/0x00D9/*::]*/: { /* n:"BrtBeginPCDSCSet", */ T:1 },
    	/*::[*/0x00DA/*::]*/: { /* n:"BrtEndPCDSCSet", */ T:-1 },
    	/*::[*/0x00DB/*::]*/: { /* n:"BrtBeginPCDFGroup", */ T:1 },
    	/*::[*/0x00DC/*::]*/: { /* n:"BrtEndPCDFGroup", */ T:-1 },
    	/*::[*/0x00DD/*::]*/: { /* n:"BrtBeginPCDFGItems", */ T:1 },
    	/*::[*/0x00DE/*::]*/: { /* n:"BrtEndPCDFGItems", */ T:-1 },
    	/*::[*/0x00DF/*::]*/: { /* n:"BrtBeginPCDFGRange", */ T:1 },
    	/*::[*/0x00E0/*::]*/: { /* n:"BrtEndPCDFGRange", */ T:-1 },
    	/*::[*/0x00E1/*::]*/: { /* n:"BrtBeginPCDFGDiscrete", */ T:1 },
    	/*::[*/0x00E2/*::]*/: { /* n:"BrtEndPCDFGDiscrete", */ T:-1 },
    	/*::[*/0x00E3/*::]*/: { /* n:"BrtBeginPCDSDTupleCache", */ T:1 },
    	/*::[*/0x00E4/*::]*/: { /* n:"BrtEndPCDSDTupleCache", */ T:-1 },
    	/*::[*/0x00E5/*::]*/: { /* n:"BrtBeginPCDSDTCEntries", */ T:1 },
    	/*::[*/0x00E6/*::]*/: { /* n:"BrtEndPCDSDTCEntries", */ T:-1 },
    	/*::[*/0x00E7/*::]*/: { /* n:"BrtBeginPCDSDTCEMembers", */ T:1 },
    	/*::[*/0x00E8/*::]*/: { /* n:"BrtEndPCDSDTCEMembers", */ T:-1 },
    	/*::[*/0x00E9/*::]*/: { /* n:"BrtBeginPCDSDTCEMember", */ T:1 },
    	/*::[*/0x00EA/*::]*/: { /* n:"BrtEndPCDSDTCEMember", */ T:-1 },
    	/*::[*/0x00EB/*::]*/: { /* n:"BrtBeginPCDSDTCQueries", */ T:1 },
    	/*::[*/0x00EC/*::]*/: { /* n:"BrtEndPCDSDTCQueries", */ T:-1 },
    	/*::[*/0x00ED/*::]*/: { /* n:"BrtBeginPCDSDTCQuery", */ T:1 },
    	/*::[*/0x00EE/*::]*/: { /* n:"BrtEndPCDSDTCQuery", */ T:-1 },
    	/*::[*/0x00EF/*::]*/: { /* n:"BrtBeginPCDSDTCSets", */ T:1 },
    	/*::[*/0x00F0/*::]*/: { /* n:"BrtEndPCDSDTCSets", */ T:-1 },
    	/*::[*/0x00F1/*::]*/: { /* n:"BrtBeginPCDSDTCSet", */ T:1 },
    	/*::[*/0x00F2/*::]*/: { /* n:"BrtEndPCDSDTCSet", */ T:-1 },
    	/*::[*/0x00F3/*::]*/: { /* n:"BrtBeginPCDCalcItems", */ T:1 },
    	/*::[*/0x00F4/*::]*/: { /* n:"BrtEndPCDCalcItems", */ T:-1 },
    	/*::[*/0x00F5/*::]*/: { /* n:"BrtBeginPCDCalcItem", */ T:1 },
    	/*::[*/0x00F6/*::]*/: { /* n:"BrtEndPCDCalcItem", */ T:-1 },
    	/*::[*/0x00F7/*::]*/: { /* n:"BrtBeginPRule", */ T:1 },
    	/*::[*/0x00F8/*::]*/: { /* n:"BrtEndPRule", */ T:-1 },
    	/*::[*/0x00F9/*::]*/: { /* n:"BrtBeginPRFilters", */ T:1 },
    	/*::[*/0x00FA/*::]*/: { /* n:"BrtEndPRFilters", */ T:-1 },
    	/*::[*/0x00FB/*::]*/: { /* n:"BrtBeginPRFilter", */ T:1 },
    	/*::[*/0x00FC/*::]*/: { /* n:"BrtEndPRFilter", */ T:-1 },
    	/*::[*/0x00FD/*::]*/: { /* n:"BrtBeginPNames", */ T:1 },
    	/*::[*/0x00FE/*::]*/: { /* n:"BrtEndPNames", */ T:-1 },
    	/*::[*/0x00FF/*::]*/: { /* n:"BrtBeginPName", */ T:1 },
    	/*::[*/0x0100/*::]*/: { /* n:"BrtEndPName", */ T:-1 },
    	/*::[*/0x0101/*::]*/: { /* n:"BrtBeginPNPairs", */ T:1 },
    	/*::[*/0x0102/*::]*/: { /* n:"BrtEndPNPairs", */ T:-1 },
    	/*::[*/0x0103/*::]*/: { /* n:"BrtBeginPNPair", */ T:1 },
    	/*::[*/0x0104/*::]*/: { /* n:"BrtEndPNPair", */ T:-1 },
    	/*::[*/0x0105/*::]*/: { /* n:"BrtBeginECWebProps", */ T:1 },
    	/*::[*/0x0106/*::]*/: { /* n:"BrtEndECWebProps", */ T:-1 },
    	/*::[*/0x0107/*::]*/: { /* n:"BrtBeginEcWpTables", */ T:1 },
    	/*::[*/0x0108/*::]*/: { /* n:"BrtEndECWPTables", */ T:-1 },
    	/*::[*/0x0109/*::]*/: { /* n:"BrtBeginECParams", */ T:1 },
    	/*::[*/0x010A/*::]*/: { /* n:"BrtEndECParams", */ T:-1 },
    	/*::[*/0x010B/*::]*/: { /* n:"BrtBeginECParam", */ T:1 },
    	/*::[*/0x010C/*::]*/: { /* n:"BrtEndECParam", */ T:-1 },
    	/*::[*/0x010D/*::]*/: { /* n:"BrtBeginPCDKPIs", */ T:1 },
    	/*::[*/0x010E/*::]*/: { /* n:"BrtEndPCDKPIs", */ T:-1 },
    	/*::[*/0x010F/*::]*/: { /* n:"BrtBeginPCDKPI", */ T:1 },
    	/*::[*/0x0110/*::]*/: { /* n:"BrtEndPCDKPI", */ T:-1 },
    	/*::[*/0x0111/*::]*/: { /* n:"BrtBeginDims", */ T:1 },
    	/*::[*/0x0112/*::]*/: { /* n:"BrtEndDims", */ T:-1 },
    	/*::[*/0x0113/*::]*/: { /* n:"BrtBeginDim", */ T:1 },
    	/*::[*/0x0114/*::]*/: { /* n:"BrtEndDim", */ T:-1 },
    	/*::[*/0x0115/*::]*/: { /* n:"BrtIndexPartEnd" */ },
    	/*::[*/0x0116/*::]*/: { /* n:"BrtBeginStyleSheet", */ T:1 },
    	/*::[*/0x0117/*::]*/: { /* n:"BrtEndStyleSheet", */ T:-1 },
    	/*::[*/0x0118/*::]*/: { /* n:"BrtBeginSXView", */ T:1 },
    	/*::[*/0x0119/*::]*/: { /* n:"BrtEndSXVI", */ T:-1 },
    	/*::[*/0x011A/*::]*/: { /* n:"BrtBeginSXVI", */ T:1 },
    	/*::[*/0x011B/*::]*/: { /* n:"BrtBeginSXVIs", */ T:1 },
    	/*::[*/0x011C/*::]*/: { /* n:"BrtEndSXVIs", */ T:-1 },
    	/*::[*/0x011D/*::]*/: { /* n:"BrtBeginSXVD", */ T:1 },
    	/*::[*/0x011E/*::]*/: { /* n:"BrtEndSXVD", */ T:-1 },
    	/*::[*/0x011F/*::]*/: { /* n:"BrtBeginSXVDs", */ T:1 },
    	/*::[*/0x0120/*::]*/: { /* n:"BrtEndSXVDs", */ T:-1 },
    	/*::[*/0x0121/*::]*/: { /* n:"BrtBeginSXPI", */ T:1 },
    	/*::[*/0x0122/*::]*/: { /* n:"BrtEndSXPI", */ T:-1 },
    	/*::[*/0x0123/*::]*/: { /* n:"BrtBeginSXPIs", */ T:1 },
    	/*::[*/0x0124/*::]*/: { /* n:"BrtEndSXPIs", */ T:-1 },
    	/*::[*/0x0125/*::]*/: { /* n:"BrtBeginSXDI", */ T:1 },
    	/*::[*/0x0126/*::]*/: { /* n:"BrtEndSXDI", */ T:-1 },
    	/*::[*/0x0127/*::]*/: { /* n:"BrtBeginSXDIs", */ T:1 },
    	/*::[*/0x0128/*::]*/: { /* n:"BrtEndSXDIs", */ T:-1 },
    	/*::[*/0x0129/*::]*/: { /* n:"BrtBeginSXLI", */ T:1 },
    	/*::[*/0x012A/*::]*/: { /* n:"BrtEndSXLI", */ T:-1 },
    	/*::[*/0x012B/*::]*/: { /* n:"BrtBeginSXLIRws", */ T:1 },
    	/*::[*/0x012C/*::]*/: { /* n:"BrtEndSXLIRws", */ T:-1 },
    	/*::[*/0x012D/*::]*/: { /* n:"BrtBeginSXLICols", */ T:1 },
    	/*::[*/0x012E/*::]*/: { /* n:"BrtEndSXLICols", */ T:-1 },
    	/*::[*/0x012F/*::]*/: { /* n:"BrtBeginSXFormat", */ T:1 },
    	/*::[*/0x0130/*::]*/: { /* n:"BrtEndSXFormat", */ T:-1 },
    	/*::[*/0x0131/*::]*/: { /* n:"BrtBeginSXFormats", */ T:1 },
    	/*::[*/0x0132/*::]*/: { /* n:"BrtEndSxFormats", */ T:-1 },
    	/*::[*/0x0133/*::]*/: { /* n:"BrtBeginSxSelect", */ T:1 },
    	/*::[*/0x0134/*::]*/: { /* n:"BrtEndSxSelect", */ T:-1 },
    	/*::[*/0x0135/*::]*/: { /* n:"BrtBeginISXVDRws", */ T:1 },
    	/*::[*/0x0136/*::]*/: { /* n:"BrtEndISXVDRws", */ T:-1 },
    	/*::[*/0x0137/*::]*/: { /* n:"BrtBeginISXVDCols", */ T:1 },
    	/*::[*/0x0138/*::]*/: { /* n:"BrtEndISXVDCols", */ T:-1 },
    	/*::[*/0x0139/*::]*/: { /* n:"BrtEndSXLocation", */ T:-1 },
    	/*::[*/0x013A/*::]*/: { /* n:"BrtBeginSXLocation", */ T:1 },
    	/*::[*/0x013B/*::]*/: { /* n:"BrtEndSXView", */ T:-1 },
    	/*::[*/0x013C/*::]*/: { /* n:"BrtBeginSXTHs", */ T:1 },
    	/*::[*/0x013D/*::]*/: { /* n:"BrtEndSXTHs", */ T:-1 },
    	/*::[*/0x013E/*::]*/: { /* n:"BrtBeginSXTH", */ T:1 },
    	/*::[*/0x013F/*::]*/: { /* n:"BrtEndSXTH", */ T:-1 },
    	/*::[*/0x0140/*::]*/: { /* n:"BrtBeginISXTHRws", */ T:1 },
    	/*::[*/0x0141/*::]*/: { /* n:"BrtEndISXTHRws", */ T:-1 },
    	/*::[*/0x0142/*::]*/: { /* n:"BrtBeginISXTHCols", */ T:1 },
    	/*::[*/0x0143/*::]*/: { /* n:"BrtEndISXTHCols", */ T:-1 },
    	/*::[*/0x0144/*::]*/: { /* n:"BrtBeginSXTDMPS", */ T:1 },
    	/*::[*/0x0145/*::]*/: { /* n:"BrtEndSXTDMPs", */ T:-1 },
    	/*::[*/0x0146/*::]*/: { /* n:"BrtBeginSXTDMP", */ T:1 },
    	/*::[*/0x0147/*::]*/: { /* n:"BrtEndSXTDMP", */ T:-1 },
    	/*::[*/0x0148/*::]*/: { /* n:"BrtBeginSXTHItems", */ T:1 },
    	/*::[*/0x0149/*::]*/: { /* n:"BrtEndSXTHItems", */ T:-1 },
    	/*::[*/0x014A/*::]*/: { /* n:"BrtBeginSXTHItem", */ T:1 },
    	/*::[*/0x014B/*::]*/: { /* n:"BrtEndSXTHItem", */ T:-1 },
    	/*::[*/0x014C/*::]*/: { /* n:"BrtBeginMetadata", */ T:1 },
    	/*::[*/0x014D/*::]*/: { /* n:"BrtEndMetadata", */ T:-1 },
    	/*::[*/0x014E/*::]*/: { /* n:"BrtBeginEsmdtinfo", */ T:1 },
    	/*::[*/0x014F/*::]*/: { /* n:"BrtMdtinfo", */ f:parse_BrtMdtinfo },
    	/*::[*/0x0150/*::]*/: { /* n:"BrtEndEsmdtinfo", */ T:-1 },
    	/*::[*/0x0151/*::]*/: { /* n:"BrtBeginEsmdb", */ f:parse_BrtBeginEsmdb, T:1 },
    	/*::[*/0x0152/*::]*/: { /* n:"BrtEndEsmdb", */ T:-1 },
    	/*::[*/0x0153/*::]*/: { /* n:"BrtBeginEsfmd", */ T:1 },
    	/*::[*/0x0154/*::]*/: { /* n:"BrtEndEsfmd", */ T:-1 },
    	/*::[*/0x0155/*::]*/: { /* n:"BrtBeginSingleCells", */ T:1 },
    	/*::[*/0x0156/*::]*/: { /* n:"BrtEndSingleCells", */ T:-1 },
    	/*::[*/0x0157/*::]*/: { /* n:"BrtBeginList", */ T:1 },
    	/*::[*/0x0158/*::]*/: { /* n:"BrtEndList", */ T:-1 },
    	/*::[*/0x0159/*::]*/: { /* n:"BrtBeginListCols", */ T:1 },
    	/*::[*/0x015A/*::]*/: { /* n:"BrtEndListCols", */ T:-1 },
    	/*::[*/0x015B/*::]*/: { /* n:"BrtBeginListCol", */ T:1 },
    	/*::[*/0x015C/*::]*/: { /* n:"BrtEndListCol", */ T:-1 },
    	/*::[*/0x015D/*::]*/: { /* n:"BrtBeginListXmlCPr", */ T:1 },
    	/*::[*/0x015E/*::]*/: { /* n:"BrtEndListXmlCPr", */ T:-1 },
    	/*::[*/0x015F/*::]*/: { /* n:"BrtListCCFmla" */ },
    	/*::[*/0x0160/*::]*/: { /* n:"BrtListTrFmla" */ },
    	/*::[*/0x0161/*::]*/: { /* n:"BrtBeginExternals", */ T:1 },
    	/*::[*/0x0162/*::]*/: { /* n:"BrtEndExternals", */ T:-1 },
    	/*::[*/0x0163/*::]*/: { /* n:"BrtSupBookSrc", */ f:parse_RelID},
    	/*::[*/0x0165/*::]*/: { /* n:"BrtSupSelf" */ },
    	/*::[*/0x0166/*::]*/: { /* n:"BrtSupSame" */ },
    	/*::[*/0x0167/*::]*/: { /* n:"BrtSupTabs" */ },
    	/*::[*/0x0168/*::]*/: { /* n:"BrtBeginSupBook", */ T:1 },
    	/*::[*/0x0169/*::]*/: { /* n:"BrtPlaceholderName" */ },
    	/*::[*/0x016A/*::]*/: { /* n:"BrtExternSheet", */ f:parse_ExternSheet },
    	/*::[*/0x016B/*::]*/: { /* n:"BrtExternTableStart" */ },
    	/*::[*/0x016C/*::]*/: { /* n:"BrtExternTableEnd" */ },
    	/*::[*/0x016E/*::]*/: { /* n:"BrtExternRowHdr" */ },
    	/*::[*/0x016F/*::]*/: { /* n:"BrtExternCellBlank" */ },
    	/*::[*/0x0170/*::]*/: { /* n:"BrtExternCellReal" */ },
    	/*::[*/0x0171/*::]*/: { /* n:"BrtExternCellBool" */ },
    	/*::[*/0x0172/*::]*/: { /* n:"BrtExternCellError" */ },
    	/*::[*/0x0173/*::]*/: { /* n:"BrtExternCellString" */ },
    	/*::[*/0x0174/*::]*/: { /* n:"BrtBeginEsmdx", */ T:1 },
    	/*::[*/0x0175/*::]*/: { /* n:"BrtEndEsmdx", */ T:-1 },
    	/*::[*/0x0176/*::]*/: { /* n:"BrtBeginMdxSet", */ T:1 },
    	/*::[*/0x0177/*::]*/: { /* n:"BrtEndMdxSet", */ T:-1 },
    	/*::[*/0x0178/*::]*/: { /* n:"BrtBeginMdxMbrProp", */ T:1 },
    	/*::[*/0x0179/*::]*/: { /* n:"BrtEndMdxMbrProp", */ T:-1 },
    	/*::[*/0x017A/*::]*/: { /* n:"BrtBeginMdxKPI", */ T:1 },
    	/*::[*/0x017B/*::]*/: { /* n:"BrtEndMdxKPI", */ T:-1 },
    	/*::[*/0x017C/*::]*/: { /* n:"BrtBeginEsstr", */ T:1 },
    	/*::[*/0x017D/*::]*/: { /* n:"BrtEndEsstr", */ T:-1 },
    	/*::[*/0x017E/*::]*/: { /* n:"BrtBeginPRFItem", */ T:1 },
    	/*::[*/0x017F/*::]*/: { /* n:"BrtEndPRFItem", */ T:-1 },
    	/*::[*/0x0180/*::]*/: { /* n:"BrtBeginPivotCacheIDs", */ T:1 },
    	/*::[*/0x0181/*::]*/: { /* n:"BrtEndPivotCacheIDs", */ T:-1 },
    	/*::[*/0x0182/*::]*/: { /* n:"BrtBeginPivotCacheID", */ T:1 },
    	/*::[*/0x0183/*::]*/: { /* n:"BrtEndPivotCacheID", */ T:-1 },
    	/*::[*/0x0184/*::]*/: { /* n:"BrtBeginISXVIs", */ T:1 },
    	/*::[*/0x0185/*::]*/: { /* n:"BrtEndISXVIs", */ T:-1 },
    	/*::[*/0x0186/*::]*/: { /* n:"BrtBeginColInfos", */ T:1 },
    	/*::[*/0x0187/*::]*/: { /* n:"BrtEndColInfos", */ T:-1 },
    	/*::[*/0x0188/*::]*/: { /* n:"BrtBeginRwBrk", */ T:1 },
    	/*::[*/0x0189/*::]*/: { /* n:"BrtEndRwBrk", */ T:-1 },
    	/*::[*/0x018A/*::]*/: { /* n:"BrtBeginColBrk", */ T:1 },
    	/*::[*/0x018B/*::]*/: { /* n:"BrtEndColBrk", */ T:-1 },
    	/*::[*/0x018C/*::]*/: { /* n:"BrtBrk" */ },
    	/*::[*/0x018D/*::]*/: { /* n:"BrtUserBookView" */ },
    	/*::[*/0x018E/*::]*/: { /* n:"BrtInfo" */ },
    	/*::[*/0x018F/*::]*/: { /* n:"BrtCUsr" */ },
    	/*::[*/0x0190/*::]*/: { /* n:"BrtUsr" */ },
    	/*::[*/0x0191/*::]*/: { /* n:"BrtBeginUsers", */ T:1 },
    	/*::[*/0x0193/*::]*/: { /* n:"BrtEOF" */ },
    	/*::[*/0x0194/*::]*/: { /* n:"BrtUCR" */ },
    	/*::[*/0x0195/*::]*/: { /* n:"BrtRRInsDel" */ },
    	/*::[*/0x0196/*::]*/: { /* n:"BrtRREndInsDel" */ },
    	/*::[*/0x0197/*::]*/: { /* n:"BrtRRMove" */ },
    	/*::[*/0x0198/*::]*/: { /* n:"BrtRREndMove" */ },
    	/*::[*/0x0199/*::]*/: { /* n:"BrtRRChgCell" */ },
    	/*::[*/0x019A/*::]*/: { /* n:"BrtRREndChgCell" */ },
    	/*::[*/0x019B/*::]*/: { /* n:"BrtRRHeader" */ },
    	/*::[*/0x019C/*::]*/: { /* n:"BrtRRUserView" */ },
    	/*::[*/0x019D/*::]*/: { /* n:"BrtRRRenSheet" */ },
    	/*::[*/0x019E/*::]*/: { /* n:"BrtRRInsertSh" */ },
    	/*::[*/0x019F/*::]*/: { /* n:"BrtRRDefName" */ },
    	/*::[*/0x01A0/*::]*/: { /* n:"BrtRRNote" */ },
    	/*::[*/0x01A1/*::]*/: { /* n:"BrtRRConflict" */ },
    	/*::[*/0x01A2/*::]*/: { /* n:"BrtRRTQSIF" */ },
    	/*::[*/0x01A3/*::]*/: { /* n:"BrtRRFormat" */ },
    	/*::[*/0x01A4/*::]*/: { /* n:"BrtRREndFormat" */ },
    	/*::[*/0x01A5/*::]*/: { /* n:"BrtRRAutoFmt" */ },
    	/*::[*/0x01A6/*::]*/: { /* n:"BrtBeginUserShViews", */ T:1 },
    	/*::[*/0x01A7/*::]*/: { /* n:"BrtBeginUserShView", */ T:1 },
    	/*::[*/0x01A8/*::]*/: { /* n:"BrtEndUserShView", */ T:-1 },
    	/*::[*/0x01A9/*::]*/: { /* n:"BrtEndUserShViews", */ T:-1 },
    	/*::[*/0x01AA/*::]*/: { /* n:"BrtArrFmla", */ f:parse_BrtArrFmla },
    	/*::[*/0x01AB/*::]*/: { /* n:"BrtShrFmla", */ f:parse_BrtShrFmla },
    	/*::[*/0x01AC/*::]*/: { /* n:"BrtTable" */ },
    	/*::[*/0x01AD/*::]*/: { /* n:"BrtBeginExtConnections", */ T:1 },
    	/*::[*/0x01AE/*::]*/: { /* n:"BrtEndExtConnections", */ T:-1 },
    	/*::[*/0x01AF/*::]*/: { /* n:"BrtBeginPCDCalcMems", */ T:1 },
    	/*::[*/0x01B0/*::]*/: { /* n:"BrtEndPCDCalcMems", */ T:-1 },
    	/*::[*/0x01B1/*::]*/: { /* n:"BrtBeginPCDCalcMem", */ T:1 },
    	/*::[*/0x01B2/*::]*/: { /* n:"BrtEndPCDCalcMem", */ T:-1 },
    	/*::[*/0x01B3/*::]*/: { /* n:"BrtBeginPCDHGLevels", */ T:1 },
    	/*::[*/0x01B4/*::]*/: { /* n:"BrtEndPCDHGLevels", */ T:-1 },
    	/*::[*/0x01B5/*::]*/: { /* n:"BrtBeginPCDHGLevel", */ T:1 },
    	/*::[*/0x01B6/*::]*/: { /* n:"BrtEndPCDHGLevel", */ T:-1 },
    	/*::[*/0x01B7/*::]*/: { /* n:"BrtBeginPCDHGLGroups", */ T:1 },
    	/*::[*/0x01B8/*::]*/: { /* n:"BrtEndPCDHGLGroups", */ T:-1 },
    	/*::[*/0x01B9/*::]*/: { /* n:"BrtBeginPCDHGLGroup", */ T:1 },
    	/*::[*/0x01BA/*::]*/: { /* n:"BrtEndPCDHGLGroup", */ T:-1 },
    	/*::[*/0x01BB/*::]*/: { /* n:"BrtBeginPCDHGLGMembers", */ T:1 },
    	/*::[*/0x01BC/*::]*/: { /* n:"BrtEndPCDHGLGMembers", */ T:-1 },
    	/*::[*/0x01BD/*::]*/: { /* n:"BrtBeginPCDHGLGMember", */ T:1 },
    	/*::[*/0x01BE/*::]*/: { /* n:"BrtEndPCDHGLGMember", */ T:-1 },
    	/*::[*/0x01BF/*::]*/: { /* n:"BrtBeginQSI", */ T:1 },
    	/*::[*/0x01C0/*::]*/: { /* n:"BrtEndQSI", */ T:-1 },
    	/*::[*/0x01C1/*::]*/: { /* n:"BrtBeginQSIR", */ T:1 },
    	/*::[*/0x01C2/*::]*/: { /* n:"BrtEndQSIR", */ T:-1 },
    	/*::[*/0x01C3/*::]*/: { /* n:"BrtBeginDeletedNames", */ T:1 },
    	/*::[*/0x01C4/*::]*/: { /* n:"BrtEndDeletedNames", */ T:-1 },
    	/*::[*/0x01C5/*::]*/: { /* n:"BrtBeginDeletedName", */ T:1 },
    	/*::[*/0x01C6/*::]*/: { /* n:"BrtEndDeletedName", */ T:-1 },
    	/*::[*/0x01C7/*::]*/: { /* n:"BrtBeginQSIFs", */ T:1 },
    	/*::[*/0x01C8/*::]*/: { /* n:"BrtEndQSIFs", */ T:-1 },
    	/*::[*/0x01C9/*::]*/: { /* n:"BrtBeginQSIF", */ T:1 },
    	/*::[*/0x01CA/*::]*/: { /* n:"BrtEndQSIF", */ T:-1 },
    	/*::[*/0x01CB/*::]*/: { /* n:"BrtBeginAutoSortScope", */ T:1 },
    	/*::[*/0x01CC/*::]*/: { /* n:"BrtEndAutoSortScope", */ T:-1 },
    	/*::[*/0x01CD/*::]*/: { /* n:"BrtBeginConditionalFormatting", */ T:1 },
    	/*::[*/0x01CE/*::]*/: { /* n:"BrtEndConditionalFormatting", */ T:-1 },
    	/*::[*/0x01CF/*::]*/: { /* n:"BrtBeginCFRule", */ T:1 },
    	/*::[*/0x01D0/*::]*/: { /* n:"BrtEndCFRule", */ T:-1 },
    	/*::[*/0x01D1/*::]*/: { /* n:"BrtBeginIconSet", */ T:1 },
    	/*::[*/0x01D2/*::]*/: { /* n:"BrtEndIconSet", */ T:-1 },
    	/*::[*/0x01D3/*::]*/: { /* n:"BrtBeginDatabar", */ T:1 },
    	/*::[*/0x01D4/*::]*/: { /* n:"BrtEndDatabar", */ T:-1 },
    	/*::[*/0x01D5/*::]*/: { /* n:"BrtBeginColorScale", */ T:1 },
    	/*::[*/0x01D6/*::]*/: { /* n:"BrtEndColorScale", */ T:-1 },
    	/*::[*/0x01D7/*::]*/: { /* n:"BrtCFVO" */ },
    	/*::[*/0x01D8/*::]*/: { /* n:"BrtExternValueMeta" */ },
    	/*::[*/0x01D9/*::]*/: { /* n:"BrtBeginColorPalette", */ T:1 },
    	/*::[*/0x01DA/*::]*/: { /* n:"BrtEndColorPalette", */ T:-1 },
    	/*::[*/0x01DB/*::]*/: { /* n:"BrtIndexedColor" */ },
    	/*::[*/0x01DC/*::]*/: { /* n:"BrtMargins", */ f:parse_BrtMargins },
    	/*::[*/0x01DD/*::]*/: { /* n:"BrtPrintOptions" */ },
    	/*::[*/0x01DE/*::]*/: { /* n:"BrtPageSetup" */ },
    	/*::[*/0x01DF/*::]*/: { /* n:"BrtBeginHeaderFooter", */ T:1 },
    	/*::[*/0x01E0/*::]*/: { /* n:"BrtEndHeaderFooter", */ T:-1 },
    	/*::[*/0x01E1/*::]*/: { /* n:"BrtBeginSXCrtFormat", */ T:1 },
    	/*::[*/0x01E2/*::]*/: { /* n:"BrtEndSXCrtFormat", */ T:-1 },
    	/*::[*/0x01E3/*::]*/: { /* n:"BrtBeginSXCrtFormats", */ T:1 },
    	/*::[*/0x01E4/*::]*/: { /* n:"BrtEndSXCrtFormats", */ T:-1 },
    	/*::[*/0x01E5/*::]*/: { /* n:"BrtWsFmtInfo", */ f:parse_BrtWsFmtInfo },
    	/*::[*/0x01E6/*::]*/: { /* n:"BrtBeginMgs", */ T:1 },
    	/*::[*/0x01E7/*::]*/: { /* n:"BrtEndMGs", */ T:-1 },
    	/*::[*/0x01E8/*::]*/: { /* n:"BrtBeginMGMaps", */ T:1 },
    	/*::[*/0x01E9/*::]*/: { /* n:"BrtEndMGMaps", */ T:-1 },
    	/*::[*/0x01EA/*::]*/: { /* n:"BrtBeginMG", */ T:1 },
    	/*::[*/0x01EB/*::]*/: { /* n:"BrtEndMG", */ T:-1 },
    	/*::[*/0x01EC/*::]*/: { /* n:"BrtBeginMap", */ T:1 },
    	/*::[*/0x01ED/*::]*/: { /* n:"BrtEndMap", */ T:-1 },
    	/*::[*/0x01EE/*::]*/: { /* n:"BrtHLink", */ f:parse_BrtHLink },
    	/*::[*/0x01EF/*::]*/: { /* n:"BrtBeginDCon", */ T:1 },
    	/*::[*/0x01F0/*::]*/: { /* n:"BrtEndDCon", */ T:-1 },
    	/*::[*/0x01F1/*::]*/: { /* n:"BrtBeginDRefs", */ T:1 },
    	/*::[*/0x01F2/*::]*/: { /* n:"BrtEndDRefs", */ T:-1 },
    	/*::[*/0x01F3/*::]*/: { /* n:"BrtDRef" */ },
    	/*::[*/0x01F4/*::]*/: { /* n:"BrtBeginScenMan", */ T:1 },
    	/*::[*/0x01F5/*::]*/: { /* n:"BrtEndScenMan", */ T:-1 },
    	/*::[*/0x01F6/*::]*/: { /* n:"BrtBeginSct", */ T:1 },
    	/*::[*/0x01F7/*::]*/: { /* n:"BrtEndSct", */ T:-1 },
    	/*::[*/0x01F8/*::]*/: { /* n:"BrtSlc" */ },
    	/*::[*/0x01F9/*::]*/: { /* n:"BrtBeginDXFs", */ T:1 },
    	/*::[*/0x01FA/*::]*/: { /* n:"BrtEndDXFs", */ T:-1 },
    	/*::[*/0x01FB/*::]*/: { /* n:"BrtDXF" */ },
    	/*::[*/0x01FC/*::]*/: { /* n:"BrtBeginTableStyles", */ T:1 },
    	/*::[*/0x01FD/*::]*/: { /* n:"BrtEndTableStyles", */ T:-1 },
    	/*::[*/0x01FE/*::]*/: { /* n:"BrtBeginTableStyle", */ T:1 },
    	/*::[*/0x01FF/*::]*/: { /* n:"BrtEndTableStyle", */ T:-1 },
    	/*::[*/0x0200/*::]*/: { /* n:"BrtTableStyleElement" */ },
    	/*::[*/0x0201/*::]*/: { /* n:"BrtTableStyleClient" */ },
    	/*::[*/0x0202/*::]*/: { /* n:"BrtBeginVolDeps", */ T:1 },
    	/*::[*/0x0203/*::]*/: { /* n:"BrtEndVolDeps", */ T:-1 },
    	/*::[*/0x0204/*::]*/: { /* n:"BrtBeginVolType", */ T:1 },
    	/*::[*/0x0205/*::]*/: { /* n:"BrtEndVolType", */ T:-1 },
    	/*::[*/0x0206/*::]*/: { /* n:"BrtBeginVolMain", */ T:1 },
    	/*::[*/0x0207/*::]*/: { /* n:"BrtEndVolMain", */ T:-1 },
    	/*::[*/0x0208/*::]*/: { /* n:"BrtBeginVolTopic", */ T:1 },
    	/*::[*/0x0209/*::]*/: { /* n:"BrtEndVolTopic", */ T:-1 },
    	/*::[*/0x020A/*::]*/: { /* n:"BrtVolSubtopic" */ },
    	/*::[*/0x020B/*::]*/: { /* n:"BrtVolRef" */ },
    	/*::[*/0x020C/*::]*/: { /* n:"BrtVolNum" */ },
    	/*::[*/0x020D/*::]*/: { /* n:"BrtVolErr" */ },
    	/*::[*/0x020E/*::]*/: { /* n:"BrtVolStr" */ },
    	/*::[*/0x020F/*::]*/: { /* n:"BrtVolBool" */ },
    	/*::[*/0x0210/*::]*/: { /* n:"BrtBeginCalcChain$", */ T:1 },
    	/*::[*/0x0211/*::]*/: { /* n:"BrtEndCalcChain$", */ T:-1 },
    	/*::[*/0x0212/*::]*/: { /* n:"BrtBeginSortState", */ T:1 },
    	/*::[*/0x0213/*::]*/: { /* n:"BrtEndSortState", */ T:-1 },
    	/*::[*/0x0214/*::]*/: { /* n:"BrtBeginSortCond", */ T:1 },
    	/*::[*/0x0215/*::]*/: { /* n:"BrtEndSortCond", */ T:-1 },
    	/*::[*/0x0216/*::]*/: { /* n:"BrtBookProtection" */ },
    	/*::[*/0x0217/*::]*/: { /* n:"BrtSheetProtection" */ },
    	/*::[*/0x0218/*::]*/: { /* n:"BrtRangeProtection" */ },
    	/*::[*/0x0219/*::]*/: { /* n:"BrtPhoneticInfo" */ },
    	/*::[*/0x021A/*::]*/: { /* n:"BrtBeginECTxtWiz", */ T:1 },
    	/*::[*/0x021B/*::]*/: { /* n:"BrtEndECTxtWiz", */ T:-1 },
    	/*::[*/0x021C/*::]*/: { /* n:"BrtBeginECTWFldInfoLst", */ T:1 },
    	/*::[*/0x021D/*::]*/: { /* n:"BrtEndECTWFldInfoLst", */ T:-1 },
    	/*::[*/0x021E/*::]*/: { /* n:"BrtBeginECTwFldInfo", */ T:1 },
    	/*::[*/0x0224/*::]*/: { /* n:"BrtFileSharing" */ },
    	/*::[*/0x0225/*::]*/: { /* n:"BrtOleSize" */ },
    	/*::[*/0x0226/*::]*/: { /* n:"BrtDrawing", */ f:parse_RelID },
    	/*::[*/0x0227/*::]*/: { /* n:"BrtLegacyDrawing" */ },
    	/*::[*/0x0228/*::]*/: { /* n:"BrtLegacyDrawingHF" */ },
    	/*::[*/0x0229/*::]*/: { /* n:"BrtWebOpt" */ },
    	/*::[*/0x022A/*::]*/: { /* n:"BrtBeginWebPubItems", */ T:1 },
    	/*::[*/0x022B/*::]*/: { /* n:"BrtEndWebPubItems", */ T:-1 },
    	/*::[*/0x022C/*::]*/: { /* n:"BrtBeginWebPubItem", */ T:1 },
    	/*::[*/0x022D/*::]*/: { /* n:"BrtEndWebPubItem", */ T:-1 },
    	/*::[*/0x022E/*::]*/: { /* n:"BrtBeginSXCondFmt", */ T:1 },
    	/*::[*/0x022F/*::]*/: { /* n:"BrtEndSXCondFmt", */ T:-1 },
    	/*::[*/0x0230/*::]*/: { /* n:"BrtBeginSXCondFmts", */ T:1 },
    	/*::[*/0x0231/*::]*/: { /* n:"BrtEndSXCondFmts", */ T:-1 },
    	/*::[*/0x0232/*::]*/: { /* n:"BrtBkHim" */ },
    	/*::[*/0x0234/*::]*/: { /* n:"BrtColor" */ },
    	/*::[*/0x0235/*::]*/: { /* n:"BrtBeginIndexedColors", */ T:1 },
    	/*::[*/0x0236/*::]*/: { /* n:"BrtEndIndexedColors", */ T:-1 },
    	/*::[*/0x0239/*::]*/: { /* n:"BrtBeginMRUColors", */ T:1 },
    	/*::[*/0x023A/*::]*/: { /* n:"BrtEndMRUColors", */ T:-1 },
    	/*::[*/0x023C/*::]*/: { /* n:"BrtMRUColor" */ },
    	/*::[*/0x023D/*::]*/: { /* n:"BrtBeginDVals", */ T:1 },
    	/*::[*/0x023E/*::]*/: { /* n:"BrtEndDVals", */ T:-1 },
    	/*::[*/0x0241/*::]*/: { /* n:"BrtSupNameStart" */ },
    	/*::[*/0x0242/*::]*/: { /* n:"BrtSupNameValueStart" */ },
    	/*::[*/0x0243/*::]*/: { /* n:"BrtSupNameValueEnd" */ },
    	/*::[*/0x0244/*::]*/: { /* n:"BrtSupNameNum" */ },
    	/*::[*/0x0245/*::]*/: { /* n:"BrtSupNameErr" */ },
    	/*::[*/0x0246/*::]*/: { /* n:"BrtSupNameSt" */ },
    	/*::[*/0x0247/*::]*/: { /* n:"BrtSupNameNil" */ },
    	/*::[*/0x0248/*::]*/: { /* n:"BrtSupNameBool" */ },
    	/*::[*/0x0249/*::]*/: { /* n:"BrtSupNameFmla" */ },
    	/*::[*/0x024A/*::]*/: { /* n:"BrtSupNameBits" */ },
    	/*::[*/0x024B/*::]*/: { /* n:"BrtSupNameEnd" */ },
    	/*::[*/0x024C/*::]*/: { /* n:"BrtEndSupBook", */ T:-1 },
    	/*::[*/0x024D/*::]*/: { /* n:"BrtCellSmartTagProperty" */ },
    	/*::[*/0x024E/*::]*/: { /* n:"BrtBeginCellSmartTag", */ T:1 },
    	/*::[*/0x024F/*::]*/: { /* n:"BrtEndCellSmartTag", */ T:-1 },
    	/*::[*/0x0250/*::]*/: { /* n:"BrtBeginCellSmartTags", */ T:1 },
    	/*::[*/0x0251/*::]*/: { /* n:"BrtEndCellSmartTags", */ T:-1 },
    	/*::[*/0x0252/*::]*/: { /* n:"BrtBeginSmartTags", */ T:1 },
    	/*::[*/0x0253/*::]*/: { /* n:"BrtEndSmartTags", */ T:-1 },
    	/*::[*/0x0254/*::]*/: { /* n:"BrtSmartTagType" */ },
    	/*::[*/0x0255/*::]*/: { /* n:"BrtBeginSmartTagTypes", */ T:1 },
    	/*::[*/0x0256/*::]*/: { /* n:"BrtEndSmartTagTypes", */ T:-1 },
    	/*::[*/0x0257/*::]*/: { /* n:"BrtBeginSXFilters", */ T:1 },
    	/*::[*/0x0258/*::]*/: { /* n:"BrtEndSXFilters", */ T:-1 },
    	/*::[*/0x0259/*::]*/: { /* n:"BrtBeginSXFILTER", */ T:1 },
    	/*::[*/0x025A/*::]*/: { /* n:"BrtEndSXFilter", */ T:-1 },
    	/*::[*/0x025B/*::]*/: { /* n:"BrtBeginFills", */ T:1 },
    	/*::[*/0x025C/*::]*/: { /* n:"BrtEndFills", */ T:-1 },
    	/*::[*/0x025D/*::]*/: { /* n:"BrtBeginCellWatches", */ T:1 },
    	/*::[*/0x025E/*::]*/: { /* n:"BrtEndCellWatches", */ T:-1 },
    	/*::[*/0x025F/*::]*/: { /* n:"BrtCellWatch" */ },
    	/*::[*/0x0260/*::]*/: { /* n:"BrtBeginCRErrs", */ T:1 },
    	/*::[*/0x0261/*::]*/: { /* n:"BrtEndCRErrs", */ T:-1 },
    	/*::[*/0x0262/*::]*/: { /* n:"BrtCrashRecErr" */ },
    	/*::[*/0x0263/*::]*/: { /* n:"BrtBeginFonts", */ T:1 },
    	/*::[*/0x0264/*::]*/: { /* n:"BrtEndFonts", */ T:-1 },
    	/*::[*/0x0265/*::]*/: { /* n:"BrtBeginBorders", */ T:1 },
    	/*::[*/0x0266/*::]*/: { /* n:"BrtEndBorders", */ T:-1 },
    	/*::[*/0x0267/*::]*/: { /* n:"BrtBeginFmts", */ T:1 },
    	/*::[*/0x0268/*::]*/: { /* n:"BrtEndFmts", */ T:-1 },
    	/*::[*/0x0269/*::]*/: { /* n:"BrtBeginCellXFs", */ T:1 },
    	/*::[*/0x026A/*::]*/: { /* n:"BrtEndCellXFs", */ T:-1 },
    	/*::[*/0x026B/*::]*/: { /* n:"BrtBeginStyles", */ T:1 },
    	/*::[*/0x026C/*::]*/: { /* n:"BrtEndStyles", */ T:-1 },
    	/*::[*/0x0271/*::]*/: { /* n:"BrtBigName" */ },
    	/*::[*/0x0272/*::]*/: { /* n:"BrtBeginCellStyleXFs", */ T:1 },
    	/*::[*/0x0273/*::]*/: { /* n:"BrtEndCellStyleXFs", */ T:-1 },
    	/*::[*/0x0274/*::]*/: { /* n:"BrtBeginComments", */ T:1 },
    	/*::[*/0x0275/*::]*/: { /* n:"BrtEndComments", */ T:-1 },
    	/*::[*/0x0276/*::]*/: { /* n:"BrtBeginCommentAuthors", */ T:1 },
    	/*::[*/0x0277/*::]*/: { /* n:"BrtEndCommentAuthors", */ T:-1 },
    	/*::[*/0x0278/*::]*/: { /* n:"BrtCommentAuthor", */ f:parse_BrtCommentAuthor },
    	/*::[*/0x0279/*::]*/: { /* n:"BrtBeginCommentList", */ T:1 },
    	/*::[*/0x027A/*::]*/: { /* n:"BrtEndCommentList", */ T:-1 },
    	/*::[*/0x027B/*::]*/: { /* n:"BrtBeginComment", */ T:1, f:parse_BrtBeginComment},
    	/*::[*/0x027C/*::]*/: { /* n:"BrtEndComment", */ T:-1 },
    	/*::[*/0x027D/*::]*/: { /* n:"BrtCommentText", */ f:parse_BrtCommentText },
    	/*::[*/0x027E/*::]*/: { /* n:"BrtBeginOleObjects", */ T:1 },
    	/*::[*/0x027F/*::]*/: { /* n:"BrtOleObject" */ },
    	/*::[*/0x0280/*::]*/: { /* n:"BrtEndOleObjects", */ T:-1 },
    	/*::[*/0x0281/*::]*/: { /* n:"BrtBeginSxrules", */ T:1 },
    	/*::[*/0x0282/*::]*/: { /* n:"BrtEndSxRules", */ T:-1 },
    	/*::[*/0x0283/*::]*/: { /* n:"BrtBeginActiveXControls", */ T:1 },
    	/*::[*/0x0284/*::]*/: { /* n:"BrtActiveX" */ },
    	/*::[*/0x0285/*::]*/: { /* n:"BrtEndActiveXControls", */ T:-1 },
    	/*::[*/0x0286/*::]*/: { /* n:"BrtBeginPCDSDTCEMembersSortBy", */ T:1 },
    	/*::[*/0x0288/*::]*/: { /* n:"BrtBeginCellIgnoreECs", */ T:1 },
    	/*::[*/0x0289/*::]*/: { /* n:"BrtCellIgnoreEC" */ },
    	/*::[*/0x028A/*::]*/: { /* n:"BrtEndCellIgnoreECs", */ T:-1 },
    	/*::[*/0x028B/*::]*/: { /* n:"BrtCsProp", */ f:parse_BrtCsProp },
    	/*::[*/0x028C/*::]*/: { /* n:"BrtCsPageSetup" */ },
    	/*::[*/0x028D/*::]*/: { /* n:"BrtBeginUserCsViews", */ T:1 },
    	/*::[*/0x028E/*::]*/: { /* n:"BrtEndUserCsViews", */ T:-1 },
    	/*::[*/0x028F/*::]*/: { /* n:"BrtBeginUserCsView", */ T:1 },
    	/*::[*/0x0290/*::]*/: { /* n:"BrtEndUserCsView", */ T:-1 },
    	/*::[*/0x0291/*::]*/: { /* n:"BrtBeginPcdSFCIEntries", */ T:1 },
    	/*::[*/0x0292/*::]*/: { /* n:"BrtEndPCDSFCIEntries", */ T:-1 },
    	/*::[*/0x0293/*::]*/: { /* n:"BrtPCDSFCIEntry" */ },
    	/*::[*/0x0294/*::]*/: { /* n:"BrtBeginListParts", */ T:1 },
    	/*::[*/0x0295/*::]*/: { /* n:"BrtListPart" */ },
    	/*::[*/0x0296/*::]*/: { /* n:"BrtEndListParts", */ T:-1 },
    	/*::[*/0x0297/*::]*/: { /* n:"BrtSheetCalcProp" */ },
    	/*::[*/0x0298/*::]*/: { /* n:"BrtBeginFnGroup", */ T:1 },
    	/*::[*/0x0299/*::]*/: { /* n:"BrtFnGroup" */ },
    	/*::[*/0x029A/*::]*/: { /* n:"BrtEndFnGroup", */ T:-1 },
    	/*::[*/0x029B/*::]*/: { /* n:"BrtSupAddin" */ },
    	/*::[*/0x029C/*::]*/: { /* n:"BrtSXTDMPOrder" */ },
    	/*::[*/0x029D/*::]*/: { /* n:"BrtCsProtection" */ },
    	/*::[*/0x029F/*::]*/: { /* n:"BrtBeginWsSortMap", */ T:1 },
    	/*::[*/0x02A0/*::]*/: { /* n:"BrtEndWsSortMap", */ T:-1 },
    	/*::[*/0x02A1/*::]*/: { /* n:"BrtBeginRRSort", */ T:1 },
    	/*::[*/0x02A2/*::]*/: { /* n:"BrtEndRRSort", */ T:-1 },
    	/*::[*/0x02A3/*::]*/: { /* n:"BrtRRSortItem" */ },
    	/*::[*/0x02A4/*::]*/: { /* n:"BrtFileSharingIso" */ },
    	/*::[*/0x02A5/*::]*/: { /* n:"BrtBookProtectionIso" */ },
    	/*::[*/0x02A6/*::]*/: { /* n:"BrtSheetProtectionIso" */ },
    	/*::[*/0x02A7/*::]*/: { /* n:"BrtCsProtectionIso" */ },
    	/*::[*/0x02A8/*::]*/: { /* n:"BrtRangeProtectionIso" */ },
    	/*::[*/0x02A9/*::]*/: { /* n:"BrtDValList" */ },
    	/*::[*/0x0400/*::]*/: { /* n:"BrtRwDescent" */ },
    	/*::[*/0x0401/*::]*/: { /* n:"BrtKnownFonts" */ },
    	/*::[*/0x0402/*::]*/: { /* n:"BrtBeginSXTupleSet", */ T:1 },
    	/*::[*/0x0403/*::]*/: { /* n:"BrtEndSXTupleSet", */ T:-1 },
    	/*::[*/0x0404/*::]*/: { /* n:"BrtBeginSXTupleSetHeader", */ T:1 },
    	/*::[*/0x0405/*::]*/: { /* n:"BrtEndSXTupleSetHeader", */ T:-1 },
    	/*::[*/0x0406/*::]*/: { /* n:"BrtSXTupleSetHeaderItem" */ },
    	/*::[*/0x0407/*::]*/: { /* n:"BrtBeginSXTupleSetData", */ T:1 },
    	/*::[*/0x0408/*::]*/: { /* n:"BrtEndSXTupleSetData", */ T:-1 },
    	/*::[*/0x0409/*::]*/: { /* n:"BrtBeginSXTupleSetRow", */ T:1 },
    	/*::[*/0x040A/*::]*/: { /* n:"BrtEndSXTupleSetRow", */ T:-1 },
    	/*::[*/0x040B/*::]*/: { /* n:"BrtSXTupleSetRowItem" */ },
    	/*::[*/0x040C/*::]*/: { /* n:"BrtNameExt" */ },
    	/*::[*/0x040D/*::]*/: { /* n:"BrtPCDH14" */ },
    	/*::[*/0x040E/*::]*/: { /* n:"BrtBeginPCDCalcMem14", */ T:1 },
    	/*::[*/0x040F/*::]*/: { /* n:"BrtEndPCDCalcMem14", */ T:-1 },
    	/*::[*/0x0410/*::]*/: { /* n:"BrtSXTH14" */ },
    	/*::[*/0x0411/*::]*/: { /* n:"BrtBeginSparklineGroup", */ T:1 },
    	/*::[*/0x0412/*::]*/: { /* n:"BrtEndSparklineGroup", */ T:-1 },
    	/*::[*/0x0413/*::]*/: { /* n:"BrtSparkline" */ },
    	/*::[*/0x0414/*::]*/: { /* n:"BrtSXDI14" */ },
    	/*::[*/0x0415/*::]*/: { /* n:"BrtWsFmtInfoEx14" */ },
    	/*::[*/0x0416/*::]*/: { /* n:"BrtBeginConditionalFormatting14", */ T:1 },
    	/*::[*/0x0417/*::]*/: { /* n:"BrtEndConditionalFormatting14", */ T:-1 },
    	/*::[*/0x0418/*::]*/: { /* n:"BrtBeginCFRule14", */ T:1 },
    	/*::[*/0x0419/*::]*/: { /* n:"BrtEndCFRule14", */ T:-1 },
    	/*::[*/0x041A/*::]*/: { /* n:"BrtCFVO14" */ },
    	/*::[*/0x041B/*::]*/: { /* n:"BrtBeginDatabar14", */ T:1 },
    	/*::[*/0x041C/*::]*/: { /* n:"BrtBeginIconSet14", */ T:1 },
    	/*::[*/0x041D/*::]*/: { /* n:"BrtDVal14", */ f: parse_BrtDVal14 },
    	/*::[*/0x041E/*::]*/: { /* n:"BrtBeginDVals14", */ T:1 },
    	/*::[*/0x041F/*::]*/: { /* n:"BrtColor14" */ },
    	/*::[*/0x0420/*::]*/: { /* n:"BrtBeginSparklines", */ T:1 },
    	/*::[*/0x0421/*::]*/: { /* n:"BrtEndSparklines", */ T:-1 },
    	/*::[*/0x0422/*::]*/: { /* n:"BrtBeginSparklineGroups", */ T:1 },
    	/*::[*/0x0423/*::]*/: { /* n:"BrtEndSparklineGroups", */ T:-1 },
    	/*::[*/0x0425/*::]*/: { /* n:"BrtSXVD14" */ },
    	/*::[*/0x0426/*::]*/: { /* n:"BrtBeginSXView14", */ T:1 },
    	/*::[*/0x0427/*::]*/: { /* n:"BrtEndSXView14", */ T:-1 },
    	/*::[*/0x0428/*::]*/: { /* n:"BrtBeginSXView16", */ T:1 },
    	/*::[*/0x0429/*::]*/: { /* n:"BrtEndSXView16", */ T:-1 },
    	/*::[*/0x042A/*::]*/: { /* n:"BrtBeginPCD14", */ T:1 },
    	/*::[*/0x042B/*::]*/: { /* n:"BrtEndPCD14", */ T:-1 },
    	/*::[*/0x042C/*::]*/: { /* n:"BrtBeginExtConn14", */ T:1 },
    	/*::[*/0x042D/*::]*/: { /* n:"BrtEndExtConn14", */ T:-1 },
    	/*::[*/0x042E/*::]*/: { /* n:"BrtBeginSlicerCacheIDs", */ T:1 },
    	/*::[*/0x042F/*::]*/: { /* n:"BrtEndSlicerCacheIDs", */ T:-1 },
    	/*::[*/0x0430/*::]*/: { /* n:"BrtBeginSlicerCacheID", */ T:1 },
    	/*::[*/0x0431/*::]*/: { /* n:"BrtEndSlicerCacheID", */ T:-1 },
    	/*::[*/0x0433/*::]*/: { /* n:"BrtBeginSlicerCache", */ T:1 },
    	/*::[*/0x0434/*::]*/: { /* n:"BrtEndSlicerCache", */ T:-1 },
    	/*::[*/0x0435/*::]*/: { /* n:"BrtBeginSlicerCacheDef", */ T:1 },
    	/*::[*/0x0436/*::]*/: { /* n:"BrtEndSlicerCacheDef", */ T:-1 },
    	/*::[*/0x0437/*::]*/: { /* n:"BrtBeginSlicersEx", */ T:1 },
    	/*::[*/0x0438/*::]*/: { /* n:"BrtEndSlicersEx", */ T:-1 },
    	/*::[*/0x0439/*::]*/: { /* n:"BrtBeginSlicerEx", */ T:1 },
    	/*::[*/0x043A/*::]*/: { /* n:"BrtEndSlicerEx", */ T:-1 },
    	/*::[*/0x043B/*::]*/: { /* n:"BrtBeginSlicer", */ T:1 },
    	/*::[*/0x043C/*::]*/: { /* n:"BrtEndSlicer", */ T:-1 },
    	/*::[*/0x043D/*::]*/: { /* n:"BrtSlicerCachePivotTables" */ },
    	/*::[*/0x043E/*::]*/: { /* n:"BrtBeginSlicerCacheOlapImpl", */ T:1 },
    	/*::[*/0x043F/*::]*/: { /* n:"BrtEndSlicerCacheOlapImpl", */ T:-1 },
    	/*::[*/0x0440/*::]*/: { /* n:"BrtBeginSlicerCacheLevelsData", */ T:1 },
    	/*::[*/0x0441/*::]*/: { /* n:"BrtEndSlicerCacheLevelsData", */ T:-1 },
    	/*::[*/0x0442/*::]*/: { /* n:"BrtBeginSlicerCacheLevelData", */ T:1 },
    	/*::[*/0x0443/*::]*/: { /* n:"BrtEndSlicerCacheLevelData", */ T:-1 },
    	/*::[*/0x0444/*::]*/: { /* n:"BrtBeginSlicerCacheSiRanges", */ T:1 },
    	/*::[*/0x0445/*::]*/: { /* n:"BrtEndSlicerCacheSiRanges", */ T:-1 },
    	/*::[*/0x0446/*::]*/: { /* n:"BrtBeginSlicerCacheSiRange", */ T:1 },
    	/*::[*/0x0447/*::]*/: { /* n:"BrtEndSlicerCacheSiRange", */ T:-1 },
    	/*::[*/0x0448/*::]*/: { /* n:"BrtSlicerCacheOlapItem" */ },
    	/*::[*/0x0449/*::]*/: { /* n:"BrtBeginSlicerCacheSelections", */ T:1 },
    	/*::[*/0x044A/*::]*/: { /* n:"BrtSlicerCacheSelection" */ },
    	/*::[*/0x044B/*::]*/: { /* n:"BrtEndSlicerCacheSelections", */ T:-1 },
    	/*::[*/0x044C/*::]*/: { /* n:"BrtBeginSlicerCacheNative", */ T:1 },
    	/*::[*/0x044D/*::]*/: { /* n:"BrtEndSlicerCacheNative", */ T:-1 },
    	/*::[*/0x044E/*::]*/: { /* n:"BrtSlicerCacheNativeItem" */ },
    	/*::[*/0x044F/*::]*/: { /* n:"BrtRangeProtection14" */ },
    	/*::[*/0x0450/*::]*/: { /* n:"BrtRangeProtectionIso14" */ },
    	/*::[*/0x0451/*::]*/: { /* n:"BrtCellIgnoreEC14" */ },
    	/*::[*/0x0457/*::]*/: { /* n:"BrtList14" */ },
    	/*::[*/0x0458/*::]*/: { /* n:"BrtCFIcon" */ },
    	/*::[*/0x0459/*::]*/: { /* n:"BrtBeginSlicerCachesPivotCacheIDs", */ T:1 },
    	/*::[*/0x045A/*::]*/: { /* n:"BrtEndSlicerCachesPivotCacheIDs", */ T:-1 },
    	/*::[*/0x045B/*::]*/: { /* n:"BrtBeginSlicers", */ T:1 },
    	/*::[*/0x045C/*::]*/: { /* n:"BrtEndSlicers", */ T:-1 },
    	/*::[*/0x045D/*::]*/: { /* n:"BrtWbProp14" */ },
    	/*::[*/0x045E/*::]*/: { /* n:"BrtBeginSXEdit", */ T:1 },
    	/*::[*/0x045F/*::]*/: { /* n:"BrtEndSXEdit", */ T:-1 },
    	/*::[*/0x0460/*::]*/: { /* n:"BrtBeginSXEdits", */ T:1 },
    	/*::[*/0x0461/*::]*/: { /* n:"BrtEndSXEdits", */ T:-1 },
    	/*::[*/0x0462/*::]*/: { /* n:"BrtBeginSXChange", */ T:1 },
    	/*::[*/0x0463/*::]*/: { /* n:"BrtEndSXChange", */ T:-1 },
    	/*::[*/0x0464/*::]*/: { /* n:"BrtBeginSXChanges", */ T:1 },
    	/*::[*/0x0465/*::]*/: { /* n:"BrtEndSXChanges", */ T:-1 },
    	/*::[*/0x0466/*::]*/: { /* n:"BrtSXTupleItems" */ },
    	/*::[*/0x0468/*::]*/: { /* n:"BrtBeginSlicerStyle", */ T:1 },
    	/*::[*/0x0469/*::]*/: { /* n:"BrtEndSlicerStyle", */ T:-1 },
    	/*::[*/0x046A/*::]*/: { /* n:"BrtSlicerStyleElement" */ },
    	/*::[*/0x046B/*::]*/: { /* n:"BrtBeginStyleSheetExt14", */ T:1 },
    	/*::[*/0x046C/*::]*/: { /* n:"BrtEndStyleSheetExt14", */ T:-1 },
    	/*::[*/0x046D/*::]*/: { /* n:"BrtBeginSlicerCachesPivotCacheID", */ T:1 },
    	/*::[*/0x046E/*::]*/: { /* n:"BrtEndSlicerCachesPivotCacheID", */ T:-1 },
    	/*::[*/0x046F/*::]*/: { /* n:"BrtBeginConditionalFormattings", */ T:1 },
    	/*::[*/0x0470/*::]*/: { /* n:"BrtEndConditionalFormattings", */ T:-1 },
    	/*::[*/0x0471/*::]*/: { /* n:"BrtBeginPCDCalcMemExt", */ T:1 },
    	/*::[*/0x0472/*::]*/: { /* n:"BrtEndPCDCalcMemExt", */ T:-1 },
    	/*::[*/0x0473/*::]*/: { /* n:"BrtBeginPCDCalcMemsExt", */ T:1 },
    	/*::[*/0x0474/*::]*/: { /* n:"BrtEndPCDCalcMemsExt", */ T:-1 },
    	/*::[*/0x0475/*::]*/: { /* n:"BrtPCDField14" */ },
    	/*::[*/0x0476/*::]*/: { /* n:"BrtBeginSlicerStyles", */ T:1 },
    	/*::[*/0x0477/*::]*/: { /* n:"BrtEndSlicerStyles", */ T:-1 },
    	/*::[*/0x0478/*::]*/: { /* n:"BrtBeginSlicerStyleElements", */ T:1 },
    	/*::[*/0x0479/*::]*/: { /* n:"BrtEndSlicerStyleElements", */ T:-1 },
    	/*::[*/0x047A/*::]*/: { /* n:"BrtCFRuleExt" */ },
    	/*::[*/0x047B/*::]*/: { /* n:"BrtBeginSXCondFmt14", */ T:1 },
    	/*::[*/0x047C/*::]*/: { /* n:"BrtEndSXCondFmt14", */ T:-1 },
    	/*::[*/0x047D/*::]*/: { /* n:"BrtBeginSXCondFmts14", */ T:1 },
    	/*::[*/0x047E/*::]*/: { /* n:"BrtEndSXCondFmts14", */ T:-1 },
    	/*::[*/0x0480/*::]*/: { /* n:"BrtBeginSortCond14", */ T:1 },
    	/*::[*/0x0481/*::]*/: { /* n:"BrtEndSortCond14", */ T:-1 },
    	/*::[*/0x0482/*::]*/: { /* n:"BrtEndDVals14", */ T:-1 },
    	/*::[*/0x0483/*::]*/: { /* n:"BrtEndIconSet14", */ T:-1 },
    	/*::[*/0x0484/*::]*/: { /* n:"BrtEndDatabar14", */ T:-1 },
    	/*::[*/0x0485/*::]*/: { /* n:"BrtBeginColorScale14", */ T:1 },
    	/*::[*/0x0486/*::]*/: { /* n:"BrtEndColorScale14", */ T:-1 },
    	/*::[*/0x0487/*::]*/: { /* n:"BrtBeginSxrules14", */ T:1 },
    	/*::[*/0x0488/*::]*/: { /* n:"BrtEndSxrules14", */ T:-1 },
    	/*::[*/0x0489/*::]*/: { /* n:"BrtBeginPRule14", */ T:1 },
    	/*::[*/0x048A/*::]*/: { /* n:"BrtEndPRule14", */ T:-1 },
    	/*::[*/0x048B/*::]*/: { /* n:"BrtBeginPRFilters14", */ T:1 },
    	/*::[*/0x048C/*::]*/: { /* n:"BrtEndPRFilters14", */ T:-1 },
    	/*::[*/0x048D/*::]*/: { /* n:"BrtBeginPRFilter14", */ T:1 },
    	/*::[*/0x048E/*::]*/: { /* n:"BrtEndPRFilter14", */ T:-1 },
    	/*::[*/0x048F/*::]*/: { /* n:"BrtBeginPRFItem14", */ T:1 },
    	/*::[*/0x0490/*::]*/: { /* n:"BrtEndPRFItem14", */ T:-1 },
    	/*::[*/0x0491/*::]*/: { /* n:"BrtBeginCellIgnoreECs14", */ T:1 },
    	/*::[*/0x0492/*::]*/: { /* n:"BrtEndCellIgnoreECs14", */ T:-1 },
    	/*::[*/0x0493/*::]*/: { /* n:"BrtDxf14" */ },
    	/*::[*/0x0494/*::]*/: { /* n:"BrtBeginDxF14s", */ T:1 },
    	/*::[*/0x0495/*::]*/: { /* n:"BrtEndDxf14s", */ T:-1 },
    	/*::[*/0x0499/*::]*/: { /* n:"BrtFilter14" */ },
    	/*::[*/0x049A/*::]*/: { /* n:"BrtBeginCustomFilters14", */ T:1 },
    	/*::[*/0x049C/*::]*/: { /* n:"BrtCustomFilter14" */ },
    	/*::[*/0x049D/*::]*/: { /* n:"BrtIconFilter14" */ },
    	/*::[*/0x049E/*::]*/: { /* n:"BrtPivotCacheConnectionName" */ },
    	/*::[*/0x0800/*::]*/: { /* n:"BrtBeginDecoupledPivotCacheIDs", */ T:1 },
    	/*::[*/0x0801/*::]*/: { /* n:"BrtEndDecoupledPivotCacheIDs", */ T:-1 },
    	/*::[*/0x0802/*::]*/: { /* n:"BrtDecoupledPivotCacheID" */ },
    	/*::[*/0x0803/*::]*/: { /* n:"BrtBeginPivotTableRefs", */ T:1 },
    	/*::[*/0x0804/*::]*/: { /* n:"BrtEndPivotTableRefs", */ T:-1 },
    	/*::[*/0x0805/*::]*/: { /* n:"BrtPivotTableRef" */ },
    	/*::[*/0x0806/*::]*/: { /* n:"BrtSlicerCacheBookPivotTables" */ },
    	/*::[*/0x0807/*::]*/: { /* n:"BrtBeginSxvcells", */ T:1 },
    	/*::[*/0x0808/*::]*/: { /* n:"BrtEndSxvcells", */ T:-1 },
    	/*::[*/0x0809/*::]*/: { /* n:"BrtBeginSxRow", */ T:1 },
    	/*::[*/0x080A/*::]*/: { /* n:"BrtEndSxRow", */ T:-1 },
    	/*::[*/0x080C/*::]*/: { /* n:"BrtPcdCalcMem15" */ },
    	/*::[*/0x0813/*::]*/: { /* n:"BrtQsi15" */ },
    	/*::[*/0x0814/*::]*/: { /* n:"BrtBeginWebExtensions", */ T:1 },
    	/*::[*/0x0815/*::]*/: { /* n:"BrtEndWebExtensions", */ T:-1 },
    	/*::[*/0x0816/*::]*/: { /* n:"BrtWebExtension" */ },
    	/*::[*/0x0817/*::]*/: { /* n:"BrtAbsPath15" */ },
    	/*::[*/0x0818/*::]*/: { /* n:"BrtBeginPivotTableUISettings", */ T:1 },
    	/*::[*/0x0819/*::]*/: { /* n:"BrtEndPivotTableUISettings", */ T:-1 },
    	/*::[*/0x081B/*::]*/: { /* n:"BrtTableSlicerCacheIDs" */ },
    	/*::[*/0x081C/*::]*/: { /* n:"BrtTableSlicerCacheID" */ },
    	/*::[*/0x081D/*::]*/: { /* n:"BrtBeginTableSlicerCache", */ T:1 },
    	/*::[*/0x081E/*::]*/: { /* n:"BrtEndTableSlicerCache", */ T:-1 },
    	/*::[*/0x081F/*::]*/: { /* n:"BrtSxFilter15" */ },
    	/*::[*/0x0820/*::]*/: { /* n:"BrtBeginTimelineCachePivotCacheIDs", */ T:1 },
    	/*::[*/0x0821/*::]*/: { /* n:"BrtEndTimelineCachePivotCacheIDs", */ T:-1 },
    	/*::[*/0x0822/*::]*/: { /* n:"BrtTimelineCachePivotCacheID" */ },
    	/*::[*/0x0823/*::]*/: { /* n:"BrtBeginTimelineCacheIDs", */ T:1 },
    	/*::[*/0x0824/*::]*/: { /* n:"BrtEndTimelineCacheIDs", */ T:-1 },
    	/*::[*/0x0825/*::]*/: { /* n:"BrtBeginTimelineCacheID", */ T:1 },
    	/*::[*/0x0826/*::]*/: { /* n:"BrtEndTimelineCacheID", */ T:-1 },
    	/*::[*/0x0827/*::]*/: { /* n:"BrtBeginTimelinesEx", */ T:1 },
    	/*::[*/0x0828/*::]*/: { /* n:"BrtEndTimelinesEx", */ T:-1 },
    	/*::[*/0x0829/*::]*/: { /* n:"BrtBeginTimelineEx", */ T:1 },
    	/*::[*/0x082A/*::]*/: { /* n:"BrtEndTimelineEx", */ T:-1 },
    	/*::[*/0x082B/*::]*/: { /* n:"BrtWorkBookPr15" */ },
    	/*::[*/0x082C/*::]*/: { /* n:"BrtPCDH15" */ },
    	/*::[*/0x082D/*::]*/: { /* n:"BrtBeginTimelineStyle", */ T:1 },
    	/*::[*/0x082E/*::]*/: { /* n:"BrtEndTimelineStyle", */ T:-1 },
    	/*::[*/0x082F/*::]*/: { /* n:"BrtTimelineStyleElement" */ },
    	/*::[*/0x0830/*::]*/: { /* n:"BrtBeginTimelineStylesheetExt15", */ T:1 },
    	/*::[*/0x0831/*::]*/: { /* n:"BrtEndTimelineStylesheetExt15", */ T:-1 },
    	/*::[*/0x0832/*::]*/: { /* n:"BrtBeginTimelineStyles", */ T:1 },
    	/*::[*/0x0833/*::]*/: { /* n:"BrtEndTimelineStyles", */ T:-1 },
    	/*::[*/0x0834/*::]*/: { /* n:"BrtBeginTimelineStyleElements", */ T:1 },
    	/*::[*/0x0835/*::]*/: { /* n:"BrtEndTimelineStyleElements", */ T:-1 },
    	/*::[*/0x0836/*::]*/: { /* n:"BrtDxf15" */ },
    	/*::[*/0x0837/*::]*/: { /* n:"BrtBeginDxfs15", */ T:1 },
    	/*::[*/0x0838/*::]*/: { /* n:"BrtEndDxfs15", */ T:-1 },
    	/*::[*/0x0839/*::]*/: { /* n:"BrtSlicerCacheHideItemsWithNoData" */ },
    	/*::[*/0x083A/*::]*/: { /* n:"BrtBeginItemUniqueNames", */ T:1 },
    	/*::[*/0x083B/*::]*/: { /* n:"BrtEndItemUniqueNames", */ T:-1 },
    	/*::[*/0x083C/*::]*/: { /* n:"BrtItemUniqueName" */ },
    	/*::[*/0x083D/*::]*/: { /* n:"BrtBeginExtConn15", */ T:1 },
    	/*::[*/0x083E/*::]*/: { /* n:"BrtEndExtConn15", */ T:-1 },
    	/*::[*/0x083F/*::]*/: { /* n:"BrtBeginOledbPr15", */ T:1 },
    	/*::[*/0x0840/*::]*/: { /* n:"BrtEndOledbPr15", */ T:-1 },
    	/*::[*/0x0841/*::]*/: { /* n:"BrtBeginDataFeedPr15", */ T:1 },
    	/*::[*/0x0842/*::]*/: { /* n:"BrtEndDataFeedPr15", */ T:-1 },
    	/*::[*/0x0843/*::]*/: { /* n:"BrtTextPr15" */ },
    	/*::[*/0x0844/*::]*/: { /* n:"BrtRangePr15" */ },
    	/*::[*/0x0845/*::]*/: { /* n:"BrtDbCommand15" */ },
    	/*::[*/0x0846/*::]*/: { /* n:"BrtBeginDbTables15", */ T:1 },
    	/*::[*/0x0847/*::]*/: { /* n:"BrtEndDbTables15", */ T:-1 },
    	/*::[*/0x0848/*::]*/: { /* n:"BrtDbTable15" */ },
    	/*::[*/0x0849/*::]*/: { /* n:"BrtBeginDataModel", */ T:1 },
    	/*::[*/0x084A/*::]*/: { /* n:"BrtEndDataModel", */ T:-1 },
    	/*::[*/0x084B/*::]*/: { /* n:"BrtBeginModelTables", */ T:1 },
    	/*::[*/0x084C/*::]*/: { /* n:"BrtEndModelTables", */ T:-1 },
    	/*::[*/0x084D/*::]*/: { /* n:"BrtModelTable" */ },
    	/*::[*/0x084E/*::]*/: { /* n:"BrtBeginModelRelationships", */ T:1 },
    	/*::[*/0x084F/*::]*/: { /* n:"BrtEndModelRelationships", */ T:-1 },
    	/*::[*/0x0850/*::]*/: { /* n:"BrtModelRelationship" */ },
    	/*::[*/0x0851/*::]*/: { /* n:"BrtBeginECTxtWiz15", */ T:1 },
    	/*::[*/0x0852/*::]*/: { /* n:"BrtEndECTxtWiz15", */ T:-1 },
    	/*::[*/0x0853/*::]*/: { /* n:"BrtBeginECTWFldInfoLst15", */ T:1 },
    	/*::[*/0x0854/*::]*/: { /* n:"BrtEndECTWFldInfoLst15", */ T:-1 },
    	/*::[*/0x0855/*::]*/: { /* n:"BrtBeginECTWFldInfo15", */ T:1 },
    	/*::[*/0x0856/*::]*/: { /* n:"BrtFieldListActiveItem" */ },
    	/*::[*/0x0857/*::]*/: { /* n:"BrtPivotCacheIdVersion" */ },
    	/*::[*/0x0858/*::]*/: { /* n:"BrtSXDI15" */ },
    	/*::[*/0x0859/*::]*/: { /* n:"BrtBeginModelTimeGroupings", */ T:1 },
    	/*::[*/0x085A/*::]*/: { /* n:"BrtEndModelTimeGroupings", */ T:-1 },
    	/*::[*/0x085B/*::]*/: { /* n:"BrtBeginModelTimeGrouping", */ T:1 },
    	/*::[*/0x085C/*::]*/: { /* n:"BrtEndModelTimeGrouping", */ T:-1 },
    	/*::[*/0x085D/*::]*/: { /* n:"BrtModelTimeGroupingCalcCol" */ },
    	/*::[*/0x0C00/*::]*/: { /* n:"BrtUid" */ },
    	/*::[*/0x0C01/*::]*/: { /* n:"BrtRevisionPtr" */ },
    	/*::[*/0x1000/*::]*/: { /* n:"BrtBeginDynamicArrayPr", */ T:1 },
    	/*::[*/0x1001/*::]*/: { /* n:"BrtEndDynamicArrayPr", */ T:-1 },
    	/*::[*/0x138A/*::]*/: { /* n:"BrtBeginRichValueBlock", */ T:1 },
    	/*::[*/0x138B/*::]*/: { /* n:"BrtEndRichValueBlock", */ T:-1 },
    	/*::[*/0x13D9/*::]*/: { /* n:"BrtBeginRichFilters", */ T:1 },
    	/*::[*/0x13DA/*::]*/: { /* n:"BrtEndRichFilters", */ T:-1 },
    	/*::[*/0x13DB/*::]*/: { /* n:"BrtRichFilter" */ },
    	/*::[*/0x13DC/*::]*/: { /* n:"BrtBeginRichFilterColumn", */ T:1 },
    	/*::[*/0x13DD/*::]*/: { /* n:"BrtEndRichFilterColumn", */ T:-1 },
    	/*::[*/0x13DE/*::]*/: { /* n:"BrtBeginCustomRichFilters", */ T:1 },
    	/*::[*/0x13DF/*::]*/: { /* n:"BrtEndCustomRichFilters", */ T:-1 },
    	/*::[*/0x13E0/*::]*/: { /* n:"BrtCustomRichFilter" */ },
    	/*::[*/0x13E1/*::]*/: { /* n:"BrtTop10RichFilter" */ },
    	/*::[*/0x13E2/*::]*/: { /* n:"BrtDynamicRichFilter" */ },
    	/*::[*/0x13E4/*::]*/: { /* n:"BrtBeginRichSortCondition", */ T:1 },
    	/*::[*/0x13E5/*::]*/: { /* n:"BrtEndRichSortCondition", */ T:-1 },
    	/*::[*/0x13E6/*::]*/: { /* n:"BrtRichFilterDateGroupItem" */ },
    	/*::[*/0x13E7/*::]*/: { /* n:"BrtBeginCalcFeatures", */ T:1 },
    	/*::[*/0x13E8/*::]*/: { /* n:"BrtEndCalcFeatures", */ T:-1 },
    	/*::[*/0x13E9/*::]*/: { /* n:"BrtCalcFeature" */ },
    	/*::[*/0x13EB/*::]*/: { /* n:"BrtExternalLinksPr" */ },
    	/*::[*/0xFFFF/*::]*/: { n:"" }
    };

    /* [MS-XLS] 2.3 Record Enumeration (and other sources) */
    var XLSRecordEnum = {
    	/* [MS-XLS] 2.3 Record Enumeration 2021-08-17 */
    	/*::[*/0x0006/*::]*/: { /* n:"Formula", */ f:parse_Formula },
    	/*::[*/0x000a/*::]*/: { /* n:"EOF", */ f:parsenoop2 },
    	/*::[*/0x000c/*::]*/: { /* n:"CalcCount", */ f:parseuint16 }, //
    	/*::[*/0x000d/*::]*/: { /* n:"CalcMode", */ f:parseuint16 }, //
    	/*::[*/0x000e/*::]*/: { /* n:"CalcPrecision", */ f:parsebool }, //
    	/*::[*/0x000f/*::]*/: { /* n:"CalcRefMode", */ f:parsebool }, //
    	/*::[*/0x0010/*::]*/: { /* n:"CalcDelta", */ f:parse_Xnum }, //
    	/*::[*/0x0011/*::]*/: { /* n:"CalcIter", */ f:parsebool }, //
    	/*::[*/0x0012/*::]*/: { /* n:"Protect", */ f:parsebool },
    	/*::[*/0x0013/*::]*/: { /* n:"Password", */ f:parseuint16 },
    	/*::[*/0x0014/*::]*/: { /* n:"Header", */ f:parse_XLHeaderFooter },
    	/*::[*/0x0015/*::]*/: { /* n:"Footer", */ f:parse_XLHeaderFooter },
    	/*::[*/0x0017/*::]*/: { /* n:"ExternSheet", */ f:parse_ExternSheet },
    	/*::[*/0x0018/*::]*/: { /* n:"Lbl", */ f:parse_Lbl },
    	/*::[*/0x0019/*::]*/: { /* n:"WinProtect", */ f:parsebool },
    	/*::[*/0x001a/*::]*/: { /* n:"VerticalPageBreaks", */ },
    	/*::[*/0x001b/*::]*/: { /* n:"HorizontalPageBreaks", */ },
    	/*::[*/0x001c/*::]*/: { /* n:"Note", */ f:parse_Note },
    	/*::[*/0x001d/*::]*/: { /* n:"Selection", */ },
    	/*::[*/0x0022/*::]*/: { /* n:"Date1904", */ f:parsebool },
    	/*::[*/0x0023/*::]*/: { /* n:"ExternName", */ f:parse_ExternName },
    	/*::[*/0x0026/*::]*/: { /* n:"LeftMargin", */ f:parse_Xnum }, // *
    	/*::[*/0x0027/*::]*/: { /* n:"RightMargin", */ f:parse_Xnum }, // *
    	/*::[*/0x0028/*::]*/: { /* n:"TopMargin", */ f:parse_Xnum }, // *
    	/*::[*/0x0029/*::]*/: { /* n:"BottomMargin", */ f:parse_Xnum }, // *
    	/*::[*/0x002a/*::]*/: { /* n:"PrintRowCol", */ f:parsebool },
    	/*::[*/0x002b/*::]*/: { /* n:"PrintGrid", */ f:parsebool },
    	/*::[*/0x002f/*::]*/: { /* n:"FilePass", */ f:parse_FilePass },
    	/*::[*/0x0031/*::]*/: { /* n:"Font", */ f:parse_Font },
    	/*::[*/0x0033/*::]*/: { /* n:"PrintSize", */ f:parseuint16 },
    	/*::[*/0x003c/*::]*/: { /* n:"Continue", */ },
    	/*::[*/0x003d/*::]*/: { /* n:"Window1", */ f:parse_Window1 },
    	/*::[*/0x0040/*::]*/: { /* n:"Backup", */ f:parsebool },
    	/*::[*/0x0041/*::]*/: { /* n:"Pane", */ f:parse_Pane },
    	/*::[*/0x0042/*::]*/: { /* n:"CodePage", */ f:parseuint16 },
    	/*::[*/0x004d/*::]*/: { /* n:"Pls", */ },
    	/*::[*/0x0050/*::]*/: { /* n:"DCon", */ },
    	/*::[*/0x0051/*::]*/: { /* n:"DConRef", */ },
    	/*::[*/0x0052/*::]*/: { /* n:"DConName", */ },
    	/*::[*/0x0055/*::]*/: { /* n:"DefColWidth", */ f:parseuint16 },
    	/*::[*/0x0059/*::]*/: { /* n:"XCT", */ },
    	/*::[*/0x005a/*::]*/: { /* n:"CRN", */ },
    	/*::[*/0x005b/*::]*/: { /* n:"FileSharing", */ },
    	/*::[*/0x005c/*::]*/: { /* n:"WriteAccess", */ f:parse_WriteAccess },
    	/*::[*/0x005d/*::]*/: { /* n:"Obj", */ f:parse_Obj },
    	/*::[*/0x005e/*::]*/: { /* n:"Uncalced", */ },
    	/*::[*/0x005f/*::]*/: { /* n:"CalcSaveRecalc", */ f:parsebool }, //
    	/*::[*/0x0060/*::]*/: { /* n:"Template", */ },
    	/*::[*/0x0061/*::]*/: { /* n:"Intl", */ },
    	/*::[*/0x0063/*::]*/: { /* n:"ObjProtect", */ f:parsebool },
    	/*::[*/0x007d/*::]*/: { /* n:"ColInfo", */ f:parse_ColInfo },
    	/*::[*/0x0080/*::]*/: { /* n:"Guts", */ f:parse_Guts },
    	/*::[*/0x0081/*::]*/: { /* n:"WsBool", */ f:parse_WsBool },
    	/*::[*/0x0082/*::]*/: { /* n:"GridSet", */ f:parseuint16 },
    	/*::[*/0x0083/*::]*/: { /* n:"HCenter", */ f:parsebool },
    	/*::[*/0x0084/*::]*/: { /* n:"VCenter", */ f:parsebool },
    	/*::[*/0x0085/*::]*/: { /* n:"BoundSheet8", */ f:parse_BoundSheet8 },
    	/*::[*/0x0086/*::]*/: { /* n:"WriteProtect", */ },
    	/*::[*/0x008c/*::]*/: { /* n:"Country", */ f:parse_Country },
    	/*::[*/0x008d/*::]*/: { /* n:"HideObj", */ f:parseuint16 },
    	/*::[*/0x0090/*::]*/: { /* n:"Sort", */ },
    	/*::[*/0x0092/*::]*/: { /* n:"Palette", */ f:parse_Palette },
    	/*::[*/0x0097/*::]*/: { /* n:"Sync", */ },
    	/*::[*/0x0098/*::]*/: { /* n:"LPr", */ },
    	/*::[*/0x0099/*::]*/: { /* n:"DxGCol", */ },
    	/*::[*/0x009a/*::]*/: { /* n:"FnGroupName", */ },
    	/*::[*/0x009b/*::]*/: { /* n:"FilterMode", */ },
    	/*::[*/0x009c/*::]*/: { /* n:"BuiltInFnGroupCount", */ f:parseuint16 },
    	/*::[*/0x009d/*::]*/: { /* n:"AutoFilterInfo", */ },
    	/*::[*/0x009e/*::]*/: { /* n:"AutoFilter", */ },
    	/*::[*/0x00a0/*::]*/: { /* n:"Scl", */ f:parse_Scl },
    	/*::[*/0x00a1/*::]*/: { /* n:"Setup", */ f:parse_Setup },
    	/*::[*/0x00ae/*::]*/: { /* n:"ScenMan", */ },
    	/*::[*/0x00af/*::]*/: { /* n:"SCENARIO", */ },
    	/*::[*/0x00b0/*::]*/: { /* n:"SxView", */ },
    	/*::[*/0x00b1/*::]*/: { /* n:"Sxvd", */ },
    	/*::[*/0x00b2/*::]*/: { /* n:"SXVI", */ },
    	/*::[*/0x00b4/*::]*/: { /* n:"SxIvd", */ },
    	/*::[*/0x00b5/*::]*/: { /* n:"SXLI", */ },
    	/*::[*/0x00b6/*::]*/: { /* n:"SXPI", */ },
    	/*::[*/0x00b8/*::]*/: { /* n:"DocRoute", */ },
    	/*::[*/0x00b9/*::]*/: { /* n:"RecipName", */ },
    	/*::[*/0x00bd/*::]*/: { /* n:"MulRk", */ f:parse_MulRk },
    	/*::[*/0x00be/*::]*/: { /* n:"MulBlank", */ f:parse_MulBlank },
    	/*::[*/0x00c1/*::]*/: { /* n:"Mms", */ f:parsenoop2 },
    	/*::[*/0x00c5/*::]*/: { /* n:"SXDI", */ },
    	/*::[*/0x00c6/*::]*/: { /* n:"SXDB", */ },
    	/*::[*/0x00c7/*::]*/: { /* n:"SXFDB", */ },
    	/*::[*/0x00c8/*::]*/: { /* n:"SXDBB", */ },
    	/*::[*/0x00c9/*::]*/: { /* n:"SXNum", */ },
    	/*::[*/0x00ca/*::]*/: { /* n:"SxBool", */ f:parsebool },
    	/*::[*/0x00cb/*::]*/: { /* n:"SxErr", */ },
    	/*::[*/0x00cc/*::]*/: { /* n:"SXInt", */ },
    	/*::[*/0x00cd/*::]*/: { /* n:"SXString", */ },
    	/*::[*/0x00ce/*::]*/: { /* n:"SXDtr", */ },
    	/*::[*/0x00cf/*::]*/: { /* n:"SxNil", */ },
    	/*::[*/0x00d0/*::]*/: { /* n:"SXTbl", */ },
    	/*::[*/0x00d1/*::]*/: { /* n:"SXTBRGIITM", */ },
    	/*::[*/0x00d2/*::]*/: { /* n:"SxTbpg", */ },
    	/*::[*/0x00d3/*::]*/: { /* n:"ObProj", */ },
    	/*::[*/0x00d5/*::]*/: { /* n:"SXStreamID", */ },
    	/*::[*/0x00d7/*::]*/: { /* n:"DBCell", */ },
    	/*::[*/0x00d8/*::]*/: { /* n:"SXRng", */ },
    	/*::[*/0x00d9/*::]*/: { /* n:"SxIsxoper", */ },
    	/*::[*/0x00da/*::]*/: { /* n:"BookBool", */ f:parseuint16 },
    	/*::[*/0x00dc/*::]*/: { /* n:"DbOrParamQry", */ },
    	/*::[*/0x00dd/*::]*/: { /* n:"ScenarioProtect", */ f:parsebool },
    	/*::[*/0x00de/*::]*/: { /* n:"OleObjectSize", */ },
    	/*::[*/0x00e0/*::]*/: { /* n:"XF", */ f:parse_XF },
    	/*::[*/0x00e1/*::]*/: { /* n:"InterfaceHdr", */ f:parse_InterfaceHdr },
    	/*::[*/0x00e2/*::]*/: { /* n:"InterfaceEnd", */ f:parsenoop2 },
    	/*::[*/0x00e3/*::]*/: { /* n:"SXVS", */ },
    	/*::[*/0x00e5/*::]*/: { /* n:"MergeCells", */ f:parse_MergeCells },
    	/*::[*/0x00e9/*::]*/: { /* n:"BkHim", */ },
    	/*::[*/0x00eb/*::]*/: { /* n:"MsoDrawingGroup", */ },
    	/*::[*/0x00ec/*::]*/: { /* n:"MsoDrawing", */ },
    	/*::[*/0x00ed/*::]*/: { /* n:"MsoDrawingSelection", */ },
    	/*::[*/0x00ef/*::]*/: { /* n:"PhoneticInfo", */ },
    	/*::[*/0x00f0/*::]*/: { /* n:"SxRule", */ },
    	/*::[*/0x00f1/*::]*/: { /* n:"SXEx", */ },
    	/*::[*/0x00f2/*::]*/: { /* n:"SxFilt", */ },
    	/*::[*/0x00f4/*::]*/: { /* n:"SxDXF", */ },
    	/*::[*/0x00f5/*::]*/: { /* n:"SxItm", */ },
    	/*::[*/0x00f6/*::]*/: { /* n:"SxName", */ },
    	/*::[*/0x00f7/*::]*/: { /* n:"SxSelect", */ },
    	/*::[*/0x00f8/*::]*/: { /* n:"SXPair", */ },
    	/*::[*/0x00f9/*::]*/: { /* n:"SxFmla", */ },
    	/*::[*/0x00fb/*::]*/: { /* n:"SxFormat", */ },
    	/*::[*/0x00fc/*::]*/: { /* n:"SST", */ f:parse_SST },
    	/*::[*/0x00fd/*::]*/: { /* n:"LabelSst", */ f:parse_LabelSst },
    	/*::[*/0x00ff/*::]*/: { /* n:"ExtSST", */ f:parse_ExtSST },
    	/*::[*/0x0100/*::]*/: { /* n:"SXVDEx", */ },
    	/*::[*/0x0103/*::]*/: { /* n:"SXFormula", */ },
    	/*::[*/0x0122/*::]*/: { /* n:"SXDBEx", */ },
    	/*::[*/0x0137/*::]*/: { /* n:"RRDInsDel", */ },
    	/*::[*/0x0138/*::]*/: { /* n:"RRDHead", */ },
    	/*::[*/0x013b/*::]*/: { /* n:"RRDChgCell", */ },
    	/*::[*/0x013d/*::]*/: { /* n:"RRTabId", */ f:parseuint16a },
    	/*::[*/0x013e/*::]*/: { /* n:"RRDRenSheet", */ },
    	/*::[*/0x013f/*::]*/: { /* n:"RRSort", */ },
    	/*::[*/0x0140/*::]*/: { /* n:"RRDMove", */ },
    	/*::[*/0x014a/*::]*/: { /* n:"RRFormat", */ },
    	/*::[*/0x014b/*::]*/: { /* n:"RRAutoFmt", */ },
    	/*::[*/0x014d/*::]*/: { /* n:"RRInsertSh", */ },
    	/*::[*/0x014e/*::]*/: { /* n:"RRDMoveBegin", */ },
    	/*::[*/0x014f/*::]*/: { /* n:"RRDMoveEnd", */ },
    	/*::[*/0x0150/*::]*/: { /* n:"RRDInsDelBegin", */ },
    	/*::[*/0x0151/*::]*/: { /* n:"RRDInsDelEnd", */ },
    	/*::[*/0x0152/*::]*/: { /* n:"RRDConflict", */ },
    	/*::[*/0x0153/*::]*/: { /* n:"RRDDefName", */ },
    	/*::[*/0x0154/*::]*/: { /* n:"RRDRstEtxp", */ },
    	/*::[*/0x015f/*::]*/: { /* n:"LRng", */ },
    	/*::[*/0x0160/*::]*/: { /* n:"UsesELFs", */ f:parsebool },
    	/*::[*/0x0161/*::]*/: { /* n:"DSF", */ f:parsenoop2 },
    	/*::[*/0x0191/*::]*/: { /* n:"CUsr", */ },
    	/*::[*/0x0192/*::]*/: { /* n:"CbUsr", */ },
    	/*::[*/0x0193/*::]*/: { /* n:"UsrInfo", */ },
    	/*::[*/0x0194/*::]*/: { /* n:"UsrExcl", */ },
    	/*::[*/0x0195/*::]*/: { /* n:"FileLock", */ },
    	/*::[*/0x0196/*::]*/: { /* n:"RRDInfo", */ },
    	/*::[*/0x0197/*::]*/: { /* n:"BCUsrs", */ },
    	/*::[*/0x0198/*::]*/: { /* n:"UsrChk", */ },
    	/*::[*/0x01a9/*::]*/: { /* n:"UserBView", */ },
    	/*::[*/0x01aa/*::]*/: { /* n:"UserSViewBegin", */ },
    	/*::[*/0x01ab/*::]*/: { /* n:"UserSViewEnd", */ },
    	/*::[*/0x01ac/*::]*/: { /* n:"RRDUserView", */ },
    	/*::[*/0x01ad/*::]*/: { /* n:"Qsi", */ },
    	/*::[*/0x01ae/*::]*/: { /* n:"SupBook", */ f:parse_SupBook },
    	/*::[*/0x01af/*::]*/: { /* n:"Prot4Rev", */ f:parsebool },
    	/*::[*/0x01b0/*::]*/: { /* n:"CondFmt", */ },
    	/*::[*/0x01b1/*::]*/: { /* n:"CF", */ },
    	/*::[*/0x01b2/*::]*/: { /* n:"DVal", */ },
    	/*::[*/0x01b5/*::]*/: { /* n:"DConBin", */ },
    	/*::[*/0x01b6/*::]*/: { /* n:"TxO", */ f:parse_TxO },
    	/*::[*/0x01b7/*::]*/: { /* n:"RefreshAll", */ f:parsebool }, //
    	/*::[*/0x01b8/*::]*/: { /* n:"HLink", */ f:parse_HLink },
    	/*::[*/0x01b9/*::]*/: { /* n:"Lel", */ },
    	/*::[*/0x01ba/*::]*/: { /* n:"CodeName", */ f:parse_XLUnicodeString },
    	/*::[*/0x01bb/*::]*/: { /* n:"SXFDBType", */ },
    	/*::[*/0x01bc/*::]*/: { /* n:"Prot4RevPass", */ f:parseuint16 },
    	/*::[*/0x01bd/*::]*/: { /* n:"ObNoMacros", */ },
    	/*::[*/0x01be/*::]*/: { /* n:"Dv", */ },
    	/*::[*/0x01c0/*::]*/: { /* n:"Excel9File", */ f:parsenoop2 },
    	/*::[*/0x01c1/*::]*/: { /* n:"RecalcId", */ f:parse_RecalcId, r:2},
    	/*::[*/0x01c2/*::]*/: { /* n:"EntExU2", */ f:parsenoop2 },
    	/*::[*/0x0200/*::]*/: { /* n:"Dimensions", */ f:parse_Dimensions },
    	/*::[*/0x0201/*::]*/: { /* n:"Blank", */ f:parse_Blank },
    	/*::[*/0x0203/*::]*/: { /* n:"Number", */ f:parse_Number },
    	/*::[*/0x0204/*::]*/: { /* n:"Label", */ f:parse_Label },
    	/*::[*/0x0205/*::]*/: { /* n:"BoolErr", */ f:parse_BoolErr },
    	/*::[*/0x0207/*::]*/: { /* n:"String", */ f:parse_String },
    	/*::[*/0x0208/*::]*/: { /* n:"Row", */ f:parse_Row },
    	/*::[*/0x020b/*::]*/: { /* n:"Index", */ },
    	/*::[*/0x0221/*::]*/: { /* n:"Array", */ f:parse_Array },
    	/*::[*/0x0225/*::]*/: { /* n:"DefaultRowHeight", */ f:parse_DefaultRowHeight },
    	/*::[*/0x0236/*::]*/: { /* n:"Table", */ },
    	/*::[*/0x023e/*::]*/: { /* n:"Window2", */ f:parse_Window2 },
    	/*::[*/0x027e/*::]*/: { /* n:"RK", */ f:parse_RK },
    	/*::[*/0x0293/*::]*/: { /* n:"Style", */ },
    	/*::[*/0x0418/*::]*/: { /* n:"BigName", */ },
    	/*::[*/0x041e/*::]*/: { /* n:"Format", */ f:parse_Format },
    	/*::[*/0x043c/*::]*/: { /* n:"ContinueBigName", */ },
    	/*::[*/0x04bc/*::]*/: { /* n:"ShrFmla", */ f:parse_ShrFmla },
    	/*::[*/0x0800/*::]*/: { /* n:"HLinkTooltip", */ f:parse_HLinkTooltip },
    	/*::[*/0x0801/*::]*/: { /* n:"WebPub", */ },
    	/*::[*/0x0802/*::]*/: { /* n:"QsiSXTag", */ },
    	/*::[*/0x0803/*::]*/: { /* n:"DBQueryExt", */ },
    	/*::[*/0x0804/*::]*/: { /* n:"ExtString", */ },
    	/*::[*/0x0805/*::]*/: { /* n:"TxtQry", */ },
    	/*::[*/0x0806/*::]*/: { /* n:"Qsir", */ },
    	/*::[*/0x0807/*::]*/: { /* n:"Qsif", */ },
    	/*::[*/0x0808/*::]*/: { /* n:"RRDTQSIF", */ },
    	/*::[*/0x0809/*::]*/: { /* n:"BOF", */ f:parse_BOF },
    	/*::[*/0x080a/*::]*/: { /* n:"OleDbConn", */ },
    	/*::[*/0x080b/*::]*/: { /* n:"WOpt", */ },
    	/*::[*/0x080c/*::]*/: { /* n:"SXViewEx", */ },
    	/*::[*/0x080d/*::]*/: { /* n:"SXTH", */ },
    	/*::[*/0x080e/*::]*/: { /* n:"SXPIEx", */ },
    	/*::[*/0x080f/*::]*/: { /* n:"SXVDTEx", */ },
    	/*::[*/0x0810/*::]*/: { /* n:"SXViewEx9", */ },
    	/*::[*/0x0812/*::]*/: { /* n:"ContinueFrt", */ },
    	/*::[*/0x0813/*::]*/: { /* n:"RealTimeData", */ },
    	/*::[*/0x0850/*::]*/: { /* n:"ChartFrtInfo", */ },
    	/*::[*/0x0851/*::]*/: { /* n:"FrtWrapper", */ },
    	/*::[*/0x0852/*::]*/: { /* n:"StartBlock", */ },
    	/*::[*/0x0853/*::]*/: { /* n:"EndBlock", */ },
    	/*::[*/0x0854/*::]*/: { /* n:"StartObject", */ },
    	/*::[*/0x0855/*::]*/: { /* n:"EndObject", */ },
    	/*::[*/0x0856/*::]*/: { /* n:"CatLab", */ },
    	/*::[*/0x0857/*::]*/: { /* n:"YMult", */ },
    	/*::[*/0x0858/*::]*/: { /* n:"SXViewLink", */ },
    	/*::[*/0x0859/*::]*/: { /* n:"PivotChartBits", */ },
    	/*::[*/0x085a/*::]*/: { /* n:"FrtFontList", */ },
    	/*::[*/0x0862/*::]*/: { /* n:"SheetExt", */ },
    	/*::[*/0x0863/*::]*/: { /* n:"BookExt", */ r:12},
    	/*::[*/0x0864/*::]*/: { /* n:"SXAddl", */ },
    	/*::[*/0x0865/*::]*/: { /* n:"CrErr", */ },
    	/*::[*/0x0866/*::]*/: { /* n:"HFPicture", */ },
    	/*::[*/0x0867/*::]*/: { /* n:"FeatHdr", */ f:parsenoop2 },
    	/*::[*/0x0868/*::]*/: { /* n:"Feat", */ },
    	/*::[*/0x086a/*::]*/: { /* n:"DataLabExt", */ },
    	/*::[*/0x086b/*::]*/: { /* n:"DataLabExtContents", */ },
    	/*::[*/0x086c/*::]*/: { /* n:"CellWatch", */ },
    	/*::[*/0x0871/*::]*/: { /* n:"FeatHdr11", */ },
    	/*::[*/0x0872/*::]*/: { /* n:"Feature11", */ },
    	/*::[*/0x0874/*::]*/: { /* n:"DropDownObjIds", */ },
    	/*::[*/0x0875/*::]*/: { /* n:"ContinueFrt11", */ },
    	/*::[*/0x0876/*::]*/: { /* n:"DConn", */ },
    	/*::[*/0x0877/*::]*/: { /* n:"List12", */ },
    	/*::[*/0x0878/*::]*/: { /* n:"Feature12", */ },
    	/*::[*/0x0879/*::]*/: { /* n:"CondFmt12", */ },
    	/*::[*/0x087a/*::]*/: { /* n:"CF12", */ },
    	/*::[*/0x087b/*::]*/: { /* n:"CFEx", */ },
    	/*::[*/0x087c/*::]*/: { /* n:"XFCRC", */ f:parse_XFCRC, r:12 },
    	/*::[*/0x087d/*::]*/: { /* n:"XFExt", */ f:parse_XFExt, r:12 },
    	/*::[*/0x087e/*::]*/: { /* n:"AutoFilter12", */ },
    	/*::[*/0x087f/*::]*/: { /* n:"ContinueFrt12", */ },
    	/*::[*/0x0884/*::]*/: { /* n:"MDTInfo", */ },
    	/*::[*/0x0885/*::]*/: { /* n:"MDXStr", */ },
    	/*::[*/0x0886/*::]*/: { /* n:"MDXTuple", */ },
    	/*::[*/0x0887/*::]*/: { /* n:"MDXSet", */ },
    	/*::[*/0x0888/*::]*/: { /* n:"MDXProp", */ },
    	/*::[*/0x0889/*::]*/: { /* n:"MDXKPI", */ },
    	/*::[*/0x088a/*::]*/: { /* n:"MDB", */ },
    	/*::[*/0x088b/*::]*/: { /* n:"PLV", */ },
    	/*::[*/0x088c/*::]*/: { /* n:"Compat12", */ f:parsebool, r:12 },
    	/*::[*/0x088d/*::]*/: { /* n:"DXF", */ },
    	/*::[*/0x088e/*::]*/: { /* n:"TableStyles", */ r:12 },
    	/*::[*/0x088f/*::]*/: { /* n:"TableStyle", */ },
    	/*::[*/0x0890/*::]*/: { /* n:"TableStyleElement", */ },
    	/*::[*/0x0892/*::]*/: { /* n:"StyleExt", */ },
    	/*::[*/0x0893/*::]*/: { /* n:"NamePublish", */ },
    	/*::[*/0x0894/*::]*/: { /* n:"NameCmt", */ f:parse_NameCmt, r:12 },
    	/*::[*/0x0895/*::]*/: { /* n:"SortData", */ },
    	/*::[*/0x0896/*::]*/: { /* n:"Theme", */ f:parse_Theme, r:12 },
    	/*::[*/0x0897/*::]*/: { /* n:"GUIDTypeLib", */ },
    	/*::[*/0x0898/*::]*/: { /* n:"FnGrp12", */ },
    	/*::[*/0x0899/*::]*/: { /* n:"NameFnGrp12", */ },
    	/*::[*/0x089a/*::]*/: { /* n:"MTRSettings", */ f:parse_MTRSettings, r:12 },
    	/*::[*/0x089b/*::]*/: { /* n:"CompressPictures", */ f:parsenoop2 },
    	/*::[*/0x089c/*::]*/: { /* n:"HeaderFooter", */ },
    	/*::[*/0x089d/*::]*/: { /* n:"CrtLayout12", */ },
    	/*::[*/0x089e/*::]*/: { /* n:"CrtMlFrt", */ },
    	/*::[*/0x089f/*::]*/: { /* n:"CrtMlFrtContinue", */ },
    	/*::[*/0x08a3/*::]*/: { /* n:"ForceFullCalculation", */ f:parse_ForceFullCalculation },
    	/*::[*/0x08a4/*::]*/: { /* n:"ShapePropsStream", */ },
    	/*::[*/0x08a5/*::]*/: { /* n:"TextPropsStream", */ },
    	/*::[*/0x08a6/*::]*/: { /* n:"RichTextStream", */ },
    	/*::[*/0x08a7/*::]*/: { /* n:"CrtLayout12A", */ },
    	/*::[*/0x1001/*::]*/: { /* n:"Units", */ },
    	/*::[*/0x1002/*::]*/: { /* n:"Chart", */ },
    	/*::[*/0x1003/*::]*/: { /* n:"Series", */ },
    	/*::[*/0x1006/*::]*/: { /* n:"DataFormat", */ },
    	/*::[*/0x1007/*::]*/: { /* n:"LineFormat", */ },
    	/*::[*/0x1009/*::]*/: { /* n:"MarkerFormat", */ },
    	/*::[*/0x100a/*::]*/: { /* n:"AreaFormat", */ },
    	/*::[*/0x100b/*::]*/: { /* n:"PieFormat", */ },
    	/*::[*/0x100c/*::]*/: { /* n:"AttachedLabel", */ },
    	/*::[*/0x100d/*::]*/: { /* n:"SeriesText", */ },
    	/*::[*/0x1014/*::]*/: { /* n:"ChartFormat", */ },
    	/*::[*/0x1015/*::]*/: { /* n:"Legend", */ },
    	/*::[*/0x1016/*::]*/: { /* n:"SeriesList", */ },
    	/*::[*/0x1017/*::]*/: { /* n:"Bar", */ },
    	/*::[*/0x1018/*::]*/: { /* n:"Line", */ },
    	/*::[*/0x1019/*::]*/: { /* n:"Pie", */ },
    	/*::[*/0x101a/*::]*/: { /* n:"Area", */ },
    	/*::[*/0x101b/*::]*/: { /* n:"Scatter", */ },
    	/*::[*/0x101c/*::]*/: { /* n:"CrtLine", */ },
    	/*::[*/0x101d/*::]*/: { /* n:"Axis", */ },
    	/*::[*/0x101e/*::]*/: { /* n:"Tick", */ },
    	/*::[*/0x101f/*::]*/: { /* n:"ValueRange", */ },
    	/*::[*/0x1020/*::]*/: { /* n:"CatSerRange", */ },
    	/*::[*/0x1021/*::]*/: { /* n:"AxisLine", */ },
    	/*::[*/0x1022/*::]*/: { /* n:"CrtLink", */ },
    	/*::[*/0x1024/*::]*/: { /* n:"DefaultText", */ },
    	/*::[*/0x1025/*::]*/: { /* n:"Text", */ },
    	/*::[*/0x1026/*::]*/: { /* n:"FontX", */ f:parseuint16 },
    	/*::[*/0x1027/*::]*/: { /* n:"ObjectLink", */ },
    	/*::[*/0x1032/*::]*/: { /* n:"Frame", */ },
    	/*::[*/0x1033/*::]*/: { /* n:"Begin", */ },
    	/*::[*/0x1034/*::]*/: { /* n:"End", */ },
    	/*::[*/0x1035/*::]*/: { /* n:"PlotArea", */ },
    	/*::[*/0x103a/*::]*/: { /* n:"Chart3d", */ },
    	/*::[*/0x103c/*::]*/: { /* n:"PicF", */ },
    	/*::[*/0x103d/*::]*/: { /* n:"DropBar", */ },
    	/*::[*/0x103e/*::]*/: { /* n:"Radar", */ },
    	/*::[*/0x103f/*::]*/: { /* n:"Surf", */ },
    	/*::[*/0x1040/*::]*/: { /* n:"RadarArea", */ },
    	/*::[*/0x1041/*::]*/: { /* n:"AxisParent", */ },
    	/*::[*/0x1043/*::]*/: { /* n:"LegendException", */ },
    	/*::[*/0x1044/*::]*/: { /* n:"ShtProps", */ f:parse_ShtProps },
    	/*::[*/0x1045/*::]*/: { /* n:"SerToCrt", */ },
    	/*::[*/0x1046/*::]*/: { /* n:"AxesUsed", */ },
    	/*::[*/0x1048/*::]*/: { /* n:"SBaseRef", */ },
    	/*::[*/0x104a/*::]*/: { /* n:"SerParent", */ },
    	/*::[*/0x104b/*::]*/: { /* n:"SerAuxTrend", */ },
    	/*::[*/0x104e/*::]*/: { /* n:"IFmtRecord", */ },
    	/*::[*/0x104f/*::]*/: { /* n:"Pos", */ },
    	/*::[*/0x1050/*::]*/: { /* n:"AlRuns", */ },
    	/*::[*/0x1051/*::]*/: { /* n:"BRAI", */ },
    	/*::[*/0x105b/*::]*/: { /* n:"SerAuxErrBar", */ },
    	/*::[*/0x105c/*::]*/: { /* n:"ClrtClient", */ f:parse_ClrtClient },
    	/*::[*/0x105d/*::]*/: { /* n:"SerFmt", */ },
    	/*::[*/0x105f/*::]*/: { /* n:"Chart3DBarShape", */ },
    	/*::[*/0x1060/*::]*/: { /* n:"Fbi", */ },
    	/*::[*/0x1061/*::]*/: { /* n:"BopPop", */ },
    	/*::[*/0x1062/*::]*/: { /* n:"AxcExt", */ },
    	/*::[*/0x1063/*::]*/: { /* n:"Dat", */ },
    	/*::[*/0x1064/*::]*/: { /* n:"PlotGrowth", */ },
    	/*::[*/0x1065/*::]*/: { /* n:"SIIndex", */ },
    	/*::[*/0x1066/*::]*/: { /* n:"GelFrame", */ },
    	/*::[*/0x1067/*::]*/: { /* n:"BopPopCustom", */ },
    	/*::[*/0x1068/*::]*/: { /* n:"Fbi2", */ },

    	/*::[*/0x0000/*::]*/: { /* n:"Dimensions", */ f:parse_Dimensions },
    	/*::[*/0x0001/*::]*/: { /* n:"BIFF2BLANK", */ },
    	/*::[*/0x0002/*::]*/: { /* n:"BIFF2INT", */ f:parse_BIFF2INT },
    	/*::[*/0x0003/*::]*/: { /* n:"BIFF2NUM", */ f:parse_BIFF2NUM },
    	/*::[*/0x0004/*::]*/: { /* n:"BIFF2STR", */ f:parse_BIFF2STR },
    	/*::[*/0x0005/*::]*/: { /* n:"BoolErr", */ f:parse_BoolErr },
    	/*::[*/0x0007/*::]*/: { /* n:"String", */ f:parse_BIFF2STRING },
    	/*::[*/0x0008/*::]*/: { /* n:"BIFF2ROW", */ },
    	/*::[*/0x0009/*::]*/: { /* n:"BOF", */ f:parse_BOF },
    	/*::[*/0x000b/*::]*/: { /* n:"Index", */ },
    	/*::[*/0x0016/*::]*/: { /* n:"ExternCount", */ f:parseuint16 },
    	/*::[*/0x001e/*::]*/: { /* n:"BIFF2FORMAT", */ f:parse_BIFF2Format },
    	/*::[*/0x001f/*::]*/: { /* n:"BIFF2FMTCNT", */ }, /* 16-bit cnt of BIFF2FORMAT records */
    	/*::[*/0x0020/*::]*/: { /* n:"BIFF2COLINFO", */ },
    	/*::[*/0x0021/*::]*/: { /* n:"Array", */ f:parse_Array },
    	/*::[*/0x0024/*::]*/: { /* n:"COLWIDTH", */ },
    	/*::[*/0x0025/*::]*/: { /* n:"DefaultRowHeight", */ f:parse_DefaultRowHeight },
    	// 0x2c ??
    	// 0x2d ??
    	// 0x2e ??
    	// 0x30 FONTCOUNT: number of fonts
    	/*::[*/0x0032/*::]*/: { /* n:"BIFF2FONTXTRA", */ f:parse_BIFF2FONTXTRA },
    	// 0x35: INFOOPTS
    	// 0x36: TABLE (BIFF2 only)
    	// 0x37: TABLE2 (BIFF2 only)
    	// 0x38: WNDESK
    	// 0x39 ??
    	// 0x3a: BEGINPREF
    	// 0x3b: ENDPREF
    	/*::[*/0x003e/*::]*/: { /* n:"BIFF2WINDOW2", */ },
    	// 0x3f ??
    	// 0x46: SHOWSCROLL
    	// 0x47: SHOWFORMULA
    	// 0x48: STATUSBAR
    	// 0x49: SHORTMENUS
    	// 0x4A:
    	// 0x4B:
    	// 0x4C:
    	// 0x4E:
    	// 0x4F:
    	// 0x58: TOOLBAR (BIFF3)

    	/* - - - */
    	/*::[*/0x0034/*::]*/: { /* n:"DDEObjName", */ },
    	/*::[*/0x0043/*::]*/: { /* n:"BIFF2XF", */ },
    	/*::[*/0x0044/*::]*/: { /* n:"BIFF2XFINDEX", */ f:parseuint16 },
    	/*::[*/0x0045/*::]*/: { /* n:"BIFF2FONTCLR", */ },
    	/*::[*/0x0056/*::]*/: { /* n:"BIFF4FMTCNT", */ }, /* 16-bit cnt, similar to BIFF2 */
    	/*::[*/0x007e/*::]*/: { /* n:"RK", */ }, /* Not necessarily same as 0x027e */
    	/*::[*/0x007f/*::]*/: { /* n:"ImData", */ f:parse_ImData },
    	/*::[*/0x0087/*::]*/: { /* n:"Addin", */ },
    	/*::[*/0x0088/*::]*/: { /* n:"Edg", */ },
    	/*::[*/0x0089/*::]*/: { /* n:"Pub", */ },
    	// 0x8A
    	// 0x8B LH: alternate menu key flag (BIFF3/4)
    	// 0x8E
    	// 0x8F
    	/*::[*/0x0091/*::]*/: { /* n:"Sub", */ },
    	// 0x93 STYLE
    	/*::[*/0x0094/*::]*/: { /* n:"LHRecord", */ },
    	/*::[*/0x0095/*::]*/: { /* n:"LHNGraph", */ },
    	/*::[*/0x0096/*::]*/: { /* n:"Sound", */ },
    	// 0xA2 FNPROTO: function prototypes (BIFF4)
    	// 0xA3
    	// 0xA8
    	/*::[*/0x00a9/*::]*/: { /* n:"CoordList", */ },
    	/*::[*/0x00ab/*::]*/: { /* n:"GCW", */ },
    	/*::[*/0x00bc/*::]*/: { /* n:"ShrFmla", */ }, /* Not necessarily same as 0x04bc */
    	/*::[*/0x00bf/*::]*/: { /* n:"ToolbarHdr", */ },
    	/*::[*/0x00c0/*::]*/: { /* n:"ToolbarEnd", */ },
    	/*::[*/0x00c2/*::]*/: { /* n:"AddMenu", */ },
    	/*::[*/0x00c3/*::]*/: { /* n:"DelMenu", */ },
    	/*::[*/0x00d6/*::]*/: { /* n:"RString", */ f:parse_RString },
    	/*::[*/0x00df/*::]*/: { /* n:"UDDesc", */ },
    	/*::[*/0x00ea/*::]*/: { /* n:"TabIdConf", */ },
    	/*::[*/0x0162/*::]*/: { /* n:"XL5Modify", */ },
    	/*::[*/0x01a5/*::]*/: { /* n:"FileSharing2", */ },
    	/*::[*/0x0206/*::]*/: { /* n:"Formula", */ f:parse_Formula },
    	/*::[*/0x0209/*::]*/: { /* n:"BOF", */ f:parse_BOF },
    	/*::[*/0x0218/*::]*/: { /* n:"Lbl", */ f:parse_Lbl },
    	/*::[*/0x0223/*::]*/: { /* n:"ExternName", */ f:parse_ExternName },
    	/*::[*/0x0231/*::]*/: { /* n:"Font", */ },
    	/*::[*/0x0243/*::]*/: { /* n:"BIFF3XF", */ },
    	/*::[*/0x0406/*::]*/: { /* n:"Formula", */ f:parse_Formula },
    	/*::[*/0x0409/*::]*/: { /* n:"BOF", */ f:parse_BOF },
    	/*::[*/0x0443/*::]*/: { /* n:"BIFF4XF", */ },
    	/*::[*/0x086d/*::]*/: { /* n:"FeatInfo", */ },
    	/*::[*/0x0873/*::]*/: { /* n:"FeatInfo11", */ },
    	/*::[*/0x0881/*::]*/: { /* n:"SXAddl12", */ },
    	/*::[*/0x08c0/*::]*/: { /* n:"AutoWebPub", */ },
    	/*::[*/0x08c1/*::]*/: { /* n:"ListObj", */ },
    	/*::[*/0x08c2/*::]*/: { /* n:"ListField", */ },
    	/*::[*/0x08c3/*::]*/: { /* n:"ListDV", */ },
    	/*::[*/0x08c4/*::]*/: { /* n:"ListCondFmt", */ },
    	/*::[*/0x08c5/*::]*/: { /* n:"ListCF", */ },
    	/*::[*/0x08c6/*::]*/: { /* n:"FMQry", */ },
    	/*::[*/0x08c7/*::]*/: { /* n:"FMSQry", */ },
    	/*::[*/0x08c8/*::]*/: { /* n:"PLV", */ },
    	/*::[*/0x08c9/*::]*/: { /* n:"LnExt", */ },
    	/*::[*/0x08ca/*::]*/: { /* n:"MkrExt", */ },
    	/*::[*/0x08cb/*::]*/: { /* n:"CrtCoopt", */ },
    	/*::[*/0x08d6/*::]*/: { /* n:"FRTArchId$", */ r:12 },

    	/*::[*/0x7262/*::]*/: {}
    };

    function write_biff_rec(ba/*:BufArray*/, type/*:number*/, payload, length/*:?number*/)/*:void*/ {
    	var t/*:number*/ = type;
    	if(isNaN(t)) return;
    	var len = length || (payload||[]).length || 0;
    	var o = ba.next(4);
    	o.write_shift(2, t);
    	o.write_shift(2, len);
    	if(/*:: len != null &&*/len > 0 && is_buf(payload)) ba.push(payload);
    }
    /* note: browser DOM element cannot see mso- style attrs, must parse */
    function html_to_sheet(str/*:string*/, _opts)/*:Workbook*/ {
    	var opts = _opts || {};
    	var ws/*:Worksheet*/ = opts.dense ? ([]/*:any*/) : ({}/*:any*/);
    	str = str.replace(/<!--.*?-->/g, "");
    	var mtch/*:any*/ = str.match(/<table/i);
    	if(!mtch) throw new Error("Invalid HTML: could not find <table>");
    	var mtch2/*:any*/ = str.match(/<\/table/i);
    	var i/*:number*/ = mtch.index, j/*:number*/ = mtch2 && mtch2.index || str.length;
    	var rows = split_regex(str.slice(i, j), /(:?<tr[^>]*>)/i, "<tr>");
    	var R = -1, C = 0, RS = 0, CS = 0;
    	var range/*:Range*/ = {s:{r:10000000, c:10000000},e:{r:0,c:0}};
    	var merges/*:Array<Range>*/ = [];
    	for(i = 0; i < rows.length; ++i) {
    		var row = rows[i].trim();
    		var hd = row.slice(0,3).toLowerCase();
    		if(hd == "<tr") { ++R; if(opts.sheetRows && opts.sheetRows <= R) { --R; break; } C = 0; continue; }
    		if(hd != "<td" && hd != "<th") continue;
    		var cells = row.split(/<\/t[dh]>/i);
    		for(j = 0; j < cells.length; ++j) {
    			var cell = cells[j].trim();
    			if(!cell.match(/<t[dh]/i)) continue;
    			var m = cell, cc = 0;
    			/* TODO: parse styles etc */
    			while(m.charAt(0) == "<" && (cc = m.indexOf(">")) > -1) m = m.slice(cc+1);
    			for(var midx = 0; midx < merges.length; ++midx) {
    				var _merge/*:Range*/ = merges[midx];
    				if(_merge.s.c == C && _merge.s.r < R && R <= _merge.e.r) { C = _merge.e.c + 1; midx = -1; }
    			}
    			var tag = parsexmltag(cell.slice(0, cell.indexOf(">")));
    			CS = tag.colspan ? +tag.colspan : 1;
    			if((RS = +tag.rowspan)>1 || CS>1) merges.push({s:{r:R,c:C},e:{r:R + (RS||1) - 1, c:C + CS - 1}});
    			var _t/*:string*/ = tag.t || tag["data-t"] || "";
    			/* TODO: generate stub cells */
    			if(!m.length) { C += CS; continue; }
    			m = htmldecode(m);
    			if(range.s.r > R) range.s.r = R; if(range.e.r < R) range.e.r = R;
    			if(range.s.c > C) range.s.c = C; if(range.e.c < C) range.e.c = C;
    			if(!m.length) { C += CS; continue; }
    			var o/*:Cell*/ = {t:'s', v:m};
    			if(opts.raw || !m.trim().length || _t == 's');
    			else if(m === 'TRUE') o = {t:'b', v:true};
    			else if(m === 'FALSE') o = {t:'b', v:false};
    			else if(!isNaN(fuzzynum(m))) o = {t:'n', v:fuzzynum(m)};
    			else if(!isNaN(fuzzydate(m).getDate())) {
    				o = ({t:'d', v:parseDate(m)}/*:any*/);
    				if(!opts.cellDates) o = ({t:'n', v:datenum(o.v)}/*:any*/);
    				o.z = opts.dateNF || table_fmt[14];
    			}
    			if(opts.dense) { if(!ws[R]) ws[R] = []; ws[R][C] = o; }
    			else ws[encode_cell({r:R, c:C})] = o;
    			C += CS;
    		}
    	}
    	ws['!ref'] = encode_range(range);
    	if(merges.length) ws["!merges"] = merges;
    	return ws;
    }
    function make_html_row(ws/*:Worksheet*/, r/*:Range*/, R/*:number*/, o/*:Sheet2HTMLOpts*/)/*:string*/ {
    	var M/*:Array<Range>*/ = (ws['!merges'] ||[]);
    	var oo/*:Array<string>*/ = [];
    	for(var C = r.s.c; C <= r.e.c; ++C) {
    		var RS = 0, CS = 0;
    		for(var j = 0; j < M.length; ++j) {
    			if(M[j].s.r > R || M[j].s.c > C) continue;
    			if(M[j].e.r < R || M[j].e.c < C) continue;
    			if(M[j].s.r < R || M[j].s.c < C) { RS = -1; break; }
    			RS = M[j].e.r - M[j].s.r + 1; CS = M[j].e.c - M[j].s.c + 1; break;
    		}
    		if(RS < 0) continue;
    		var coord = encode_cell({r:R,c:C});
    		var cell = o.dense ? (ws[R]||[])[C] : ws[coord];
    		/* TODO: html entities */
    		var w = (cell && cell.v != null) && (cell.h || escapehtml(cell.w || (format_cell(cell), cell.w) || "")) || "";
    		var sp = ({}/*:any*/);
    		if(RS > 1) sp.rowspan = RS;
    		if(CS > 1) sp.colspan = CS;
    		if(o.editable) w = '<span contenteditable="true">' + w + '</span>';
    		else if(cell) {
    			sp["data-t"] = cell && cell.t || 'z';
    			if(cell.v != null) sp["data-v"] = cell.v;
    			if(cell.z != null) sp["data-z"] = cell.z;
    			if(cell.l && (cell.l.Target || "#").charAt(0) != "#") w = '<a href="' + cell.l.Target +'">' + w + '</a>';
    		}
    		sp.id = (o.id || "sjs") + "-" + coord;
    		oo.push(writextag('td', w, sp));
    	}
    	var preamble = "<tr>";
    	return preamble + oo.join("") + "</tr>";
    }

    var HTML_BEGIN = '<html><head><meta charset="utf-8"/><title>SheetJS Table Export</title></head><body>';
    var HTML_END = '</body></html>';

    function html_to_workbook(str/*:string*/, opts)/*:Workbook*/ {
    	var mtch = str.match(/<table[\s\S]*?>[\s\S]*?<\/table>/gi);
    	if(!mtch || mtch.length == 0) throw new Error("Invalid HTML: could not find <table>");
    	if(mtch.length == 1) return sheet_to_workbook(html_to_sheet(mtch[0], opts), opts);
    	var wb = book_new();
    	mtch.forEach(function(s, idx) { book_append_sheet(wb, html_to_sheet(s, opts), "Sheet" + (idx+1)); });
    	return wb;
    }

    function make_html_preamble(ws/*:Worksheet*/, R/*:Range*/, o/*:Sheet2HTMLOpts*/)/*:string*/ {
    	var out/*:Array<string>*/ = [];
    	return out.join("") + '<table' + (o && o.id ? ' id="' + o.id + '"' : "") + '>';
    }

    function sheet_to_html(ws/*:Worksheet*/, opts/*:?Sheet2HTMLOpts*//*, wb:?Workbook*/)/*:string*/ {
    	var o = opts || {};
    	var header = o.header != null ? o.header : HTML_BEGIN;
    	var footer = o.footer != null ? o.footer : HTML_END;
    	var out/*:Array<string>*/ = [header];
    	var r = decode_range(ws['!ref']);
    	o.dense = Array.isArray(ws);
    	out.push(make_html_preamble(ws, r, o));
    	for(var R = r.s.r; R <= r.e.r; ++R) out.push(make_html_row(ws, r, R, o));
    	out.push("</table>" + footer);
    	return out.join("");
    }

    function sheet_add_dom(ws/*:Worksheet*/, table/*:HTMLElement*/, _opts/*:?any*/)/*:Worksheet*/ {
    	var opts = _opts || {};
    	var or_R = 0, or_C = 0;
    	if(opts.origin != null) {
    		if(typeof opts.origin == 'number') or_R = opts.origin;
    		else {
    			var _origin/*:CellAddress*/ = typeof opts.origin == "string" ? decode_cell(opts.origin) : opts.origin;
    			or_R = _origin.r; or_C = _origin.c;
    		}
    	}

    	var rows/*:HTMLCollection<HTMLTableRowElement>*/ = table.getElementsByTagName('tr');
    	var sheetRows = Math.min(opts.sheetRows||10000000, rows.length);
    	var range/*:Range*/ = {s:{r:0,c:0},e:{r:or_R,c:or_C}};
    	if(ws["!ref"]) {
    		var _range/*:Range*/ = decode_range(ws["!ref"]);
    		range.s.r = Math.min(range.s.r, _range.s.r);
    		range.s.c = Math.min(range.s.c, _range.s.c);
    		range.e.r = Math.max(range.e.r, _range.e.r);
    		range.e.c = Math.max(range.e.c, _range.e.c);
    		if(or_R == -1) range.e.r = or_R = _range.e.r + 1;
    	}
    	var merges/*:Array<Range>*/ = [], midx = 0;
    	var rowinfo/*:Array<RowInfo>*/ = ws["!rows"] || (ws["!rows"] = []);
    	var _R = 0, R = 0, _C = 0, C = 0, RS = 0, CS = 0;
    	if(!ws["!cols"]) ws['!cols'] = [];
    	for(; _R < rows.length && R < sheetRows; ++_R) {
    		var row/*:HTMLTableRowElement*/ = rows[_R];
    		if (is_dom_element_hidden(row)) {
    			if (opts.display) continue;
    			rowinfo[R] = {hidden: true};
    		}
    		var elts/*:HTMLCollection<HTMLTableCellElement>*/ = (row.children/*:any*/);
    		for(_C = C = 0; _C < elts.length; ++_C) {
    			var elt/*:HTMLTableCellElement*/ = elts[_C];
    			if (opts.display && is_dom_element_hidden(elt)) continue;
    			var v/*:?string*/ = elt.hasAttribute('data-v') ? elt.getAttribute('data-v') : elt.hasAttribute('v') ? elt.getAttribute('v') : htmldecode(elt.innerHTML);
    			var z/*:?string*/ = elt.getAttribute('data-z') || elt.getAttribute('z');
    			for(midx = 0; midx < merges.length; ++midx) {
    				var m/*:Range*/ = merges[midx];
    				if(m.s.c == C + or_C && m.s.r < R + or_R && R + or_R <= m.e.r) { C = m.e.c+1 - or_C; midx = -1; }
    			}
    			/* TODO: figure out how to extract nonstandard mso- style */
    			CS = +elt.getAttribute("colspan") || 1;
    			if( ((RS = (+elt.getAttribute("rowspan") || 1)))>1 || CS>1) merges.push({s:{r:R + or_R,c:C + or_C},e:{r:R + or_R + (RS||1) - 1, c:C + or_C + (CS||1) - 1}});
    			var o/*:Cell*/ = {t:'s', v:v};
    			var _t/*:string*/ = elt.getAttribute("data-t") || elt.getAttribute("t") || "";
    			if(v != null) {
    				if(v.length == 0) o.t = _t || 'z';
    				else if(opts.raw || v.trim().length == 0 || _t == "s");
    				else if(v === 'TRUE') o = {t:'b', v:true};
    				else if(v === 'FALSE') o = {t:'b', v:false};
    				else if(!isNaN(fuzzynum(v))) o = {t:'n', v:fuzzynum(v)};
    				else if(!isNaN(fuzzydate(v).getDate())) {
    					o = ({t:'d', v:parseDate(v)}/*:any*/);
    					if(!opts.cellDates) o = ({t:'n', v:datenum(o.v)}/*:any*/);
    					o.z = opts.dateNF || table_fmt[14];
    				}
    			}
    			if(o.z === undefined && z != null) o.z = z;
    			/* The first link is used.  Links are assumed to be fully specified.
    			 * TODO: The right way to process relative links is to make a new <a> */
    			var l = "", Aelts = elt.getElementsByTagName("A");
    			if(Aelts && Aelts.length) for(var Aelti = 0; Aelti < Aelts.length; ++Aelti)	if(Aelts[Aelti].hasAttribute("href")) {
    				l = Aelts[Aelti].getAttribute("href"); if(l.charAt(0) != "#") break;
    			}
    			if(l && l.charAt(0) != "#") o.l = ({ Target: l });
    			if(opts.dense) { if(!ws[R + or_R]) ws[R + or_R] = []; ws[R + or_R][C + or_C] = o; }
    			else ws[encode_cell({c:C + or_C, r:R + or_R})] = o;
    			if(range.e.c < C + or_C) range.e.c = C + or_C;
    			C += CS;
    		}
    		++R;
    	}
    	if(merges.length) ws['!merges'] = (ws["!merges"] || []).concat(merges);
    	range.e.r = Math.max(range.e.r, R - 1 + or_R);
    	ws['!ref'] = encode_range(range);
    	if(R >= sheetRows) ws['!fullref'] = encode_range((range.e.r = rows.length-_R+R-1 + or_R,range)); // We can count the real number of rows to parse but we don't to improve the performance
    	return ws;
    }

    function parse_dom_table(table/*:HTMLElement*/, _opts/*:?any*/)/*:Worksheet*/ {
    	var opts = _opts || {};
    	var ws/*:Worksheet*/ = opts.dense ? ([]/*:any*/) : ({}/*:any*/);
    	return sheet_add_dom(ws, table, _opts);
    }

    function table_to_book(table/*:HTMLElement*/, opts/*:?any*/)/*:Workbook*/ {
    	return sheet_to_workbook(parse_dom_table(table, opts), opts);
    }

    function is_dom_element_hidden(element/*:HTMLElement*/)/*:boolean*/ {
    	var display/*:string*/ = '';
    	var get_computed_style/*:?function*/ = get_get_computed_style_function(element);
    	if(get_computed_style) display = get_computed_style(element).getPropertyValue('display');
    	if(!display) display = element.style && element.style.display;
    	return display === 'none';
    }

    /* global getComputedStyle */
    function get_get_computed_style_function(element/*:HTMLElement*/)/*:?function*/ {
    	// The proper getComputedStyle implementation is the one defined in the element window
    	if(element.ownerDocument.defaultView && typeof element.ownerDocument.defaultView.getComputedStyle === 'function') return element.ownerDocument.defaultView.getComputedStyle;
    	// If it is not available, try to get one from the global namespace
    	if(typeof getComputedStyle === 'function') return getComputedStyle;
    	return null;
    }
    /* OpenDocument */
    function parse_text_p(text/*:string*//*::, tag*/)/*:Array<any>*/ {
    	/* 6.1.2 White Space Characters */
    	var fixed = text
    		.replace(/[\t\r\n]/g, " ").trim().replace(/ +/g, " ")
    		.replace(/<text:s\/>/g," ")
    		.replace(/<text:s text:c="(\d+)"\/>/g, function($$,$1) { return Array(parseInt($1,10)+1).join(" "); })
    		.replace(/<text:tab[^>]*\/>/g,"\t")
    		.replace(/<text:line-break\/>/g,"\n");
    	var v = unescapexml(fixed.replace(/<[^>]*>/g,""));

    	return [v];
    }

    var number_formats_ods = {
    	/* ods name: [short ssf fmt, long ssf fmt] */
    	day:           ["d",   "dd"],
    	month:         ["m",   "mm"],
    	year:          ["y",   "yy"],
    	hours:         ["h",   "hh"],
    	minutes:       ["m",   "mm"],
    	seconds:       ["s",   "ss"],
    	"am-pm":       ["A/P", "AM/PM"],
    	"day-of-week": ["ddd", "dddd"],
    	era:           ["e",   "ee"],
    	/* there is no native representation of LO "Q" format */
    	quarter:       ["\\Qm", "m\\\"th quarter\""]
    };


    function parse_content_xml(d/*:string*/, _opts)/*:Workbook*/ {
    		var opts = _opts || {};
    		var str = xlml_normalize(d);
    		var state/*:Array<any>*/ = [], tmp;
    		var tag/*:: = {}*/;
    		var NFtag = {name:""}, NF = "", pidx = 0;
    		var sheetag/*:: = {name:"", '名称':""}*/;
    		var rowtag/*:: = {'行号':""}*/;
    		var Sheets = {}, SheetNames/*:Array<string>*/ = [];
    		var ws = opts.dense ? ([]/*:any*/) : ({}/*:any*/);
    		var Rn, q/*:: :any = ({t:"", v:null, z:null, w:"",c:[],}:any)*/;
    		var ctag = ({value:""}/*:any*/);
    		var textp = "", textpidx = 0;
    		var textR = [];
    		var R = -1, C = -1, range = {s: {r:1000000,c:10000000}, e: {r:0, c:0}};
    		var row_ol = 0;
    		var number_format_map = {};
    		var merges/*:Array<Range>*/ = [], mrange = {}, mR = 0, mC = 0;
    		var rowinfo/*:Array<RowInfo>*/ = [], rowpeat = 1, colpeat = 1;
    		var arrayf/*:Array<[Range, string]>*/ = [];
    		var WB = {Names:[]};
    		var atag = ({}/*:any*/);
    		var _Ref/*:[string, string]*/ = ["", ""];
    		var comments/*:Array<Comment>*/ = [], comment/*:Comment*/ = ({}/*:any*/);
    		var creator = "", creatoridx = 0;
    		var isstub = false, intable = false;
    		var i = 0;
    		xlmlregex.lastIndex = 0;
    		str = str.replace(/<!--([\s\S]*?)-->/mg,"").replace(/<!DOCTYPE[^\[]*\[[^\]]*\]>/gm,"");
    		while((Rn = xlmlregex.exec(str))) switch((Rn[3]=Rn[3].replace(/_.*$/,""))) {

    			case 'table': case '工作表': // 9.1.2 <table:table>
    				if(Rn[1]==='/') {
    					if(range.e.c >= range.s.c && range.e.r >= range.s.r) ws['!ref'] = encode_range(range);
    					else ws['!ref'] = "A1:A1";
    					if(opts.sheetRows > 0 && opts.sheetRows <= range.e.r) {
    						ws['!fullref'] = ws['!ref'];
    						range.e.r = opts.sheetRows - 1;
    						ws['!ref'] = encode_range(range);
    					}
    					if(merges.length) ws['!merges'] = merges;
    					if(rowinfo.length) ws["!rows"] = rowinfo;
    					sheetag.name = sheetag['名称'] || sheetag.name;
    					if(typeof JSON !== 'undefined') JSON.stringify(sheetag);
    					SheetNames.push(sheetag.name);
    					Sheets[sheetag.name] = ws;
    					intable = false;
    				}
    				else if(Rn[0].charAt(Rn[0].length-2) !== '/') {
    					sheetag = parsexmltag(Rn[0], false);
    					R = C = -1;
    					range.s.r = range.s.c = 10000000; range.e.r = range.e.c = 0;
    					ws = opts.dense ? ([]/*:any*/) : ({}/*:any*/); merges = [];
    					rowinfo = [];
    					intable = true;
    				}
    				break;

    			case 'table-row-group': // 9.1.9 <table:table-row-group>
    				if(Rn[1] === "/") --row_ol; else ++row_ol;
    				break;
    			case 'table-row': case '行': // 9.1.3 <table:table-row>
    				if(Rn[1] === '/') { R+=rowpeat; rowpeat = 1; break; }
    				rowtag = parsexmltag(Rn[0], false);
    				if(rowtag['行号']) R = rowtag['行号'] - 1; else if(R == -1) R = 0;
    				rowpeat = +rowtag['number-rows-repeated'] || 1;
    				/* TODO: remove magic */
    				if(rowpeat < 10) for(i = 0; i < rowpeat; ++i) if(row_ol > 0) rowinfo[R + i] = {level: row_ol};
    				C = -1; break;
    			case 'covered-table-cell': // 9.1.5 <table:covered-table-cell>
    				if(Rn[1] !== '/') ++C;
    				if(opts.sheetStubs) {
    					if(opts.dense) { if(!ws[R]) ws[R] = []; ws[R][C] = {t:'z'}; }
    					else ws[encode_cell({r:R,c:C})] = {t:'z'};
    				}
    				textp = ""; textR = [];
    				break; /* stub */
    			case 'table-cell': case '数据':
    				if(Rn[0].charAt(Rn[0].length-2) === '/') {
    					++C;
    					ctag = parsexmltag(Rn[0], false);
    					colpeat = parseInt(ctag['number-columns-repeated']||"1", 10);
    					q = ({t:'z', v:null/*:: , z:null, w:"",c:[]*/}/*:any*/);
    					if(ctag.formula && opts.cellFormula != false) q.f = ods_to_csf_formula(unescapexml(ctag.formula));
    					if((ctag['数据类型'] || ctag['value-type']) == "string") {
    						q.t = "s"; q.v = unescapexml(ctag['string-value'] || "");
    						if(opts.dense) {
    							if(!ws[R]) ws[R] = [];
    							ws[R][C] = q;
    						} else {
    							ws[encode_cell({r:R,c:C})] = q;
    						}
    					}
    					C+= colpeat-1;
    				} else if(Rn[1]!=='/') {
    					++C;
    					textp = ""; textpidx = 0; textR = [];
    					colpeat = 1;
    					var rptR = rowpeat ? R + rowpeat - 1 : R;
    					if(C > range.e.c) range.e.c = C;
    					if(C < range.s.c) range.s.c = C;
    					if(R < range.s.r) range.s.r = R;
    					if(rptR > range.e.r) range.e.r = rptR;
    					ctag = parsexmltag(Rn[0], false);
    					comments = []; comment = ({}/*:any*/);
    					q = ({t:ctag['数据类型'] || ctag['value-type'], v:null/*:: , z:null, w:"",c:[]*/}/*:any*/);
    					if(opts.cellFormula) {
    						if(ctag.formula) ctag.formula = unescapexml(ctag.formula);
    						if(ctag['number-matrix-columns-spanned'] && ctag['number-matrix-rows-spanned']) {
    							mR = parseInt(ctag['number-matrix-rows-spanned'],10) || 0;
    							mC = parseInt(ctag['number-matrix-columns-spanned'],10) || 0;
    							mrange = {s: {r:R,c:C}, e:{r:R + mR-1,c:C + mC-1}};
    							q.F = encode_range(mrange);
    							arrayf.push([mrange, q.F]);
    						}
    						if(ctag.formula) q.f = ods_to_csf_formula(ctag.formula);
    						else for(i = 0; i < arrayf.length; ++i)
    							if(R >= arrayf[i][0].s.r && R <= arrayf[i][0].e.r)
    								if(C >= arrayf[i][0].s.c && C <= arrayf[i][0].e.c)
    									q.F = arrayf[i][1];
    					}
    					if(ctag['number-columns-spanned'] || ctag['number-rows-spanned']) {
    						mR = parseInt(ctag['number-rows-spanned'],10) || 0;
    						mC = parseInt(ctag['number-columns-spanned'],10) || 0;
    						mrange = {s: {r:R,c:C}, e:{r:R + mR-1,c:C + mC-1}};
    						merges.push(mrange);
    					}

    					/* 19.675.2 table:number-columns-repeated */
    					if(ctag['number-columns-repeated']) colpeat = parseInt(ctag['number-columns-repeated'], 10);

    					/* 19.385 office:value-type */
    					switch(q.t) {
    						case 'boolean': q.t = 'b'; q.v = parsexmlbool(ctag['boolean-value']); break;
    						case 'float': q.t = 'n'; q.v = parseFloat(ctag.value); break;
    						case 'percentage': q.t = 'n'; q.v = parseFloat(ctag.value); break;
    						case 'currency': q.t = 'n'; q.v = parseFloat(ctag.value); break;
    						case 'date': q.t = 'd'; q.v = parseDate(ctag['date-value']);
    							if(!opts.cellDates) { q.t = 'n'; q.v = datenum(q.v); }
    							q.z = 'm/d/yy'; break;
    						case 'time': q.t = 'n'; q.v = parse_isodur(ctag['time-value'])/86400;
    							if(opts.cellDates) { q.t = 'd'; q.v = numdate(q.v); }
    							q.z = 'HH:MM:SS'; break;
    						case 'number': q.t = 'n'; q.v = parseFloat(ctag['数据数值']); break;
    						default:
    							if(q.t === 'string' || q.t === 'text' || !q.t) {
    								q.t = 's';
    								if(ctag['string-value'] != null) { textp = unescapexml(ctag['string-value']); textR = []; }
    							} else throw new Error('Unsupported value type ' + q.t);
    					}
    				} else {
    					isstub = false;
    					if(q.t === 's') {
    						q.v = textp || '';
    						if(textR.length) q.R = textR;
    						isstub = textpidx == 0;
    					}
    					if(atag.Target) q.l = atag;
    					if(comments.length > 0) { q.c = comments; comments = []; }
    					if(textp && opts.cellText !== false) q.w = textp;
    					if(isstub) { q.t = "z"; delete q.v; }
    					if(!isstub || opts.sheetStubs) {
    						if(!(opts.sheetRows && opts.sheetRows <= R)) {
    							for(var rpt = 0; rpt < rowpeat; ++rpt) {
    								colpeat = parseInt(ctag['number-columns-repeated']||"1", 10);
    								if(opts.dense) {
    									if(!ws[R + rpt]) ws[R + rpt] = [];
    									ws[R + rpt][C] = rpt == 0 ? q : dup(q);
    									while(--colpeat > 0) ws[R + rpt][C + colpeat] = dup(q);
    								} else {
    									ws[encode_cell({r:R + rpt,c:C})] = q;
    									while(--colpeat > 0) ws[encode_cell({r:R + rpt,c:C + colpeat})] = dup(q);
    								}
    								if(range.e.c <= C) range.e.c = C;
    							}
    						}
    					}
    					colpeat = parseInt(ctag['number-columns-repeated']||"1", 10);
    					C += colpeat-1; colpeat = 0;
    					q = {/*:: t:"", v:null, z:null, w:"",c:[]*/};
    					textp = ""; textR = [];
    				}
    				atag = ({}/*:any*/);
    				break; // 9.1.4 <table:table-cell>

    			/* pure state */
    			case 'document': // TODO: <office:document> is the root for FODS
    			case 'document-content': case '电子表格文档': // 3.1.3.2 <office:document-content>
    			case 'spreadsheet': case '主体': // 3.7 <office:spreadsheet>
    			case 'scripts': // 3.12 <office:scripts>
    			case 'styles': // TODO <office:styles>
    			case 'font-face-decls': // 3.14 <office:font-face-decls>
    			case 'master-styles': // 3.15.4 <office:master-styles> -- relevant for FODS
    				if(Rn[1]==='/'){if((tmp=state.pop())[0]!==Rn[3]) throw "Bad state: "+tmp;}
    				else if(Rn[0].charAt(Rn[0].length-2) !== '/') state.push([Rn[3], true]);
    				break;

    			case 'annotation': // 14.1 <office:annotation>
    				if(Rn[1]==='/'){
    					if((tmp=state.pop())[0]!==Rn[3]) throw "Bad state: "+tmp;
    					comment.t = textp;
    					if(textR.length) /*::(*/comment/*:: :any)*/.R = textR;
    					comment.a = creator;
    					comments.push(comment);
    				}
    				else if(Rn[0].charAt(Rn[0].length-2) !== '/') {state.push([Rn[3], false]);}
    				creator = ""; creatoridx = 0;
    				textp = ""; textpidx = 0; textR = [];
    				break;

    			case 'creator': // 4.3.2.7 <dc:creator>
    				if(Rn[1]==='/') { creator = str.slice(creatoridx,Rn.index); }
    				else creatoridx = Rn.index + Rn[0].length;
    				break;

    			/* ignore state */
    			case 'meta': case '元数据': // TODO: <office:meta> <uof:元数据> FODS/UOF
    			case 'settings': // TODO: <office:settings>
    			case 'config-item-set': // TODO: <office:config-item-set>
    			case 'config-item-map-indexed': // TODO: <office:config-item-map-indexed>
    			case 'config-item-map-entry': // TODO: <office:config-item-map-entry>
    			case 'config-item-map-named': // TODO: <office:config-item-map-entry>
    			case 'shapes': // 9.2.8 <table:shapes>
    			case 'frame': // 10.4.2 <draw:frame>
    			case 'text-box': // 10.4.3 <draw:text-box>
    			case 'image': // 10.4.4 <draw:image>
    			case 'data-pilot-tables': // 9.6.2 <table:data-pilot-tables>
    			case 'list-style': // 16.30 <text:list-style>
    			case 'form': // 13.13 <form:form>
    			case 'dde-links': // 9.8 <table:dde-links>
    			case 'event-listeners': // TODO
    			case 'chart': // TODO
    				if(Rn[1]==='/'){if((tmp=state.pop())[0]!==Rn[3]) throw "Bad state: "+tmp;}
    				else if(Rn[0].charAt(Rn[0].length-2) !== '/') state.push([Rn[3], false]);
    				textp = ""; textpidx = 0; textR = [];
    				break;

    			case 'scientific-number': // TODO: <number:scientific-number>
    				break;
    			case 'currency-symbol': // TODO: <number:currency-symbol>
    				break;
    			case 'currency-style': // TODO: <number:currency-style>
    				break;
    			case 'number-style': // 16.27.2 <number:number-style>
    			case 'percentage-style': // 16.27.9 <number:percentage-style>
    			case 'date-style': // 16.27.10 <number:date-style>
    			case 'time-style': // 16.27.18 <number:time-style>
    				if(Rn[1]==='/'){
    					number_format_map[NFtag.name] = NF;
    					if((tmp=state.pop())[0]!==Rn[3]) throw "Bad state: "+tmp;
    				} else if(Rn[0].charAt(Rn[0].length-2) !== '/') {
    					NF = "";
    					NFtag = parsexmltag(Rn[0], false);
    					state.push([Rn[3], true]);
    				} break;

    			case 'script': break; // 3.13 <office:script>
    			case 'libraries': break; // TODO: <ooo:libraries>
    			case 'automatic-styles': break; // 3.15.3 <office:automatic-styles>

    			case 'default-style': // TODO: <style:default-style>
    			case 'page-layout': break; // TODO: <style:page-layout>
    			case 'style': // 16.2 <style:style>
    				break;
    			case 'map': break; // 16.3 <style:map>
    			case 'font-face': break; // 16.21 <style:font-face>

    			case 'paragraph-properties': break; // 17.6 <style:paragraph-properties>
    			case 'table-properties': break; // 17.15 <style:table-properties>
    			case 'table-column-properties': break; // 17.16 <style:table-column-properties>
    			case 'table-row-properties': break; // 17.17 <style:table-row-properties>
    			case 'table-cell-properties': break; // 17.18 <style:table-cell-properties>

    			case 'number': // 16.27.3 <number:number>
    				switch(state[state.length-1][0]) {
    					case 'time-style':
    					case 'date-style':
    						tag = parsexmltag(Rn[0], false);
    						NF += number_formats_ods[Rn[3]][tag.style==='long'?1:0]; break;
    				} break;

    			case 'fraction': break; // TODO 16.27.6 <number:fraction>

    			case 'day': // 16.27.11 <number:day>
    			case 'month': // 16.27.12 <number:month>
    			case 'year': // 16.27.13 <number:year>
    			case 'era': // 16.27.14 <number:era>
    			case 'day-of-week': // 16.27.15 <number:day-of-week>
    			case 'week-of-year': // 16.27.16 <number:week-of-year>
    			case 'quarter': // 16.27.17 <number:quarter>
    			case 'hours': // 16.27.19 <number:hours>
    			case 'minutes': // 16.27.20 <number:minutes>
    			case 'seconds': // 16.27.21 <number:seconds>
    			case 'am-pm': // 16.27.22 <number:am-pm>
    				switch(state[state.length-1][0]) {
    					case 'time-style':
    					case 'date-style':
    						tag = parsexmltag(Rn[0], false);
    						NF += number_formats_ods[Rn[3]][tag.style==='long'?1:0]; break;
    				} break;

    			case 'boolean-style': break; // 16.27.23 <number:boolean-style>
    			case 'boolean': break; // 16.27.24 <number:boolean>
    			case 'text-style': break; // 16.27.25 <number:text-style>
    			case 'text': // 16.27.26 <number:text>
    				if(Rn[0].slice(-2) === "/>") break;
    				else if(Rn[1]==="/") switch(state[state.length-1][0]) {
    					case 'number-style':
    					case 'date-style':
    					case 'time-style':
    						NF += str.slice(pidx, Rn.index);
    						break;
    				}
    				else pidx = Rn.index + Rn[0].length;
    				break;

    			case 'named-range': // 9.4.12 <table:named-range>
    				tag = parsexmltag(Rn[0], false);
    				_Ref = ods_to_csf_3D(tag['cell-range-address']);
    				var nrange = ({Name:tag.name, Ref:_Ref[0] + '!' + _Ref[1]}/*:any*/);
    				if(intable) nrange.Sheet = SheetNames.length;
    				WB.Names.push(nrange);
    				break;

    			case 'text-content': break; // 16.27.27 <number:text-content>
    			case 'text-properties': break; // 16.27.27 <style:text-properties>
    			case 'embedded-text': break; // 16.27.4 <number:embedded-text>

    			case 'body': case '电子表格': break; // 3.3 16.9.6 19.726.3

    			case 'forms': break; // 12.25.2 13.2
    			case 'table-column': break; // 9.1.6 <table:table-column>
    			case 'table-header-rows': break; // 9.1.7 <table:table-header-rows>
    			case 'table-rows': break; // 9.1.12 <table:table-rows>
    			/* TODO: outline levels */
    			case 'table-column-group': break; // 9.1.10 <table:table-column-group>
    			case 'table-header-columns': break; // 9.1.11 <table:table-header-columns>
    			case 'table-columns': break; // 9.1.12 <table:table-columns>

    			case 'null-date': break; // 9.4.2 <table:null-date> TODO: date1904

    			case 'graphic-properties': break; // 17.21 <style:graphic-properties>
    			case 'calculation-settings': break; // 9.4.1 <table:calculation-settings>
    			case 'named-expressions': break; // 9.4.11 <table:named-expressions>
    			case 'label-range': break; // 9.4.9 <table:label-range>
    			case 'label-ranges': break; // 9.4.10 <table:label-ranges>
    			case 'named-expression': break; // 9.4.13 <table:named-expression>
    			case 'sort': break; // 9.4.19 <table:sort>
    			case 'sort-by': break; // 9.4.20 <table:sort-by>
    			case 'sort-groups': break; // 9.4.22 <table:sort-groups>

    			case 'tab': break; // 6.1.4 <text:tab>
    			case 'line-break': break; // 6.1.5 <text:line-break>
    			case 'span': break; // 6.1.7 <text:span>
    			case 'p': case '文本串': // 5.1.3 <text:p>
    				if(['master-styles'].indexOf(state[state.length-1][0]) > -1) break;
    				if(Rn[1]==='/' && (!ctag || !ctag['string-value'])) {
    					var ptp = parse_text_p(str.slice(textpidx,Rn.index));
    					textp = (textp.length > 0 ? textp + "\n" : "") + ptp[0];
    				} else { parsexmltag(Rn[0], false); textpidx = Rn.index + Rn[0].length; }
    				break; // <text:p>
    			case 's': break; // <text:s>

    			case 'database-range': // 9.4.15 <table:database-range>
    				if(Rn[1]==='/') break;
    				try {
    					_Ref = ods_to_csf_3D(parsexmltag(Rn[0])['target-range-address']);
    					Sheets[_Ref[0]]['!autofilter'] = { ref:_Ref[1] };
    				} catch(e) {/* empty */}
    				break;

    			case 'date': break; // <*:date>

    			case 'object': break; // 10.4.6.2 <draw:object>
    			case 'title': case '标题': break; // <*:title> OR <uof:标题>
    			case 'desc': break; // <*:desc>
    			case 'binary-data': break; // 10.4.5 TODO: b64 blob

    			/* 9.2 Advanced Tables */
    			case 'table-source': break; // 9.2.6
    			case 'scenario': break; // 9.2.6

    			case 'iteration': break; // 9.4.3 <table:iteration>
    			case 'content-validations': break; // 9.4.4 <table:
    			case 'content-validation': break; // 9.4.5 <table:
    			case 'help-message': break; // 9.4.6 <table:
    			case 'error-message': break; // 9.4.7 <table:
    			case 'database-ranges': break; // 9.4.14 <table:database-ranges>
    			case 'filter': break; // 9.5.2 <table:filter>
    			case 'filter-and': break; // 9.5.3 <table:filter-and>
    			case 'filter-or': break; // 9.5.4 <table:filter-or>
    			case 'filter-condition': break; // 9.5.5 <table:filter-condition>

    			case 'list-level-style-bullet': break; // 16.31 <text:
    			case 'list-level-style-number': break; // 16.32 <text:
    			case 'list-level-properties': break; // 17.19 <style:

    			/* 7.3 Document Fields */
    			case 'sender-firstname': // 7.3.6.2
    			case 'sender-lastname': // 7.3.6.3
    			case 'sender-initials': // 7.3.6.4
    			case 'sender-title': // 7.3.6.5
    			case 'sender-position': // 7.3.6.6
    			case 'sender-email': // 7.3.6.7
    			case 'sender-phone-private': // 7.3.6.8
    			case 'sender-fax': // 7.3.6.9
    			case 'sender-company': // 7.3.6.10
    			case 'sender-phone-work': // 7.3.6.11
    			case 'sender-street': // 7.3.6.12
    			case 'sender-city': // 7.3.6.13
    			case 'sender-postal-code': // 7.3.6.14
    			case 'sender-country': // 7.3.6.15
    			case 'sender-state-or-province': // 7.3.6.16
    			case 'author-name': // 7.3.7.1
    			case 'author-initials': // 7.3.7.2
    			case 'chapter': // 7.3.8
    			case 'file-name': // 7.3.9
    			case 'template-name': // 7.3.9
    			case 'sheet-name': // 7.3.9
    				break;

    			case 'event-listener':
    				break;
    			/* TODO: FODS Properties */
    			case 'initial-creator':
    			case 'creation-date':
    			case 'print-date':
    			case 'generator':
    			case 'document-statistic':
    			case 'user-defined':
    			case 'editing-duration':
    			case 'editing-cycles':
    				break;

    			/* TODO: FODS Config */
    			case 'config-item':
    				break;

    			/* TODO: style tokens */
    			case 'page-number': break; // TODO <text:page-number>
    			case 'page-count': break; // TODO <text:page-count>
    			case 'time': break; // TODO <text:time>

    			/* 9.3 Advanced Table Cells */
    			case 'cell-range-source': break; // 9.3.1 <table:
    			case 'detective': break; // 9.3.2 <table:
    			case 'operation': break; // 9.3.3 <table:
    			case 'highlighted-range': break; // 9.3.4 <table:

    			/* 9.6 Data Pilot Tables <table: */
    			case 'data-pilot-table': // 9.6.3
    			case 'source-cell-range': // 9.6.5
    			case 'source-service': // 9.6.6
    			case 'data-pilot-field': // 9.6.7
    			case 'data-pilot-level': // 9.6.8
    			case 'data-pilot-subtotals': // 9.6.9
    			case 'data-pilot-subtotal': // 9.6.10
    			case 'data-pilot-members': // 9.6.11
    			case 'data-pilot-member': // 9.6.12
    			case 'data-pilot-display-info': // 9.6.13
    			case 'data-pilot-sort-info': // 9.6.14
    			case 'data-pilot-layout-info': // 9.6.15
    			case 'data-pilot-field-reference': // 9.6.16
    			case 'data-pilot-groups': // 9.6.17
    			case 'data-pilot-group': // 9.6.18
    			case 'data-pilot-group-member': // 9.6.19
    				break;

    			/* 10.3 Drawing Shapes */
    			case 'rect': // 10.3.2
    				break;

    			/* 14.6 DDE Connections */
    			case 'dde-connection-decls': // 14.6.2 <text:
    			case 'dde-connection-decl': // 14.6.3 <text:
    			case 'dde-link': // 14.6.4 <table:
    			case 'dde-source': // 14.6.5 <office:
    				break;

    			case 'properties': break; // 13.7 <form:properties>
    			case 'property': break; // 13.8 <form:property>

    			case 'a': // 6.1.8 hyperlink
    				if(Rn[1]!== '/') {
    					atag = parsexmltag(Rn[0], false);
    					if(!atag.href) break;
    					atag.Target = unescapexml(atag.href); delete atag.href;
    					if(atag.Target.charAt(0) == "#" && atag.Target.indexOf(".") > -1) {
    						_Ref = ods_to_csf_3D(atag.Target.slice(1));
    						atag.Target = "#" + _Ref[0] + "!" + _Ref[1];
    					} else if(atag.Target.match(/^\.\.[\\\/]/)) atag.Target = atag.Target.slice(3);
    				}
    				break;

    			/* non-standard */
    			case 'table-protection': break;
    			case 'data-pilot-grand-total': break; // <table:
    			case 'office-document-common-attrs': break; // bare
    			default: switch(Rn[2]) {
    				case 'dc:':       // TODO: properties
    				case 'calcext:':  // ignore undocumented extensions
    				case 'loext:':    // ignore undocumented extensions
    				case 'ooo:':      // ignore undocumented extensions
    				case 'chartooo:': // ignore undocumented extensions
    				case 'draw:':     // TODO: drawing
    				case 'style:':    // TODO: styles
    				case 'chart:':    // TODO: charts
    				case 'form:':     // TODO: forms
    				case 'uof:':      // TODO: uof
    				case '表:':       // TODO: uof
    				case '字:':       // TODO: uof
    					break;
    				default: if(opts.WTF) throw new Error(Rn);
    			}
    		}
    		var out/*:Workbook*/ = ({
    			Sheets: Sheets,
    			SheetNames: SheetNames,
    			Workbook: WB
    		}/*:any*/);
    		if(opts.bookSheets) delete /*::(*/out/*:: :any)*/.Sheets;
    		return out;
    }

    function parse_ods(zip/*:ZIPFile*/, opts/*:?ParseOpts*/)/*:Workbook*/ {
    	opts = opts || ({}/*:any*/);
    	if(safegetzipfile(zip, 'META-INF/manifest.xml')) parse_manifest(getzipdata(zip, 'META-INF/manifest.xml'), opts);
    	var content = getzipstr(zip, 'content.xml');
    	if(!content) throw new Error("Missing content.xml in ODS / UOF file");
    	var wb = parse_content_xml(utf8read(content), opts);
    	if(safegetzipfile(zip, 'meta.xml')) wb.Props = parse_core_props(getzipdata(zip, 'meta.xml'));
    	return wb;
    }
    function parse_fods(data/*:string*/, opts/*:?ParseOpts*/)/*:Workbook*/ {
    	return parse_content_xml(data, opts);
    }

    /*! sheetjs (C) 2013-present SheetJS -- http://sheetjs.com */
    function u8_to_dataview(array) {
      return new DataView(array.buffer, array.byteOffset, array.byteLength);
    }
    function u8str(u8) {
      return typeof TextDecoder != "undefined" ? new TextDecoder().decode(u8) : utf8read(a2s(u8));
    }
    function u8concat(u8a) {
      var len = u8a.reduce(function(acc, x) {
        return acc + x.length;
      }, 0);
      var out = new Uint8Array(len);
      var off = 0;
      u8a.forEach(function(u8) {
        out.set(u8, off);
        off += u8.length;
      });
      return out;
    }
    function popcnt(x) {
      x -= x >> 1 & 1431655765;
      x = (x & 858993459) + (x >> 2 & 858993459);
      return (x + (x >> 4) & 252645135) * 16843009 >>> 24;
    }
    function readDecimal128LE(buf, offset) {
      var exp = (buf[offset + 15] & 127) << 7 | buf[offset + 14] >> 1;
      var mantissa = buf[offset + 14] & 1;
      for (var j = offset + 13; j >= offset; --j)
        mantissa = mantissa * 256 + buf[j];
      return (buf[offset + 15] & 128 ? -mantissa : mantissa) * Math.pow(10, exp - 6176);
    }
    function parse_varint49(buf, ptr) {
      var l = ptr ? ptr[0] : 0;
      var usz = buf[l] & 127;
      varint:
        if (buf[l++] >= 128) {
          usz |= (buf[l] & 127) << 7;
          if (buf[l++] < 128)
            break varint;
          usz |= (buf[l] & 127) << 14;
          if (buf[l++] < 128)
            break varint;
          usz |= (buf[l] & 127) << 21;
          if (buf[l++] < 128)
            break varint;
          usz += (buf[l] & 127) * Math.pow(2, 28);
          ++l;
          if (buf[l++] < 128)
            break varint;
          usz += (buf[l] & 127) * Math.pow(2, 35);
          ++l;
          if (buf[l++] < 128)
            break varint;
          usz += (buf[l] & 127) * Math.pow(2, 42);
          ++l;
          if (buf[l++] < 128)
            break varint;
        }
      if (ptr)
        ptr[0] = l;
      return usz;
    }
    function varint_to_i32(buf) {
      var l = 0, i32 = buf[l] & 127;
      varint:
        if (buf[l++] >= 128) {
          i32 |= (buf[l] & 127) << 7;
          if (buf[l++] < 128)
            break varint;
          i32 |= (buf[l] & 127) << 14;
          if (buf[l++] < 128)
            break varint;
          i32 |= (buf[l] & 127) << 21;
          if (buf[l++] < 128)
            break varint;
          i32 |= (buf[l] & 127) << 28;
        }
      return i32;
    }
    function parse_shallow(buf) {
      var out = [], ptr = [0];
      while (ptr[0] < buf.length) {
        var off = ptr[0];
        var num = parse_varint49(buf, ptr);
        var type = num & 7;
        num = Math.floor(num / 8);
        var len = 0;
        var res;
        if (num == 0)
          break;
        switch (type) {
          case 0:
            {
              var l = ptr[0];
              while (buf[ptr[0]++] >= 128)
                ;
              res = buf.slice(l, ptr[0]);
            }
            break;
          case 5:
            len = 4;
            res = buf.slice(ptr[0], ptr[0] + len);
            ptr[0] += len;
            break;
          case 1:
            len = 8;
            res = buf.slice(ptr[0], ptr[0] + len);
            ptr[0] += len;
            break;
          case 2:
            len = parse_varint49(buf, ptr);
            res = buf.slice(ptr[0], ptr[0] + len);
            ptr[0] += len;
            break;
          case 3:
          case 4:
          default:
            throw new Error("PB Type ".concat(type, " for Field ").concat(num, " at offset ").concat(off));
        }
        var v = { data: res, type: type };
        if (out[num] == null)
          out[num] = [v];
        else
          out[num].push(v);
      }
      return out;
    }
    function mappa(data, cb) {
      return (data == null ? void 0 : data.map(function(d) {
        return cb(d.data);
      })) || [];
    }
    function parse_iwa_file(buf) {
      var _a;
      var out = [], ptr = [0];
      while (ptr[0] < buf.length) {
        var len = parse_varint49(buf, ptr);
        var ai = parse_shallow(buf.slice(ptr[0], ptr[0] + len));
        ptr[0] += len;
        var res = {
          id: varint_to_i32(ai[1][0].data),
          messages: []
        };
        ai[2].forEach(function(b) {
          var mi = parse_shallow(b.data);
          var fl = varint_to_i32(mi[3][0].data);
          res.messages.push({
            meta: mi,
            data: buf.slice(ptr[0], ptr[0] + fl)
          });
          ptr[0] += fl;
        });
        if ((_a = ai[3]) == null ? void 0 : _a[0])
          res.merge = varint_to_i32(ai[3][0].data) >>> 0 > 0;
        out.push(res);
      }
      return out;
    }
    function parse_snappy_chunk(type, buf) {
      if (type != 0)
        throw new Error("Unexpected Snappy chunk type ".concat(type));
      var ptr = [0];
      var usz = parse_varint49(buf, ptr);
      var chunks = [];
      while (ptr[0] < buf.length) {
        var tag = buf[ptr[0]] & 3;
        if (tag == 0) {
          var len = buf[ptr[0]++] >> 2;
          if (len < 60)
            ++len;
          else {
            var c = len - 59;
            len = buf[ptr[0]];
            if (c > 1)
              len |= buf[ptr[0] + 1] << 8;
            if (c > 2)
              len |= buf[ptr[0] + 2] << 16;
            if (c > 3)
              len |= buf[ptr[0] + 3] << 24;
            len >>>= 0;
            len++;
            ptr[0] += c;
          }
          chunks.push(buf.slice(ptr[0], ptr[0] + len));
          ptr[0] += len;
          continue;
        } else {
          var offset = 0, length = 0;
          if (tag == 1) {
            length = (buf[ptr[0]] >> 2 & 7) + 4;
            offset = (buf[ptr[0]++] & 224) << 3;
            offset |= buf[ptr[0]++];
          } else {
            length = (buf[ptr[0]++] >> 2) + 1;
            if (tag == 2) {
              offset = buf[ptr[0]] | buf[ptr[0] + 1] << 8;
              ptr[0] += 2;
            } else {
              offset = (buf[ptr[0]] | buf[ptr[0] + 1] << 8 | buf[ptr[0] + 2] << 16 | buf[ptr[0] + 3] << 24) >>> 0;
              ptr[0] += 4;
            }
          }
          chunks = [u8concat(chunks)];
          if (offset == 0)
            throw new Error("Invalid offset 0");
          if (offset > chunks[0].length)
            throw new Error("Invalid offset beyond length");
          if (length >= offset) {
            chunks.push(chunks[0].slice(-offset));
            length -= offset;
            while (length >= chunks[chunks.length - 1].length) {
              chunks.push(chunks[chunks.length - 1]);
              length -= chunks[chunks.length - 1].length;
            }
          }
          chunks.push(chunks[0].slice(-offset, -offset + length));
        }
      }
      var o = u8concat(chunks);
      if (o.length != usz)
        throw new Error("Unexpected length: ".concat(o.length, " != ").concat(usz));
      return o;
    }
    function decompress_iwa_file(buf) {
      var out = [];
      var l = 0;
      while (l < buf.length) {
        var t = buf[l++];
        var len = buf[l] | buf[l + 1] << 8 | buf[l + 2] << 16;
        l += 3;
        out.push(parse_snappy_chunk(t, buf.slice(l, l + len)));
        l += len;
      }
      if (l !== buf.length)
        throw new Error("data is not a valid framed stream!");
      return u8concat(out);
    }
    function parse_old_storage(buf, sst, rsst, v) {
      var dv = u8_to_dataview(buf);
      var flags = dv.getUint32(4, true);
      var data_offset = (v > 1 ? 12 : 8) + popcnt(flags & (v > 1 ? 3470 : 398)) * 4;
      var ridx = -1, sidx = -1, ieee = NaN, dt = new Date(2001, 0, 1);
      if (flags & 512) {
        ridx = dv.getUint32(data_offset, true);
        data_offset += 4;
      }
      data_offset += popcnt(flags & (v > 1 ? 12288 : 4096)) * 4;
      if (flags & 16) {
        sidx = dv.getUint32(data_offset, true);
        data_offset += 4;
      }
      if (flags & 32) {
        ieee = dv.getFloat64(data_offset, true);
        data_offset += 8;
      }
      if (flags & 64) {
        dt.setTime(dt.getTime() + dv.getFloat64(data_offset, true) * 1e3);
        data_offset += 8;
      }
      var ret;
      switch (buf[2]) {
        case 0:
          break;
        case 2:
          ret = { t: "n", v: ieee };
          break;
        case 3:
          ret = { t: "s", v: sst[sidx] };
          break;
        case 5:
          ret = { t: "d", v: dt };
          break;
        case 6:
          ret = { t: "b", v: ieee > 0 };
          break;
        case 7:
          ret = { t: "n", v: ieee / 86400 };
          break;
        case 8:
          ret = { t: "e", v: 0 };
          break;
        case 9:
          {
            if (ridx > -1)
              ret = { t: "s", v: rsst[ridx] };
            else if (sidx > -1)
              ret = { t: "s", v: sst[sidx] };
            else if (!isNaN(ieee))
              ret = { t: "n", v: ieee };
            else
              throw new Error("Unsupported cell type ".concat(buf.slice(0, 4)));
          }
          break;
        default:
          throw new Error("Unsupported cell type ".concat(buf.slice(0, 4)));
      }
      return ret;
    }
    function parse_new_storage(buf, sst, rsst) {
      var dv = u8_to_dataview(buf);
      var flags = dv.getUint32(8, true);
      var data_offset = 12;
      var ridx = -1, sidx = -1, d128 = NaN, ieee = NaN, dt = new Date(2001, 0, 1);
      if (flags & 1) {
        d128 = readDecimal128LE(buf, data_offset);
        data_offset += 16;
      }
      if (flags & 2) {
        ieee = dv.getFloat64(data_offset, true);
        data_offset += 8;
      }
      if (flags & 4) {
        dt.setTime(dt.getTime() + dv.getFloat64(data_offset, true) * 1e3);
        data_offset += 8;
      }
      if (flags & 8) {
        sidx = dv.getUint32(data_offset, true);
        data_offset += 4;
      }
      if (flags & 16) {
        ridx = dv.getUint32(data_offset, true);
        data_offset += 4;
      }
      var ret;
      switch (buf[1]) {
        case 0:
          break;
        case 2:
          ret = { t: "n", v: d128 };
          break;
        case 3:
          ret = { t: "s", v: sst[sidx] };
          break;
        case 5:
          ret = { t: "d", v: dt };
          break;
        case 6:
          ret = { t: "b", v: ieee > 0 };
          break;
        case 7:
          ret = { t: "n", v: ieee / 86400 };
          break;
        case 8:
          ret = { t: "e", v: 0 };
          break;
        case 9:
          {
            if (ridx > -1)
              ret = { t: "s", v: rsst[ridx] };
            else
              throw new Error("Unsupported cell type ".concat(buf[1], " : ").concat(flags & 31, " : ").concat(buf.slice(0, 4)));
          }
          break;
        case 10:
          ret = { t: "n", v: d128 };
          break;
        default:
          throw new Error("Unsupported cell type ".concat(buf[1], " : ").concat(flags & 31, " : ").concat(buf.slice(0, 4)));
      }
      return ret;
    }
    function parse_cell_storage(buf, sst, rsst) {
      switch (buf[0]) {
        case 0:
        case 1:
        case 2:
        case 3:
          return parse_old_storage(buf, sst, rsst, buf[0]);
        case 5:
          return parse_new_storage(buf, sst, rsst);
        default:
          throw new Error("Unsupported payload version ".concat(buf[0]));
      }
    }
    function parse_TSP_Reference(buf) {
      var pb = parse_shallow(buf);
      return parse_varint49(pb[1][0].data);
    }
    function parse_TST_TableDataList(M, root) {
      var pb = parse_shallow(root.data);
      var type = varint_to_i32(pb[1][0].data);
      var entries = pb[3];
      var data = [];
      (entries || []).forEach(function(entry) {
        var le = parse_shallow(entry.data);
        var key = varint_to_i32(le[1][0].data) >>> 0;
        switch (type) {
          case 1:
            data[key] = u8str(le[3][0].data);
            break;
          case 8:
            {
              var rt = M[parse_TSP_Reference(le[9][0].data)][0];
              var rtp = parse_shallow(rt.data);
              var rtpref = M[parse_TSP_Reference(rtp[1][0].data)][0];
              var mtype = varint_to_i32(rtpref.meta[1][0].data);
              if (mtype != 2001)
                throw new Error("2000 unexpected reference to ".concat(mtype));
              var tswpsa = parse_shallow(rtpref.data);
              data[key] = tswpsa[3].map(function(x) {
                return u8str(x.data);
              }).join("");
            }
            break;
        }
      });
      return data;
    }
    function parse_TST_TileRowInfo(u8, type) {
      var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n;
      var pb = parse_shallow(u8);
      var R = varint_to_i32(pb[1][0].data) >>> 0;
      var cnt = varint_to_i32(pb[2][0].data) >>> 0;
      var wide_offsets = ((_b = (_a = pb[8]) == null ? void 0 : _a[0]) == null ? void 0 : _b.data) && varint_to_i32(pb[8][0].data) > 0 || false;
      var used_storage_u8, used_storage;
      if (((_d = (_c = pb[7]) == null ? void 0 : _c[0]) == null ? void 0 : _d.data) && type != 0) {
        used_storage_u8 = (_f = (_e = pb[7]) == null ? void 0 : _e[0]) == null ? void 0 : _f.data;
        used_storage = (_h = (_g = pb[6]) == null ? void 0 : _g[0]) == null ? void 0 : _h.data;
      } else if (((_j = (_i = pb[4]) == null ? void 0 : _i[0]) == null ? void 0 : _j.data) && type != 1) {
        used_storage_u8 = (_l = (_k = pb[4]) == null ? void 0 : _k[0]) == null ? void 0 : _l.data;
        used_storage = (_n = (_m = pb[3]) == null ? void 0 : _m[0]) == null ? void 0 : _n.data;
      } else
        throw "NUMBERS Tile missing ".concat(type, " cell storage");
      var width = wide_offsets ? 4 : 1;
      var used_storage_offsets = u8_to_dataview(used_storage_u8);
      var offsets = [];
      for (var C = 0; C < used_storage_u8.length / 2; ++C) {
        var off = used_storage_offsets.getUint16(C * 2, true);
        if (off < 65535)
          offsets.push([C, off]);
      }
      if (offsets.length != cnt)
        throw "Expected ".concat(cnt, " cells, found ").concat(offsets.length);
      var cells = [];
      for (C = 0; C < offsets.length - 1; ++C)
        cells[offsets[C][0]] = used_storage.subarray(offsets[C][1] * width, offsets[C + 1][1] * width);
      if (offsets.length >= 1)
        cells[offsets[offsets.length - 1][0]] = used_storage.subarray(offsets[offsets.length - 1][1] * width);
      return { R: R, cells: cells };
    }
    function parse_TST_Tile(M, root) {
      var _a;
      var pb = parse_shallow(root.data);
      var storage = ((_a = pb == null ? void 0 : pb[7]) == null ? void 0 : _a[0]) ? varint_to_i32(pb[7][0].data) >>> 0 > 0 ? 1 : 0 : -1;
      var ri = mappa(pb[5], function(u8) {
        return parse_TST_TileRowInfo(u8, storage);
      });
      return {
        nrows: varint_to_i32(pb[4][0].data) >>> 0,
        data: ri.reduce(function(acc, x) {
          if (!acc[x.R])
            acc[x.R] = [];
          x.cells.forEach(function(cell, C) {
            if (acc[x.R][C])
              throw new Error("Duplicate cell r=".concat(x.R, " c=").concat(C));
            acc[x.R][C] = cell;
          });
          return acc;
        }, [])
      };
    }
    function parse_TST_TableModelArchive(M, root, ws) {
      var _a;
      var pb = parse_shallow(root.data);
      var range = { s: { r: 0, c: 0 }, e: { r: 0, c: 0 } };
      range.e.r = (varint_to_i32(pb[6][0].data) >>> 0) - 1;
      if (range.e.r < 0)
        throw new Error("Invalid row varint ".concat(pb[6][0].data));
      range.e.c = (varint_to_i32(pb[7][0].data) >>> 0) - 1;
      if (range.e.c < 0)
        throw new Error("Invalid col varint ".concat(pb[7][0].data));
      ws["!ref"] = encode_range(range);
      var store = parse_shallow(pb[4][0].data);
      var sst = parse_TST_TableDataList(M, M[parse_TSP_Reference(store[4][0].data)][0]);
      var rsst = ((_a = store[17]) == null ? void 0 : _a[0]) ? parse_TST_TableDataList(M, M[parse_TSP_Reference(store[17][0].data)][0]) : [];
      var tile = parse_shallow(store[3][0].data);
      var _R = 0;
      tile[1].forEach(function(t) {
        var tl = parse_shallow(t.data);
        var ref = M[parse_TSP_Reference(tl[2][0].data)][0];
        var mtype = varint_to_i32(ref.meta[1][0].data);
        if (mtype != 6002)
          throw new Error("6001 unexpected reference to ".concat(mtype));
        var _tile = parse_TST_Tile(M, ref);
        _tile.data.forEach(function(row, R) {
          row.forEach(function(buf, C) {
            var addr = encode_cell({ r: _R + R, c: C });
            var res = parse_cell_storage(buf, sst, rsst);
            if (res)
              ws[addr] = res;
          });
        });
        _R += _tile.nrows;
      });
    }
    function parse_TST_TableInfoArchive(M, root) {
      var pb = parse_shallow(root.data);
      var out = { "!ref": "A1" };
      var tableref = M[parse_TSP_Reference(pb[2][0].data)];
      var mtype = varint_to_i32(tableref[0].meta[1][0].data);
      if (mtype != 6001)
        throw new Error("6000 unexpected reference to ".concat(mtype));
      parse_TST_TableModelArchive(M, tableref[0], out);
      return out;
    }
    function parse_TN_SheetArchive(M, root) {
      var _a;
      var pb = parse_shallow(root.data);
      var out = {
        name: ((_a = pb[1]) == null ? void 0 : _a[0]) ? u8str(pb[1][0].data) : "",
        sheets: []
      };
      var shapeoffs = mappa(pb[2], parse_TSP_Reference);
      shapeoffs.forEach(function(off) {
        M[off].forEach(function(m) {
          var mtype = varint_to_i32(m.meta[1][0].data);
          if (mtype == 6e3)
            out.sheets.push(parse_TST_TableInfoArchive(M, m));
        });
      });
      return out;
    }
    function parse_TN_DocumentArchive(M, root) {
      var out = book_new();
      var pb = parse_shallow(root.data);
      var sheetoffs = mappa(pb[1], parse_TSP_Reference);
      sheetoffs.forEach(function(off) {
        M[off].forEach(function(m) {
          var mtype = varint_to_i32(m.meta[1][0].data);
          if (mtype == 2) {
            var root2 = parse_TN_SheetArchive(M, m);
            root2.sheets.forEach(function(sheet, idx) {
              book_append_sheet(out, sheet, idx == 0 ? root2.name : root2.name + "_" + idx, true);
            });
          }
        });
      });
      if (out.SheetNames.length == 0)
        throw new Error("Empty NUMBERS file");
      return out;
    }
    function parse_numbers_iwa(cfb) {
      var _a, _b, _c, _d;
      var M = {}, indices = [];
      cfb.FullPaths.forEach(function(p) {
        if (p.match(/\.iwpv2/))
          throw new Error("Unsupported password protection");
      });
      cfb.FileIndex.forEach(function(s) {
        if (!s.name.match(/\.iwa$/))
          return;
        var o;
        try {
          o = decompress_iwa_file(s.content);
        } catch (e) {
          return console.log("?? " + s.content.length + " " + (e.message || e));
        }
        var packets;
        try {
          packets = parse_iwa_file(o);
        } catch (e) {
          return console.log("## " + (e.message || e));
        }
        packets.forEach(function(packet) {
          M[packet.id] = packet.messages;
          indices.push(packet.id);
        });
      });
      if (!indices.length)
        throw new Error("File has no messages");
      var docroot = ((_d = (_c = (_b = (_a = M == null ? void 0 : M[1]) == null ? void 0 : _a[0]) == null ? void 0 : _b.meta) == null ? void 0 : _c[1]) == null ? void 0 : _d[0].data) && varint_to_i32(M[1][0].meta[1][0].data) == 1 && M[1][0];
      if (!docroot)
        indices.forEach(function(idx) {
          M[idx].forEach(function(iwam) {
            var mtype = varint_to_i32(iwam.meta[1][0].data) >>> 0;
            if (mtype == 1) {
              if (!docroot)
                docroot = iwam;
              else
                throw new Error("Document has multiple roots");
            }
          });
        });
      if (!docroot)
        throw new Error("Cannot find Document root");
      return parse_TN_DocumentArchive(M, docroot);
    }
    function fix_opts_func(defaults/*:Array<Array<any> >*/)/*:{(o:any):void}*/ {
    	return function fix_opts(opts) {
    		for(var i = 0; i != defaults.length; ++i) {
    			var d = defaults[i];
    			if(opts[d[0]] === undefined) opts[d[0]] = d[1];
    			if(d[2] === 'n') opts[d[0]] = Number(opts[d[0]]);
    		}
    	};
    }

    function fix_read_opts(opts) {
    fix_opts_func([
    	['cellNF', false], /* emit cell number format string as .z */
    	['cellHTML', true], /* emit html string as .h */
    	['cellFormula', true], /* emit formulae as .f */
    	['cellStyles', false], /* emits style/theme as .s */
    	['cellText', true], /* emit formatted text as .w */
    	['cellDates', false], /* emit date cells with type `d` */

    	['sheetStubs', false], /* emit empty cells */
    	['sheetRows', 0, 'n'], /* read n rows (0 = read all rows) */

    	['bookDeps', false], /* parse calculation chains */
    	['bookSheets', false], /* only try to get sheet names (no Sheets) */
    	['bookProps', false], /* only try to get properties (no Sheets) */
    	['bookFiles', false], /* include raw file structure (keys, files, cfb) */
    	['bookVBA', false], /* include vba raw data (vbaraw) */

    	['password',''], /* password */
    	['WTF', false] /* WTF mode (throws errors) */
    ])(opts);
    }
    function get_sheet_type(n/*:string*/)/*:string*/ {
    	if(RELS.WS.indexOf(n) > -1) return "sheet";
    	if(n == RELS.CS) return "chart";
    	if(n == RELS.DS) return "dialog";
    	if(n == RELS.MS) return "macro";
    	return (n && n.length) ? n : "sheet";
    }
    function safe_parse_wbrels(wbrels, sheets) {
    	if(!wbrels) return 0;
    	try {
    		wbrels = sheets.map(function pwbr(w) { if(!w.id) w.id = w.strRelID; return [w.name, wbrels['!id'][w.id].Target, get_sheet_type(wbrels['!id'][w.id].Type)]; });
    	} catch(e) { return null; }
    	return !wbrels || wbrels.length === 0 ? null : wbrels;
    }

    function safe_parse_sheet(zip, path/*:string*/, relsPath/*:string*/, sheet, idx/*:number*/, sheetRels, sheets, stype/*:string*/, opts, wb, themes, styles) {
    	try {
    		sheetRels[sheet]=parse_rels(getzipstr(zip, relsPath, true), path);
    		var data = getzipdata(zip, path);
    		var _ws;
    		switch(stype) {
    			case 'sheet':  _ws = parse_ws(data, path, idx, opts, sheetRels[sheet], wb, themes, styles); break;
    			case 'chart':  _ws = parse_cs(data, path, idx, opts, sheetRels[sheet], wb, themes, styles);
    				if(!_ws || !_ws['!drawel']) break;
    				var dfile = resolve_path(_ws['!drawel'].Target, path);
    				var drelsp = get_rels_path(dfile);
    				var draw = parse_drawing(getzipstr(zip, dfile, true), parse_rels(getzipstr(zip, drelsp, true), dfile));
    				var chartp = resolve_path(draw, dfile);
    				var crelsp = get_rels_path(chartp);
    				_ws = parse_chart(getzipstr(zip, chartp, true), chartp, opts, parse_rels(getzipstr(zip, crelsp, true), chartp), wb, _ws);
    				break;
    			case 'macro':  _ws = parse_ms(data, path, idx, opts, sheetRels[sheet], wb, themes, styles); break;
    			case 'dialog': _ws = parse_ds(data, path, idx, opts, sheetRels[sheet], wb, themes, styles); break;
    			default: throw new Error("Unrecognized sheet type " + stype);
    		}
    		sheets[sheet] = _ws;

    		/* scan rels for comments and threaded comments */
    		var tcomments = [];
    		if(sheetRels && sheetRels[sheet]) keys(sheetRels[sheet]).forEach(function(n) {
    			var dfile = "";
    			if(sheetRels[sheet][n].Type == RELS.CMNT) {
    				dfile = resolve_path(sheetRels[sheet][n].Target, path);
    				var comments = parse_cmnt(getzipdata(zip, dfile, true), dfile, opts);
    				if(!comments || !comments.length) return;
    				sheet_insert_comments(_ws, comments, false);
    			}
    			if(sheetRels[sheet][n].Type == RELS.TCMNT) {
    				dfile = resolve_path(sheetRels[sheet][n].Target, path);
    				tcomments = tcomments.concat(parse_tcmnt_xml(getzipdata(zip, dfile, true), opts));
    			}
    		});
    		if(tcomments && tcomments.length) sheet_insert_comments(_ws, tcomments, true, opts.people || []);
    	} catch(e) { if(opts.WTF) throw e; }
    }

    function strip_front_slash(x/*:string*/)/*:string*/ { return x.charAt(0) == '/' ? x.slice(1) : x; }

    function parse_zip(zip/*:ZIP*/, opts/*:?ParseOpts*/)/*:Workbook*/ {
    	make_ssf();
    	opts = opts || {};
    	fix_read_opts(opts);

    	/* OpenDocument Part 3 Section 2.2.1 OpenDocument Package */
    	if(safegetzipfile(zip, 'META-INF/manifest.xml')) return parse_ods(zip, opts);
    	/* UOC */
    	if(safegetzipfile(zip, 'objectdata.xml')) return parse_ods(zip, opts);
    	/* Numbers */
    	if(safegetzipfile(zip, 'Index/Document.iwa')) {
    		if(typeof Uint8Array == "undefined") throw new Error('NUMBERS file parsing requires Uint8Array support');
    		if(typeof parse_numbers_iwa != "undefined") {
    			if(zip.FileIndex) return parse_numbers_iwa(zip);
    			var _zip = CFB.utils.cfb_new();
    			zipentries(zip).forEach(function(e) { zip_add_file(_zip, e, getzipbin(zip, e)); });
    			return parse_numbers_iwa(_zip);
    		}
    		throw new Error('Unsupported NUMBERS file');
    	}
    	if(!safegetzipfile(zip, '[Content_Types].xml')) {
    		if(safegetzipfile(zip, 'index.xml.gz')) throw new Error('Unsupported NUMBERS 08 file');
    		if(safegetzipfile(zip, 'index.xml')) throw new Error('Unsupported NUMBERS 09 file');
    		throw new Error('Unsupported ZIP file');
    	}

    	var entries = zipentries(zip);
    	var dir = parse_ct((getzipstr(zip, '[Content_Types].xml')/*:?any*/));
    	var xlsb = false;
    	var sheets, binname;
    	if(dir.workbooks.length === 0) {
    		binname = "xl/workbook.xml";
    		if(getzipdata(zip,binname, true)) dir.workbooks.push(binname);
    	}
    	if(dir.workbooks.length === 0) {
    		binname = "xl/workbook.bin";
    		if(!getzipdata(zip,binname,true)) throw new Error("Could not find workbook");
    		dir.workbooks.push(binname);
    		xlsb = true;
    	}
    	if(dir.workbooks[0].slice(-3) == "bin") xlsb = true;

    	var themes = ({}/*:any*/);
    	var styles = ({}/*:any*/);
    	if(!opts.bookSheets && !opts.bookProps) {
    		strs = [];
    		if(dir.sst) try { strs=parse_sst(getzipdata(zip, strip_front_slash(dir.sst)), dir.sst, opts); } catch(e) { if(opts.WTF) throw e; }

    		if(opts.cellStyles && dir.themes.length) themes = parse_theme(getzipstr(zip, dir.themes[0].replace(/^\//,''), true)||"",dir.themes[0], opts);

    		if(dir.style) styles = parse_sty(getzipdata(zip, strip_front_slash(dir.style)), dir.style, themes, opts);
    	}

    	/*var externbooks = */dir.links.map(function(link) {
    		try {
    			var rels = parse_rels(getzipstr(zip, get_rels_path(strip_front_slash(link))), link);
    			return parse_xlink(getzipdata(zip, strip_front_slash(link)), rels, link, opts);
    		} catch(e) {}
    	});

    	var wb = parse_wb(getzipdata(zip, strip_front_slash(dir.workbooks[0])), dir.workbooks[0], opts);

    	var props = {}, propdata = "";

    	if(dir.coreprops.length) {
    		propdata = getzipdata(zip, strip_front_slash(dir.coreprops[0]), true);
    		if(propdata) props = parse_core_props(propdata);
    		if(dir.extprops.length !== 0) {
    			propdata = getzipdata(zip, strip_front_slash(dir.extprops[0]), true);
    			if(propdata) parse_ext_props(propdata, props, opts);
    		}
    	}

    	var custprops = {};
    	if(!opts.bookSheets || opts.bookProps) {
    		if (dir.custprops.length !== 0) {
    			propdata = getzipstr(zip, strip_front_slash(dir.custprops[0]), true);
    			if(propdata) custprops = parse_cust_props(propdata, opts);
    		}
    	}

    	var out = ({}/*:any*/);
    	if(opts.bookSheets || opts.bookProps) {
    		if(wb.Sheets) sheets = wb.Sheets.map(function pluck(x){ return x.name; });
    		else if(props.Worksheets && props.SheetNames.length > 0) sheets=props.SheetNames;
    		if(opts.bookProps) { out.Props = props; out.Custprops = custprops; }
    		if(opts.bookSheets && typeof sheets !== 'undefined') out.SheetNames = sheets;
    		if(opts.bookSheets ? out.SheetNames : opts.bookProps) return out;
    	}
    	sheets = {};

    	var deps = {};
    	if(opts.bookDeps && dir.calcchain) deps=parse_cc(getzipdata(zip, strip_front_slash(dir.calcchain)),dir.calcchain);

    	var i=0;
    	var sheetRels = ({}/*:any*/);
    	var path, relsPath;

    	{
    		var wbsheets = wb.Sheets;
    		props.Worksheets = wbsheets.length;
    		props.SheetNames = [];
    		for(var j = 0; j != wbsheets.length; ++j) {
    			props.SheetNames[j] = wbsheets[j].name;
    		}
    	}

    	var wbext = xlsb ? "bin" : "xml";
    	var wbrelsi = dir.workbooks[0].lastIndexOf("/");
    	var wbrelsfile = (dir.workbooks[0].slice(0, wbrelsi+1) + "_rels/" + dir.workbooks[0].slice(wbrelsi+1) + ".rels").replace(/^\//,"");
    	if(!safegetzipfile(zip, wbrelsfile)) wbrelsfile = 'xl/_rels/workbook.' + wbext + '.rels';
    	var wbrels = parse_rels(getzipstr(zip, wbrelsfile, true), wbrelsfile.replace(/_rels.*/, "s5s"));

    	if((dir.metadata || []).length >= 1) {
    		/* TODO: MDX and other types of metadata */
    		opts.xlmeta = parse_xlmeta(getzipdata(zip, strip_front_slash(dir.metadata[0])),dir.metadata[0],opts);
    	}

    	if((dir.people || []).length >= 1) {
    		opts.people = parse_people_xml(getzipdata(zip, strip_front_slash(dir.people[0])),opts);
    	}

    	if(wbrels) wbrels = safe_parse_wbrels(wbrels, wb.Sheets);

    	/* Numbers iOS hack */
    	var nmode = (getzipdata(zip,"xl/worksheets/sheet.xml",true))?1:0;
    	wsloop: for(i = 0; i != props.Worksheets; ++i) {
    		var stype = "sheet";
    		if(wbrels && wbrels[i]) {
    			path = 'xl/' + (wbrels[i][1]).replace(/[\/]?xl\//, "");
    			if(!safegetzipfile(zip, path)) path = wbrels[i][1];
    			if(!safegetzipfile(zip, path)) path = wbrelsfile.replace(/_rels\/.*$/,"") + wbrels[i][1];
    			stype = wbrels[i][2];
    		} else {
    			path = 'xl/worksheets/sheet'+(i+1-nmode)+"." + wbext;
    			path = path.replace(/sheet0\./,"sheet.");
    		}
    		relsPath = path.replace(/^(.*)(\/)([^\/]*)$/, "$1/_rels/$3.rels");
    		if(opts && opts.sheets != null) switch(typeof opts.sheets) {
    			case "number": if(i != opts.sheets) continue wsloop; break;
    			case "string": if(props.SheetNames[i].toLowerCase() != opts.sheets.toLowerCase()) continue wsloop; break;
    			default: if(Array.isArray && Array.isArray(opts.sheets)) {
    				var snjseen = false;
    				for(var snj = 0; snj != opts.sheets.length; ++snj) {
    					if(typeof opts.sheets[snj] == "number" && opts.sheets[snj] == i) snjseen=1;
    					if(typeof opts.sheets[snj] == "string" && opts.sheets[snj].toLowerCase() == props.SheetNames[i].toLowerCase()) snjseen = 1;
    				}
    				if(!snjseen) continue wsloop;
    			}
    		}
    		safe_parse_sheet(zip, path, relsPath, props.SheetNames[i], i, sheetRels, sheets, stype, opts, wb, themes, styles);
    	}

    	out = ({
    		Directory: dir,
    		Workbook: wb,
    		Props: props,
    		Custprops: custprops,
    		Deps: deps,
    		Sheets: sheets,
    		SheetNames: props.SheetNames,
    		Strings: strs,
    		Styles: styles,
    		Themes: themes,
    		SSF: dup(table_fmt)
    	}/*:any*/);
    	if(opts && opts.bookFiles) {
    		if(zip.files) {
    			out.keys = entries;
    			out.files = zip.files;
    		} else {
    			out.keys = [];
    			out.files = {};
    			zip.FullPaths.forEach(function(p, idx) {
    				p = p.replace(/^Root Entry[\/]/, "");
    				out.keys.push(p);
    				out.files[p] = zip.FileIndex[idx];
    			});
    		}
    	}
    	if(opts && opts.bookVBA) {
    		if(dir.vba.length > 0) out.vbaraw = getzipdata(zip,strip_front_slash(dir.vba[0]),true);
    		else if(dir.defaults && dir.defaults.bin === CT_VBA) out.vbaraw = getzipdata(zip, 'xl/vbaProject.bin',true);
    	}
    	return out;
    }

    /* [MS-OFFCRYPTO] 2.1.1 */
    function parse_xlsxcfb(cfb, _opts/*:?ParseOpts*/)/*:Workbook*/ {
    	var opts = _opts || {};
    	var f = 'Workbook', data = CFB.find(cfb, f);
    	try {
    	f = '/!DataSpaces/Version';
    	data = CFB.find(cfb, f); if(!data || !data.content) throw new Error("ECMA-376 Encrypted file missing " + f);
    	/*var version = */parse_DataSpaceVersionInfo(data.content);

    	/* 2.3.4.1 */
    	f = '/!DataSpaces/DataSpaceMap';
    	data = CFB.find(cfb, f); if(!data || !data.content) throw new Error("ECMA-376 Encrypted file missing " + f);
    	var dsm = parse_DataSpaceMap(data.content);
    	if(dsm.length !== 1 || dsm[0].comps.length !== 1 || dsm[0].comps[0].t !== 0 || dsm[0].name !== "StrongEncryptionDataSpace" || dsm[0].comps[0].v !== "EncryptedPackage")
    		throw new Error("ECMA-376 Encrypted file bad " + f);

    	/* 2.3.4.2 */
    	f = '/!DataSpaces/DataSpaceInfo/StrongEncryptionDataSpace';
    	data = CFB.find(cfb, f); if(!data || !data.content) throw new Error("ECMA-376 Encrypted file missing " + f);
    	var seds = parse_DataSpaceDefinition(data.content);
    	if(seds.length != 1 || seds[0] != "StrongEncryptionTransform")
    		throw new Error("ECMA-376 Encrypted file bad " + f);

    	/* 2.3.4.3 */
    	f = '/!DataSpaces/TransformInfo/StrongEncryptionTransform/!Primary';
    	data = CFB.find(cfb, f); if(!data || !data.content) throw new Error("ECMA-376 Encrypted file missing " + f);
    	/*var hdr = */parse_Primary(data.content);
    	} catch(e) {}

    	f = '/EncryptionInfo';
    	data = CFB.find(cfb, f); if(!data || !data.content) throw new Error("ECMA-376 Encrypted file missing " + f);
    	var einfo = parse_EncryptionInfo(data.content);

    	/* 2.3.4.4 */
    	f = '/EncryptedPackage';
    	data = CFB.find(cfb, f); if(!data || !data.content) throw new Error("ECMA-376 Encrypted file missing " + f);

    /*global decrypt_agile */
    /*:: declare var decrypt_agile:any; */
    	if(einfo[0] == 0x04 && typeof decrypt_agile !== 'undefined') return decrypt_agile(einfo[1], data.content, opts.password || "", opts);
    /*global decrypt_std76 */
    /*:: declare var decrypt_std76:any; */
    	if(einfo[0] == 0x02 && typeof decrypt_std76 !== 'undefined') return decrypt_std76(einfo[1], data.content, opts.password || "", opts);
    	throw new Error("File is password-protected");
    }

    function firstbyte(f/*:RawData*/,o/*:?TypeOpts*/)/*:Array<number>*/ {
    	var x = "";
    	switch((o||{}).type || "base64") {
    		case 'buffer': return [f[0], f[1], f[2], f[3], f[4], f[5], f[6], f[7]];
    		case 'base64': x = Base64_decode(f.slice(0,12)); break;
    		case 'binary': x = f; break;
    		case 'array':  return [f[0], f[1], f[2], f[3], f[4], f[5], f[6], f[7]];
    		default: throw new Error("Unrecognized type " + (o && o.type || "undefined"));
    	}
    	return [x.charCodeAt(0), x.charCodeAt(1), x.charCodeAt(2), x.charCodeAt(3), x.charCodeAt(4), x.charCodeAt(5), x.charCodeAt(6), x.charCodeAt(7)];
    }

    function read_cfb(cfb/*:CFBContainer*/, opts/*:?ParseOpts*/)/*:Workbook*/ {
    	if(CFB.find(cfb, "EncryptedPackage")) return parse_xlsxcfb(cfb, opts);
    	return parse_xlscfb(cfb, opts);
    }

    function read_zip(data/*:RawData*/, opts/*:?ParseOpts*/)/*:Workbook*/ {
    	var zip, d = data;
    	var o = opts||{};
    	if(!o.type) o.type = (has_buf && Buffer.isBuffer(data)) ? "buffer" : "base64";
    	zip = zip_read(d, o);
    	return parse_zip(zip, o);
    }

    function read_plaintext(data/*:string*/, o/*:ParseOpts*/)/*:Workbook*/ {
    	var i = 0;
    	main: while(i < data.length) switch(data.charCodeAt(i)) {
    		case 0x0A: case 0x0D: case 0x20: ++i; break;
    		case 0x3C: return parse_xlml(data.slice(i),o);
    		default: break main;
    	}
    	return PRN.to_workbook(data, o);
    }

    function read_plaintext_raw(data/*:RawData*/, o/*:ParseOpts*/)/*:Workbook*/ {
    	var str = "", bytes = firstbyte(data, o);
    	switch(o.type) {
    		case 'base64': str = Base64_decode(data); break;
    		case 'binary': str = data; break;
    		case 'buffer': str = data.toString('binary'); break;
    		case 'array': str = cc2str(data); break;
    		default: throw new Error("Unrecognized type " + o.type);
    	}
    	if(bytes[0] == 0xEF && bytes[1] == 0xBB && bytes[2] == 0xBF) str = utf8read(str);
    	o.type = "binary";
    	return read_plaintext(str, o);
    }

    function read_utf16(data/*:RawData*/, o/*:ParseOpts*/)/*:Workbook*/ {
    	var d = data;
    	if(o.type == 'base64') d = Base64_decode(d);
    	d = $cptable.utils.decode(1200, d.slice(2), 'str');
    	o.type = "binary";
    	return read_plaintext(d, o);
    }

    function bstrify(data/*:string*/)/*:string*/ {
    	return !data.match(/[^\x00-\x7F]/) ? data : utf8write(data);
    }

    function read_prn(data, d, o, str) {
    	if(str) { o.type = "string"; return PRN.to_workbook(data, o); }
    	return PRN.to_workbook(d, o);
    }

    function readSync(data/*:RawData*/, opts/*:?ParseOpts*/)/*:Workbook*/ {
    	reset_cp();
    	var o = opts||{};
    	if(typeof ArrayBuffer !== 'undefined' && data instanceof ArrayBuffer) return readSync(new Uint8Array(data), (o = dup(o), o.type = "array", o));
    	if(typeof Uint8Array !== 'undefined' && data instanceof Uint8Array && !o.type) o.type = typeof Deno !== "undefined" ? "buffer" : "array";
    	var d = data, n = [0,0,0,0], str = false;
    	if(o.cellStyles) { o.cellNF = true; o.sheetStubs = true; }
    	_ssfopts = {};
    	if(o.dateNF) _ssfopts.dateNF = o.dateNF;
    	if(!o.type) o.type = (has_buf && Buffer.isBuffer(data)) ? "buffer" : "base64";
    	if(o.type == "file") { o.type = has_buf ? "buffer" : "binary"; d = read_binary(data); if(typeof Uint8Array !== 'undefined' && !has_buf) o.type = "array"; }
    	if(o.type == "string") { str = true; o.type = "binary"; o.codepage = 65001; d = bstrify(data); }
    	if(o.type == 'array' && typeof Uint8Array !== 'undefined' && data instanceof Uint8Array && typeof ArrayBuffer !== 'undefined') {
    		// $FlowIgnore
    		var ab=new ArrayBuffer(3), vu=new Uint8Array(ab); vu.foo="bar";
    		// $FlowIgnore
    		if(!vu.foo) {o=dup(o); o.type='array'; return readSync(ab2a(d), o);}
    	}
    	switch((n = firstbyte(d, o))[0]) {
    		case 0xD0: if(n[1] === 0xCF && n[2] === 0x11 && n[3] === 0xE0 && n[4] === 0xA1 && n[5] === 0xB1 && n[6] === 0x1A && n[7] === 0xE1) return read_cfb(CFB.read(d, o), o); break;
    		case 0x09: if(n[1] <= 0x08) return parse_xlscfb(d, o); break;
    		case 0x3C: return parse_xlml(d, o);
    		case 0x49:
    			if(n[1] === 0x49 && n[2] === 0x2a && n[3] === 0x00) throw new Error("TIFF Image File is not a spreadsheet");
    			if(n[1] === 0x44) return read_wb_ID(d, o);
    			break;
    		case 0x54: if(n[1] === 0x41 && n[2] === 0x42 && n[3] === 0x4C) return DIF.to_workbook(d, o); break;
    		case 0x50: return (n[1] === 0x4B && n[2] < 0x09 && n[3] < 0x09) ? read_zip(d, o) : read_prn(data, d, o, str);
    		case 0xEF: return n[3] === 0x3C ? parse_xlml(d, o) : read_prn(data, d, o, str);
    		case 0xFF:
    			if(n[1] === 0xFE) { return read_utf16(d, o); }
    			else if(n[1] === 0x00 && n[2] === 0x02 && n[3] === 0x00) return WK_.to_workbook(d, o);
    			break;
    		case 0x00:
    			if(n[1] === 0x00) {
    				if(n[2] >= 0x02 && n[3] === 0x00) return WK_.to_workbook(d, o);
    				if(n[2] === 0x00 && (n[3] === 0x08 || n[3] === 0x09)) return WK_.to_workbook(d, o);
    			}
    			break;
    		case 0x03: case 0x83: case 0x8B: case 0x8C: return DBF.to_workbook(d, o);
    		case 0x7B: if(n[1] === 0x5C && n[2] === 0x72 && n[3] === 0x74) return RTF.to_workbook(d, o); break;
    		case 0x0A: case 0x0D: case 0x20: return read_plaintext_raw(d, o);
    		case 0x89: if(n[1] === 0x50 && n[2] === 0x4E && n[3] === 0x47) throw new Error("PNG Image File is not a spreadsheet"); break;
    	}
    	if(DBF_SUPPORTED_VERSIONS.indexOf(n[0]) > -1 && n[2] <= 12 && n[3] <= 31) return DBF.to_workbook(d, o);
    	return read_prn(data, d, o, str);
    }
    /*::
    type MJRObject = {
    	row: any;
    	isempty: boolean;
    };
    */
    function make_json_row(sheet/*:Worksheet*/, r/*:Range*/, R/*:number*/, cols/*:Array<string>*/, header/*:number*/, hdr/*:Array<any>*/, dense/*:boolean*/, o/*:Sheet2JSONOpts*/)/*:MJRObject*/ {
    	var rr = encode_row(R);
    	var defval = o.defval, raw = o.raw || !Object.prototype.hasOwnProperty.call(o, "raw");
    	var isempty = true;
    	var row/*:any*/ = (header === 1) ? [] : {};
    	if(header !== 1) {
    		if(Object.defineProperty) try { Object.defineProperty(row, '__rowNum__', {value:R, enumerable:false}); } catch(e) { row.__rowNum__ = R; }
    		else row.__rowNum__ = R;
    	}
    	if(!dense || sheet[R]) for (var C = r.s.c; C <= r.e.c; ++C) {
    		var val = dense ? sheet[R][C] : sheet[cols[C] + rr];
    		if(val === undefined || val.t === undefined) {
    			if(defval === undefined) continue;
    			if(hdr[C] != null) { row[hdr[C]] = defval; }
    			continue;
    		}
    		var v = val.v;
    		switch(val.t){
    			case 'z': if(v == null) break; continue;
    			case 'e': v = (v == 0 ? null : void 0); break;
    			case 's': case 'd': case 'b': case 'n': break;
    			default: throw new Error('unrecognized type ' + val.t);
    		}
    		if(hdr[C] != null) {
    			if(v == null) {
    				if(val.t == "e" && v === null) row[hdr[C]] = null;
    				else if(defval !== undefined) row[hdr[C]] = defval;
    				else if(raw && v === null) row[hdr[C]] = null;
    				else continue;
    			} else {
    				row[hdr[C]] = raw && (val.t !== "n" || (val.t === "n" && o.rawNumbers !== false)) ? v : format_cell(val,v,o);
    			}
    			if(v != null) isempty = false;
    		}
    	}
    	return { row: row, isempty: isempty };
    }


    function sheet_to_json(sheet/*:Worksheet*/, opts/*:?Sheet2JSONOpts*/) {
    	if(sheet == null || sheet["!ref"] == null) return [];
    	var val = {t:'n',v:0}, header = 0, offset = 1, hdr/*:Array<any>*/ = [], v=0, vv="";
    	var r = {s:{r:0,c:0},e:{r:0,c:0}};
    	var o = opts || {};
    	var range = o.range != null ? o.range : sheet["!ref"];
    	if(o.header === 1) header = 1;
    	else if(o.header === "A") header = 2;
    	else if(Array.isArray(o.header)) header = 3;
    	else if(o.header == null) header = 0;
    	switch(typeof range) {
    		case 'string': r = safe_decode_range(range); break;
    		case 'number': r = safe_decode_range(sheet["!ref"]); r.s.r = range; break;
    		default: r = range;
    	}
    	if(header > 0) offset = 0;
    	var rr = encode_row(r.s.r);
    	var cols/*:Array<string>*/ = [];
    	var out/*:Array<any>*/ = [];
    	var outi = 0, counter = 0;
    	var dense = Array.isArray(sheet);
    	var R = r.s.r, C = 0;
    	var header_cnt = {};
    	if(dense && !sheet[R]) sheet[R] = [];
    	var colinfo/*:Array<ColInfo>*/ = o.skipHidden && sheet["!cols"] || [];
    	var rowinfo/*:Array<ColInfo>*/ = o.skipHidden && sheet["!rows"] || [];
    	for(C = r.s.c; C <= r.e.c; ++C) {
    		if(((colinfo[C]||{}).hidden)) continue;
    		cols[C] = encode_col(C);
    		val = dense ? sheet[R][C] : sheet[cols[C] + rr];
    		switch(header) {
    			case 1: hdr[C] = C - r.s.c; break;
    			case 2: hdr[C] = cols[C]; break;
    			case 3: hdr[C] = o.header[C - r.s.c]; break;
    			default:
    				if(val == null) val = {w: "__EMPTY", t: "s"};
    				vv = v = format_cell(val, null, o);
    				counter = header_cnt[v] || 0;
    				if(!counter) header_cnt[v] = 1;
    				else {
    					do { vv = v + "_" + (counter++); } while(header_cnt[vv]); header_cnt[v] = counter;
    					header_cnt[vv] = 1;
    				}
    				hdr[C] = vv;
    		}
    	}
    	for (R = r.s.r + offset; R <= r.e.r; ++R) {
    		if ((rowinfo[R]||{}).hidden) continue;
    		var row = make_json_row(sheet, r, R, cols, header, hdr, dense, o);
    		if((row.isempty === false) || (header === 1 ? o.blankrows !== false : !!o.blankrows)) out[outi++] = row.row;
    	}
    	out.length = outi;
    	return out;
    }

    var qreg = /"/g;
    function make_csv_row(sheet/*:Worksheet*/, r/*:Range*/, R/*:number*/, cols/*:Array<string>*/, fs/*:number*/, rs/*:number*/, FS/*:string*/, o/*:Sheet2CSVOpts*/)/*:?string*/ {
    	var isempty = true;
    	var row/*:Array<string>*/ = [], txt = "", rr = encode_row(R);
    	for(var C = r.s.c; C <= r.e.c; ++C) {
    		if (!cols[C]) continue;
    		var val = o.dense ? (sheet[R]||[])[C]: sheet[cols[C] + rr];
    		if(val == null) txt = "";
    		else if(val.v != null) {
    			isempty = false;
    			txt = ''+(o.rawNumbers && val.t == "n" ? val.v : format_cell(val, null, o));
    			for(var i = 0, cc = 0; i !== txt.length; ++i) if((cc = txt.charCodeAt(i)) === fs || cc === rs || cc === 34 || o.forceQuotes) {txt = "\"" + txt.replace(qreg, '""') + "\""; break; }
    			if(txt == "ID") txt = '"ID"';
    		} else if(val.f != null && !val.F) {
    			isempty = false;
    			txt = '=' + val.f; if(txt.indexOf(",") >= 0) txt = '"' + txt.replace(qreg, '""') + '"';
    		} else txt = "";
    		/* NOTE: Excel CSV does not support array formulae */
    		row.push(txt);
    	}
    	if(o.blankrows === false && isempty) return null;
    	return row.join(FS);
    }

    function sheet_to_csv(sheet/*:Worksheet*/, opts/*:?Sheet2CSVOpts*/)/*:string*/ {
    	var out/*:Array<string>*/ = [];
    	var o = opts == null ? {} : opts;
    	if(sheet == null || sheet["!ref"] == null) return "";
    	var r = safe_decode_range(sheet["!ref"]);
    	var FS = o.FS !== undefined ? o.FS : ",", fs = FS.charCodeAt(0);
    	var RS = o.RS !== undefined ? o.RS : "\n", rs = RS.charCodeAt(0);
    	var endregex = new RegExp((FS=="|" ? "\\|" : FS)+"+$");
    	var row = "", cols/*:Array<string>*/ = [];
    	o.dense = Array.isArray(sheet);
    	var colinfo/*:Array<ColInfo>*/ = o.skipHidden && sheet["!cols"] || [];
    	var rowinfo/*:Array<ColInfo>*/ = o.skipHidden && sheet["!rows"] || [];
    	for(var C = r.s.c; C <= r.e.c; ++C) if (!((colinfo[C]||{}).hidden)) cols[C] = encode_col(C);
    	var w = 0;
    	for(var R = r.s.r; R <= r.e.r; ++R) {
    		if ((rowinfo[R]||{}).hidden) continue;
    		row = make_csv_row(sheet, r, R, cols, fs, rs, FS, o);
    		if(row == null) { continue; }
    		if(o.strip) row = row.replace(endregex,"");
    		if(row || (o.blankrows !== false)) out.push((w++ ? RS : "") + row);
    	}
    	delete o.dense;
    	return out.join("");
    }

    function sheet_to_txt(sheet/*:Worksheet*/, opts/*:?Sheet2CSVOpts*/) {
    	if(!opts) opts = {}; opts.FS = "\t"; opts.RS = "\n";
    	var s = sheet_to_csv(sheet, opts);
    	return s;
    }

    function sheet_to_formulae(sheet/*:Worksheet*/)/*:Array<string>*/ {
    	var y = "", x, val="";
    	if(sheet == null || sheet["!ref"] == null) return [];
    	var r = safe_decode_range(sheet['!ref']), rr = "", cols/*:Array<string>*/ = [], C;
    	var cmds/*:Array<string>*/ = [];
    	var dense = Array.isArray(sheet);
    	for(C = r.s.c; C <= r.e.c; ++C) cols[C] = encode_col(C);
    	for(var R = r.s.r; R <= r.e.r; ++R) {
    		rr = encode_row(R);
    		for(C = r.s.c; C <= r.e.c; ++C) {
    			y = cols[C] + rr;
    			x = dense ? (sheet[R]||[])[C] : sheet[y];
    			val = "";
    			if(x === undefined) continue;
    			else if(x.F != null) {
    				y = x.F;
    				if(!x.f) continue;
    				val = x.f;
    				if(y.indexOf(":") == -1) y = y + ":" + y;
    			}
    			if(x.f != null) val = x.f;
    			else if(x.t == 'z') continue;
    			else if(x.t == 'n' && x.v != null) val = "" + x.v;
    			else if(x.t == 'b') val = x.v ? "TRUE" : "FALSE";
    			else if(x.w !== undefined) val = "'" + x.w;
    			else if(x.v === undefined) continue;
    			else if(x.t == 's') val = "'" + x.v;
    			else val = ""+x.v;
    			cmds[cmds.length] = y + "=" + val;
    		}
    	}
    	return cmds;
    }

    function sheet_add_json(_ws/*:?Worksheet*/, js/*:Array<any>*/, opts)/*:Worksheet*/ {
    	var o = opts || {};
    	var offset = +!o.skipHeader;
    	var ws/*:Worksheet*/ = _ws || ({}/*:any*/);
    	var _R = 0, _C = 0;
    	if(ws && o.origin != null) {
    		if(typeof o.origin == 'number') _R = o.origin;
    		else {
    			var _origin/*:CellAddress*/ = typeof o.origin == "string" ? decode_cell(o.origin) : o.origin;
    			_R = _origin.r; _C = _origin.c;
    		}
    	}
    	var cell/*:Cell*/;
    	var range/*:Range*/ = ({s: {c:0, r:0}, e: {c:_C, r:_R + js.length - 1 + offset}}/*:any*/);
    	if(ws['!ref']) {
    		var _range = safe_decode_range(ws['!ref']);
    		range.e.c = Math.max(range.e.c, _range.e.c);
    		range.e.r = Math.max(range.e.r, _range.e.r);
    		if(_R == -1) { _R = _range.e.r + 1; range.e.r = _R + js.length - 1 + offset; }
    	} else {
    		if(_R == -1) { _R = 0; range.e.r = js.length - 1 + offset; }
    	}
    	var hdr/*:Array<string>*/ = o.header || [], C = 0;

    	js.forEach(function (JS, R/*:number*/) {
    		keys(JS).forEach(function(k) {
    			if((C=hdr.indexOf(k)) == -1) hdr[C=hdr.length] = k;
    			var v = JS[k];
    			var t = 'z';
    			var z = "";
    			var ref = encode_cell({c:_C + C,r:_R + R + offset});
    			cell = ws_get_cell_stub(ws, ref);
    			if(v && typeof v === 'object' && !(v instanceof Date)){
    				ws[ref] = v;
    			} else {
    				if(typeof v == 'number') t = 'n';
    				else if(typeof v == 'boolean') t = 'b';
    				else if(typeof v == 'string') t = 's';
    				else if(v instanceof Date) {
    					t = 'd';
    					if(!o.cellDates) { t = 'n'; v = datenum(v); }
    					z = (o.dateNF || table_fmt[14]);
    				}
    				else if(v === null && o.nullError) { t = 'e'; v = 0; }
    				if(!cell) ws[ref] = cell = ({t:t, v:v}/*:any*/);
    				else {
    					cell.t = t; cell.v = v;
    					delete cell.w; delete cell.R;
    					if(z) cell.z = z;
    				}
    				if(z) cell.z = z;
    			}
    		});
    	});
    	range.e.c = Math.max(range.e.c, _C + hdr.length - 1);
    	var __R = encode_row(_R);
    	if(offset) for(C = 0; C < hdr.length; ++C) ws[encode_col(C + _C) + __R] = {t:'s', v:hdr[C]};
    	ws['!ref'] = encode_range(range);
    	return ws;
    }
    function json_to_sheet(js/*:Array<any>*/, opts)/*:Worksheet*/ { return sheet_add_json(null, js, opts); }

    /* get cell, creating a stub if necessary */
    function ws_get_cell_stub(ws/*:Worksheet*/, R, C/*:?number*/)/*:Cell*/ {
    	/* A1 cell address */
    	if(typeof R == "string") {
    		/* dense */
    		if(Array.isArray(ws)) {
    			var RC = decode_cell(R);
    			if(!ws[RC.r]) ws[RC.r] = [];
    			return ws[RC.r][RC.c] || (ws[RC.r][RC.c] = {t:'z'});
    		}
    		return ws[R] || (ws[R] = {t:'z'});
    	}
    	/* cell address object */
    	if(typeof R != "number") return ws_get_cell_stub(ws, encode_cell(R));
    	/* R and C are 0-based indices */
    	return ws_get_cell_stub(ws, encode_cell({r:R,c:C||0}));
    }

    /* find sheet index for given name / validate index */
    function wb_sheet_idx(wb/*:Workbook*/, sh/*:number|string*/) {
    	if(typeof sh == "number") {
    		if(sh >= 0 && wb.SheetNames.length > sh) return sh;
    		throw new Error("Cannot find sheet # " + sh);
    	} else if(typeof sh == "string") {
    		var idx = wb.SheetNames.indexOf(sh);
    		if(idx > -1) return idx;
    		throw new Error("Cannot find sheet name |" + sh + "|");
    	} else throw new Error("Cannot find sheet |" + sh + "|");
    }

    /* simple blank workbook object */
    function book_new()/*:Workbook*/ {
    	return { SheetNames: [], Sheets: {} };
    }

    /* add a worksheet to the end of a given workbook */
    function book_append_sheet(wb/*:Workbook*/, ws/*:Worksheet*/, name/*:?string*/, roll/*:?boolean*/)/*:string*/ {
    	var i = 1;
    	if(!name) for(; i <= 0xFFFF; ++i, name = undefined) if(wb.SheetNames.indexOf(name = "Sheet" + i) == -1) break;
    	if(!name || wb.SheetNames.length >= 0xFFFF) throw new Error("Too many worksheets");
    	if(roll && wb.SheetNames.indexOf(name) >= 0) {
    		var m = name.match(/(^.*?)(\d+)$/);
    		i = m && +m[2] || 0;
    		var root = m && m[1] || name;
    		for(++i; i <= 0xFFFF; ++i) if(wb.SheetNames.indexOf(name = root + i) == -1) break;
    	}
    	check_ws_name(name);
    	if(wb.SheetNames.indexOf(name) >= 0) throw new Error("Worksheet with name |" + name + "| already exists!");

    	wb.SheetNames.push(name);
    	wb.Sheets[name] = ws;
    	return name;
    }

    /* set sheet visibility (visible/hidden/very hidden) */
    function book_set_sheet_visibility(wb/*:Workbook*/, sh/*:number|string*/, vis/*:number*/) {
    	if(!wb.Workbook) wb.Workbook = {};
    	if(!wb.Workbook.Sheets) wb.Workbook.Sheets = [];

    	var idx = wb_sheet_idx(wb, sh);
    	// $FlowIgnore
    	if(!wb.Workbook.Sheets[idx]) wb.Workbook.Sheets[idx] = {};

    	switch(vis) {
    		case 0: case 1: case 2: break;
    		default: throw new Error("Bad sheet visibility setting " + vis);
    	}
    	// $FlowIgnore
    	wb.Workbook.Sheets[idx].Hidden = vis;
    }

    /* set number format */
    function cell_set_number_format(cell/*:Cell*/, fmt/*:string|number*/) {
    	cell.z = fmt;
    	return cell;
    }

    /* set cell hyperlink */
    function cell_set_hyperlink(cell/*:Cell*/, target/*:string*/, tooltip/*:?string*/) {
    	if(!target) {
    		delete cell.l;
    	} else {
    		cell.l = ({ Target: target }/*:Hyperlink*/);
    		if(tooltip) cell.l.Tooltip = tooltip;
    	}
    	return cell;
    }
    function cell_set_internal_link(cell/*:Cell*/, range/*:string*/, tooltip/*:?string*/) { return cell_set_hyperlink(cell, "#" + range, tooltip); }

    /* add to cell comments */
    function cell_add_comment(cell/*:Cell*/, text/*:string*/, author/*:?string*/) {
    	if(!cell.c) cell.c = [];
    	cell.c.push({t:text, a:author||"SheetJS"});
    }

    /* set array formula and flush related cells */
    function sheet_set_array_formula(ws/*:Worksheet*/, range, formula/*:string*/, dynamic/*:boolean*/) {
    	var rng = typeof range != "string" ? range : safe_decode_range(range);
    	var rngstr = typeof range == "string" ? range : encode_range(range);
    	for(var R = rng.s.r; R <= rng.e.r; ++R) for(var C = rng.s.c; C <= rng.e.c; ++C) {
    		var cell = ws_get_cell_stub(ws, R, C);
    		cell.t = 'n';
    		cell.F = rngstr;
    		delete cell.v;
    		if(R == rng.s.r && C == rng.s.c) {
    			cell.f = formula;
    			if(dynamic) cell.D = true;
    		}
    	}
    	return ws;
    }

    var utils/*:any*/ = {
    	encode_col: encode_col,
    	encode_row: encode_row,
    	encode_cell: encode_cell,
    	encode_range: encode_range,
    	decode_col: decode_col,
    	decode_row: decode_row,
    	split_cell: split_cell,
    	decode_cell: decode_cell,
    	decode_range: decode_range,
    	format_cell: format_cell,
    	sheet_add_aoa: sheet_add_aoa,
    	sheet_add_json: sheet_add_json,
    	sheet_add_dom: sheet_add_dom,
    	aoa_to_sheet: aoa_to_sheet,
    	json_to_sheet: json_to_sheet,
    	table_to_sheet: parse_dom_table,
    	table_to_book: table_to_book,
    	sheet_to_csv: sheet_to_csv,
    	sheet_to_txt: sheet_to_txt,
    	sheet_to_json: sheet_to_json,
    	sheet_to_html: sheet_to_html,
    	sheet_to_formulae: sheet_to_formulae,
    	sheet_to_row_object_array: sheet_to_json,
    	sheet_get_cell: ws_get_cell_stub,
    	book_new: book_new,
    	book_append_sheet: book_append_sheet,
    	book_set_sheet_visibility: book_set_sheet_visibility,
    	cell_set_number_format: cell_set_number_format,
    	cell_set_hyperlink: cell_set_hyperlink,
    	cell_set_internal_link: cell_set_internal_link,
    	cell_add_comment: cell_add_comment,
    	sheet_set_array_formula: sheet_set_array_formula,
    	consts: {
    		SHEET_VISIBLE: 0,
    		SHEET_HIDDEN: 1,
    		SHEET_VERY_HIDDEN: 2
    	}
    };

    /* src\components\pages\sections\TableSection1.svelte generated by Svelte v3.59.2 */
    const file$m = "src\\components\\pages\\sections\\TableSection1.svelte";

    function get_each_context$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[1] = list[i];
    	child_ctx[3] = i;
    	return child_ctx;
    }

    // (37:6) <MDBCardHeader>
    function create_default_slot_7$5(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("重要客戶工程批表");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_7$5.name,
    		type: "slot",
    		source: "(37:6) <MDBCardHeader>",
    		ctx
    	});

    	return block;
    }

    // (40:10) <MDBTableHead color="light-blue lighten-4">
    function create_default_slot_6$5(ctx) {
    	let tr;
    	let th0;
    	let t1;
    	let th1;
    	let t3;
    	let th2;
    	let t5;
    	let th3;
    	let t7;
    	let th4;
    	let t9;
    	let th5;
    	let t11;
    	let th6;
    	let t13;
    	let th7;
    	let t15;
    	let th8;
    	let t17;
    	let th9;

    	const block = {
    		c: function create() {
    			tr = element("tr");
    			th0 = element("th");
    			th0.textContent = "NO.";
    			t1 = space();
    			th1 = element("th");
    			th1.textContent = "Customer";
    			t3 = space();
    			th2 = element("th");
    			th2.textContent = "Device";
    			t5 = space();
    			th3 = element("th");
    			th3.textContent = "Schedule";
    			t7 = space();
    			th4 = element("th");
    			th4.textContent = "SOD";
    			t9 = space();
    			th5 = element("th");
    			th5.textContent = "Status 燈號";
    			t11 = space();
    			th6 = element("th");
    			th6.textContent = "憑單日過站數";
    			t13 = space();
    			th7 = element("th");
    			th7.textContent = "應過站數(SOD基準)";
    			t15 = space();
    			th8 = element("th");
    			th8.textContent = "Status 燈號(P-S)";
    			t17 = space();
    			th9 = element("th");
    			th9.textContent = "MES Stage Code";
    			add_location(th0, file$m, 41, 14, 1469);
    			add_location(th1, file$m, 42, 14, 1497);
    			add_location(th2, file$m, 43, 14, 1530);
    			add_location(th3, file$m, 44, 14, 1561);
    			add_location(th4, file$m, 45, 14, 1594);
    			add_location(th5, file$m, 46, 14, 1622);
    			add_location(th6, file$m, 47, 14, 1656);
    			add_location(th7, file$m, 48, 14, 1687);
    			add_location(th8, file$m, 49, 14, 1723);
    			add_location(th9, file$m, 50, 14, 1762);
    			add_location(tr, file$m, 40, 12, 1449);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, tr, anchor);
    			append_dev(tr, th0);
    			append_dev(tr, t1);
    			append_dev(tr, th1);
    			append_dev(tr, t3);
    			append_dev(tr, th2);
    			append_dev(tr, t5);
    			append_dev(tr, th3);
    			append_dev(tr, t7);
    			append_dev(tr, th4);
    			append_dev(tr, t9);
    			append_dev(tr, th5);
    			append_dev(tr, t11);
    			append_dev(tr, th6);
    			append_dev(tr, t13);
    			append_dev(tr, th7);
    			append_dev(tr, t15);
    			append_dev(tr, th8);
    			append_dev(tr, t17);
    			append_dev(tr, th9);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(tr);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_6$5.name,
    		type: "slot",
    		source: "(40:10) <MDBTableHead color=\\\"light-blue lighten-4\\\">",
    		ctx
    	});

    	return block;
    }

    // (55:12) {#each pres as item, i}
    function create_each_block$1(ctx) {
    	let tr;
    	let td0;
    	let t0_value = /*i*/ ctx[3] + 1 + "";
    	let t0;
    	let t1;
    	let td1;
    	let div1;
    	let img;
    	let img_src_value;
    	let t2;
    	let div0;
    	let p0;
    	let t3_value = /*item*/ ctx[1].Name + "";
    	let t3;
    	let t4;
    	let p1;
    	let t6;
    	let td2;
    	let t7_value = /*item*/ ctx[1].Index + "";
    	let t7;
    	let t8;
    	let td3;
    	let t10;
    	let td4;
    	let t12;
    	let td5;
    	let span;
    	let t14;
    	let td6;
    	let t16;
    	let td7;
    	let t18;
    	let td8;
    	let t20;
    	let td9;
    	let t22;

    	const block = {
    		c: function create() {
    			tr = element("tr");
    			td0 = element("td");
    			t0 = text(t0_value);
    			t1 = space();
    			td1 = element("td");
    			div1 = element("div");
    			img = element("img");
    			t2 = space();
    			div0 = element("div");
    			p0 = element("p");
    			t3 = text(t3_value);
    			t4 = space();
    			p1 = element("p");
    			p1.textContent = "UBM PR Thickness and Opening Measurement";
    			t6 = space();
    			td2 = element("td");
    			t7 = text(t7_value);
    			t8 = space();
    			td3 = element("td");
    			td3.textContent = "32IEQVB002";
    			t10 = space();
    			td4 = element("td");
    			td4.textContent = "11/11";
    			t12 = space();
    			td5 = element("td");
    			span = element("span");
    			span.textContent = "Active";
    			t14 = space();
    			td6 = element("td");
    			td6.textContent = "0.506";
    			t16 = space();
    			td7 = element("td");
    			td7.textContent = "1.207";
    			t18 = space();
    			td8 = element("td");
    			td8.textContent = "(0.7)";
    			t20 = space();
    			td9 = element("td");
    			td9.textContent = "6547";
    			t22 = space();
    			add_location(td0, file$m, 56, 16, 1932);
    			if (!src_url_equal(img.src, img_src_value = "intel.png")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "");
    			set_style(img, "width", "50px");
    			set_style(img, "height", "40px");
    			attr_dev(img, "class", "rounded-circle");
    			add_location(img, file$m, 59, 20, 2051);
    			attr_dev(p0, "class", "fw-bold mb-1");
    			add_location(p0, file$m, 66, 22, 2315);
    			attr_dev(p1, "class", "text-muted mb-0");
    			add_location(p1, file$m, 67, 22, 2378);
    			attr_dev(div0, "class", "ms-3");
    			add_location(div0, file$m, 65, 20, 2273);
    			attr_dev(div1, "class", "d-flex align-items-center");
    			add_location(div1, file$m, 58, 18, 1990);
    			add_location(td1, file$m, 57, 16, 1966);
    			add_location(td2, file$m, 73, 16, 2594);
    			add_location(td3, file$m, 74, 16, 2633);
    			add_location(td4, file$m, 75, 16, 2670);
    			attr_dev(span, "class", "badge badge-success rounded-pill d-inline");
    			add_location(span, file$m, 77, 18, 2726);
    			add_location(td5, file$m, 76, 16, 2702);
    			add_location(td6, file$m, 81, 16, 2878);
    			add_location(td7, file$m, 82, 16, 2910);
    			add_location(td8, file$m, 83, 16, 2942);
    			add_location(td9, file$m, 84, 16, 2974);
    			add_location(tr, file$m, 55, 14, 1910);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, tr, anchor);
    			append_dev(tr, td0);
    			append_dev(td0, t0);
    			append_dev(tr, t1);
    			append_dev(tr, td1);
    			append_dev(td1, div1);
    			append_dev(div1, img);
    			append_dev(div1, t2);
    			append_dev(div1, div0);
    			append_dev(div0, p0);
    			append_dev(p0, t3);
    			append_dev(div0, t4);
    			append_dev(div0, p1);
    			append_dev(tr, t6);
    			append_dev(tr, td2);
    			append_dev(td2, t7);
    			append_dev(tr, t8);
    			append_dev(tr, td3);
    			append_dev(tr, t10);
    			append_dev(tr, td4);
    			append_dev(tr, t12);
    			append_dev(tr, td5);
    			append_dev(td5, span);
    			append_dev(tr, t14);
    			append_dev(tr, td6);
    			append_dev(tr, t16);
    			append_dev(tr, td7);
    			append_dev(tr, t18);
    			append_dev(tr, td8);
    			append_dev(tr, t20);
    			append_dev(tr, td9);
    			append_dev(tr, t22);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*pres*/ 1 && t3_value !== (t3_value = /*item*/ ctx[1].Name + "")) set_data_dev(t3, t3_value);
    			if (dirty & /*pres*/ 1 && t7_value !== (t7_value = /*item*/ ctx[1].Index + "")) set_data_dev(t7, t7_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(tr);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$1.name,
    		type: "each",
    		source: "(55:12) {#each pres as item, i}",
    		ctx
    	});

    	return block;
    }

    // (54:10) <MDBTableBody>
    function create_default_slot_5$6(ctx) {
    	let each_1_anchor;
    	let each_value = /*pres*/ ctx[0];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				if (each_blocks[i]) {
    					each_blocks[i].m(target, anchor);
    				}
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*pres*/ 1) {
    				each_value = /*pres*/ ctx[0];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$1(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_5$6.name,
    		type: "slot",
    		source: "(54:10) <MDBTableBody>",
    		ctx
    	});

    	return block;
    }

    // (39:8) <MDBTable responsive hover>
    function create_default_slot_4$6(ctx) {
    	let mdbtablehead;
    	let t;
    	let mdbtablebody;
    	let current;

    	mdbtablehead = new MDBTableHead({
    			props: {
    				color: "light-blue lighten-4",
    				$$slots: { default: [create_default_slot_6$5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbtablebody = new MDBTableBody({
    			props: {
    				$$slots: { default: [create_default_slot_5$6] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbtablehead.$$.fragment);
    			t = space();
    			create_component(mdbtablebody.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbtablehead, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(mdbtablebody, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbtablehead_changes = {};

    			if (dirty & /*$$scope*/ 16) {
    				mdbtablehead_changes.$$scope = { dirty, ctx };
    			}

    			mdbtablehead.$set(mdbtablehead_changes);
    			const mdbtablebody_changes = {};

    			if (dirty & /*$$scope, pres*/ 17) {
    				mdbtablebody_changes.$$scope = { dirty, ctx };
    			}

    			mdbtablebody.$set(mdbtablebody_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbtablehead.$$.fragment, local);
    			transition_in(mdbtablebody.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbtablehead.$$.fragment, local);
    			transition_out(mdbtablebody.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbtablehead, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(mdbtablebody, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4$6.name,
    		type: "slot",
    		source: "(39:8) <MDBTable responsive hover>",
    		ctx
    	});

    	return block;
    }

    // (38:6) <MDBCardBody>
    function create_default_slot_3$7(ctx) {
    	let mdbtable;
    	let current;

    	mdbtable = new MDBTable({
    			props: {
    				responsive: true,
    				hover: true,
    				$$slots: { default: [create_default_slot_4$6] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbtable.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbtable, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbtable_changes = {};

    			if (dirty & /*$$scope, pres*/ 17) {
    				mdbtable_changes.$$scope = { dirty, ctx };
    			}

    			mdbtable.$set(mdbtable_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbtable.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbtable.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbtable, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$7.name,
    		type: "slot",
    		source: "(38:6) <MDBCardBody>",
    		ctx
    	});

    	return block;
    }

    // (36:4) <MDBCard>
    function create_default_slot_2$7(ctx) {
    	let mdbcardheader;
    	let t;
    	let mdbcardbody;
    	let current;

    	mdbcardheader = new MDBCardHeader({
    			props: {
    				$$slots: { default: [create_default_slot_7$5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbcardbody = new MDBCardBody({
    			props: {
    				$$slots: { default: [create_default_slot_3$7] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbcardheader.$$.fragment);
    			t = space();
    			create_component(mdbcardbody.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbcardheader, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(mdbcardbody, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbcardheader_changes = {};

    			if (dirty & /*$$scope*/ 16) {
    				mdbcardheader_changes.$$scope = { dirty, ctx };
    			}

    			mdbcardheader.$set(mdbcardheader_changes);
    			const mdbcardbody_changes = {};

    			if (dirty & /*$$scope, pres*/ 17) {
    				mdbcardbody_changes.$$scope = { dirty, ctx };
    			}

    			mdbcardbody.$set(mdbcardbody_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbcardheader.$$.fragment, local);
    			transition_in(mdbcardbody.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbcardheader.$$.fragment, local);
    			transition_out(mdbcardbody.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbcardheader, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(mdbcardbody, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$7.name,
    		type: "slot",
    		source: "(36:4) <MDBCard>",
    		ctx
    	});

    	return block;
    }

    // (35:2) <MDBCol md="12">
    function create_default_slot_1$7(ctx) {
    	let mdbcard;
    	let current;

    	mdbcard = new MDBCard({
    			props: {
    				$$slots: { default: [create_default_slot_2$7] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbcard.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbcard, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbcard_changes = {};

    			if (dirty & /*$$scope, pres*/ 17) {
    				mdbcard_changes.$$scope = { dirty, ctx };
    			}

    			mdbcard.$set(mdbcard_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbcard.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbcard.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbcard, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$7.name,
    		type: "slot",
    		source: "(35:2) <MDBCol md=\\\"12\\\">",
    		ctx
    	});

    	return block;
    }

    // (34:0) <MDBRow class="mb-4">
    function create_default_slot$9(ctx) {
    	let mdbcol;
    	let current;

    	mdbcol = new MDBCol({
    			props: {
    				md: "12",
    				$$slots: { default: [create_default_slot_1$7] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbcol.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbcol, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbcol_changes = {};

    			if (dirty & /*$$scope, pres*/ 17) {
    				mdbcol_changes.$$scope = { dirty, ctx };
    			}

    			mdbcol.$set(mdbcol_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbcol.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbcol.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbcol, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$9.name,
    		type: "slot",
    		source: "(34:0) <MDBRow class=\\\"mb-4\\\">",
    		ctx
    	});

    	return block;
    }

    function create_fragment$o(ctx) {
    	let mdbrow;
    	let current;

    	mdbrow = new MDBRow({
    			props: {
    				class: "mb-4",
    				$$slots: { default: [create_default_slot$9] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbrow.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbrow, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const mdbrow_changes = {};

    			if (dirty & /*$$scope, pres*/ 17) {
    				mdbrow_changes.$$scope = { dirty, ctx };
    			}

    			mdbrow.$set(mdbrow_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbrow.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbrow.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbrow, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$o.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$o($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('TableSection1', slots, []);
    	let pres = [];

    	onMount(() => {
    		const loadData = async () => {
    			const response = await fetch('https://sheetjs.com/pres.xlsx');
    			const arrayBuffer = await response.arrayBuffer();

    			// const filePath = path.resolve('C:/Download/pres.xlsx');
    			// const buffer = fs.readFileSync(filePath);
    			const workbook = readSync(arrayBuffer, { type: 'buffer' });

    			const worksheet = workbook.Sheets[workbook.SheetNames[0]];
    			$$invalidate(0, pres = utils.sheet_to_json(worksheet));
    		};

    		// Load data immediately on mount
    		loadData();

    		// Then load data every 10 minutes
    		setInterval(loadData, 600000);
    	});

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<TableSection1> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		MDBCard,
    		MDBCardBody,
    		MDBCardHeader,
    		MDBRow,
    		MDBCol,
    		MDBTable,
    		MDBTableHead,
    		MDBTableBody,
    		onMount,
    		read: readSync,
    		utils,
    		pres
    	});

    	$$self.$inject_state = $$props => {
    		if ('pres' in $$props) $$invalidate(0, pres = $$props.pres);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [pres];
    }

    class TableSection1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$o, create_fragment$o, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "TableSection1",
    			options,
    			id: create_fragment$o.name
    		});
    	}
    }

    /* node_modules\mdbsvelte\src\MDBPagination.svelte generated by Svelte v3.59.2 */
    const file$l = "node_modules\\mdbsvelte\\src\\MDBPagination.svelte";

    function create_fragment$n(ctx) {
    	let nav;
    	let ul;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[10].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], null);
    	let nav_levels = [/*props*/ ctx[3], { class: /*classes*/ ctx[1] }];
    	let nav_data = {};

    	for (let i = 0; i < nav_levels.length; i += 1) {
    		nav_data = assign(nav_data, nav_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			nav = element("nav");
    			ul = element("ul");
    			if (default_slot) default_slot.c();
    			attr_dev(ul, "class", /*listClasses*/ ctx[0]);
    			add_location(ul, file$l, 25, 2, 670);
    			set_attributes(nav, nav_data);
    			add_location(nav, file$l, 24, 0, 617);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, nav, anchor);
    			append_dev(nav, ul);

    			if (default_slot) {
    				default_slot.m(ul, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = action_destroyer(/*forwardEvents*/ ctx[2].call(null, nav));
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 512)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[9],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[9])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[9], dirty, null),
    						null
    					);
    				}
    			}

    			if (!current || dirty & /*listClasses*/ 1) {
    				attr_dev(ul, "class", /*listClasses*/ ctx[0]);
    			}

    			set_attributes(nav, nav_data = get_spread_update(nav_levels, [
    				/*props*/ ctx[3],
    				(!current || dirty & /*classes*/ 2) && { class: /*classes*/ ctx[1] }
    			]));
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(nav);
    			if (default_slot) default_slot.d(detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$n.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$n($$self, $$props, $$invalidate) {
    	let classes;
    	let listClasses;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('MDBPagination', slots, ['default']);
    	const forwardEvents = forwardEventsBuilder(current_component);
    	let { class: className = '' } = $$props;
    	let { listClassName = '' } = $$props;
    	let { size = '' } = $$props;
    	let { circle } = $$props;
    	let { color = "blue" } = $$props;
    	const props = clean$1($$props, ["color", "circle", "size"]);

    	$$self.$$.on_mount.push(function () {
    		if (circle === undefined && !('circle' in $$props || $$self.$$.bound[$$self.$$.props['circle']])) {
    			console.warn("<MDBPagination> was created without expected prop 'circle'");
    		}
    	});

    	$$self.$$set = $$new_props => {
    		$$invalidate(11, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ('class' in $$new_props) $$invalidate(4, className = $$new_props.class);
    		if ('listClassName' in $$new_props) $$invalidate(5, listClassName = $$new_props.listClassName);
    		if ('size' in $$new_props) $$invalidate(6, size = $$new_props.size);
    		if ('circle' in $$new_props) $$invalidate(7, circle = $$new_props.circle);
    		if ('color' in $$new_props) $$invalidate(8, color = $$new_props.color);
    		if ('$$scope' in $$new_props) $$invalidate(9, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		clean: clean$1,
    		clsx,
    		forwardEventsBuilder,
    		current_component,
    		forwardEvents,
    		className,
    		listClassName,
    		size,
    		circle,
    		color,
    		props,
    		listClasses,
    		classes
    	});

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(11, $$props = assign(assign({}, $$props), $$new_props));
    		if ('className' in $$props) $$invalidate(4, className = $$new_props.className);
    		if ('listClassName' in $$props) $$invalidate(5, listClassName = $$new_props.listClassName);
    		if ('size' in $$props) $$invalidate(6, size = $$new_props.size);
    		if ('circle' in $$props) $$invalidate(7, circle = $$new_props.circle);
    		if ('color' in $$props) $$invalidate(8, color = $$new_props.color);
    		if ('listClasses' in $$props) $$invalidate(0, listClasses = $$new_props.listClasses);
    		if ('classes' in $$props) $$invalidate(1, classes = $$new_props.classes);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*className*/ 16) {
    			$$invalidate(1, classes = clsx(className));
    		}

    		if ($$self.$$.dirty & /*listClassName, color, circle, size*/ 480) {
    			$$invalidate(0, listClasses = clsx(listClassName, 'pagination', `pg-${color}`, circle ? 'pagination-circle' : null, { [`pagination-${size}`]: !!size }));
    		}
    	};

    	$$props = exclude_internal_props($$props);

    	return [
    		listClasses,
    		classes,
    		forwardEvents,
    		props,
    		className,
    		listClassName,
    		size,
    		circle,
    		color,
    		$$scope,
    		slots
    	];
    }

    class MDBPagination extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$n, create_fragment$n, safe_not_equal, {
    			class: 4,
    			listClassName: 5,
    			size: 6,
    			circle: 7,
    			color: 8
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "MDBPagination",
    			options,
    			id: create_fragment$n.name
    		});
    	}

    	get class() {
    		throw new Error("<MDBPagination>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<MDBPagination>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get listClassName() {
    		throw new Error("<MDBPagination>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set listClassName(value) {
    		throw new Error("<MDBPagination>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get size() {
    		throw new Error("<MDBPagination>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set size(value) {
    		throw new Error("<MDBPagination>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get circle() {
    		throw new Error("<MDBPagination>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set circle(value) {
    		throw new Error("<MDBPagination>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get color() {
    		throw new Error("<MDBPagination>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set color(value) {
    		throw new Error("<MDBPagination>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\mdbsvelte\src\MDBPageItem.svelte generated by Svelte v3.59.2 */
    const file$k = "node_modules\\mdbsvelte\\src\\MDBPageItem.svelte";

    function create_fragment$m(ctx) {
    	let li;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[7].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[6], null);
    	let li_levels = [/*props*/ ctx[2], { class: /*classes*/ ctx[0] }];
    	let li_data = {};

    	for (let i = 0; i < li_levels.length; i += 1) {
    		li_data = assign(li_data, li_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			li = element("li");
    			if (default_slot) default_slot.c();
    			set_attributes(li, li_data);
    			add_location(li, file$k, 18, 0, 422);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);

    			if (default_slot) {
    				default_slot.m(li, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = action_destroyer(/*forwardEvents*/ ctx[1].call(null, li));
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 64)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[6],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[6])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[6], dirty, null),
    						null
    					);
    				}
    			}

    			set_attributes(li, li_data = get_spread_update(li_levels, [
    				/*props*/ ctx[2],
    				(!current || dirty & /*classes*/ 1) && { class: /*classes*/ ctx[0] }
    			]));
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    			if (default_slot) default_slot.d(detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$m.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$m($$self, $$props, $$invalidate) {
    	let classes;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('MDBPageItem', slots, ['default']);
    	const forwardEvents = forwardEventsBuilder(current_component);
    	let { class: className = '' } = $$props;
    	let { active = false } = $$props;
    	let { disabled = false } = $$props;
    	const props = clean$1($$props);

    	$$self.$$set = $$new_props => {
    		$$invalidate(8, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ('class' in $$new_props) $$invalidate(3, className = $$new_props.class);
    		if ('active' in $$new_props) $$invalidate(4, active = $$new_props.active);
    		if ('disabled' in $$new_props) $$invalidate(5, disabled = $$new_props.disabled);
    		if ('$$scope' in $$new_props) $$invalidate(6, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		clean: clean$1,
    		clsx,
    		forwardEventsBuilder,
    		current_component,
    		forwardEvents,
    		className,
    		active,
    		disabled,
    		props,
    		classes
    	});

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(8, $$props = assign(assign({}, $$props), $$new_props));
    		if ('className' in $$props) $$invalidate(3, className = $$new_props.className);
    		if ('active' in $$props) $$invalidate(4, active = $$new_props.active);
    		if ('disabled' in $$props) $$invalidate(5, disabled = $$new_props.disabled);
    		if ('classes' in $$props) $$invalidate(0, classes = $$new_props.classes);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*className, active, disabled*/ 56) {
    			$$invalidate(0, classes = clsx(className, 'page-item', { active, disabled }));
    		}
    	};

    	$$props = exclude_internal_props($$props);
    	return [classes, forwardEvents, props, className, active, disabled, $$scope, slots];
    }

    class MDBPageItem extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$m, create_fragment$m, safe_not_equal, { class: 3, active: 4, disabled: 5 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "MDBPageItem",
    			options,
    			id: create_fragment$m.name
    		});
    	}

    	get class() {
    		throw new Error("<MDBPageItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<MDBPageItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get active() {
    		throw new Error("<MDBPageItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set active(value) {
    		throw new Error("<MDBPageItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get disabled() {
    		throw new Error("<MDBPageItem>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set disabled(value) {
    		throw new Error("<MDBPageItem>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\mdbsvelte\src\MDBPageNav.svelte generated by Svelte v3.59.2 */
    const file$j = "node_modules\\mdbsvelte\\src\\MDBPageNav.svelte";

    function create_fragment$l(ctx) {
    	let a;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[7].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[6], null);
    	let a_levels = [/*props*/ ctx[2], { class: /*classes*/ ctx[0] }];
    	let a_data = {};

    	for (let i = 0; i < a_levels.length; i += 1) {
    		a_data = assign(a_data, a_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			a = element("a");
    			if (default_slot) default_slot.c();
    			set_attributes(a, a_data);
    			add_location(a, file$j, 17, 0, 447);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, a, anchor);

    			if (default_slot) {
    				default_slot.m(a, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = action_destroyer(/*forwardEvents*/ ctx[1].call(null, a));
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 64)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[6],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[6])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[6], dirty, null),
    						null
    					);
    				}
    			}

    			set_attributes(a, a_data = get_spread_update(a_levels, [
    				/*props*/ ctx[2],
    				(!current || dirty & /*classes*/ 1) && { class: /*classes*/ ctx[0] }
    			]));
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(a);
    			if (default_slot) default_slot.d(detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$l.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$l($$self, $$props, $$invalidate) {
    	let classes;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('MDBPageNav', slots, ['default']);
    	const forwardEvents = forwardEventsBuilder(current_component);
    	let { class: className = '' } = $$props;
    	let { active = false } = $$props;
    	let { disabled = false } = $$props;
    	const props = clean$1($$props);

    	$$self.$$set = $$new_props => {
    		$$invalidate(8, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ('class' in $$new_props) $$invalidate(3, className = $$new_props.class);
    		if ('active' in $$new_props) $$invalidate(4, active = $$new_props.active);
    		if ('disabled' in $$new_props) $$invalidate(5, disabled = $$new_props.disabled);
    		if ('$$scope' in $$new_props) $$invalidate(6, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		clean: clean$1,
    		clsx,
    		forwardEventsBuilder,
    		current_component,
    		forwardEvents,
    		className,
    		active,
    		disabled,
    		props,
    		classes
    	});

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(8, $$props = assign(assign({}, $$props), $$new_props));
    		if ('className' in $$props) $$invalidate(3, className = $$new_props.className);
    		if ('active' in $$props) $$invalidate(4, active = $$new_props.active);
    		if ('disabled' in $$props) $$invalidate(5, disabled = $$new_props.disabled);
    		if ('classes' in $$props) $$invalidate(0, classes = $$new_props.classes);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*className, active, disabled*/ 56) {
    			$$invalidate(0, classes = clsx(className, 'page-link waves-effect waves-effect', { active, disabled }));
    		}
    	};

    	$$props = exclude_internal_props($$props);
    	return [classes, forwardEvents, props, className, active, disabled, $$scope, slots];
    }

    class MDBPageNav extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$l, create_fragment$l, safe_not_equal, { class: 3, active: 4, disabled: 5 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "MDBPageNav",
    			options,
    			id: create_fragment$l.name
    		});
    	}

    	get class() {
    		throw new Error("<MDBPageNav>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<MDBPageNav>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get active() {
    		throw new Error("<MDBPageNav>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set active(value) {
    		throw new Error("<MDBPageNav>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get disabled() {
    		throw new Error("<MDBPageNav>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set disabled(value) {
    		throw new Error("<MDBPageNav>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\mdbsvelte\src\MDBInput.svelte generated by Svelte v3.59.2 */
    const file$i = "node_modules\\mdbsvelte\\src\\MDBInput.svelte";

    // (214:0) {:else}
    function create_else_block$2(ctx) {
    	let t0;
    	let current_block_type_index;
    	let if_block1;
    	let t1;
    	let if_block2_anchor;
    	let current;
    	let if_block0 = /*icon*/ ctx[12] && create_if_block_12(ctx);
    	const if_block_creators = [create_if_block_8, create_if_block_9, create_if_block_10, create_if_block_11];
    	const if_blocks = [];

    	function select_block_type_2(ctx, dirty) {
    		if (/*tag*/ ctx[16] === 'input') return 0;
    		if (/*tag*/ ctx[16] === 'textarea') return 1;
    		if (/*tag*/ ctx[16] === 'select' && !/*multiple*/ ctx[5]) return 2;
    		if (/*tag*/ ctx[16] === 'select' && /*multiple*/ ctx[5]) return 3;
    		return -1;
    	}

    	if (~(current_block_type_index = select_block_type_2(ctx))) {
    		if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	}

    	let if_block2 = /*labelVisible*/ ctx[17] === true && /*label*/ ctx[13] && create_if_block_7(ctx);

    	const block = {
    		c: function create() {
    			if (if_block0) if_block0.c();
    			t0 = space();
    			if (if_block1) if_block1.c();
    			t1 = space();
    			if (if_block2) if_block2.c();
    			if_block2_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t0, anchor);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].m(target, anchor);
    			}

    			insert_dev(target, t1, anchor);
    			if (if_block2) if_block2.m(target, anchor);
    			insert_dev(target, if_block2_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*icon*/ ctx[12]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty[0] & /*icon*/ 4096) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_12(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(t0.parentNode, t0);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_2(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if (~current_block_type_index) {
    					if_blocks[current_block_type_index].p(ctx, dirty);
    				}
    			} else {
    				if (if_block1) {
    					group_outros();

    					transition_out(if_blocks[previous_block_index], 1, 1, () => {
    						if_blocks[previous_block_index] = null;
    					});

    					check_outros();
    				}

    				if (~current_block_type_index) {
    					if_block1 = if_blocks[current_block_type_index];

    					if (!if_block1) {
    						if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    						if_block1.c();
    					} else {
    						if_block1.p(ctx, dirty);
    					}

    					transition_in(if_block1, 1);
    					if_block1.m(t1.parentNode, t1);
    				} else {
    					if_block1 = null;
    				}
    			}

    			if (/*labelVisible*/ ctx[17] === true && /*label*/ ctx[13]) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);
    				} else {
    					if_block2 = create_if_block_7(ctx);
    					if_block2.c();
    					if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(if_block1);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			transition_out(if_block1);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t0);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].d(detaching);
    			}

    			if (detaching) detach_dev(t1);
    			if (if_block2) if_block2.d(detaching);
    			if (detaching) detach_dev(if_block2_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$2.name,
    		type: "else",
    		source: "(214:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (149:0) {#if !formGroup}
    function create_if_block$4(ctx) {
    	let div;
    	let t0;
    	let current_block_type_index;
    	let if_block1;
    	let t1;
    	let current;
    	let if_block0 = /*icon*/ ctx[12] && create_if_block_6(ctx);
    	const if_block_creators = [create_if_block_2$1, create_if_block_3$1, create_if_block_4$1, create_if_block_5$1];
    	const if_blocks = [];

    	function select_block_type_1(ctx, dirty) {
    		if (/*tag*/ ctx[16] === 'input') return 0;
    		if (/*tag*/ ctx[16] === 'textarea') return 1;
    		if (/*tag*/ ctx[16] === 'select' && !/*multiple*/ ctx[5]) return 2;
    		if (/*tag*/ ctx[16] === 'select' && /*multiple*/ ctx[5]) return 3;
    		return -1;
    	}

    	if (~(current_block_type_index = select_block_type_1(ctx))) {
    		if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	}

    	let if_block2 = /*labelVisible*/ ctx[17] === true && create_if_block_1$2(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (if_block0) if_block0.c();
    			t0 = space();
    			if (if_block1) if_block1.c();
    			t1 = space();
    			if (if_block2) if_block2.c();
    			attr_dev(div, "class", /*containerClassFix*/ ctx[20]);
    			add_location(div, file$i, 149, 2, 4160);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			if (if_block0) if_block0.m(div, null);
    			append_dev(div, t0);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].m(div, null);
    			}

    			append_dev(div, t1);
    			if (if_block2) if_block2.m(div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*icon*/ ctx[12]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);

    					if (dirty[0] & /*icon*/ 4096) {
    						transition_in(if_block0, 1);
    					}
    				} else {
    					if_block0 = create_if_block_6(ctx);
    					if_block0.c();
    					transition_in(if_block0, 1);
    					if_block0.m(div, t0);
    				}
    			} else if (if_block0) {
    				group_outros();

    				transition_out(if_block0, 1, 1, () => {
    					if_block0 = null;
    				});

    				check_outros();
    			}

    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_1(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if (~current_block_type_index) {
    					if_blocks[current_block_type_index].p(ctx, dirty);
    				}
    			} else {
    				if (if_block1) {
    					group_outros();

    					transition_out(if_blocks[previous_block_index], 1, 1, () => {
    						if_blocks[previous_block_index] = null;
    					});

    					check_outros();
    				}

    				if (~current_block_type_index) {
    					if_block1 = if_blocks[current_block_type_index];

    					if (!if_block1) {
    						if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    						if_block1.c();
    					} else {
    						if_block1.p(ctx, dirty);
    					}

    					transition_in(if_block1, 1);
    					if_block1.m(div, t1);
    				} else {
    					if_block1 = null;
    				}
    			}

    			if (/*labelVisible*/ ctx[17] === true) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);
    				} else {
    					if_block2 = create_if_block_1$2(ctx);
    					if_block2.c();
    					if_block2.m(div, null);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(if_block1);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			transition_out(if_block1);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block0) if_block0.d();

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].d();
    			}

    			if (if_block2) if_block2.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$4.name,
    		type: "if",
    		source: "(149:0) {#if !formGroup}",
    		ctx
    	});

    	return block;
    }

    // (215:2) {#if icon}
    function create_if_block_12(ctx) {
    	let mdbicon;
    	let current;

    	mdbicon = new MDBIcon({
    			props: {
    				fab: /*fab*/ ctx[11],
    				far: /*far*/ ctx[9],
    				fas: /*fas*/ ctx[10],
    				icon: /*icon*/ ctx[12],
    				class: "prefix"
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbicon.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbicon, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbicon_changes = {};
    			if (dirty[0] & /*fab*/ 2048) mdbicon_changes.fab = /*fab*/ ctx[11];
    			if (dirty[0] & /*far*/ 512) mdbicon_changes.far = /*far*/ ctx[9];
    			if (dirty[0] & /*fas*/ 1024) mdbicon_changes.fas = /*fas*/ ctx[10];
    			if (dirty[0] & /*icon*/ 4096) mdbicon_changes.icon = /*icon*/ ctx[12];
    			mdbicon.$set(mdbicon_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbicon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbicon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbicon, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_12.name,
    		type: "if",
    		source: "(215:2) {#if icon}",
    		ctx
    	});

    	return block;
    }

    // (259:41) 
    function create_if_block_11(ctx) {
    	let select;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[45].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[44], null);

    	let select_levels = [
    		/*props*/ ctx[19],
    		{ id: /*id*/ ctx[6] },
    		{ multiple: true },
    		{ class: /*classes*/ ctx[15] },
    		{ name: /*name*/ ctx[7] },
    		{ disabled: /*disabled*/ ctx[8] }
    	];

    	let select_data = {};

    	for (let i = 0; i < select_levels.length; i += 1) {
    		select_data = assign(select_data, select_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			select = element("select");
    			if (default_slot) default_slot.c();
    			set_attributes(select, select_data);
    			if (/*value*/ ctx[0] === void 0) add_render_callback(() => /*select_change_handler_3*/ ctx[51].call(select));
    			add_location(select, file$i, 259, 4, 6558);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, select, anchor);

    			if (default_slot) {
    				default_slot.m(select, null);
    			}

    			'value' in select_data && (select_data.multiple ? select_options : select_option)(select, select_data.value);
    			if (select.autofocus) select.focus();
    			select_options(select, /*value*/ ctx[0]);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(/*forwardEvents*/ ctx[18].call(null, select)),
    					listen_dev(select, "change", /*select_change_handler_3*/ ctx[51]),
    					listen_dev(select, "focus", /*inputFocus*/ ctx[22], false, false, false, false),
    					listen_dev(select, "focusout", /*inputFocus*/ ctx[22], false, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty[1] & /*$$scope*/ 8192)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[44],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[44])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[44], dirty, null),
    						null
    					);
    				}
    			}

    			set_attributes(select, select_data = get_spread_update(select_levels, [
    				/*props*/ ctx[19],
    				(!current || dirty[0] & /*id*/ 64) && { id: /*id*/ ctx[6] },
    				{ multiple: true },
    				(!current || dirty[0] & /*classes*/ 32768) && { class: /*classes*/ ctx[15] },
    				(!current || dirty[0] & /*name*/ 128) && { name: /*name*/ ctx[7] },
    				(!current || dirty[0] & /*disabled*/ 256) && { disabled: /*disabled*/ ctx[8] }
    			]));

    			if (dirty[0] & /*props, id, classes, name, disabled*/ 557504 && 'value' in select_data) (select_data.multiple ? select_options : select_option)(select, select_data.value);

    			if (dirty[0] & /*value*/ 1) {
    				select_options(select, /*value*/ ctx[0]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(select);
    			if (default_slot) default_slot.d(detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_11.name,
    		type: "if",
    		source: "(259:41) ",
    		ctx
    	});

    	return block;
    }

    // (245:42) 
    function create_if_block_10(ctx) {
    	let select;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[45].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[44], null);

    	let select_levels = [
    		/*props*/ ctx[19],
    		{ id: /*id*/ ctx[6] },
    		{ class: /*classes*/ ctx[15] },
    		{ name: /*name*/ ctx[7] },
    		{ disabled: /*disabled*/ ctx[8] }
    	];

    	let select_data = {};

    	for (let i = 0; i < select_levels.length; i += 1) {
    		select_data = assign(select_data, select_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			select = element("select");
    			if (default_slot) default_slot.c();
    			set_attributes(select, select_data);
    			if (/*value*/ ctx[0] === void 0) add_render_callback(() => /*select_change_handler_2*/ ctx[50].call(select));
    			add_location(select, file$i, 245, 4, 6295);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, select, anchor);

    			if (default_slot) {
    				default_slot.m(select, null);
    			}

    			'value' in select_data && (select_data.multiple ? select_options : select_option)(select, select_data.value);
    			if (select.autofocus) select.focus();
    			select_option(select, /*value*/ ctx[0], true);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(/*forwardEvents*/ ctx[18].call(null, select)),
    					listen_dev(select, "change", /*select_change_handler_2*/ ctx[50]),
    					listen_dev(select, "focus", /*inputFocus*/ ctx[22], false, false, false, false),
    					listen_dev(select, "focusout", /*inputFocus*/ ctx[22], false, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty[1] & /*$$scope*/ 8192)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[44],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[44])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[44], dirty, null),
    						null
    					);
    				}
    			}

    			set_attributes(select, select_data = get_spread_update(select_levels, [
    				/*props*/ ctx[19],
    				(!current || dirty[0] & /*id*/ 64) && { id: /*id*/ ctx[6] },
    				(!current || dirty[0] & /*classes*/ 32768) && { class: /*classes*/ ctx[15] },
    				(!current || dirty[0] & /*name*/ 128) && { name: /*name*/ ctx[7] },
    				(!current || dirty[0] & /*disabled*/ 256) && { disabled: /*disabled*/ ctx[8] }
    			]));

    			if (dirty[0] & /*props, id, classes, name, disabled*/ 557504 && 'value' in select_data) (select_data.multiple ? select_options : select_option)(select, select_data.value);

    			if (dirty[0] & /*value*/ 1) {
    				select_option(select, /*value*/ ctx[0]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(select);
    			if (default_slot) default_slot.d(detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_10.name,
    		type: "if",
    		source: "(245:42) ",
    		ctx
    	});

    	return block;
    }

    // (233:31) 
    function create_if_block_9(ctx) {
    	let textarea;
    	let mounted;
    	let dispose;

    	let textarea_levels = [
    		/*props*/ ctx[19],
    		{ id: /*id*/ ctx[6] },
    		{ class: /*classes*/ ctx[15] },
    		{ name: /*name*/ ctx[7] },
    		{ disabled: /*disabled*/ ctx[8] }
    	];

    	let textarea_data = {};

    	for (let i = 0; i < textarea_levels.length; i += 1) {
    		textarea_data = assign(textarea_data, textarea_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			textarea = element("textarea");
    			set_attributes(textarea, textarea_data);
    			add_location(textarea, file$i, 233, 4, 6056);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, textarea, anchor);
    			if (textarea.autofocus) textarea.focus();
    			set_input_value(textarea, /*value*/ ctx[0]);

    			if (!mounted) {
    				dispose = [
    					action_destroyer(/*forwardEvents*/ ctx[18].call(null, textarea)),
    					listen_dev(textarea, "input", /*textarea_input_handler_1*/ ctx[49]),
    					listen_dev(textarea, "focus", /*inputFocus*/ ctx[22], false, false, false, false),
    					listen_dev(textarea, "focusout", /*inputFocus*/ ctx[22], false, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			set_attributes(textarea, textarea_data = get_spread_update(textarea_levels, [
    				/*props*/ ctx[19],
    				dirty[0] & /*id*/ 64 && { id: /*id*/ ctx[6] },
    				dirty[0] & /*classes*/ 32768 && { class: /*classes*/ ctx[15] },
    				dirty[0] & /*name*/ 128 && { name: /*name*/ ctx[7] },
    				dirty[0] & /*disabled*/ 256 && { disabled: /*disabled*/ ctx[8] }
    			]));

    			if (dirty[0] & /*value*/ 1) {
    				set_input_value(textarea, /*value*/ ctx[0]);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(textarea);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_9.name,
    		type: "if",
    		source: "(233:31) ",
    		ctx
    	});

    	return block;
    }

    // (218:2) {#if tag === 'input'}
    function create_if_block_8(ctx) {
    	let input;
    	let input_placeholder_value;
    	let mounted;
    	let dispose;

    	let input_levels = [
    		/*props*/ ctx[19],
    		{ id: /*id*/ ctx[6] },
    		{ type: /*type*/ ctx[3] },
    		{ readOnly: /*readonly*/ ctx[4] },
    		{ class: /*classes*/ ctx[15] },
    		{ name: /*name*/ ctx[7] },
    		{ disabled: /*disabled*/ ctx[8] },
    		{
    			placeholder: input_placeholder_value = /*labelVisible*/ ctx[17] ? "" : /*placeholder*/ ctx[1]
    		},
    		{ value: /*value*/ ctx[0] }
    	];

    	let input_data = {};

    	for (let i = 0; i < input_levels.length; i += 1) {
    		input_data = assign(input_data, input_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			input = element("input");
    			set_attributes(input, input_data);
    			add_location(input, file$i, 218, 4, 5722);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, input, anchor);

    			if ('value' in input_data) {
    				input.value = input_data.value;
    			}

    			if (input.autofocus) input.focus();

    			if (!mounted) {
    				dispose = [
    					action_destroyer(/*forwardEvents*/ ctx[18].call(null, input)),
    					listen_dev(input, "focus", /*inputFocus*/ ctx[22], false, false, false, false),
    					listen_dev(input, "focusout", /*inputFocus*/ ctx[22], false, false, false, false),
    					listen_dev(input, "input", /*handleInput*/ ctx[21], false, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			set_attributes(input, input_data = get_spread_update(input_levels, [
    				/*props*/ ctx[19],
    				dirty[0] & /*id*/ 64 && { id: /*id*/ ctx[6] },
    				dirty[0] & /*type*/ 8 && { type: /*type*/ ctx[3] },
    				dirty[0] & /*readonly*/ 16 && { readOnly: /*readonly*/ ctx[4] },
    				dirty[0] & /*classes*/ 32768 && { class: /*classes*/ ctx[15] },
    				dirty[0] & /*name*/ 128 && { name: /*name*/ ctx[7] },
    				dirty[0] & /*disabled*/ 256 && { disabled: /*disabled*/ ctx[8] },
    				dirty[0] & /*labelVisible, placeholder*/ 131074 && input_placeholder_value !== (input_placeholder_value = /*labelVisible*/ ctx[17] ? "" : /*placeholder*/ ctx[1]) && { placeholder: input_placeholder_value },
    				dirty[0] & /*value*/ 1 && input.value !== /*value*/ ctx[0] && { value: /*value*/ ctx[0] }
    			]));

    			if ('value' in input_data) {
    				input.value = input_data.value;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(input);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_8.name,
    		type: "if",
    		source: "(218:2) {#if tag === 'input'}",
    		ctx
    	});

    	return block;
    }

    // (274:2) {#if labelVisible === true && label}
    function create_if_block_7(ctx) {
    	let label_1;
    	let t;

    	const block = {
    		c: function create() {
    			label_1 = element("label");
    			t = text(/*label*/ ctx[13]);
    			attr_dev(label_1, "class", "active");
    			attr_dev(label_1, "for", /*id*/ ctx[6]);
    			add_location(label_1, file$i, 274, 4, 6840);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, label_1, anchor);
    			append_dev(label_1, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*label*/ 8192) set_data_dev(t, /*label*/ ctx[13]);

    			if (dirty[0] & /*id*/ 64) {
    				attr_dev(label_1, "for", /*id*/ ctx[6]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(label_1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_7.name,
    		type: "if",
    		source: "(274:2) {#if labelVisible === true && label}",
    		ctx
    	});

    	return block;
    }

    // (151:4) {#if icon}
    function create_if_block_6(ctx) {
    	let mdbicon;
    	let current;

    	mdbicon = new MDBIcon({
    			props: {
    				fab: /*fab*/ ctx[11],
    				far: /*far*/ ctx[9],
    				fas: /*fas*/ ctx[10],
    				icon: /*icon*/ ctx[12],
    				size: /*iconSize*/ ctx[14],
    				class: "prefix"
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbicon.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbicon, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbicon_changes = {};
    			if (dirty[0] & /*fab*/ 2048) mdbicon_changes.fab = /*fab*/ ctx[11];
    			if (dirty[0] & /*far*/ 512) mdbicon_changes.far = /*far*/ ctx[9];
    			if (dirty[0] & /*fas*/ 1024) mdbicon_changes.fas = /*fas*/ ctx[10];
    			if (dirty[0] & /*icon*/ 4096) mdbicon_changes.icon = /*icon*/ ctx[12];
    			if (dirty[0] & /*iconSize*/ 16384) mdbicon_changes.size = /*iconSize*/ ctx[14];
    			mdbicon.$set(mdbicon_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbicon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbicon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbicon, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6.name,
    		type: "if",
    		source: "(151:4) {#if icon}",
    		ctx
    	});

    	return block;
    }

    // (195:43) 
    function create_if_block_5$1(ctx) {
    	let select;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[45].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[44], null);

    	let select_levels = [
    		/*props*/ ctx[19],
    		{ id: /*id*/ ctx[6] },
    		{ multiple: true },
    		{ class: /*classes*/ ctx[15] },
    		{ name: /*name*/ ctx[7] },
    		{ disabled: /*disabled*/ ctx[8] }
    	];

    	let select_data = {};

    	for (let i = 0; i < select_levels.length; i += 1) {
    		select_data = assign(select_data, select_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			select = element("select");
    			if (default_slot) default_slot.c();
    			set_attributes(select, select_data);
    			if (/*value*/ ctx[0] === void 0) add_render_callback(() => /*select_change_handler_1*/ ctx[48].call(select));
    			add_location(select, file$i, 195, 6, 5236);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, select, anchor);

    			if (default_slot) {
    				default_slot.m(select, null);
    			}

    			'value' in select_data && (select_data.multiple ? select_options : select_option)(select, select_data.value);
    			if (select.autofocus) select.focus();
    			select_options(select, /*value*/ ctx[0]);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(/*forwardEvents*/ ctx[18].call(null, select)),
    					listen_dev(select, "change", /*select_change_handler_1*/ ctx[48]),
    					listen_dev(select, "focus", /*inputFocus*/ ctx[22], false, false, false, false),
    					listen_dev(select, "focusout", /*inputFocus*/ ctx[22], false, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty[1] & /*$$scope*/ 8192)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[44],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[44])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[44], dirty, null),
    						null
    					);
    				}
    			}

    			set_attributes(select, select_data = get_spread_update(select_levels, [
    				/*props*/ ctx[19],
    				(!current || dirty[0] & /*id*/ 64) && { id: /*id*/ ctx[6] },
    				{ multiple: true },
    				(!current || dirty[0] & /*classes*/ 32768) && { class: /*classes*/ ctx[15] },
    				(!current || dirty[0] & /*name*/ 128) && { name: /*name*/ ctx[7] },
    				(!current || dirty[0] & /*disabled*/ 256) && { disabled: /*disabled*/ ctx[8] }
    			]));

    			if (dirty[0] & /*props, id, classes, name, disabled*/ 557504 && 'value' in select_data) (select_data.multiple ? select_options : select_option)(select, select_data.value);

    			if (dirty[0] & /*value*/ 1) {
    				select_options(select, /*value*/ ctx[0]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(select);
    			if (default_slot) default_slot.d(detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5$1.name,
    		type: "if",
    		source: "(195:43) ",
    		ctx
    	});

    	return block;
    }

    // (181:44) 
    function create_if_block_4$1(ctx) {
    	let select;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[45].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[44], null);

    	let select_levels = [
    		/*props*/ ctx[19],
    		{ id: /*id*/ ctx[6] },
    		{ class: /*classes*/ ctx[15] },
    		{ name: /*name*/ ctx[7] },
    		{ disabled: /*disabled*/ ctx[8] }
    	];

    	let select_data = {};

    	for (let i = 0; i < select_levels.length; i += 1) {
    		select_data = assign(select_data, select_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			select = element("select");
    			if (default_slot) default_slot.c();
    			set_attributes(select, select_data);
    			if (/*value*/ ctx[0] === void 0) add_render_callback(() => /*select_change_handler*/ ctx[47].call(select));
    			add_location(select, file$i, 181, 6, 4947);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, select, anchor);

    			if (default_slot) {
    				default_slot.m(select, null);
    			}

    			'value' in select_data && (select_data.multiple ? select_options : select_option)(select, select_data.value);
    			if (select.autofocus) select.focus();
    			select_option(select, /*value*/ ctx[0], true);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					action_destroyer(/*forwardEvents*/ ctx[18].call(null, select)),
    					listen_dev(select, "change", /*select_change_handler*/ ctx[47]),
    					listen_dev(select, "focus", /*inputFocus*/ ctx[22], false, false, false, false),
    					listen_dev(select, "focusout", /*inputFocus*/ ctx[22], false, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty[1] & /*$$scope*/ 8192)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[44],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[44])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[44], dirty, null),
    						null
    					);
    				}
    			}

    			set_attributes(select, select_data = get_spread_update(select_levels, [
    				/*props*/ ctx[19],
    				(!current || dirty[0] & /*id*/ 64) && { id: /*id*/ ctx[6] },
    				(!current || dirty[0] & /*classes*/ 32768) && { class: /*classes*/ ctx[15] },
    				(!current || dirty[0] & /*name*/ 128) && { name: /*name*/ ctx[7] },
    				(!current || dirty[0] & /*disabled*/ 256) && { disabled: /*disabled*/ ctx[8] }
    			]));

    			if (dirty[0] & /*props, id, classes, name, disabled*/ 557504 && 'value' in select_data) (select_data.multiple ? select_options : select_option)(select, select_data.value);

    			if (dirty[0] & /*value*/ 1) {
    				select_option(select, /*value*/ ctx[0]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(select);
    			if (default_slot) default_slot.d(detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$1.name,
    		type: "if",
    		source: "(181:44) ",
    		ctx
    	});

    	return block;
    }

    // (169:33) 
    function create_if_block_3$1(ctx) {
    	let textarea;
    	let mounted;
    	let dispose;

    	let textarea_levels = [
    		/*props*/ ctx[19],
    		{ id: /*id*/ ctx[6] },
    		{ class: /*classes*/ ctx[15] },
    		{ name: /*name*/ ctx[7] },
    		{ disabled: /*disabled*/ ctx[8] }
    	];

    	let textarea_data = {};

    	for (let i = 0; i < textarea_levels.length; i += 1) {
    		textarea_data = assign(textarea_data, textarea_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			textarea = element("textarea");
    			set_attributes(textarea, textarea_data);
    			add_location(textarea, file$i, 169, 6, 4686);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, textarea, anchor);
    			if (textarea.autofocus) textarea.focus();
    			set_input_value(textarea, /*value*/ ctx[0]);

    			if (!mounted) {
    				dispose = [
    					action_destroyer(/*forwardEvents*/ ctx[18].call(null, textarea)),
    					listen_dev(textarea, "input", /*textarea_input_handler*/ ctx[46]),
    					listen_dev(textarea, "focus", /*inputFocus*/ ctx[22], false, false, false, false),
    					listen_dev(textarea, "focusout", /*inputFocus*/ ctx[22], false, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			set_attributes(textarea, textarea_data = get_spread_update(textarea_levels, [
    				/*props*/ ctx[19],
    				dirty[0] & /*id*/ 64 && { id: /*id*/ ctx[6] },
    				dirty[0] & /*classes*/ 32768 && { class: /*classes*/ ctx[15] },
    				dirty[0] & /*name*/ 128 && { name: /*name*/ ctx[7] },
    				dirty[0] & /*disabled*/ 256 && { disabled: /*disabled*/ ctx[8] }
    			]));

    			if (dirty[0] & /*value*/ 1) {
    				set_input_value(textarea, /*value*/ ctx[0]);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(textarea);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$1.name,
    		type: "if",
    		source: "(169:33) ",
    		ctx
    	});

    	return block;
    }

    // (154:4) {#if tag === 'input'}
    function create_if_block_2$1(ctx) {
    	let input;
    	let input_placeholder_value;
    	let mounted;
    	let dispose;

    	let input_levels = [
    		/*props*/ ctx[19],
    		{ id: /*id*/ ctx[6] },
    		{ type: /*type*/ ctx[3] },
    		{ readOnly: /*readonly*/ ctx[4] },
    		{ class: /*classes*/ ctx[15] },
    		{ name: /*name*/ ctx[7] },
    		{ disabled: /*disabled*/ ctx[8] },
    		{
    			placeholder: input_placeholder_value = /*labelVisible*/ ctx[17] ? "" : /*placeholder*/ ctx[1]
    		},
    		{ value: /*value*/ ctx[0] }
    	];

    	let input_data = {};

    	for (let i = 0; i < input_levels.length; i += 1) {
    		input_data = assign(input_data, input_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			input = element("input");
    			set_attributes(input, input_data);
    			add_location(input, file$i, 154, 6, 4322);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, input, anchor);

    			if ('value' in input_data) {
    				input.value = input_data.value;
    			}

    			if (input.autofocus) input.focus();

    			if (!mounted) {
    				dispose = [
    					action_destroyer(/*forwardEvents*/ ctx[18].call(null, input)),
    					listen_dev(input, "focus", /*inputFocus*/ ctx[22], false, false, false, false),
    					listen_dev(input, "focusout", /*inputFocus*/ ctx[22], false, false, false, false),
    					listen_dev(input, "input", /*handleInput*/ ctx[21], false, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			set_attributes(input, input_data = get_spread_update(input_levels, [
    				/*props*/ ctx[19],
    				dirty[0] & /*id*/ 64 && { id: /*id*/ ctx[6] },
    				dirty[0] & /*type*/ 8 && { type: /*type*/ ctx[3] },
    				dirty[0] & /*readonly*/ 16 && { readOnly: /*readonly*/ ctx[4] },
    				dirty[0] & /*classes*/ 32768 && { class: /*classes*/ ctx[15] },
    				dirty[0] & /*name*/ 128 && { name: /*name*/ ctx[7] },
    				dirty[0] & /*disabled*/ 256 && { disabled: /*disabled*/ ctx[8] },
    				dirty[0] & /*labelVisible, placeholder*/ 131074 && input_placeholder_value !== (input_placeholder_value = /*labelVisible*/ ctx[17] ? "" : /*placeholder*/ ctx[1]) && { placeholder: input_placeholder_value },
    				dirty[0] & /*value*/ 1 && input.value !== /*value*/ ctx[0] && { value: /*value*/ ctx[0] }
    			]));

    			if ('value' in input_data) {
    				input.value = input_data.value;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(input);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$1.name,
    		type: "if",
    		source: "(154:4) {#if tag === 'input'}",
    		ctx
    	});

    	return block;
    }

    // (210:4) {#if labelVisible === true}
    function create_if_block_1$2(ctx) {
    	let label_1;
    	let t;

    	const block = {
    		c: function create() {
    			label_1 = element("label");
    			t = text(/*label*/ ctx[13]);
    			attr_dev(label_1, "class", "active");
    			attr_dev(label_1, "for", /*id*/ ctx[6]);
    			add_location(label_1, file$i, 210, 6, 5539);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, label_1, anchor);
    			append_dev(label_1, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*label*/ 8192) set_data_dev(t, /*label*/ ctx[13]);

    			if (dirty[0] & /*id*/ 64) {
    				attr_dev(label_1, "for", /*id*/ ctx[6]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(label_1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$2.name,
    		type: "if",
    		source: "(210:4) {#if labelVisible === true}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$k(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block$4, create_else_block$2];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (!/*formGroup*/ ctx[2]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$k.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$k($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('MDBInput', slots, ['default']);
    	const forwardEvents = forwardEventsBuilder(current_component);
    	let { class: className = '' } = $$props;
    	let { formGroup } = $$props;
    	let { type = 'text' } = $$props;
    	let { size = undefined } = $$props;
    	let { bsSize = undefined } = $$props;
    	let { color = undefined } = $$props;
    	let { checked = false } = $$props;
    	let { valid = false } = $$props;
    	let { invalid = false } = $$props;
    	let { plaintext = false } = $$props;
    	let { addon = false } = $$props;
    	let { value = '' } = $$props;
    	let { files = '' } = $$props;
    	let { readonly } = $$props;
    	let { multiple = false } = $$props;
    	let { id = '' } = $$props;
    	let { name = '' } = $$props;
    	let { placeholder = '' } = $$props;
    	let { disabled = false } = $$props;
    	let { far } = $$props;
    	let { fas } = $$props;
    	let { fab } = $$props;
    	let { icon } = $$props;
    	let { label } = $$props;
    	let { hint } = $$props;
    	let { validate } = $$props;
    	let { filled } = $$props;
    	let { gap } = $$props;
    	let { iconSize } = $$props;
    	let { group } = $$props;
    	let { outline } = $$props;
    	let { background } = $$props;
    	let { containerClass } = $$props;
    	let { isNotEmpty } = $$props;
    	let { isControlled } = $$props;
    	let { labelClass } = $$props;
    	placeholder = placeholder ? placeholder : label ? label : hint;

    	// eslint-disable-next-line no-unused-vars
    	const props = clean$1($$props, [
    		"fas",
    		"fab",
    		"far",
    		"formGroup",
    		"name",
    		"multiple",
    		"fab",
    		"fas",
    		"label",
    		"icon",
    		"hint",
    		"placeholder",
    		"disabled",
    		"file",
    		"multiple",
    		"validate",
    		"filled",
    		"gap",
    		"iconSize",
    		"group",
    		"outline",
    		"backgorund",
    		"containerClass",
    		"isNotEmpty",
    		"isControlled",
    		"labelClass"
    	]);

    	let classes;
    	let tag;
    	let labelVisible = false;

    	let containerClassFix = clsx(
    		type === 'checkbox' || type === 'radio'
    		? typeof label === 'boolean' && label
    			? 'd-flex'
    			: 'form-check'
    		: 'md-form',
    		group ? 'form-group' : false,
    		size ? `form-${size}` : false,
    		outline && 'md-outline',
    		background && 'md-bg',
    		containerClass
    	);

    	const labelClassFix = clsx(isNotEmpty && !isControlled || hint ? 'active' : false, disabled ? 'disabled' : false, type === 'checkbox' ? 'form-check-label' : false, type === 'radio' ? 'form-check-label' : false, labelClass);

    	const handleInput = event => {
    		$$invalidate(0, value = event.target.type === 'checkbox'
    		? event.target.checked
    		: event.target.value);
    	};

    	function inputFocus() {
    		$$invalidate(17, labelVisible = !labelVisible);
    	}

    	$$self.$$.on_mount.push(function () {
    		if (formGroup === undefined && !('formGroup' in $$props || $$self.$$.bound[$$self.$$.props['formGroup']])) {
    			console.warn("<MDBInput> was created without expected prop 'formGroup'");
    		}

    		if (readonly === undefined && !('readonly' in $$props || $$self.$$.bound[$$self.$$.props['readonly']])) {
    			console.warn("<MDBInput> was created without expected prop 'readonly'");
    		}

    		if (far === undefined && !('far' in $$props || $$self.$$.bound[$$self.$$.props['far']])) {
    			console.warn("<MDBInput> was created without expected prop 'far'");
    		}

    		if (fas === undefined && !('fas' in $$props || $$self.$$.bound[$$self.$$.props['fas']])) {
    			console.warn("<MDBInput> was created without expected prop 'fas'");
    		}

    		if (fab === undefined && !('fab' in $$props || $$self.$$.bound[$$self.$$.props['fab']])) {
    			console.warn("<MDBInput> was created without expected prop 'fab'");
    		}

    		if (icon === undefined && !('icon' in $$props || $$self.$$.bound[$$self.$$.props['icon']])) {
    			console.warn("<MDBInput> was created without expected prop 'icon'");
    		}

    		if (label === undefined && !('label' in $$props || $$self.$$.bound[$$self.$$.props['label']])) {
    			console.warn("<MDBInput> was created without expected prop 'label'");
    		}

    		if (hint === undefined && !('hint' in $$props || $$self.$$.bound[$$self.$$.props['hint']])) {
    			console.warn("<MDBInput> was created without expected prop 'hint'");
    		}

    		if (validate === undefined && !('validate' in $$props || $$self.$$.bound[$$self.$$.props['validate']])) {
    			console.warn("<MDBInput> was created without expected prop 'validate'");
    		}

    		if (filled === undefined && !('filled' in $$props || $$self.$$.bound[$$self.$$.props['filled']])) {
    			console.warn("<MDBInput> was created without expected prop 'filled'");
    		}

    		if (gap === undefined && !('gap' in $$props || $$self.$$.bound[$$self.$$.props['gap']])) {
    			console.warn("<MDBInput> was created without expected prop 'gap'");
    		}

    		if (iconSize === undefined && !('iconSize' in $$props || $$self.$$.bound[$$self.$$.props['iconSize']])) {
    			console.warn("<MDBInput> was created without expected prop 'iconSize'");
    		}

    		if (group === undefined && !('group' in $$props || $$self.$$.bound[$$self.$$.props['group']])) {
    			console.warn("<MDBInput> was created without expected prop 'group'");
    		}

    		if (outline === undefined && !('outline' in $$props || $$self.$$.bound[$$self.$$.props['outline']])) {
    			console.warn("<MDBInput> was created without expected prop 'outline'");
    		}

    		if (background === undefined && !('background' in $$props || $$self.$$.bound[$$self.$$.props['background']])) {
    			console.warn("<MDBInput> was created without expected prop 'background'");
    		}

    		if (containerClass === undefined && !('containerClass' in $$props || $$self.$$.bound[$$self.$$.props['containerClass']])) {
    			console.warn("<MDBInput> was created without expected prop 'containerClass'");
    		}

    		if (isNotEmpty === undefined && !('isNotEmpty' in $$props || $$self.$$.bound[$$self.$$.props['isNotEmpty']])) {
    			console.warn("<MDBInput> was created without expected prop 'isNotEmpty'");
    		}

    		if (isControlled === undefined && !('isControlled' in $$props || $$self.$$.bound[$$self.$$.props['isControlled']])) {
    			console.warn("<MDBInput> was created without expected prop 'isControlled'");
    		}

    		if (labelClass === undefined && !('labelClass' in $$props || $$self.$$.bound[$$self.$$.props['labelClass']])) {
    			console.warn("<MDBInput> was created without expected prop 'labelClass'");
    		}
    	});

    	function textarea_input_handler() {
    		value = this.value;
    		$$invalidate(0, value);
    	}

    	function select_change_handler() {
    		value = select_value(this);
    		$$invalidate(0, value);
    	}

    	function select_change_handler_1() {
    		value = select_multiple_value(this);
    		$$invalidate(0, value);
    	}

    	function textarea_input_handler_1() {
    		value = this.value;
    		$$invalidate(0, value);
    	}

    	function select_change_handler_2() {
    		value = select_value(this);
    		$$invalidate(0, value);
    	}

    	function select_change_handler_3() {
    		value = select_multiple_value(this);
    		$$invalidate(0, value);
    	}

    	$$self.$$set = $$new_props => {
    		$$invalidate(53, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ('class' in $$new_props) $$invalidate(25, className = $$new_props.class);
    		if ('formGroup' in $$new_props) $$invalidate(2, formGroup = $$new_props.formGroup);
    		if ('type' in $$new_props) $$invalidate(3, type = $$new_props.type);
    		if ('size' in $$new_props) $$invalidate(23, size = $$new_props.size);
    		if ('bsSize' in $$new_props) $$invalidate(24, bsSize = $$new_props.bsSize);
    		if ('color' in $$new_props) $$invalidate(26, color = $$new_props.color);
    		if ('checked' in $$new_props) $$invalidate(27, checked = $$new_props.checked);
    		if ('valid' in $$new_props) $$invalidate(28, valid = $$new_props.valid);
    		if ('invalid' in $$new_props) $$invalidate(29, invalid = $$new_props.invalid);
    		if ('plaintext' in $$new_props) $$invalidate(30, plaintext = $$new_props.plaintext);
    		if ('addon' in $$new_props) $$invalidate(31, addon = $$new_props.addon);
    		if ('value' in $$new_props) $$invalidate(0, value = $$new_props.value);
    		if ('files' in $$new_props) $$invalidate(32, files = $$new_props.files);
    		if ('readonly' in $$new_props) $$invalidate(4, readonly = $$new_props.readonly);
    		if ('multiple' in $$new_props) $$invalidate(5, multiple = $$new_props.multiple);
    		if ('id' in $$new_props) $$invalidate(6, id = $$new_props.id);
    		if ('name' in $$new_props) $$invalidate(7, name = $$new_props.name);
    		if ('placeholder' in $$new_props) $$invalidate(1, placeholder = $$new_props.placeholder);
    		if ('disabled' in $$new_props) $$invalidate(8, disabled = $$new_props.disabled);
    		if ('far' in $$new_props) $$invalidate(9, far = $$new_props.far);
    		if ('fas' in $$new_props) $$invalidate(10, fas = $$new_props.fas);
    		if ('fab' in $$new_props) $$invalidate(11, fab = $$new_props.fab);
    		if ('icon' in $$new_props) $$invalidate(12, icon = $$new_props.icon);
    		if ('label' in $$new_props) $$invalidate(13, label = $$new_props.label);
    		if ('hint' in $$new_props) $$invalidate(33, hint = $$new_props.hint);
    		if ('validate' in $$new_props) $$invalidate(34, validate = $$new_props.validate);
    		if ('filled' in $$new_props) $$invalidate(35, filled = $$new_props.filled);
    		if ('gap' in $$new_props) $$invalidate(36, gap = $$new_props.gap);
    		if ('iconSize' in $$new_props) $$invalidate(14, iconSize = $$new_props.iconSize);
    		if ('group' in $$new_props) $$invalidate(37, group = $$new_props.group);
    		if ('outline' in $$new_props) $$invalidate(38, outline = $$new_props.outline);
    		if ('background' in $$new_props) $$invalidate(39, background = $$new_props.background);
    		if ('containerClass' in $$new_props) $$invalidate(40, containerClass = $$new_props.containerClass);
    		if ('isNotEmpty' in $$new_props) $$invalidate(41, isNotEmpty = $$new_props.isNotEmpty);
    		if ('isControlled' in $$new_props) $$invalidate(42, isControlled = $$new_props.isControlled);
    		if ('labelClass' in $$new_props) $$invalidate(43, labelClass = $$new_props.labelClass);
    		if ('$$scope' in $$new_props) $$invalidate(44, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		clean: clean$1,
    		clsx,
    		forwardEventsBuilder,
    		current_component,
    		forwardEvents,
    		MDBIcon,
    		className,
    		formGroup,
    		type,
    		size,
    		bsSize,
    		color,
    		checked,
    		valid,
    		invalid,
    		plaintext,
    		addon,
    		value,
    		files,
    		readonly,
    		multiple,
    		id,
    		name,
    		placeholder,
    		disabled,
    		far,
    		fas,
    		fab,
    		icon,
    		label,
    		hint,
    		validate,
    		filled,
    		gap,
    		iconSize,
    		group,
    		outline,
    		background,
    		containerClass,
    		isNotEmpty,
    		isControlled,
    		labelClass,
    		props,
    		classes,
    		tag,
    		labelVisible,
    		containerClassFix,
    		labelClassFix,
    		handleInput,
    		inputFocus
    	});

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(53, $$props = assign(assign({}, $$props), $$new_props));
    		if ('className' in $$props) $$invalidate(25, className = $$new_props.className);
    		if ('formGroup' in $$props) $$invalidate(2, formGroup = $$new_props.formGroup);
    		if ('type' in $$props) $$invalidate(3, type = $$new_props.type);
    		if ('size' in $$props) $$invalidate(23, size = $$new_props.size);
    		if ('bsSize' in $$props) $$invalidate(24, bsSize = $$new_props.bsSize);
    		if ('color' in $$props) $$invalidate(26, color = $$new_props.color);
    		if ('checked' in $$props) $$invalidate(27, checked = $$new_props.checked);
    		if ('valid' in $$props) $$invalidate(28, valid = $$new_props.valid);
    		if ('invalid' in $$props) $$invalidate(29, invalid = $$new_props.invalid);
    		if ('plaintext' in $$props) $$invalidate(30, plaintext = $$new_props.plaintext);
    		if ('addon' in $$props) $$invalidate(31, addon = $$new_props.addon);
    		if ('value' in $$props) $$invalidate(0, value = $$new_props.value);
    		if ('files' in $$props) $$invalidate(32, files = $$new_props.files);
    		if ('readonly' in $$props) $$invalidate(4, readonly = $$new_props.readonly);
    		if ('multiple' in $$props) $$invalidate(5, multiple = $$new_props.multiple);
    		if ('id' in $$props) $$invalidate(6, id = $$new_props.id);
    		if ('name' in $$props) $$invalidate(7, name = $$new_props.name);
    		if ('placeholder' in $$props) $$invalidate(1, placeholder = $$new_props.placeholder);
    		if ('disabled' in $$props) $$invalidate(8, disabled = $$new_props.disabled);
    		if ('far' in $$props) $$invalidate(9, far = $$new_props.far);
    		if ('fas' in $$props) $$invalidate(10, fas = $$new_props.fas);
    		if ('fab' in $$props) $$invalidate(11, fab = $$new_props.fab);
    		if ('icon' in $$props) $$invalidate(12, icon = $$new_props.icon);
    		if ('label' in $$props) $$invalidate(13, label = $$new_props.label);
    		if ('hint' in $$props) $$invalidate(33, hint = $$new_props.hint);
    		if ('validate' in $$props) $$invalidate(34, validate = $$new_props.validate);
    		if ('filled' in $$props) $$invalidate(35, filled = $$new_props.filled);
    		if ('gap' in $$props) $$invalidate(36, gap = $$new_props.gap);
    		if ('iconSize' in $$props) $$invalidate(14, iconSize = $$new_props.iconSize);
    		if ('group' in $$props) $$invalidate(37, group = $$new_props.group);
    		if ('outline' in $$props) $$invalidate(38, outline = $$new_props.outline);
    		if ('background' in $$props) $$invalidate(39, background = $$new_props.background);
    		if ('containerClass' in $$props) $$invalidate(40, containerClass = $$new_props.containerClass);
    		if ('isNotEmpty' in $$props) $$invalidate(41, isNotEmpty = $$new_props.isNotEmpty);
    		if ('isControlled' in $$props) $$invalidate(42, isControlled = $$new_props.isControlled);
    		if ('labelClass' in $$props) $$invalidate(43, labelClass = $$new_props.labelClass);
    		if ('classes' in $$props) $$invalidate(15, classes = $$new_props.classes);
    		if ('tag' in $$props) $$invalidate(16, tag = $$new_props.tag);
    		if ('labelVisible' in $$props) $$invalidate(17, labelVisible = $$new_props.labelVisible);
    		if ('containerClassFix' in $$props) $$invalidate(20, containerClassFix = $$new_props.containerClassFix);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*type, plaintext, color, size, className, invalid, valid, bsSize*/ 2004877320 | $$self.$$.dirty[1] & /*addon, validate, filled, gap*/ 57) {
    			{
    				const checkInput = ['radio', 'checkbox'].indexOf(type) > -1;
    				const isNotaNumber = new RegExp('\\D', 'g');
    				const fileInput = type === 'file';
    				const textareaInput = type === 'textarea';
    				const rangeInput = type === 'range';
    				const selectInput = type === 'select';
    				const buttonInput = type === 'button' || type === 'reset' || type === 'submit';
    				const unsupportedInput = type === 'hidden' || type === 'image';
    				$$invalidate(16, tag = selectInput || textareaInput ? type : 'input');
    				let formControlClass = clsx('form-control', type === 'select' ? 'custom-select' : false);

    				if (plaintext) {
    					formControlClass = `${formControlClass}-plaintext`;
    					$$invalidate(16, tag = 'input');
    				} else if (fileInput) {
    					formControlClass = `${formControlClass}-file`;
    				} else if (checkInput) {
    					if (addon) {
    						formControlClass = null;
    					} else {
    						formControlClass = 'form-check-input';
    					}
    				} else if (buttonInput) {
    					formControlClass = `btn btn-${color || 'secondary'}`;
    				} else if (rangeInput) {
    					formControlClass = 'form-control-range';
    				} else if (unsupportedInput) {
    					formControlClass = '';
    				}

    				if (size && isNotaNumber.test(size)) {
    					$$invalidate(24, bsSize = size);
    					$$invalidate(23, size = undefined);
    				}

    				$$invalidate(15, classes = clsx(
    					className,
    					invalid && 'is-invalid',
    					valid && 'is-valid',
    					bsSize ? `form-control-${bsSize}` : false,
    					validate ? 'validate' : false,
    					filled ? 'filled-in' : false,
    					gap ? 'with-gap' : false,
    					type === 'checkbox'
    					? gap ? false : 'form-check-input'
    					: false,
    					type === 'radio' ? 'form-check-input' : false,
    					formControlClass
    				));
    			}
    		}
    	};

    	$$props = exclude_internal_props($$props);

    	return [
    		value,
    		placeholder,
    		formGroup,
    		type,
    		readonly,
    		multiple,
    		id,
    		name,
    		disabled,
    		far,
    		fas,
    		fab,
    		icon,
    		label,
    		iconSize,
    		classes,
    		tag,
    		labelVisible,
    		forwardEvents,
    		props,
    		containerClassFix,
    		handleInput,
    		inputFocus,
    		size,
    		bsSize,
    		className,
    		color,
    		checked,
    		valid,
    		invalid,
    		plaintext,
    		addon,
    		files,
    		hint,
    		validate,
    		filled,
    		gap,
    		group,
    		outline,
    		background,
    		containerClass,
    		isNotEmpty,
    		isControlled,
    		labelClass,
    		$$scope,
    		slots,
    		textarea_input_handler,
    		select_change_handler,
    		select_change_handler_1,
    		textarea_input_handler_1,
    		select_change_handler_2,
    		select_change_handler_3
    	];
    }

    class MDBInput extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(
    			this,
    			options,
    			instance$k,
    			create_fragment$k,
    			safe_not_equal,
    			{
    				class: 25,
    				formGroup: 2,
    				type: 3,
    				size: 23,
    				bsSize: 24,
    				color: 26,
    				checked: 27,
    				valid: 28,
    				invalid: 29,
    				plaintext: 30,
    				addon: 31,
    				value: 0,
    				files: 32,
    				readonly: 4,
    				multiple: 5,
    				id: 6,
    				name: 7,
    				placeholder: 1,
    				disabled: 8,
    				far: 9,
    				fas: 10,
    				fab: 11,
    				icon: 12,
    				label: 13,
    				hint: 33,
    				validate: 34,
    				filled: 35,
    				gap: 36,
    				iconSize: 14,
    				group: 37,
    				outline: 38,
    				background: 39,
    				containerClass: 40,
    				isNotEmpty: 41,
    				isControlled: 42,
    				labelClass: 43
    			},
    			null,
    			[-1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "MDBInput",
    			options,
    			id: create_fragment$k.name
    		});
    	}

    	get class() {
    		throw new Error("<MDBInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<MDBInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get formGroup() {
    		throw new Error("<MDBInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set formGroup(value) {
    		throw new Error("<MDBInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get type() {
    		throw new Error("<MDBInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set type(value) {
    		throw new Error("<MDBInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get size() {
    		throw new Error("<MDBInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set size(value) {
    		throw new Error("<MDBInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get bsSize() {
    		throw new Error("<MDBInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set bsSize(value) {
    		throw new Error("<MDBInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get color() {
    		throw new Error("<MDBInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set color(value) {
    		throw new Error("<MDBInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get checked() {
    		throw new Error("<MDBInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set checked(value) {
    		throw new Error("<MDBInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get valid() {
    		throw new Error("<MDBInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set valid(value) {
    		throw new Error("<MDBInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get invalid() {
    		throw new Error("<MDBInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set invalid(value) {
    		throw new Error("<MDBInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get plaintext() {
    		throw new Error("<MDBInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set plaintext(value) {
    		throw new Error("<MDBInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get addon() {
    		throw new Error("<MDBInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set addon(value) {
    		throw new Error("<MDBInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get value() {
    		throw new Error("<MDBInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<MDBInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get files() {
    		throw new Error("<MDBInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set files(value) {
    		throw new Error("<MDBInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get readonly() {
    		throw new Error("<MDBInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set readonly(value) {
    		throw new Error("<MDBInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get multiple() {
    		throw new Error("<MDBInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set multiple(value) {
    		throw new Error("<MDBInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get id() {
    		throw new Error("<MDBInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set id(value) {
    		throw new Error("<MDBInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get name() {
    		throw new Error("<MDBInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set name(value) {
    		throw new Error("<MDBInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get placeholder() {
    		throw new Error("<MDBInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set placeholder(value) {
    		throw new Error("<MDBInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get disabled() {
    		throw new Error("<MDBInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set disabled(value) {
    		throw new Error("<MDBInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get far() {
    		throw new Error("<MDBInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set far(value) {
    		throw new Error("<MDBInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get fas() {
    		throw new Error("<MDBInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set fas(value) {
    		throw new Error("<MDBInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get fab() {
    		throw new Error("<MDBInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set fab(value) {
    		throw new Error("<MDBInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get icon() {
    		throw new Error("<MDBInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set icon(value) {
    		throw new Error("<MDBInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get label() {
    		throw new Error("<MDBInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set label(value) {
    		throw new Error("<MDBInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get hint() {
    		throw new Error("<MDBInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set hint(value) {
    		throw new Error("<MDBInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get validate() {
    		throw new Error("<MDBInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set validate(value) {
    		throw new Error("<MDBInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get filled() {
    		throw new Error("<MDBInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set filled(value) {
    		throw new Error("<MDBInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get gap() {
    		throw new Error("<MDBInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set gap(value) {
    		throw new Error("<MDBInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get iconSize() {
    		throw new Error("<MDBInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set iconSize(value) {
    		throw new Error("<MDBInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get group() {
    		throw new Error("<MDBInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set group(value) {
    		throw new Error("<MDBInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get outline() {
    		throw new Error("<MDBInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set outline(value) {
    		throw new Error("<MDBInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get background() {
    		throw new Error("<MDBInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set background(value) {
    		throw new Error("<MDBInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get containerClass() {
    		throw new Error("<MDBInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set containerClass(value) {
    		throw new Error("<MDBInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get isNotEmpty() {
    		throw new Error("<MDBInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isNotEmpty(value) {
    		throw new Error("<MDBInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get isControlled() {
    		throw new Error("<MDBInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isControlled(value) {
    		throw new Error("<MDBInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get labelClass() {
    		throw new Error("<MDBInput>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set labelClass(value) {
    		throw new Error("<MDBInput>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\mdbsvelte\src\MDBInputGroup.svelte generated by Svelte v3.59.2 */
    const file$h = "node_modules\\mdbsvelte\\src\\MDBInputGroup.svelte";
    const get_append_slot_changes = dirty => ({});
    const get_append_slot_context = ctx => ({});
    const get_input_slot_changes = dirty => ({});
    const get_input_slot_context = ctx => ({});
    const get_prepend_slot_changes = dirty => ({});
    const get_prepend_slot_context = ctx => ({});

    // (36:0) {#if label}
    function create_if_block_5(ctx) {
    	let label_1;
    	let t;

    	const block = {
    		c: function create() {
    			label_1 = element("label");
    			t = text(/*label*/ ctx[5]);
    			attr_dev(label_1, "for", /*id*/ ctx[6]);
    			add_location(label_1, file$h, 36, 2, 1002);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, label_1, anchor);
    			append_dev(label_1, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*label*/ 32) set_data_dev(t, /*label*/ ctx[5]);

    			if (dirty & /*id*/ 64) {
    				attr_dev(label_1, "for", /*id*/ ctx[6]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(label_1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5.name,
    		type: "if",
    		source: "(36:0) {#if label}",
    		ctx
    	});

    	return block;
    }

    // (40:2) {#if prepend}
    function create_if_block_4(ctx) {
    	let div;
    	let span;
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			span = element("span");
    			t = text(/*prepend*/ ctx[1]);
    			attr_dev(span, "class", /*childClass*/ ctx[7]);
    			add_location(span, file$h, 41, 6, 1153);
    			attr_dev(div, "class", "input-group-prepend");
    			add_location(div, file$h, 40, 4, 1113);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, span);
    			append_dev(span, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*prepend*/ 2) set_data_dev(t, /*prepend*/ ctx[1]);

    			if (dirty & /*childClass*/ 128) {
    				attr_dev(span, "class", /*childClass*/ ctx[7]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4.name,
    		type: "if",
    		source: "(40:2) {#if prepend}",
    		ctx
    	});

    	return block;
    }

    // (46:2) {#if slotPrepend}
    function create_if_block_3(ctx) {
    	let div;
    	let current;
    	const prepend_slot_template = /*#slots*/ ctx[17].prepend;
    	const prepend_slot = create_slot(prepend_slot_template, ctx, /*$$scope*/ ctx[19], get_prepend_slot_context);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (prepend_slot) prepend_slot.c();
    			attr_dev(div, "class", "input-group-prepend");
    			add_location(div, file$h, 46, 4, 1239);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (prepend_slot) {
    				prepend_slot.m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (prepend_slot) {
    				if (prepend_slot.p && (!current || dirty & /*$$scope*/ 524288)) {
    					update_slot_base(
    						prepend_slot,
    						prepend_slot_template,
    						ctx,
    						/*$$scope*/ ctx[19],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[19])
    						: get_slot_changes(prepend_slot_template, /*$$scope*/ ctx[19], dirty, get_prepend_slot_changes),
    						get_prepend_slot_context
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(prepend_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(prepend_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (prepend_slot) prepend_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3.name,
    		type: "if",
    		source: "(46:2) {#if slotPrepend}",
    		ctx
    	});

    	return block;
    }

    // (58:2) {:else}
    function create_else_block$1(ctx) {
    	let current;
    	const input_slot_template = /*#slots*/ ctx[17].input;
    	const input_slot = create_slot(input_slot_template, ctx, /*$$scope*/ ctx[19], get_input_slot_context);

    	const block = {
    		c: function create() {
    			if (input_slot) input_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (input_slot) {
    				input_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (input_slot) {
    				if (input_slot.p && (!current || dirty & /*$$scope*/ 524288)) {
    					update_slot_base(
    						input_slot,
    						input_slot_template,
    						ctx,
    						/*$$scope*/ ctx[19],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[19])
    						: get_slot_changes(input_slot_template, /*$$scope*/ ctx[19], dirty, get_input_slot_changes),
    						get_input_slot_context
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(input_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(input_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (input_slot) input_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$1.name,
    		type: "else",
    		source: "(58:2) {:else}",
    		ctx
    	});

    	return block;
    }

    // (54:2) {#if !slotInput}
    function create_if_block_2(ctx) {
    	let mdbinput;
    	let updating_value;
    	let current;

    	function mdbinput_value_binding(value) {
    		/*mdbinput_value_binding*/ ctx[18](value);
    	}

    	let mdbinput_props = {
    		formGroup: true,
    		id: /*id*/ ctx[6],
    		type: /*type*/ ctx[3],
    		placeholder: /*hint*/ ctx[2],
    		$$slots: { default: [create_default_slot$8] },
    		$$scope: { ctx }
    	};

    	if (/*value*/ ctx[0] !== void 0) {
    		mdbinput_props.value = /*value*/ ctx[0];
    	}

    	mdbinput = new MDBInput({ props: mdbinput_props, $$inline: true });
    	binding_callbacks.push(() => bind(mdbinput, 'value', mdbinput_value_binding));

    	const block = {
    		c: function create() {
    			create_component(mdbinput.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbinput, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbinput_changes = {};
    			if (dirty & /*id*/ 64) mdbinput_changes.id = /*id*/ ctx[6];
    			if (dirty & /*type*/ 8) mdbinput_changes.type = /*type*/ ctx[3];
    			if (dirty & /*hint*/ 4) mdbinput_changes.placeholder = /*hint*/ ctx[2];

    			if (dirty & /*$$scope*/ 524288) {
    				mdbinput_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_value && dirty & /*value*/ 1) {
    				updating_value = true;
    				mdbinput_changes.value = /*value*/ ctx[0];
    				add_flush_callback(() => updating_value = false);
    			}

    			mdbinput.$set(mdbinput_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbinput.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbinput.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbinput, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2.name,
    		type: "if",
    		source: "(54:2) {#if !slotInput}",
    		ctx
    	});

    	return block;
    }

    // (55:4) <MDBInput formGroup={true} {id} {type} placeholder={hint} bind:value={value}>
    function create_default_slot$8(ctx) {
    	let current;
    	const default_slot_template = /*#slots*/ ctx[17].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[19], null);

    	const block = {
    		c: function create() {
    			if (default_slot) default_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 524288)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[19],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[19])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[19], dirty, null),
    						null
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$8.name,
    		type: "slot",
    		source: "(55:4) <MDBInput formGroup={true} {id} {type} placeholder={hint} bind:value={value}>",
    		ctx
    	});

    	return block;
    }

    // (62:2) {#if append}
    function create_if_block_1$1(ctx) {
    	let div;
    	let span;
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			span = element("span");
    			t = text(/*append*/ ctx[4]);
    			attr_dev(span, "class", /*childClass*/ ctx[7]);
    			add_location(span, file$h, 63, 6, 1557);
    			attr_dev(div, "class", "input-group-append");
    			add_location(div, file$h, 62, 4, 1518);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, span);
    			append_dev(span, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*append*/ 16) set_data_dev(t, /*append*/ ctx[4]);

    			if (dirty & /*childClass*/ 128) {
    				attr_dev(span, "class", /*childClass*/ ctx[7]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$1.name,
    		type: "if",
    		source: "(62:2) {#if append}",
    		ctx
    	});

    	return block;
    }

    // (68:2) {#if slotAppend}
    function create_if_block$3(ctx) {
    	let div;
    	let current;
    	const append_slot_template = /*#slots*/ ctx[17].append;
    	const append_slot = create_slot(append_slot_template, ctx, /*$$scope*/ ctx[19], get_append_slot_context);

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (append_slot) append_slot.c();
    			attr_dev(div, "class", "input-group-append");
    			add_location(div, file$h, 68, 4, 1641);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (append_slot) {
    				append_slot.m(div, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (append_slot) {
    				if (append_slot.p && (!current || dirty & /*$$scope*/ 524288)) {
    					update_slot_base(
    						append_slot,
    						append_slot_template,
    						ctx,
    						/*$$scope*/ ctx[19],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[19])
    						: get_slot_changes(append_slot_template, /*$$scope*/ ctx[19], dirty, get_append_slot_changes),
    						get_append_slot_context
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(append_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(append_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (append_slot) append_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$3.name,
    		type: "if",
    		source: "(68:2) {#if slotAppend}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$j(ctx) {
    	let t0;
    	let div;
    	let t1;
    	let t2;
    	let current_block_type_index;
    	let if_block3;
    	let t3;
    	let t4;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block0 = /*label*/ ctx[5] && create_if_block_5(ctx);
    	let if_block1 = /*prepend*/ ctx[1] && create_if_block_4(ctx);
    	let if_block2 = /*slotPrepend*/ ctx[13] && create_if_block_3(ctx);
    	const if_block_creators = [create_if_block_2, create_else_block$1];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (!/*slotInput*/ ctx[11]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block3 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	let if_block4 = /*append*/ ctx[4] && create_if_block_1$1(ctx);
    	let if_block5 = /*slotAppend*/ ctx[12] && create_if_block$3(ctx);
    	let div_levels = [/*props*/ ctx[10], { class: /*classes*/ ctx[8] }];
    	let div_data = {};

    	for (let i = 0; i < div_levels.length; i += 1) {
    		div_data = assign(div_data, div_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			if (if_block0) if_block0.c();
    			t0 = space();
    			div = element("div");
    			if (if_block1) if_block1.c();
    			t1 = space();
    			if (if_block2) if_block2.c();
    			t2 = space();
    			if_block3.c();
    			t3 = space();
    			if (if_block4) if_block4.c();
    			t4 = space();
    			if (if_block5) if_block5.c();
    			set_attributes(div, div_data);
    			add_location(div, file$h, 38, 0, 1042);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div, anchor);
    			if (if_block1) if_block1.m(div, null);
    			append_dev(div, t1);
    			if (if_block2) if_block2.m(div, null);
    			append_dev(div, t2);
    			if_blocks[current_block_type_index].m(div, null);
    			append_dev(div, t3);
    			if (if_block4) if_block4.m(div, null);
    			append_dev(div, t4);
    			if (if_block5) if_block5.m(div, null);
    			current = true;

    			if (!mounted) {
    				dispose = action_destroyer(/*forwardEvents*/ ctx[9].call(null, div));
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*label*/ ctx[5]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_5(ctx);
    					if_block0.c();
    					if_block0.m(t0.parentNode, t0);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*prepend*/ ctx[1]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_4(ctx);
    					if_block1.c();
    					if_block1.m(div, t1);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (/*slotPrepend*/ ctx[13]) if_block2.p(ctx, dirty);
    			if_block3.p(ctx, dirty);

    			if (/*append*/ ctx[4]) {
    				if (if_block4) {
    					if_block4.p(ctx, dirty);
    				} else {
    					if_block4 = create_if_block_1$1(ctx);
    					if_block4.c();
    					if_block4.m(div, t4);
    				}
    			} else if (if_block4) {
    				if_block4.d(1);
    				if_block4 = null;
    			}

    			if (/*slotAppend*/ ctx[12]) if_block5.p(ctx, dirty);

    			set_attributes(div, div_data = get_spread_update(div_levels, [
    				/*props*/ ctx[10],
    				(!current || dirty & /*classes*/ 256) && { class: /*classes*/ ctx[8] }
    			]));
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block2);
    			transition_in(if_block3);
    			transition_in(if_block5);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block2);
    			transition_out(if_block3);
    			transition_out(if_block5);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div);
    			if (if_block1) if_block1.d();
    			if (if_block2) if_block2.d();
    			if_blocks[current_block_type_index].d();
    			if (if_block4) if_block4.d();
    			if (if_block5) if_block5.d();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$j.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$j($$self, $$props, $$invalidate) {
    	let classes;
    	let childClass;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('MDBInputGroup', slots, ['prepend','default','input','append']);
    	const forwardEvents = forwardEventsBuilder(current_component);
    	let { class: className = '' } = $$props;
    	let { size = '' } = $$props;
    	let { prepend } = $$props;
    	let { hint } = $$props;
    	const props = clean$1($$props, ["prepend", "hint", "type", "append", "label", "id"]);
    	let { type } = $$props;
    	let { append } = $$props;
    	let { label } = $$props;
    	let { id = '' } = $$props;
    	let { material } = $$props;
    	let { value } = $$props;
    	let slotInput = $$props.$$slots ? $$props.$$slots.input : false;
    	let slotAppend = $$props.$$slots ? $$props.$$slots.append : false;
    	let slotPrepend = $$props.$$slots ? $$props.$$slots.prepend : false;

    	$$self.$$.on_mount.push(function () {
    		if (prepend === undefined && !('prepend' in $$props || $$self.$$.bound[$$self.$$.props['prepend']])) {
    			console.warn("<MDBInputGroup> was created without expected prop 'prepend'");
    		}

    		if (hint === undefined && !('hint' in $$props || $$self.$$.bound[$$self.$$.props['hint']])) {
    			console.warn("<MDBInputGroup> was created without expected prop 'hint'");
    		}

    		if (type === undefined && !('type' in $$props || $$self.$$.bound[$$self.$$.props['type']])) {
    			console.warn("<MDBInputGroup> was created without expected prop 'type'");
    		}

    		if (append === undefined && !('append' in $$props || $$self.$$.bound[$$self.$$.props['append']])) {
    			console.warn("<MDBInputGroup> was created without expected prop 'append'");
    		}

    		if (label === undefined && !('label' in $$props || $$self.$$.bound[$$self.$$.props['label']])) {
    			console.warn("<MDBInputGroup> was created without expected prop 'label'");
    		}

    		if (material === undefined && !('material' in $$props || $$self.$$.bound[$$self.$$.props['material']])) {
    			console.warn("<MDBInputGroup> was created without expected prop 'material'");
    		}

    		if (value === undefined && !('value' in $$props || $$self.$$.bound[$$self.$$.props['value']])) {
    			console.warn("<MDBInputGroup> was created without expected prop 'value'");
    		}
    	});

    	function mdbinput_value_binding(value$1) {
    		value = value$1;
    		$$invalidate(0, value);
    	}

    	$$self.$$set = $$new_props => {
    		$$invalidate(20, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ('class' in $$new_props) $$invalidate(14, className = $$new_props.class);
    		if ('size' in $$new_props) $$invalidate(15, size = $$new_props.size);
    		if ('prepend' in $$new_props) $$invalidate(1, prepend = $$new_props.prepend);
    		if ('hint' in $$new_props) $$invalidate(2, hint = $$new_props.hint);
    		if ('type' in $$new_props) $$invalidate(3, type = $$new_props.type);
    		if ('append' in $$new_props) $$invalidate(4, append = $$new_props.append);
    		if ('label' in $$new_props) $$invalidate(5, label = $$new_props.label);
    		if ('id' in $$new_props) $$invalidate(6, id = $$new_props.id);
    		if ('material' in $$new_props) $$invalidate(16, material = $$new_props.material);
    		if ('value' in $$new_props) $$invalidate(0, value = $$new_props.value);
    		if ('$$scope' in $$new_props) $$invalidate(19, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		clean: clean$1,
    		clsx,
    		forwardEventsBuilder,
    		current_component,
    		forwardEvents,
    		MDBInput,
    		className,
    		size,
    		prepend,
    		hint,
    		props,
    		type,
    		append,
    		label,
    		id,
    		material,
    		value,
    		slotInput,
    		slotAppend,
    		slotPrepend,
    		childClass,
    		classes
    	});

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(20, $$props = assign(assign({}, $$props), $$new_props));
    		if ('className' in $$props) $$invalidate(14, className = $$new_props.className);
    		if ('size' in $$props) $$invalidate(15, size = $$new_props.size);
    		if ('prepend' in $$props) $$invalidate(1, prepend = $$new_props.prepend);
    		if ('hint' in $$props) $$invalidate(2, hint = $$new_props.hint);
    		if ('type' in $$props) $$invalidate(3, type = $$new_props.type);
    		if ('append' in $$props) $$invalidate(4, append = $$new_props.append);
    		if ('label' in $$props) $$invalidate(5, label = $$new_props.label);
    		if ('id' in $$props) $$invalidate(6, id = $$new_props.id);
    		if ('material' in $$props) $$invalidate(16, material = $$new_props.material);
    		if ('value' in $$props) $$invalidate(0, value = $$new_props.value);
    		if ('slotInput' in $$props) $$invalidate(11, slotInput = $$new_props.slotInput);
    		if ('slotAppend' in $$props) $$invalidate(12, slotAppend = $$new_props.slotAppend);
    		if ('slotPrepend' in $$props) $$invalidate(13, slotPrepend = $$new_props.slotPrepend);
    		if ('childClass' in $$props) $$invalidate(7, childClass = $$new_props.childClass);
    		if ('classes' in $$props) $$invalidate(8, classes = $$new_props.classes);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*material, className, size*/ 114688) {
    			$$invalidate(8, classes = clsx({ 'md-form': material }, className, 'input-group', size ? `input-group-${size}` : null));
    		}

    		if ($$self.$$.dirty & /*material*/ 65536) {
    			$$invalidate(7, childClass = clsx('input-group-text', { 'md-addon': material }));
    		}
    	};

    	$$props = exclude_internal_props($$props);

    	return [
    		value,
    		prepend,
    		hint,
    		type,
    		append,
    		label,
    		id,
    		childClass,
    		classes,
    		forwardEvents,
    		props,
    		slotInput,
    		slotAppend,
    		slotPrepend,
    		className,
    		size,
    		material,
    		slots,
    		mdbinput_value_binding,
    		$$scope
    	];
    }

    class MDBInputGroup extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$j, create_fragment$j, safe_not_equal, {
    			class: 14,
    			size: 15,
    			prepend: 1,
    			hint: 2,
    			type: 3,
    			append: 4,
    			label: 5,
    			id: 6,
    			material: 16,
    			value: 0
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "MDBInputGroup",
    			options,
    			id: create_fragment$j.name
    		});
    	}

    	get class() {
    		throw new Error("<MDBInputGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<MDBInputGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get size() {
    		throw new Error("<MDBInputGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set size(value) {
    		throw new Error("<MDBInputGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get prepend() {
    		throw new Error("<MDBInputGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set prepend(value) {
    		throw new Error("<MDBInputGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get hint() {
    		throw new Error("<MDBInputGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set hint(value) {
    		throw new Error("<MDBInputGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get type() {
    		throw new Error("<MDBInputGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set type(value) {
    		throw new Error("<MDBInputGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get append() {
    		throw new Error("<MDBInputGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set append(value) {
    		throw new Error("<MDBInputGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get label() {
    		throw new Error("<MDBInputGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set label(value) {
    		throw new Error("<MDBInputGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get id() {
    		throw new Error("<MDBInputGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set id(value) {
    		throw new Error("<MDBInputGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get material() {
    		throw new Error("<MDBInputGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set material(value) {
    		throw new Error("<MDBInputGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get value() {
    		throw new Error("<MDBInputGroup>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<MDBInputGroup>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /*
    WHAT: SublimeText-like Fuzzy Search

    USAGE:
      fuzzysort.single('fs', 'Fuzzy Search') // {score: -16}
      fuzzysort.single('test', 'test') // {score: 0}
      fuzzysort.single('doesnt exist', 'target') // null

      fuzzysort.go('mr', ['Monitor.cpp', 'MeshRenderer.cpp'])
      // [{score: -18, target: "MeshRenderer.cpp"}, {score: -6009, target: "Monitor.cpp"}]

      fuzzysort.highlight(fuzzysort.single('fs', 'Fuzzy Search'), '<b>', '</b>')
      // <b>F</b>uzzy <b>S</b>earch
    */

    var fuzzysort = createCommonjsModule(function (module) {
    (function(root, UMD) {
      if(module.exports) module.exports = UMD();
      else root.fuzzysort = UMD();
    })(commonjsGlobal, function UMD() { function fuzzysortNew(instanceOptions) {

      var fuzzysort = {

        single: function(search, target, options) {
          if(!search) return null
          if(!isObj(search)) search = fuzzysort.getPreparedSearch(search);

          if(!target) return null
          if(!isObj(target)) target = fuzzysort.getPrepared(target);

          var allowTypo = options && options.allowTypo!==undefined ? options.allowTypo
            : instanceOptions && instanceOptions.allowTypo!==undefined ? instanceOptions.allowTypo
            : true;
          var algorithm = allowTypo ? fuzzysort.algorithm : fuzzysort.algorithmNoTypo;
          return algorithm(search, target, search[0])
          // var threshold = options && options.threshold || instanceOptions && instanceOptions.threshold || -9007199254740991
          // var result = algorithm(search, target, search[0])
          // if(result === null) return null
          // if(result.score < threshold) return null
          // return result
        },

        go: function(search, targets, options) {
          if(!search) return noResults
          search = fuzzysort.prepareSearch(search);
          var searchLowerCode = search[0];

          var threshold = options && options.threshold || instanceOptions && instanceOptions.threshold || -9007199254740991;
          var limit = options && options.limit || instanceOptions && instanceOptions.limit || 9007199254740991;
          var allowTypo = options && options.allowTypo!==undefined ? options.allowTypo
            : instanceOptions && instanceOptions.allowTypo!==undefined ? instanceOptions.allowTypo
            : true;
          var algorithm = allowTypo ? fuzzysort.algorithm : fuzzysort.algorithmNoTypo;
          var resultsLen = 0; var limitedCount = 0;
          var targetsLen = targets.length;

          // This code is copy/pasted 3 times for performance reasons [options.keys, options.key, no keys]

          // options.keys
          if(options && options.keys) {
            var scoreFn = options.scoreFn || defaultScoreFn;
            var keys = options.keys;
            var keysLen = keys.length;
            for(var i = targetsLen - 1; i >= 0; --i) { var obj = targets[i];
              var objResults = new Array(keysLen);
              for (var keyI = keysLen - 1; keyI >= 0; --keyI) {
                var key = keys[keyI];
                var target = getValue(obj, key);
                if(!target) { objResults[keyI] = null; continue }
                if(!isObj(target)) target = fuzzysort.getPrepared(target);

                objResults[keyI] = algorithm(search, target, searchLowerCode);
              }
              objResults.obj = obj; // before scoreFn so scoreFn can use it
              var score = scoreFn(objResults);
              if(score === null) continue
              if(score < threshold) continue
              objResults.score = score;
              if(resultsLen < limit) { q.add(objResults); ++resultsLen; }
              else {
                ++limitedCount;
                if(score > q.peek().score) q.replaceTop(objResults);
              }
            }

          // options.key
          } else if(options && options.key) {
            var key = options.key;
            for(var i = targetsLen - 1; i >= 0; --i) { var obj = targets[i];
              var target = getValue(obj, key);
              if(!target) continue
              if(!isObj(target)) target = fuzzysort.getPrepared(target);

              var result = algorithm(search, target, searchLowerCode);
              if(result === null) continue
              if(result.score < threshold) continue

              // have to clone result so duplicate targets from different obj can each reference the correct obj
              result = {target:result.target, _targetLowerCodes:null, _nextBeginningIndexes:null, score:result.score, indexes:result.indexes, obj:obj}; // hidden

              if(resultsLen < limit) { q.add(result); ++resultsLen; }
              else {
                ++limitedCount;
                if(result.score > q.peek().score) q.replaceTop(result);
              }
            }

          // no keys
          } else {
            for(var i = targetsLen - 1; i >= 0; --i) { var target = targets[i];
              if(!target) continue
              if(!isObj(target)) target = fuzzysort.getPrepared(target);

              var result = algorithm(search, target, searchLowerCode);
              if(result === null) continue
              if(result.score < threshold) continue
              if(resultsLen < limit) { q.add(result); ++resultsLen; }
              else {
                ++limitedCount;
                if(result.score > q.peek().score) q.replaceTop(result);
              }
            }
          }

          if(resultsLen === 0) return noResults
          var results = new Array(resultsLen);
          for(var i = resultsLen - 1; i >= 0; --i) results[i] = q.poll();
          results.total = resultsLen + limitedCount;
          return results
        },

        goAsync: function(search, targets, options) {
          var canceled = false;
          var p = new Promise(function(resolve, reject) {
            if(!search) return resolve(noResults)
            search = fuzzysort.prepareSearch(search);
            var searchLowerCode = search[0];

            var q = fastpriorityqueue();
            var iCurrent = targets.length - 1;
            var threshold = options && options.threshold || instanceOptions && instanceOptions.threshold || -9007199254740991;
            var limit = options && options.limit || instanceOptions && instanceOptions.limit || 9007199254740991;
            var allowTypo = options && options.allowTypo!==undefined ? options.allowTypo
              : instanceOptions && instanceOptions.allowTypo!==undefined ? instanceOptions.allowTypo
              : true;
            var algorithm = allowTypo ? fuzzysort.algorithm : fuzzysort.algorithmNoTypo;
            var resultsLen = 0; var limitedCount = 0;
            function step() {
              if(canceled) return reject('canceled')

              var startMs = Date.now();

              // This code is copy/pasted 3 times for performance reasons [options.keys, options.key, no keys]

              // options.keys
              if(options && options.keys) {
                var scoreFn = options.scoreFn || defaultScoreFn;
                var keys = options.keys;
                var keysLen = keys.length;
                for(; iCurrent >= 0; --iCurrent) { var obj = targets[iCurrent];
                  var objResults = new Array(keysLen);
                  for (var keyI = keysLen - 1; keyI >= 0; --keyI) {
                    var key = keys[keyI];
                    var target = getValue(obj, key);
                    if(!target) { objResults[keyI] = null; continue }
                    if(!isObj(target)) target = fuzzysort.getPrepared(target);

                    objResults[keyI] = algorithm(search, target, searchLowerCode);
                  }
                  objResults.obj = obj; // before scoreFn so scoreFn can use it
                  var score = scoreFn(objResults);
                  if(score === null) continue
                  if(score < threshold) continue
                  objResults.score = score;
                  if(resultsLen < limit) { q.add(objResults); ++resultsLen; }
                  else {
                    ++limitedCount;
                    if(score > q.peek().score) q.replaceTop(objResults);
                  }

                  if(iCurrent%1000/*itemsPerCheck*/ === 0) {
                    if(Date.now() - startMs >= 10/*asyncInterval*/) {
                      isNode?setImmediate(step):setTimeout(step);
                      return
                    }
                  }
                }

              // options.key
              } else if(options && options.key) {
                var key = options.key;
                for(; iCurrent >= 0; --iCurrent) { var obj = targets[iCurrent];
                  var target = getValue(obj, key);
                  if(!target) continue
                  if(!isObj(target)) target = fuzzysort.getPrepared(target);

                  var result = algorithm(search, target, searchLowerCode);
                  if(result === null) continue
                  if(result.score < threshold) continue

                  // have to clone result so duplicate targets from different obj can each reference the correct obj
                  result = {target:result.target, _targetLowerCodes:null, _nextBeginningIndexes:null, score:result.score, indexes:result.indexes, obj:obj}; // hidden

                  if(resultsLen < limit) { q.add(result); ++resultsLen; }
                  else {
                    ++limitedCount;
                    if(result.score > q.peek().score) q.replaceTop(result);
                  }

                  if(iCurrent%1000/*itemsPerCheck*/ === 0) {
                    if(Date.now() - startMs >= 10/*asyncInterval*/) {
                      isNode?setImmediate(step):setTimeout(step);
                      return
                    }
                  }
                }

              // no keys
              } else {
                for(; iCurrent >= 0; --iCurrent) { var target = targets[iCurrent];
                  if(!target) continue
                  if(!isObj(target)) target = fuzzysort.getPrepared(target);

                  var result = algorithm(search, target, searchLowerCode);
                  if(result === null) continue
                  if(result.score < threshold) continue
                  if(resultsLen < limit) { q.add(result); ++resultsLen; }
                  else {
                    ++limitedCount;
                    if(result.score > q.peek().score) q.replaceTop(result);
                  }

                  if(iCurrent%1000/*itemsPerCheck*/ === 0) {
                    if(Date.now() - startMs >= 10/*asyncInterval*/) {
                      isNode?setImmediate(step):setTimeout(step);
                      return
                    }
                  }
                }
              }

              if(resultsLen === 0) return resolve(noResults)
              var results = new Array(resultsLen);
              for(var i = resultsLen - 1; i >= 0; --i) results[i] = q.poll();
              results.total = resultsLen + limitedCount;
              resolve(results);
            }

            isNode?setImmediate(step):step();
          });
          p.cancel = function() { canceled = true; };
          return p
        },

        highlight: function(result, hOpen, hClose) {
          if(result === null) return null
          if(hOpen === undefined) hOpen = '<b>';
          if(hClose === undefined) hClose = '</b>';
          var highlighted = '';
          var matchesIndex = 0;
          var opened = false;
          var target = result.target;
          var targetLen = target.length;
          var matchesBest = result.indexes;
          for(var i = 0; i < targetLen; ++i) { var char = target[i];
            if(matchesBest[matchesIndex] === i) {
              ++matchesIndex;
              if(!opened) { opened = true;
                highlighted += hOpen;
              }

              if(matchesIndex === matchesBest.length) {
                highlighted += char + hClose + target.substr(i+1);
                break
              }
            } else {
              if(opened) { opened = false;
                highlighted += hClose;
              }
            }
            highlighted += char;
          }

          return highlighted
        },

        prepare: function(target) {
          if(!target) return
          return {target:target, _targetLowerCodes:fuzzysort.prepareLowerCodes(target), _nextBeginningIndexes:null, score:null, indexes:null, obj:null} // hidden
        },
        prepareSlow: function(target) {
          if(!target) return
          return {target:target, _targetLowerCodes:fuzzysort.prepareLowerCodes(target), _nextBeginningIndexes:fuzzysort.prepareNextBeginningIndexes(target), score:null, indexes:null, obj:null} // hidden
        },
        prepareSearch: function(search) {
          if(!search) return
          return fuzzysort.prepareLowerCodes(search)
        },



        // Below this point is only internal code
        // Below this point is only internal code
        // Below this point is only internal code
        // Below this point is only internal code



        getPrepared: function(target) {
          if(target.length > 999) return fuzzysort.prepare(target) // don't cache huge targets
          var targetPrepared = preparedCache.get(target);
          if(targetPrepared !== undefined) return targetPrepared
          targetPrepared = fuzzysort.prepare(target);
          preparedCache.set(target, targetPrepared);
          return targetPrepared
        },
        getPreparedSearch: function(search) {
          if(search.length > 999) return fuzzysort.prepareSearch(search) // don't cache huge searches
          var searchPrepared = preparedSearchCache.get(search);
          if(searchPrepared !== undefined) return searchPrepared
          searchPrepared = fuzzysort.prepareSearch(search);
          preparedSearchCache.set(search, searchPrepared);
          return searchPrepared
        },

        algorithm: function(searchLowerCodes, prepared, searchLowerCode) {
          var targetLowerCodes = prepared._targetLowerCodes;
          var searchLen = searchLowerCodes.length;
          var targetLen = targetLowerCodes.length;
          var searchI = 0; // where we at
          var targetI = 0; // where you at
          var typoSimpleI = 0;
          var matchesSimpleLen = 0;

          // very basic fuzzy match; to remove non-matching targets ASAP!
          // walk through target. find sequential matches.
          // if all chars aren't found then exit
          for(;;) {
            var isMatch = searchLowerCode === targetLowerCodes[targetI];
            if(isMatch) {
              matchesSimple[matchesSimpleLen++] = targetI;
              ++searchI; if(searchI === searchLen) break
              searchLowerCode = searchLowerCodes[typoSimpleI===0?searchI : (typoSimpleI===searchI?searchI+1 : (typoSimpleI===searchI-1?searchI-1 : searchI))];
            }

            ++targetI; if(targetI >= targetLen) { // Failed to find searchI
              // Check for typo or exit
              // we go as far as possible before trying to transpose
              // then we transpose backwards until we reach the beginning
              for(;;) {
                if(searchI <= 1) return null // not allowed to transpose first char
                if(typoSimpleI === 0) { // we haven't tried to transpose yet
                  --searchI;
                  var searchLowerCodeNew = searchLowerCodes[searchI];
                  if(searchLowerCode === searchLowerCodeNew) continue // doesn't make sense to transpose a repeat char
                  typoSimpleI = searchI;
                } else {
                  if(typoSimpleI === 1) return null // reached the end of the line for transposing
                  --typoSimpleI;
                  searchI = typoSimpleI;
                  searchLowerCode = searchLowerCodes[searchI + 1];
                  var searchLowerCodeNew = searchLowerCodes[searchI];
                  if(searchLowerCode === searchLowerCodeNew) continue // doesn't make sense to transpose a repeat char
                }
                matchesSimpleLen = searchI;
                targetI = matchesSimple[matchesSimpleLen - 1] + 1;
                break
              }
            }
          }

          var searchI = 0;
          var typoStrictI = 0;
          var successStrict = false;
          var matchesStrictLen = 0;

          var nextBeginningIndexes = prepared._nextBeginningIndexes;
          if(nextBeginningIndexes === null) nextBeginningIndexes = prepared._nextBeginningIndexes = fuzzysort.prepareNextBeginningIndexes(prepared.target);
          var firstPossibleI = targetI = matchesSimple[0]===0 ? 0 : nextBeginningIndexes[matchesSimple[0]-1];

          // Our target string successfully matched all characters in sequence!
          // Let's try a more advanced and strict test to improve the score
          // only count it as a match if it's consecutive or a beginning character!
          if(targetI !== targetLen) for(;;) {
            if(targetI >= targetLen) {
              // We failed to find a good spot for this search char, go back to the previous search char and force it forward
              if(searchI <= 0) { // We failed to push chars forward for a better match
                // transpose, starting from the beginning
                ++typoStrictI; if(typoStrictI > searchLen-2) break
                if(searchLowerCodes[typoStrictI] === searchLowerCodes[typoStrictI+1]) continue // doesn't make sense to transpose a repeat char
                targetI = firstPossibleI;
                continue
              }

              --searchI;
              var lastMatch = matchesStrict[--matchesStrictLen];
              targetI = nextBeginningIndexes[lastMatch];

            } else {
              var isMatch = searchLowerCodes[typoStrictI===0?searchI : (typoStrictI===searchI?searchI+1 : (typoStrictI===searchI-1?searchI-1 : searchI))] === targetLowerCodes[targetI];
              if(isMatch) {
                matchesStrict[matchesStrictLen++] = targetI;
                ++searchI; if(searchI === searchLen) { successStrict = true; break }
                ++targetI;
              } else {
                targetI = nextBeginningIndexes[targetI];
              }
            }
          }

          { // tally up the score & keep track of matches for highlighting later
            if(successStrict) { var matchesBest = matchesStrict; var matchesBestLen = matchesStrictLen; }
            else { var matchesBest = matchesSimple; var matchesBestLen = matchesSimpleLen; }
            var score = 0;
            var lastTargetI = -1;
            for(var i = 0; i < searchLen; ++i) { var targetI = matchesBest[i];
              // score only goes down if they're not consecutive
              if(lastTargetI !== targetI - 1) score -= targetI;
              lastTargetI = targetI;
            }
            if(!successStrict) {
              score *= 1000;
              if(typoSimpleI !== 0) score += -20;/*typoPenalty*/
            } else {
              if(typoStrictI !== 0) score += -20;/*typoPenalty*/
            }
            score -= targetLen - searchLen;
            prepared.score = score;
            prepared.indexes = new Array(matchesBestLen); for(var i = matchesBestLen - 1; i >= 0; --i) prepared.indexes[i] = matchesBest[i];

            return prepared
          }
        },

        algorithmNoTypo: function(searchLowerCodes, prepared, searchLowerCode) {
          var targetLowerCodes = prepared._targetLowerCodes;
          var searchLen = searchLowerCodes.length;
          var targetLen = targetLowerCodes.length;
          var searchI = 0; // where we at
          var targetI = 0; // where you at
          var matchesSimpleLen = 0;

          // very basic fuzzy match; to remove non-matching targets ASAP!
          // walk through target. find sequential matches.
          // if all chars aren't found then exit
          for(;;) {
            var isMatch = searchLowerCode === targetLowerCodes[targetI];
            if(isMatch) {
              matchesSimple[matchesSimpleLen++] = targetI;
              ++searchI; if(searchI === searchLen) break
              searchLowerCode = searchLowerCodes[searchI];
            }
            ++targetI; if(targetI >= targetLen) return null // Failed to find searchI
          }

          var searchI = 0;
          var successStrict = false;
          var matchesStrictLen = 0;

          var nextBeginningIndexes = prepared._nextBeginningIndexes;
          if(nextBeginningIndexes === null) nextBeginningIndexes = prepared._nextBeginningIndexes = fuzzysort.prepareNextBeginningIndexes(prepared.target);
          targetI = matchesSimple[0]===0 ? 0 : nextBeginningIndexes[matchesSimple[0]-1];

          // Our target string successfully matched all characters in sequence!
          // Let's try a more advanced and strict test to improve the score
          // only count it as a match if it's consecutive or a beginning character!
          if(targetI !== targetLen) for(;;) {
            if(targetI >= targetLen) {
              // We failed to find a good spot for this search char, go back to the previous search char and force it forward
              if(searchI <= 0) break // We failed to push chars forward for a better match

              --searchI;
              var lastMatch = matchesStrict[--matchesStrictLen];
              targetI = nextBeginningIndexes[lastMatch];

            } else {
              var isMatch = searchLowerCodes[searchI] === targetLowerCodes[targetI];
              if(isMatch) {
                matchesStrict[matchesStrictLen++] = targetI;
                ++searchI; if(searchI === searchLen) { successStrict = true; break }
                ++targetI;
              } else {
                targetI = nextBeginningIndexes[targetI];
              }
            }
          }

          { // tally up the score & keep track of matches for highlighting later
            if(successStrict) { var matchesBest = matchesStrict; var matchesBestLen = matchesStrictLen; }
            else { var matchesBest = matchesSimple; var matchesBestLen = matchesSimpleLen; }
            var score = 0;
            var lastTargetI = -1;
            for(var i = 0; i < searchLen; ++i) { var targetI = matchesBest[i];
              // score only goes down if they're not consecutive
              if(lastTargetI !== targetI - 1) score -= targetI;
              lastTargetI = targetI;
            }
            if(!successStrict) score *= 1000;
            score -= targetLen - searchLen;
            prepared.score = score;
            prepared.indexes = new Array(matchesBestLen); for(var i = matchesBestLen - 1; i >= 0; --i) prepared.indexes[i] = matchesBest[i];

            return prepared
          }
        },

        prepareLowerCodes: function(str) {
          var strLen = str.length;
          var lowerCodes = []; // new Array(strLen)    sparse array is too slow
          var lower = str.toLowerCase();
          for(var i = 0; i < strLen; ++i) lowerCodes[i] = lower.charCodeAt(i);
          return lowerCodes
        },
        prepareBeginningIndexes: function(target) {
          var targetLen = target.length;
          var beginningIndexes = []; var beginningIndexesLen = 0;
          var wasUpper = false;
          var wasAlphanum = false;
          for(var i = 0; i < targetLen; ++i) {
            var targetCode = target.charCodeAt(i);
            var isUpper = targetCode>=65&&targetCode<=90;
            var isAlphanum = isUpper || targetCode>=97&&targetCode<=122 || targetCode>=48&&targetCode<=57;
            var isBeginning = isUpper && !wasUpper || !wasAlphanum || !isAlphanum;
            wasUpper = isUpper;
            wasAlphanum = isAlphanum;
            if(isBeginning) beginningIndexes[beginningIndexesLen++] = i;
          }
          return beginningIndexes
        },
        prepareNextBeginningIndexes: function(target) {
          var targetLen = target.length;
          var beginningIndexes = fuzzysort.prepareBeginningIndexes(target);
          var nextBeginningIndexes = []; // new Array(targetLen)     sparse array is too slow
          var lastIsBeginning = beginningIndexes[0];
          var lastIsBeginningI = 0;
          for(var i = 0; i < targetLen; ++i) {
            if(lastIsBeginning > i) {
              nextBeginningIndexes[i] = lastIsBeginning;
            } else {
              lastIsBeginning = beginningIndexes[++lastIsBeginningI];
              nextBeginningIndexes[i] = lastIsBeginning===undefined ? targetLen : lastIsBeginning;
            }
          }
          return nextBeginningIndexes
        },

        cleanup: cleanup,
        new: fuzzysortNew,
      };
      return fuzzysort
    } // fuzzysortNew

    // This stuff is outside fuzzysortNew, because it's shared with instances of fuzzysort.new()
    var isNode = typeof commonjsRequire !== 'undefined' && typeof window === 'undefined';
    // var MAX_INT = Number.MAX_SAFE_INTEGER
    // var MIN_INT = Number.MIN_VALUE
    var preparedCache = new Map();
    var preparedSearchCache = new Map();
    var noResults = []; noResults.total = 0;
    var matchesSimple = []; var matchesStrict = [];
    function cleanup() { preparedCache.clear(); preparedSearchCache.clear(); matchesSimple = []; matchesStrict = []; }
    function defaultScoreFn(a) {
      var max = -9007199254740991;
      for (var i = a.length - 1; i >= 0; --i) {
        var result = a[i]; if(result === null) continue
        var score = result.score;
        if(score > max) max = score;
      }
      if(max === -9007199254740991) return null
      return max
    }

    // prop = 'key'              2.5ms optimized for this case, seems to be about as fast as direct obj[prop]
    // prop = 'key1.key2'        10ms
    // prop = ['key1', 'key2']   27ms
    function getValue(obj, prop) {
      var tmp = obj[prop]; if(tmp !== undefined) return tmp
      var segs = prop;
      if(!Array.isArray(prop)) segs = prop.split('.');
      var len = segs.length;
      var i = -1;
      while (obj && (++i < len)) obj = obj[segs[i]];
      return obj
    }

    function isObj(x) { return typeof x === 'object' } // faster as a function

    // Hacked version of https://github.com/lemire/FastPriorityQueue.js
    var fastpriorityqueue=function(){var r=[],o=0,e={};function n(){for(var e=0,n=r[e],c=1;c<o;){var f=c+1;e=c,f<o&&r[f].score<r[c].score&&(e=f),r[e-1>>1]=r[e],c=1+(e<<1);}for(var a=e-1>>1;e>0&&n.score<r[a].score;a=(e=a)-1>>1)r[e]=r[a];r[e]=n;}return e.add=function(e){var n=o;r[o++]=e;for(var c=n-1>>1;n>0&&e.score<r[c].score;c=(n=c)-1>>1)r[n]=r[c];r[n]=e;},e.poll=function(){if(0!==o){var e=r[0];return r[0]=r[--o],n(),e}},e.peek=function(e){if(0!==o)return r[0]},e.replaceTop=function(o){r[0]=o,n();},e};
    var q = fastpriorityqueue(); // reuse this, except for async, it needs to make its own

    return fuzzysortNew()
    }); // UMD

    // TODO: (performance) wasm version!?

    // TODO: (performance) layout memory in an optimal way to go fast by avoiding cache misses

    // TODO: (performance) preparedCache is a memory leak

    // TODO: (like sublime) backslash === forwardslash

    // TODO: (performance) i have no idea how well optizmied the allowing typos algorithm is
    });

    /* node_modules\mdbsvelte\src\MDBDataTable.svelte generated by Svelte v3.59.2 */
    const file$g = "node_modules\\mdbsvelte\\src\\MDBDataTable.svelte";

    function get_each_context(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[31] = list[i];
    	child_ctx[33] = i;
    	return child_ctx;
    }

    function get_each_context_1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[34] = list[i];
    	return child_ctx;
    }

    // (120:8) {#each entriesOptions as option}
    function create_each_block_1(ctx) {
    	let option;
    	let t_value = /*option*/ ctx[34] + "";
    	let t;
    	let option_value_value;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = text(t_value);
    			option.__value = option_value_value = /*option*/ ctx[34];
    			option.value = option.__value;
    			add_location(option, file$g, 120, 10, 3100);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, option, anchor);
    			append_dev(option, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*entriesOptions*/ 4 && t_value !== (t_value = /*option*/ ctx[34] + "")) set_data_dev(t, t_value);

    			if (dirty[0] & /*entriesOptions*/ 4 && option_value_value !== (option_value_value = /*option*/ ctx[34])) {
    				prop_dev(option, "__value", option_value_value);
    				option.value = option.__value;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1.name,
    		type: "each",
    		source: "(120:8) {#each entriesOptions as option}",
    		ctx
    	});

    	return block;
    }

    // (112:6) <MDBInputGroup         material         prepend="Rows per page:"         type="select"         bind:value={entries}         class="m-0"         on:change={update_table}       >
    function create_default_slot_20$2(ctx) {
    	let each_1_anchor;
    	let each_value_1 = /*entriesOptions*/ ctx[2];
    	validate_each_argument(each_value_1);
    	let each_blocks = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
    	}

    	const block = {
    		c: function create() {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			each_1_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			for (let i = 0; i < each_blocks.length; i += 1) {
    				if (each_blocks[i]) {
    					each_blocks[i].m(target, anchor);
    				}
    			}

    			insert_dev(target, each_1_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*entriesOptions*/ 4) {
    				each_value_1 = /*entriesOptions*/ ctx[2];
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1(ctx, each_value_1, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block_1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value_1.length;
    			}
    		},
    		d: function destroy(detaching) {
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(each_1_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_20$2.name,
    		type: "slot",
    		source: "(112:6) <MDBInputGroup         material         prepend=\\\"Rows per page:\\\"         type=\\\"select\\\"         bind:value={entries}         class=\\\"m-0\\\"         on:change={update_table}       >",
    		ctx
    	});

    	return block;
    }

    // (111:4) <MDBCol md="3" class="pl-0">
    function create_default_slot_19$2(ctx) {
    	let mdbinputgroup;
    	let updating_value;
    	let current;

    	function mdbinputgroup_value_binding(value) {
    		/*mdbinputgroup_value_binding*/ ctx[21](value);
    	}

    	let mdbinputgroup_props = {
    		material: true,
    		prepend: "Rows per page:",
    		type: "select",
    		class: "m-0",
    		$$slots: { default: [create_default_slot_20$2] },
    		$$scope: { ctx }
    	};

    	if (/*entries*/ ctx[0] !== void 0) {
    		mdbinputgroup_props.value = /*entries*/ ctx[0];
    	}

    	mdbinputgroup = new MDBInputGroup({
    			props: mdbinputgroup_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(mdbinputgroup, 'value', mdbinputgroup_value_binding));
    	mdbinputgroup.$on("change", /*update_table*/ ctx[15]);

    	const block = {
    		c: function create() {
    			create_component(mdbinputgroup.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbinputgroup, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbinputgroup_changes = {};

    			if (dirty[0] & /*entriesOptions*/ 4 | dirty[1] & /*$$scope*/ 64) {
    				mdbinputgroup_changes.$$scope = { dirty, ctx };
    			}

    			if (!updating_value && dirty[0] & /*entries*/ 1) {
    				updating_value = true;
    				mdbinputgroup_changes.value = /*entries*/ ctx[0];
    				add_flush_callback(() => updating_value = false);
    			}

    			mdbinputgroup.$set(mdbinputgroup_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbinputgroup.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbinputgroup.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbinputgroup, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_19$2.name,
    		type: "slot",
    		source: "(111:4) <MDBCol md=\\\"3\\\" class=\\\"pl-0\\\">",
    		ctx
    	});

    	return block;
    }

    // (125:4) <MDBCol md="4">
    function create_default_slot_18$2(ctx) {
    	let mdbinputgroup;
    	let updating_value;
    	let current;

    	function mdbinputgroup_value_binding_1(value) {
    		/*mdbinputgroup_value_binding_1*/ ctx[22](value);
    	}

    	let mdbinputgroup_props = {
    		material: true,
    		hint: "Search",
    		class: "m-0"
    	};

    	if (/*query*/ ctx[5] !== void 0) {
    		mdbinputgroup_props.value = /*query*/ ctx[5];
    	}

    	mdbinputgroup = new MDBInputGroup({
    			props: mdbinputgroup_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(mdbinputgroup, 'value', mdbinputgroup_value_binding_1));
    	mdbinputgroup.$on("keyup", /*update_query*/ ctx[14]);

    	const block = {
    		c: function create() {
    			create_component(mdbinputgroup.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbinputgroup, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbinputgroup_changes = {};

    			if (!updating_value && dirty[0] & /*query*/ 32) {
    				updating_value = true;
    				mdbinputgroup_changes.value = /*query*/ ctx[5];
    				add_flush_callback(() => updating_value = false);
    			}

    			mdbinputgroup.$set(mdbinputgroup_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbinputgroup.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbinputgroup.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbinputgroup, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_18$2.name,
    		type: "slot",
    		source: "(125:4) <MDBCol md=\\\"4\\\">",
    		ctx
    	});

    	return block;
    }

    // (110:2) <MDBRow between>
    function create_default_slot_17$2(ctx) {
    	let mdbcol0;
    	let t;
    	let mdbcol1;
    	let current;

    	mdbcol0 = new MDBCol({
    			props: {
    				md: "3",
    				class: "pl-0",
    				$$slots: { default: [create_default_slot_19$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbcol1 = new MDBCol({
    			props: {
    				md: "4",
    				$$slots: { default: [create_default_slot_18$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbcol0.$$.fragment);
    			t = space();
    			create_component(mdbcol1.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbcol0, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(mdbcol1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbcol0_changes = {};

    			if (dirty[0] & /*entries, entriesOptions*/ 5 | dirty[1] & /*$$scope*/ 64) {
    				mdbcol0_changes.$$scope = { dirty, ctx };
    			}

    			mdbcol0.$set(mdbcol0_changes);
    			const mdbcol1_changes = {};

    			if (dirty[0] & /*query*/ 32 | dirty[1] & /*$$scope*/ 64) {
    				mdbcol1_changes.$$scope = { dirty, ctx };
    			}

    			mdbcol1.$set(mdbcol1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbcol0.$$.fragment, local);
    			transition_in(mdbcol1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbcol0.$$.fragment, local);
    			transition_out(mdbcol1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbcol0, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(mdbcol1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_17$2.name,
    		type: "slot",
    		source: "(110:2) <MDBRow between>",
    		ctx
    	});

    	return block;
    }

    // (141:14) {#if col === sort_column}
    function create_if_block$2(ctx) {
    	let mdbicon;
    	let current;

    	mdbicon = new MDBIcon({
    			props: { icon: /*icon*/ ctx[12] },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbicon.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbicon, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbicon_changes = {};
    			if (dirty[0] & /*icon*/ 4096) mdbicon_changes.icon = /*icon*/ ctx[12];
    			mdbicon.$set(mdbicon_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbicon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbicon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbicon, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$2.name,
    		type: "if",
    		source: "(141:14) {#if col === sort_column}",
    		ctx
    	});

    	return block;
    }

    // (139:10) {#each columns as col, i}
    function create_each_block(ctx) {
    	let th;
    	let t0;
    	let html_tag;
    	let raw_value = /*col*/ ctx[31] + "";
    	let t1;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block = /*col*/ ctx[31] === /*sort_column*/ ctx[11] && create_if_block$2(ctx);

    	function click_handler() {
    		return /*click_handler*/ ctx[23](/*col*/ ctx[31], /*i*/ ctx[33]);
    	}

    	const block = {
    		c: function create() {
    			th = element("th");
    			if (if_block) if_block.c();
    			t0 = space();
    			html_tag = new HtmlTag(false);
    			t1 = space();
    			html_tag.a = t1;
    			add_location(th, file$g, 139, 12, 3550);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, th, anchor);
    			if (if_block) if_block.m(th, null);
    			append_dev(th, t0);
    			html_tag.m(raw_value, th);
    			append_dev(th, t1);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(th, "click", click_handler, false, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (/*col*/ ctx[31] === /*sort_column*/ ctx[11]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty[0] & /*columns, sort_column*/ 2056) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$2(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(th, t0);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}

    			if ((!current || dirty[0] & /*columns*/ 8) && raw_value !== (raw_value = /*col*/ ctx[31] + "")) html_tag.p(raw_value);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(th);
    			if (if_block) if_block.d();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block.name,
    		type: "each",
    		source: "(139:10) {#each columns as col, i}",
    		ctx
    	});

    	return block;
    }

    // (137:6) <MDBTableHead {...tableHeadProps}>
    function create_default_slot_16$3(ctx) {
    	let tr;
    	let current;
    	let each_value = /*columns*/ ctx[3];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			tr = element("tr");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			add_location(tr, file$g, 137, 8, 3497);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, tr, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				if (each_blocks[i]) {
    					each_blocks[i].m(tr, null);
    				}
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*sort, columns, icon, sort_column*/ 137224) {
    				each_value = /*columns*/ ctx[3];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(tr, null);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(tr);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_16$3.name,
    		type: "slot",
    		source: "(137:6) <MDBTableHead {...tableHeadProps}>",
    		ctx
    	});

    	return block;
    }

    // (136:4) <MDBTable {...props} class={elementClasses}>
    function create_default_slot_15$3(ctx) {
    	let mdbtablehead;
    	let t;
    	let mdbtablebody;
    	let updating_data;
    	let current;
    	const mdbtablehead_spread_levels = [/*tableHeadProps*/ ctx[4]];

    	let mdbtablehead_props = {
    		$$slots: { default: [create_default_slot_16$3] },
    		$$scope: { ctx }
    	};

    	for (let i = 0; i < mdbtablehead_spread_levels.length; i += 1) {
    		mdbtablehead_props = assign(mdbtablehead_props, mdbtablehead_spread_levels[i]);
    	}

    	mdbtablehead = new MDBTableHead({
    			props: mdbtablehead_props,
    			$$inline: true
    		});

    	function mdbtablebody_data_binding(value) {
    		/*mdbtablebody_data_binding*/ ctx[24](value);
    	}

    	let mdbtablebody_props = {};

    	if (/*table_data*/ ctx[9] !== void 0) {
    		mdbtablebody_props.data = /*table_data*/ ctx[9];
    	}

    	mdbtablebody = new MDBTableBody({
    			props: mdbtablebody_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(mdbtablebody, 'data', mdbtablebody_data_binding));

    	const block = {
    		c: function create() {
    			create_component(mdbtablehead.$$.fragment);
    			t = space();
    			create_component(mdbtablebody.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbtablehead, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(mdbtablebody, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbtablehead_changes = (dirty[0] & /*tableHeadProps*/ 16)
    			? get_spread_update(mdbtablehead_spread_levels, [get_spread_object(/*tableHeadProps*/ ctx[4])])
    			: {};

    			if (dirty[0] & /*columns, icon, sort_column*/ 6152 | dirty[1] & /*$$scope*/ 64) {
    				mdbtablehead_changes.$$scope = { dirty, ctx };
    			}

    			mdbtablehead.$set(mdbtablehead_changes);
    			const mdbtablebody_changes = {};

    			if (!updating_data && dirty[0] & /*table_data*/ 512) {
    				updating_data = true;
    				mdbtablebody_changes.data = /*table_data*/ ctx[9];
    				add_flush_callback(() => updating_data = false);
    			}

    			mdbtablebody.$set(mdbtablebody_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbtablehead.$$.fragment, local);
    			transition_in(mdbtablebody.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbtablehead.$$.fragment, local);
    			transition_out(mdbtablebody.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbtablehead, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(mdbtablebody, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_15$3.name,
    		type: "slot",
    		source: "(136:4) <MDBTable {...props} class={elementClasses}>",
    		ctx
    	});

    	return block;
    }

    // (135:2) <MDBRow>
    function create_default_slot_14$3(ctx) {
    	let mdbtable;
    	let current;
    	const mdbtable_spread_levels = [/*props*/ ctx[13], { class: /*elementClasses*/ ctx[6] }];

    	let mdbtable_props = {
    		$$slots: { default: [create_default_slot_15$3] },
    		$$scope: { ctx }
    	};

    	for (let i = 0; i < mdbtable_spread_levels.length; i += 1) {
    		mdbtable_props = assign(mdbtable_props, mdbtable_spread_levels[i]);
    	}

    	mdbtable = new MDBTable({ props: mdbtable_props, $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(mdbtable.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbtable, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbtable_changes = (dirty[0] & /*props, elementClasses*/ 8256)
    			? get_spread_update(mdbtable_spread_levels, [
    					dirty[0] & /*props*/ 8192 && get_spread_object(/*props*/ ctx[13]),
    					dirty[0] & /*elementClasses*/ 64 && { class: /*elementClasses*/ ctx[6] }
    				])
    			: {};

    			if (dirty[0] & /*table_data, tableHeadProps, columns, icon, sort_column*/ 6680 | dirty[1] & /*$$scope*/ 64) {
    				mdbtable_changes.$$scope = { dirty, ctx };
    			}

    			mdbtable.$set(mdbtable_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbtable.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbtable.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbtable, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_14$3.name,
    		type: "slot",
    		source: "(135:2) <MDBRow>",
    		ctx
    	});

    	return block;
    }

    // (155:8) <MDBPageNav noWaves>
    function create_default_slot_13$3(ctx) {
    	let t0;
    	let t1_value = (/*page*/ ctx[8] - 1) * /*entries*/ ctx[0] + 1 + "";
    	let t1;
    	let t2;
    	let t3_value = Math.min(/*page*/ ctx[8] * /*entries*/ ctx[0], /*data*/ ctx[1].length, /*total_data*/ ctx[7].length) + "";
    	let t3;
    	let t4;
    	let t5_value = /*total_data*/ ctx[7].length + "";
    	let t5;
    	let t6;

    	const block = {
    		c: function create() {
    			t0 = text("Showing ");
    			t1 = text(t1_value);
    			t2 = text("-");
    			t3 = text(t3_value);
    			t4 = text("\n          of ");
    			t5 = text(t5_value);
    			t6 = text("\n          items");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t0, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, t4, anchor);
    			insert_dev(target, t5, anchor);
    			insert_dev(target, t6, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*page, entries*/ 257 && t1_value !== (t1_value = (/*page*/ ctx[8] - 1) * /*entries*/ ctx[0] + 1 + "")) set_data_dev(t1, t1_value);
    			if (dirty[0] & /*page, entries, data, total_data*/ 387 && t3_value !== (t3_value = Math.min(/*page*/ ctx[8] * /*entries*/ ctx[0], /*data*/ ctx[1].length, /*total_data*/ ctx[7].length) + "")) set_data_dev(t3, t3_value);
    			if (dirty[0] & /*total_data*/ 128 && t5_value !== (t5_value = /*total_data*/ ctx[7].length + "")) set_data_dev(t5, t5_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(t4);
    			if (detaching) detach_dev(t5);
    			if (detaching) detach_dev(t6);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_13$3.name,
    		type: "slot",
    		source: "(155:8) <MDBPageNav noWaves>",
    		ctx
    	});

    	return block;
    }

    // (154:6) <MDBPageItem>
    function create_default_slot_12$3(ctx) {
    	let mdbpagenav;
    	let current;

    	mdbpagenav = new MDBPageNav({
    			props: {
    				noWaves: true,
    				$$slots: { default: [create_default_slot_13$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbpagenav.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbpagenav, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbpagenav_changes = {};

    			if (dirty[0] & /*total_data, page, entries, data*/ 387 | dirty[1] & /*$$scope*/ 64) {
    				mdbpagenav_changes.$$scope = { dirty, ctx };
    			}

    			mdbpagenav.$set(mdbpagenav_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbpagenav.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbpagenav.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbpagenav, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_12$3.name,
    		type: "slot",
    		source: "(154:6) <MDBPageItem>",
    		ctx
    	});

    	return block;
    }

    // (166:8) <MDBPageNav aria-label="Previous" on:click={() => go_to_page(1)}>
    function create_default_slot_11$4(ctx) {
    	let mdbicon;
    	let current;

    	mdbicon = new MDBIcon({
    			props: { fas: true, icon: "angle-double-left" },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbicon.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbicon, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbicon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbicon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbicon, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_11$4.name,
    		type: "slot",
    		source: "(166:8) <MDBPageNav aria-label=\\\"Previous\\\" on:click={() => go_to_page(1)}>",
    		ctx
    	});

    	return block;
    }

    // (165:6) <MDBPageItem disabled={page === 1}>
    function create_default_slot_10$4(ctx) {
    	let mdbpagenav;
    	let current;

    	mdbpagenav = new MDBPageNav({
    			props: {
    				"aria-label": "Previous",
    				$$slots: { default: [create_default_slot_11$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbpagenav.$on("click", /*click_handler_1*/ ctx[25]);

    	const block = {
    		c: function create() {
    			create_component(mdbpagenav.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbpagenav, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbpagenav_changes = {};

    			if (dirty[1] & /*$$scope*/ 64) {
    				mdbpagenav_changes.$$scope = { dirty, ctx };
    			}

    			mdbpagenav.$set(mdbpagenav_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbpagenav.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbpagenav.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbpagenav, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_10$4.name,
    		type: "slot",
    		source: "(165:6) <MDBPageItem disabled={page === 1}>",
    		ctx
    	});

    	return block;
    }

    // (171:8) <MDBPageNav aria-label="Previous" on:click={() => go_to_page(page - 1)}>
    function create_default_slot_9$4(ctx) {
    	let mdbicon;
    	let current;

    	mdbicon = new MDBIcon({
    			props: { fas: true, icon: "chevron-left" },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbicon.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbicon, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbicon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbicon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbicon, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_9$4.name,
    		type: "slot",
    		source: "(171:8) <MDBPageNav aria-label=\\\"Previous\\\" on:click={() => go_to_page(page - 1)}>",
    		ctx
    	});

    	return block;
    }

    // (170:6) <MDBPageItem disabled={page === 1}>
    function create_default_slot_8$4(ctx) {
    	let mdbpagenav;
    	let current;

    	mdbpagenav = new MDBPageNav({
    			props: {
    				"aria-label": "Previous",
    				$$slots: { default: [create_default_slot_9$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbpagenav.$on("click", /*click_handler_2*/ ctx[26]);

    	const block = {
    		c: function create() {
    			create_component(mdbpagenav.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbpagenav, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbpagenav_changes = {};

    			if (dirty[1] & /*$$scope*/ 64) {
    				mdbpagenav_changes.$$scope = { dirty, ctx };
    			}

    			mdbpagenav.$set(mdbpagenav_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbpagenav.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbpagenav.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbpagenav, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_8$4.name,
    		type: "slot",
    		source: "(170:6) <MDBPageItem disabled={page === 1}>",
    		ctx
    	});

    	return block;
    }

    // (176:8) <MDBPageNav>
    function create_default_slot_7$4(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text(/*page*/ ctx[8]);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*page*/ 256) set_data_dev(t, /*page*/ ctx[8]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_7$4.name,
    		type: "slot",
    		source: "(176:8) <MDBPageNav>",
    		ctx
    	});

    	return block;
    }

    // (175:6) <MDBPageItem>
    function create_default_slot_6$4(ctx) {
    	let mdbpagenav;
    	let current;

    	mdbpagenav = new MDBPageNav({
    			props: {
    				$$slots: { default: [create_default_slot_7$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbpagenav.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbpagenav, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbpagenav_changes = {};

    			if (dirty[0] & /*page*/ 256 | dirty[1] & /*$$scope*/ 64) {
    				mdbpagenav_changes.$$scope = { dirty, ctx };
    			}

    			mdbpagenav.$set(mdbpagenav_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbpagenav.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbpagenav.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbpagenav, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_6$4.name,
    		type: "slot",
    		source: "(175:6) <MDBPageItem>",
    		ctx
    	});

    	return block;
    }

    // (179:8) <MDBPageNav aria-label="Previous" on:click={() => go_to_page(page + 1)}>
    function create_default_slot_5$5(ctx) {
    	let mdbicon;
    	let current;

    	mdbicon = new MDBIcon({
    			props: { fas: true, icon: "chevron-right" },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbicon.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbicon, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbicon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbicon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbicon, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_5$5.name,
    		type: "slot",
    		source: "(179:8) <MDBPageNav aria-label=\\\"Previous\\\" on:click={() => go_to_page(page + 1)}>",
    		ctx
    	});

    	return block;
    }

    // (178:6) <MDBPageItem disabled={page === lastPage}>
    function create_default_slot_4$5(ctx) {
    	let mdbpagenav;
    	let current;

    	mdbpagenav = new MDBPageNav({
    			props: {
    				"aria-label": "Previous",
    				$$slots: { default: [create_default_slot_5$5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbpagenav.$on("click", /*click_handler_3*/ ctx[27]);

    	const block = {
    		c: function create() {
    			create_component(mdbpagenav.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbpagenav, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbpagenav_changes = {};

    			if (dirty[1] & /*$$scope*/ 64) {
    				mdbpagenav_changes.$$scope = { dirty, ctx };
    			}

    			mdbpagenav.$set(mdbpagenav_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbpagenav.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbpagenav.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbpagenav, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4$5.name,
    		type: "slot",
    		source: "(178:6) <MDBPageItem disabled={page === lastPage}>",
    		ctx
    	});

    	return block;
    }

    // (184:8) <MDBPageNav aria-label="Previous" on:click={() => go_to_page(lastPage)}>
    function create_default_slot_3$6(ctx) {
    	let mdbicon;
    	let current;

    	mdbicon = new MDBIcon({
    			props: { fas: true, icon: "angle-double-right" },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbicon.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbicon, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbicon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbicon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbicon, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$6.name,
    		type: "slot",
    		source: "(184:8) <MDBPageNav aria-label=\\\"Previous\\\" on:click={() => go_to_page(lastPage)}>",
    		ctx
    	});

    	return block;
    }

    // (183:6) <MDBPageItem disabled={page === lastPage}>
    function create_default_slot_2$6(ctx) {
    	let mdbpagenav;
    	let current;

    	mdbpagenav = new MDBPageNav({
    			props: {
    				"aria-label": "Previous",
    				$$slots: { default: [create_default_slot_3$6] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbpagenav.$on("click", /*click_handler_4*/ ctx[28]);

    	const block = {
    		c: function create() {
    			create_component(mdbpagenav.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbpagenav, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbpagenav_changes = {};

    			if (dirty[1] & /*$$scope*/ 64) {
    				mdbpagenav_changes.$$scope = { dirty, ctx };
    			}

    			mdbpagenav.$set(mdbpagenav_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbpagenav.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbpagenav.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbpagenav, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$6.name,
    		type: "slot",
    		source: "(183:6) <MDBPageItem disabled={page === lastPage}>",
    		ctx
    	});

    	return block;
    }

    // (153:4) <MDBPagination>
    function create_default_slot_1$6(ctx) {
    	let mdbpageitem0;
    	let t0;
    	let mdbpageitem1;
    	let t1;
    	let mdbpageitem2;
    	let t2;
    	let mdbpageitem3;
    	let t3;
    	let mdbpageitem4;
    	let t4;
    	let mdbpageitem5;
    	let current;

    	mdbpageitem0 = new MDBPageItem({
    			props: {
    				$$slots: { default: [create_default_slot_12$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbpageitem1 = new MDBPageItem({
    			props: {
    				disabled: /*page*/ ctx[8] === 1,
    				$$slots: { default: [create_default_slot_10$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbpageitem2 = new MDBPageItem({
    			props: {
    				disabled: /*page*/ ctx[8] === 1,
    				$$slots: { default: [create_default_slot_8$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbpageitem3 = new MDBPageItem({
    			props: {
    				$$slots: { default: [create_default_slot_6$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbpageitem4 = new MDBPageItem({
    			props: {
    				disabled: /*page*/ ctx[8] === /*lastPage*/ ctx[10],
    				$$slots: { default: [create_default_slot_4$5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbpageitem5 = new MDBPageItem({
    			props: {
    				disabled: /*page*/ ctx[8] === /*lastPage*/ ctx[10],
    				$$slots: { default: [create_default_slot_2$6] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbpageitem0.$$.fragment);
    			t0 = space();
    			create_component(mdbpageitem1.$$.fragment);
    			t1 = space();
    			create_component(mdbpageitem2.$$.fragment);
    			t2 = space();
    			create_component(mdbpageitem3.$$.fragment);
    			t3 = space();
    			create_component(mdbpageitem4.$$.fragment);
    			t4 = space();
    			create_component(mdbpageitem5.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbpageitem0, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(mdbpageitem1, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(mdbpageitem2, target, anchor);
    			insert_dev(target, t2, anchor);
    			mount_component(mdbpageitem3, target, anchor);
    			insert_dev(target, t3, anchor);
    			mount_component(mdbpageitem4, target, anchor);
    			insert_dev(target, t4, anchor);
    			mount_component(mdbpageitem5, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbpageitem0_changes = {};

    			if (dirty[0] & /*total_data, page, entries, data*/ 387 | dirty[1] & /*$$scope*/ 64) {
    				mdbpageitem0_changes.$$scope = { dirty, ctx };
    			}

    			mdbpageitem0.$set(mdbpageitem0_changes);
    			const mdbpageitem1_changes = {};
    			if (dirty[0] & /*page*/ 256) mdbpageitem1_changes.disabled = /*page*/ ctx[8] === 1;

    			if (dirty[1] & /*$$scope*/ 64) {
    				mdbpageitem1_changes.$$scope = { dirty, ctx };
    			}

    			mdbpageitem1.$set(mdbpageitem1_changes);
    			const mdbpageitem2_changes = {};
    			if (dirty[0] & /*page*/ 256) mdbpageitem2_changes.disabled = /*page*/ ctx[8] === 1;

    			if (dirty[0] & /*page*/ 256 | dirty[1] & /*$$scope*/ 64) {
    				mdbpageitem2_changes.$$scope = { dirty, ctx };
    			}

    			mdbpageitem2.$set(mdbpageitem2_changes);
    			const mdbpageitem3_changes = {};

    			if (dirty[0] & /*page*/ 256 | dirty[1] & /*$$scope*/ 64) {
    				mdbpageitem3_changes.$$scope = { dirty, ctx };
    			}

    			mdbpageitem3.$set(mdbpageitem3_changes);
    			const mdbpageitem4_changes = {};
    			if (dirty[0] & /*page, lastPage*/ 1280) mdbpageitem4_changes.disabled = /*page*/ ctx[8] === /*lastPage*/ ctx[10];

    			if (dirty[0] & /*page*/ 256 | dirty[1] & /*$$scope*/ 64) {
    				mdbpageitem4_changes.$$scope = { dirty, ctx };
    			}

    			mdbpageitem4.$set(mdbpageitem4_changes);
    			const mdbpageitem5_changes = {};
    			if (dirty[0] & /*page, lastPage*/ 1280) mdbpageitem5_changes.disabled = /*page*/ ctx[8] === /*lastPage*/ ctx[10];

    			if (dirty[0] & /*lastPage*/ 1024 | dirty[1] & /*$$scope*/ 64) {
    				mdbpageitem5_changes.$$scope = { dirty, ctx };
    			}

    			mdbpageitem5.$set(mdbpageitem5_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbpageitem0.$$.fragment, local);
    			transition_in(mdbpageitem1.$$.fragment, local);
    			transition_in(mdbpageitem2.$$.fragment, local);
    			transition_in(mdbpageitem3.$$.fragment, local);
    			transition_in(mdbpageitem4.$$.fragment, local);
    			transition_in(mdbpageitem5.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbpageitem0.$$.fragment, local);
    			transition_out(mdbpageitem1.$$.fragment, local);
    			transition_out(mdbpageitem2.$$.fragment, local);
    			transition_out(mdbpageitem3.$$.fragment, local);
    			transition_out(mdbpageitem4.$$.fragment, local);
    			transition_out(mdbpageitem5.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbpageitem0, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(mdbpageitem1, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(mdbpageitem2, detaching);
    			if (detaching) detach_dev(t2);
    			destroy_component(mdbpageitem3, detaching);
    			if (detaching) detach_dev(t3);
    			destroy_component(mdbpageitem4, detaching);
    			if (detaching) detach_dev(t4);
    			destroy_component(mdbpageitem5, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$6.name,
    		type: "slot",
    		source: "(153:4) <MDBPagination>",
    		ctx
    	});

    	return block;
    }

    // (152:2) <MDBRow end>
    function create_default_slot$7(ctx) {
    	let mdbpagination;
    	let current;

    	mdbpagination = new MDBPagination({
    			props: {
    				$$slots: { default: [create_default_slot_1$6] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbpagination.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbpagination, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbpagination_changes = {};

    			if (dirty[0] & /*page, lastPage, total_data, entries, data*/ 1411 | dirty[1] & /*$$scope*/ 64) {
    				mdbpagination_changes.$$scope = { dirty, ctx };
    			}

    			mdbpagination.$set(mdbpagination_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbpagination.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbpagination.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbpagination, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$7.name,
    		type: "slot",
    		source: "(152:2) <MDBRow end>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$i(ctx) {
    	let div;
    	let mdbrow0;
    	let t0;
    	let mdbrow1;
    	let t1;
    	let mdbrow2;
    	let current;

    	mdbrow0 = new MDBRow({
    			props: {
    				between: true,
    				$$slots: { default: [create_default_slot_17$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbrow1 = new MDBRow({
    			props: {
    				$$slots: { default: [create_default_slot_14$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbrow2 = new MDBRow({
    			props: {
    				end: true,
    				$$slots: { default: [create_default_slot$7] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(mdbrow0.$$.fragment);
    			t0 = space();
    			create_component(mdbrow1.$$.fragment);
    			t1 = space();
    			create_component(mdbrow2.$$.fragment);
    			attr_dev(div, "class", "mdb-datatable dt-bootstrap4");
    			add_location(div, file$g, 108, 0, 2772);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(mdbrow0, div, null);
    			append_dev(div, t0);
    			mount_component(mdbrow1, div, null);
    			append_dev(div, t1);
    			mount_component(mdbrow2, div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbrow0_changes = {};

    			if (dirty[0] & /*query, entries, entriesOptions*/ 37 | dirty[1] & /*$$scope*/ 64) {
    				mdbrow0_changes.$$scope = { dirty, ctx };
    			}

    			mdbrow0.$set(mdbrow0_changes);
    			const mdbrow1_changes = {};

    			if (dirty[0] & /*elementClasses, table_data, tableHeadProps, columns, icon, sort_column*/ 6744 | dirty[1] & /*$$scope*/ 64) {
    				mdbrow1_changes.$$scope = { dirty, ctx };
    			}

    			mdbrow1.$set(mdbrow1_changes);
    			const mdbrow2_changes = {};

    			if (dirty[0] & /*page, lastPage, total_data, entries, data*/ 1411 | dirty[1] & /*$$scope*/ 64) {
    				mdbrow2_changes.$$scope = { dirty, ctx };
    			}

    			mdbrow2.$set(mdbrow2_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbrow0.$$.fragment, local);
    			transition_in(mdbrow1.$$.fragment, local);
    			transition_in(mdbrow2.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbrow0.$$.fragment, local);
    			transition_out(mdbrow1.$$.fragment, local);
    			transition_out(mdbrow2.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(mdbrow0);
    			destroy_component(mdbrow1);
    			destroy_component(mdbrow2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$i.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$i($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('MDBDataTable', slots, []);
    	const forwardEvents = forwardEventsBuilder(current_component);
    	let query;
    	let { class: className = '' } = $$props;
    	let elementClasses;
    	let { color } = $$props;
    	let { data } = $$props;
    	let { entries = 25 } = $$props;
    	let { entriesOptions = [25, 50, 100] } = $$props;
    	let { columns = [] } = $$props;
    	let { tableHeadProps = {} } = $$props;
    	let { fuzzy_search = true } = $$props;
    	let total_data = [];
    	const props = clean$1($$props, ['color', 'data', 'entries', 'columns', 'entriesOptions', 'tableHeadProps']);
    	elementClasses = clsx(className, color);
    	let page = 1;
    	let table_data, lastPage, sort_column;
    	let icon = 'arrow-up';

    	function update_query() {
    		if (query && table_data) {
    			$$invalidate(7, total_data = []);

    			if (fuzzy_search) {
    				let res = fuzzysort.go(query, data, { keys: Object.keys(data[0]) });

    				res.map(d => {
    					total_data.push(d.obj);
    				});
    			} else {
    				for (let i = 0; i < data.length; i++) {
    					let cols = Object.keys(data[0]);

    					for (let name in cols) {
    						if (data[i][cols[name]].toLowerCase().includes(query.toLowerCase())) {
    							total_data.push(data[i]);
    						}
    					}
    				}
    			}

    			$$invalidate(8, page = 1);
    		} else {
    			$$invalidate(7, total_data = [...data]);
    		}

    		update_table();
    	}

    	function update_table() {
    		$$invalidate(10, lastPage = Math.ceil(data.length / entries));
    		$$invalidate(9, table_data = total_data.slice((page - 1) * entries, page * entries));
    	}

    	function go_to_page(p) {
    		$$invalidate(8, page = p);
    		update_table();
    	}

    	function sort(col, ind) {
    		$$invalidate(11, sort_column = col);
    		$$invalidate(8, page = 1);
    		let sort_key = Object.keys(total_data[0])[ind];

    		if (icon === 'arrow-up') {
    			$$invalidate(12, icon = 'arrow-down');

    			$$invalidate(7, total_data = total_data.sort((a, b) => {
    				return -1 * ('' + a[sort_key]).localeCompare(b[sort_key]);
    			}));
    		} else {
    			$$invalidate(12, icon = 'arrow-up');

    			$$invalidate(7, total_data = total_data.sort((a, b) => {
    				return ('' + a[sort_key]).localeCompare(b[sort_key]);
    			}));
    		}

    		update_table();
    	}

    	$$self.$$.on_mount.push(function () {
    		if (color === undefined && !('color' in $$props || $$self.$$.bound[$$self.$$.props['color']])) {
    			console.warn("<MDBDataTable> was created without expected prop 'color'");
    		}

    		if (data === undefined && !('data' in $$props || $$self.$$.bound[$$self.$$.props['data']])) {
    			console.warn("<MDBDataTable> was created without expected prop 'data'");
    		}
    	});

    	function mdbinputgroup_value_binding(value) {
    		entries = value;
    		$$invalidate(0, entries);
    	}

    	function mdbinputgroup_value_binding_1(value) {
    		query = value;
    		$$invalidate(5, query);
    	}

    	const click_handler = (col, i) => sort(col, i);

    	function mdbtablebody_data_binding(value) {
    		table_data = value;
    		$$invalidate(9, table_data);
    	}

    	const click_handler_1 = () => go_to_page(1);
    	const click_handler_2 = () => go_to_page(page - 1);
    	const click_handler_3 = () => go_to_page(page + 1);
    	const click_handler_4 = () => go_to_page(lastPage);

    	$$self.$$set = $$new_props => {
    		$$invalidate(30, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ('class' in $$new_props) $$invalidate(18, className = $$new_props.class);
    		if ('color' in $$new_props) $$invalidate(19, color = $$new_props.color);
    		if ('data' in $$new_props) $$invalidate(1, data = $$new_props.data);
    		if ('entries' in $$new_props) $$invalidate(0, entries = $$new_props.entries);
    		if ('entriesOptions' in $$new_props) $$invalidate(2, entriesOptions = $$new_props.entriesOptions);
    		if ('columns' in $$new_props) $$invalidate(3, columns = $$new_props.columns);
    		if ('tableHeadProps' in $$new_props) $$invalidate(4, tableHeadProps = $$new_props.tableHeadProps);
    		if ('fuzzy_search' in $$new_props) $$invalidate(20, fuzzy_search = $$new_props.fuzzy_search);
    	};

    	$$self.$capture_state = () => ({
    		clean: clean$1,
    		clsx,
    		forwardEventsBuilder,
    		current_component,
    		forwardEvents,
    		MDBTableHead,
    		MDBTableBody,
    		MDBTable,
    		MDBRow,
    		MDBCol,
    		MDBPagination,
    		MDBPageItem,
    		MDBPageNav,
    		MDBInputGroup,
    		MDBIcon,
    		query,
    		fuzzysort,
    		className,
    		elementClasses,
    		color,
    		data,
    		entries,
    		entriesOptions,
    		columns,
    		tableHeadProps,
    		fuzzy_search,
    		total_data,
    		props,
    		page,
    		table_data,
    		lastPage,
    		sort_column,
    		icon,
    		update_query,
    		update_table,
    		go_to_page,
    		sort
    	});

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(30, $$props = assign(assign({}, $$props), $$new_props));
    		if ('query' in $$props) $$invalidate(5, query = $$new_props.query);
    		if ('className' in $$props) $$invalidate(18, className = $$new_props.className);
    		if ('elementClasses' in $$props) $$invalidate(6, elementClasses = $$new_props.elementClasses);
    		if ('color' in $$props) $$invalidate(19, color = $$new_props.color);
    		if ('data' in $$props) $$invalidate(1, data = $$new_props.data);
    		if ('entries' in $$props) $$invalidate(0, entries = $$new_props.entries);
    		if ('entriesOptions' in $$props) $$invalidate(2, entriesOptions = $$new_props.entriesOptions);
    		if ('columns' in $$props) $$invalidate(3, columns = $$new_props.columns);
    		if ('tableHeadProps' in $$props) $$invalidate(4, tableHeadProps = $$new_props.tableHeadProps);
    		if ('fuzzy_search' in $$props) $$invalidate(20, fuzzy_search = $$new_props.fuzzy_search);
    		if ('total_data' in $$props) $$invalidate(7, total_data = $$new_props.total_data);
    		if ('page' in $$props) $$invalidate(8, page = $$new_props.page);
    		if ('table_data' in $$props) $$invalidate(9, table_data = $$new_props.table_data);
    		if ('lastPage' in $$props) $$invalidate(10, lastPage = $$new_props.lastPage);
    		if ('sort_column' in $$props) $$invalidate(11, sort_column = $$new_props.sort_column);
    		if ('icon' in $$props) $$invalidate(12, icon = $$new_props.icon);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*data*/ 2) {
    			if (data) {
    				$$invalidate(7, total_data = [...data]);
    				update_table();
    			}
    		}
    	};

    	$$props = exclude_internal_props($$props);

    	return [
    		entries,
    		data,
    		entriesOptions,
    		columns,
    		tableHeadProps,
    		query,
    		elementClasses,
    		total_data,
    		page,
    		table_data,
    		lastPage,
    		sort_column,
    		icon,
    		props,
    		update_query,
    		update_table,
    		go_to_page,
    		sort,
    		className,
    		color,
    		fuzzy_search,
    		mdbinputgroup_value_binding,
    		mdbinputgroup_value_binding_1,
    		click_handler,
    		mdbtablebody_data_binding,
    		click_handler_1,
    		click_handler_2,
    		click_handler_3,
    		click_handler_4
    	];
    }

    class MDBDataTable extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(
    			this,
    			options,
    			instance$i,
    			create_fragment$i,
    			safe_not_equal,
    			{
    				class: 18,
    				color: 19,
    				data: 1,
    				entries: 0,
    				entriesOptions: 2,
    				columns: 3,
    				tableHeadProps: 4,
    				fuzzy_search: 20
    			},
    			null,
    			[-1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "MDBDataTable",
    			options,
    			id: create_fragment$i.name
    		});
    	}

    	get class() {
    		throw new Error("<MDBDataTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<MDBDataTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get color() {
    		throw new Error("<MDBDataTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set color(value) {
    		throw new Error("<MDBDataTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get data() {
    		throw new Error("<MDBDataTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set data(value) {
    		throw new Error("<MDBDataTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get entries() {
    		throw new Error("<MDBDataTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set entries(value) {
    		throw new Error("<MDBDataTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get entriesOptions() {
    		throw new Error("<MDBDataTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set entriesOptions(value) {
    		throw new Error("<MDBDataTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get columns() {
    		throw new Error("<MDBDataTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set columns(value) {
    		throw new Error("<MDBDataTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get tableHeadProps() {
    		throw new Error("<MDBDataTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set tableHeadProps(value) {
    		throw new Error("<MDBDataTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get fuzzy_search() {
    		throw new Error("<MDBDataTable>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set fuzzy_search(value) {
    		throw new Error("<MDBDataTable>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\components\pages\sections\TableSection2.svelte generated by Svelte v3.59.2 */

    // (495:6) <MDBCardBody>
    function create_default_slot_3$5(ctx) {
    	let mdbdatatable;
    	let current;

    	mdbdatatable = new MDBDataTable({
    			props: {
    				responsive: true,
    				hover: true,
    				columns: /*columns*/ ctx[0],
    				data: /*data*/ ctx[1],
    				tableHeadProps: {
    					color: 'light-blue lighten-4',
    					textWhite: false
    				},
    				entriesOptions: [5, 10, 20],
    				entries: 5,
    				pagesAmount: 4
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbdatatable.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbdatatable, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbdatatable.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbdatatable.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbdatatable, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$5.name,
    		type: "slot",
    		source: "(495:6) <MDBCardBody>",
    		ctx
    	});

    	return block;
    }

    // (494:4) <MDBCard>
    function create_default_slot_2$5(ctx) {
    	let mdbcardbody;
    	let current;

    	mdbcardbody = new MDBCardBody({
    			props: {
    				$$slots: { default: [create_default_slot_3$5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbcardbody.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbcardbody, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbcardbody_changes = {};

    			if (dirty & /*$$scope*/ 4) {
    				mdbcardbody_changes.$$scope = { dirty, ctx };
    			}

    			mdbcardbody.$set(mdbcardbody_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbcardbody.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbcardbody.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbcardbody, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$5.name,
    		type: "slot",
    		source: "(494:4) <MDBCard>",
    		ctx
    	});

    	return block;
    }

    // (493:2) <MDBCol md="12">
    function create_default_slot_1$5(ctx) {
    	let mdbcard;
    	let current;

    	mdbcard = new MDBCard({
    			props: {
    				$$slots: { default: [create_default_slot_2$5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbcard.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbcard, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbcard_changes = {};

    			if (dirty & /*$$scope*/ 4) {
    				mdbcard_changes.$$scope = { dirty, ctx };
    			}

    			mdbcard.$set(mdbcard_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbcard.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbcard.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbcard, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$5.name,
    		type: "slot",
    		source: "(493:2) <MDBCol md=\\\"12\\\">",
    		ctx
    	});

    	return block;
    }

    // (492:0) <MDBRow class="mb-4">
    function create_default_slot$6(ctx) {
    	let mdbcol;
    	let current;

    	mdbcol = new MDBCol({
    			props: {
    				md: "12",
    				$$slots: { default: [create_default_slot_1$5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbcol.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbcol, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbcol_changes = {};

    			if (dirty & /*$$scope*/ 4) {
    				mdbcol_changes.$$scope = { dirty, ctx };
    			}

    			mdbcol.$set(mdbcol_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbcol.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbcol.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbcol, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$6.name,
    		type: "slot",
    		source: "(492:0) <MDBRow class=\\\"mb-4\\\">",
    		ctx
    	});

    	return block;
    }

    function create_fragment$h(ctx) {
    	let mdbrow;
    	let current;

    	mdbrow = new MDBRow({
    			props: {
    				class: "mb-4",
    				$$slots: { default: [create_default_slot$6] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbrow.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbrow, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const mdbrow_changes = {};

    			if (dirty & /*$$scope*/ 4) {
    				mdbrow_changes.$$scope = { dirty, ctx };
    			}

    			mdbrow.$set(mdbrow_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbrow.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbrow.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbrow, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$h.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$h($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('TableSection2', slots, []);
    	let columns = ['Name', 'Position', 'Office', 'Age', 'Start date', 'Salary'];

    	let data = [
    		{
    			name: 'Tiger Nixon',
    			position: 'System Architect',
    			office: 'Edinburgh',
    			age: '61',
    			date: '2011/04/25',
    			salary: '$320'
    		},
    		{
    			name: 'Garrett Winters',
    			position: 'Accountant',
    			office: 'Tokyo',
    			age: '63',
    			date: '2011/07/25',
    			salary: '$170'
    		},
    		{
    			name: 'Ashton Cox',
    			position: 'Junior Technical Author',
    			office: 'San Francisco',
    			age: '66',
    			date: '2009/01/12',
    			salary: '$86'
    		},
    		{
    			name: 'Cedric Kelly',
    			position: 'Senior Javascript Developer',
    			office: 'Edinburgh',
    			age: '22',
    			date: '2012/03/29',
    			salary: '$433'
    		},
    		{
    			name: 'Airi Satou',
    			position: 'Accountant',
    			office: 'Tokyo',
    			age: '33',
    			date: '2008/11/28',
    			salary: '$162'
    		},
    		{
    			name: 'Brielle Williamson',
    			position: 'Integration Specialist',
    			office: 'New York',
    			age: '61',
    			date: '2012/12/02',
    			salary: '$372'
    		},
    		{
    			name: 'Herrod Chandler',
    			position: 'Sales Assistant',
    			office: 'San Francisco',
    			age: '59',
    			date: '2012/08/06',
    			salary: '$137'
    		},
    		{
    			name: 'Rhona Davidson',
    			position: 'Integration Specialist',
    			office: 'Tokyo',
    			age: '55',
    			date: '2010/10/14',
    			salary: '$327'
    		},
    		{
    			name: 'Colleen Hurst',
    			position: 'Javascript Developer',
    			office: 'San Francisco',
    			age: '39',
    			date: '2009/09/15',
    			salary: '$205'
    		},
    		{
    			name: 'Sonya Frost',
    			position: 'Software Engineer',
    			office: 'Edinburgh',
    			age: '23',
    			date: '2008/12/13',
    			salary: '$103'
    		},
    		{
    			name: 'Jena Gaines',
    			position: 'Office Manager',
    			office: 'London',
    			age: '30',
    			date: '2008/12/19',
    			salary: '$90'
    		},
    		{
    			name: 'Quinn Flynn',
    			position: 'Support Lead',
    			office: 'Edinburgh',
    			age: '22',
    			date: '2013/03/03',
    			salary: '$342'
    		},
    		{
    			name: 'Charde Marshall',
    			position: 'Regional Director',
    			office: 'San Francisco',
    			age: '36',
    			date: '2008/10/16',
    			salary: '$470'
    		},
    		{
    			name: 'Haley Kennedy',
    			position: 'Senior Marketing Designer',
    			office: 'London',
    			age: '43',
    			date: '2012/12/18',
    			salary: '$313'
    		},
    		{
    			name: 'Tatyana Fitzpatrick',
    			position: 'Regional Director',
    			office: 'London',
    			age: '19',
    			date: '2010/03/17',
    			salary: '$385'
    		},
    		{
    			name: 'Michael Silva',
    			position: 'Marketing Designer',
    			office: 'London',
    			age: '66',
    			date: '2012/11/27',
    			salary: '$198'
    		},
    		{
    			name: 'Paul Byrd',
    			position: 'Chief Financial Officer (CFO)',
    			office: 'New York',
    			age: '64',
    			date: '2010/06/09',
    			salary: '$725'
    		},
    		{
    			name: 'Gloria Little',
    			position: 'Systems Administrator',
    			office: 'New York',
    			age: '59',
    			date: '2009/04/10',
    			salary: '$237'
    		},
    		{
    			name: 'Bradley Greer',
    			position: 'Software Engineer',
    			office: 'London',
    			age: '41',
    			date: '2012/10/13',
    			salary: '$132'
    		},
    		{
    			name: 'Dai Rios',
    			position: 'Personnel Lead',
    			office: 'Edinburgh',
    			age: '35',
    			date: '2012/09/26',
    			salary: '$217'
    		},
    		{
    			name: 'Jenette Caldwell',
    			position: 'Development Lead',
    			office: 'New York',
    			age: '30',
    			date: '2011/09/03',
    			salary: '$345'
    		},
    		{
    			name: 'Yuri Berry',
    			position: 'Chief Marketing Officer (CMO)',
    			office: 'New York',
    			age: '40',
    			date: '2009/06/25',
    			salary: '$675'
    		},
    		{
    			name: 'Caesar Vance',
    			position: 'Pre-Sales Support',
    			office: 'New York',
    			age: '21',
    			date: '2011/12/12',
    			salary: '$106'
    		},
    		{
    			name: 'Doris Wilder',
    			position: 'Sales Assistant',
    			office: 'Sidney',
    			age: '23',
    			date: '2010/09/20',
    			salary: '$85'
    		},
    		{
    			name: 'Angelica Ramos',
    			position: 'Chief Executive Officer (CEO)',
    			office: 'London',
    			age: '47',
    			date: '2009/10/09',
    			salary: '$1'
    		},
    		{
    			name: 'Gavin Joyce',
    			position: 'Developer',
    			office: 'Edinburgh',
    			age: '42',
    			date: '2010/12/22',
    			salary: '$92'
    		},
    		{
    			name: 'Jennifer Chang',
    			position: 'Regional Director',
    			office: 'Singapore',
    			age: '28',
    			date: '2010/11/14',
    			salary: '$357'
    		},
    		{
    			name: 'Brenden Wagner',
    			position: 'Software Engineer',
    			office: 'San Francisco',
    			age: '28',
    			date: '2011/06/07',
    			salary: '$206'
    		},
    		{
    			name: 'Fiona Green',
    			position: 'Chief Operating Officer (COO)',
    			office: 'San Francisco',
    			age: '48',
    			date: '2010/03/11',
    			salary: '$850'
    		},
    		{
    			name: 'Shou Itou',
    			position: 'Regional Marketing',
    			office: 'Tokyo',
    			age: '20',
    			date: '2011/08/14',
    			salary: '$163'
    		},
    		{
    			name: 'Michelle House',
    			position: 'Integration Specialist',
    			office: 'Sidney',
    			age: '37',
    			date: '2011/06/02',
    			salary: '$95'
    		},
    		{
    			name: 'Suki Burks',
    			position: 'Developer',
    			office: 'London',
    			age: '53',
    			date: '2009/10/22',
    			salary: '$114'
    		},
    		{
    			name: 'Prescott Bartlett',
    			position: 'Technical Author',
    			office: 'London',
    			age: '27',
    			date: '2011/05/07',
    			salary: '$145'
    		},
    		{
    			name: 'Gavin Cortez',
    			position: 'Team Leader',
    			office: 'San Francisco',
    			age: '22',
    			date: '2008/10/26',
    			salary: '$235'
    		},
    		{
    			name: 'Martena Mccray',
    			position: 'Post-Sales support',
    			office: 'Edinburgh',
    			age: '46',
    			date: '2011/03/09',
    			salary: '$324'
    		},
    		{
    			name: 'Unity Butler',
    			position: 'Marketing Designer',
    			office: 'San Francisco',
    			age: '47',
    			date: '2009/12/09',
    			salary: '$85'
    		},
    		{
    			name: 'Howard Hatfield',
    			position: 'Office Manager',
    			office: 'San Francisco',
    			age: '51',
    			date: '2008/12/16',
    			salary: '$164'
    		},
    		{
    			name: 'Hope Fuentes',
    			position: 'Secretary',
    			office: 'San Francisco',
    			age: '41',
    			date: '2010/02/12',
    			salary: '$109'
    		},
    		{
    			name: 'Vivian Harrell',
    			position: 'Financial Controller',
    			office: 'San Francisco',
    			age: '62',
    			date: '2009/02/14',
    			salary: '$452'
    		},
    		{
    			name: 'Timothy Mooney',
    			position: 'Office Manager',
    			office: 'London',
    			age: '37',
    			date: '2008/12/11',
    			salary: '$136'
    		},
    		{
    			name: 'Jackson Bradshaw',
    			position: 'Director',
    			office: 'New York',
    			age: '65',
    			date: '2008/09/26',
    			salary: '$645'
    		},
    		{
    			name: 'Olivia Liang',
    			position: 'Support Engineer',
    			office: 'Singapore',
    			age: '64',
    			date: '2011/02/03',
    			salary: '$234'
    		},
    		{
    			name: 'Bruno Nash',
    			position: 'Software Engineer',
    			office: 'London',
    			age: '38',
    			date: '2011/05/03',
    			salary: '$163'
    		},
    		{
    			name: 'Sakura Yamamoto',
    			position: 'Support Engineer',
    			office: 'Tokyo',
    			age: '37',
    			date: '2009/08/19',
    			salary: '$139'
    		},
    		{
    			name: 'Thor Walton',
    			position: 'Developer',
    			office: 'New York',
    			age: '61',
    			date: '2013/08/11',
    			salary: '$98'
    		},
    		{
    			name: 'Finn Camacho',
    			position: 'Support Engineer',
    			office: 'San Francisco',
    			age: '47',
    			date: '2009/07/07',
    			salary: '$87'
    		},
    		{
    			name: 'Serge Baldwin',
    			position: 'Data Coordinator',
    			office: 'Singapore',
    			age: '64',
    			date: '2012/04/09',
    			salary: '$138'
    		},
    		{
    			name: 'Zenaida Frank',
    			position: 'Software Engineer',
    			office: 'New York',
    			age: '63',
    			date: '2010/01/04',
    			salary: '$125'
    		},
    		{
    			name: 'Zorita Serrano',
    			position: 'Software Engineer',
    			office: 'San Francisco',
    			age: '56',
    			date: '2012/06/01',
    			salary: '$115'
    		},
    		{
    			name: 'Jennifer Acosta',
    			position: 'Junior Javascript Developer',
    			office: 'Edinburgh',
    			age: '43',
    			date: '2013/02/01',
    			salary: '$75'
    		},
    		{
    			name: 'Cara Stevens',
    			position: 'Sales Assistant',
    			office: 'New York',
    			age: '46',
    			date: '2011/12/06',
    			salary: '$145'
    		},
    		{
    			name: 'Hermione Butler',
    			position: 'Regional Director',
    			office: 'London',
    			age: '47',
    			date: '2011/03/21',
    			salary: '$356'
    		},
    		{
    			name: 'Lael Greer',
    			position: 'Systems Administrator',
    			office: 'London',
    			age: '21',
    			date: '2009/02/27',
    			salary: '$103'
    		},
    		{
    			name: 'Jonas Alexander',
    			position: 'Developer',
    			office: 'San Francisco',
    			age: '30',
    			date: '2010/07/14',
    			salary: '$86'
    		},
    		{
    			name: 'Shad Decker',
    			position: 'Regional Director',
    			office: 'Edinburgh',
    			age: '51',
    			date: '2008/11/13',
    			salary: '$183'
    		},
    		{
    			name: 'Michael Bruce',
    			position: 'Javascript Developer',
    			office: 'Singapore',
    			age: '29',
    			date: '2011/06/27',
    			salary: '$183'
    		},
    		{
    			name: 'Donna Snider',
    			position: 'Customer Support',
    			office: 'New York',
    			age: '27',
    			date: '2011/01/25',
    			salary: '$112'
    		}
    	];

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<TableSection2> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		MDBCard,
    		MDBCardBody,
    		MDBRow,
    		MDBCol,
    		MDBDataTable,
    		MDBCardHeader,
    		MDBBtn,
    		MDBIcon,
    		onMount,
    		read: readSync,
    		utils,
    		columns,
    		data
    	});

    	$$self.$inject_state = $$props => {
    		if ('columns' in $$props) $$invalidate(0, columns = $$props.columns);
    		if ('data' in $$props) $$invalidate(1, data = $$props.data);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [columns, data];
    }

    class TableSection2 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$h, create_fragment$h, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "TableSection2",
    			options,
    			id: create_fragment$h.name
    		});
    	}
    }

    /* node_modules\mdbsvelte\src\MDBModal.svelte generated by Svelte v3.59.2 */
    const file$f = "node_modules\\mdbsvelte\\src\\MDBModal.svelte";
    const get_external_slot_changes = dirty => ({});
    const get_external_slot_context = ctx => ({});

    // (251:0) {#if _isMounted && isOpen}
    function create_if_block$1(ctx) {
    	let div2;
    	let div1;
    	let div0;
    	let t0;
    	let div0_class_value;
    	let div2_transition;
    	let t1;
    	let div3;
    	let div3_class_value;
    	let div3_transition;
    	let current;
    	let mounted;
    	let dispose;
    	const external_slot_template = /*#slots*/ ctx[38].external;
    	const external_slot = create_slot(external_slot_template, ctx, /*$$scope*/ ctx[37], get_external_slot_context);
    	const default_slot_template = /*#slots*/ ctx[38].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[37], null);

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div1 = element("div");
    			div0 = element("div");
    			if (external_slot) external_slot.c();
    			t0 = space();
    			if (default_slot) default_slot.c();
    			t1 = space();
    			div3 = element("div");
    			attr_dev(div0, "class", div0_class_value = clsx('modal-content', /*contentClassName*/ ctx[8]));
    			add_location(div0, file$f, 262, 6, 6210);
    			attr_dev(div1, "class", /*classes*/ ctx[13]);
    			attr_dev(div1, "role", "document");
    			add_location(div1, file$f, 261, 4, 6146);
    			attr_dev(div2, "arialabelledby", /*labelledBy*/ ctx[5]);
    			attr_dev(div2, "class", /*modalClasses*/ ctx[12]);
    			attr_dev(div2, "role", "dialog");
    			set_style(div2, "display", "block");
    			add_location(div2, file$f, 251, 2, 5795);
    			attr_dev(div3, "class", div3_class_value = clsx({ 'modal-backdrop': /*backdrop*/ ctx[6] }, 'show', /*backdropClassName*/ ctx[7]));
    			add_location(div3, file$f, 268, 2, 6347);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div1);
    			append_dev(div1, div0);

    			if (external_slot) {
    				external_slot.m(div0, null);
    			}

    			append_dev(div0, t0);

    			if (default_slot) {
    				default_slot.m(div0, null);
    			}

    			/*div1_binding*/ ctx[39](div1);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div3, anchor);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(div2, "introend", /*onModalOpened*/ ctx[15], false, false, false, false),
    					listen_dev(div2, "outroend", /*onModalClosed*/ ctx[16], false, false, false, false),
    					listen_dev(div2, "click", /*handleBackdropClick*/ ctx[14], false, false, false, false),
    					listen_dev(div2, "mousedown", /*handleBackdropMouseDown*/ ctx[17], false, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;

    			if (external_slot) {
    				if (external_slot.p && (!current || dirty[1] & /*$$scope*/ 64)) {
    					update_slot_base(
    						external_slot,
    						external_slot_template,
    						ctx,
    						/*$$scope*/ ctx[37],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[37])
    						: get_slot_changes(external_slot_template, /*$$scope*/ ctx[37], dirty, get_external_slot_changes),
    						get_external_slot_context
    					);
    				}
    			}

    			if (default_slot) {
    				if (default_slot.p && (!current || dirty[1] & /*$$scope*/ 64)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[37],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[37])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[37], dirty, null),
    						null
    					);
    				}
    			}

    			if (!current || dirty[0] & /*contentClassName*/ 256 && div0_class_value !== (div0_class_value = clsx('modal-content', /*contentClassName*/ ctx[8]))) {
    				attr_dev(div0, "class", div0_class_value);
    			}

    			if (!current || dirty[0] & /*classes*/ 8192) {
    				attr_dev(div1, "class", /*classes*/ ctx[13]);
    			}

    			if (!current || dirty[0] & /*labelledBy*/ 32) {
    				attr_dev(div2, "arialabelledby", /*labelledBy*/ ctx[5]);
    			}

    			if (!current || dirty[0] & /*modalClasses*/ 4096) {
    				attr_dev(div2, "class", /*modalClasses*/ ctx[12]);
    			}

    			if (!current || dirty[0] & /*backdrop, backdropClassName*/ 192 && div3_class_value !== (div3_class_value = clsx({ 'modal-backdrop': /*backdrop*/ ctx[6] }, 'show', /*backdropClassName*/ ctx[7]))) {
    				attr_dev(div3, "class", div3_class_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(external_slot, local);
    			transition_in(default_slot, local);

    			add_render_callback(() => {
    				if (!current) return;

    				if (!div2_transition) div2_transition = create_bidirectional_transition(
    					div2,
    					fly,
    					{
    						x: /*displacementX*/ ctx[0],
    						y: /*displacementY*/ ctx[1],
    						duration: /*fade*/ ctx[9] && /*duration*/ ctx[3]
    					},
    					true
    				);

    				div2_transition.run(1);
    			});

    			add_render_callback(() => {
    				if (!current) return;

    				if (!div3_transition) div3_transition = create_bidirectional_transition(
    					div3,
    					fade,
    					{
    						duration: /*fade*/ ctx[9] && /*backdropDuration*/ ctx[4]
    					},
    					true
    				);

    				div3_transition.run(1);
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(external_slot, local);
    			transition_out(default_slot, local);

    			if (!div2_transition) div2_transition = create_bidirectional_transition(
    				div2,
    				fly,
    				{
    					x: /*displacementX*/ ctx[0],
    					y: /*displacementY*/ ctx[1],
    					duration: /*fade*/ ctx[9] && /*duration*/ ctx[3]
    				},
    				false
    			);

    			div2_transition.run(0);

    			if (!div3_transition) div3_transition = create_bidirectional_transition(
    				div3,
    				fade,
    				{
    					duration: /*fade*/ ctx[9] && /*backdropDuration*/ ctx[4]
    				},
    				false
    			);

    			div3_transition.run(0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			if (external_slot) external_slot.d(detaching);
    			if (default_slot) default_slot.d(detaching);
    			/*div1_binding*/ ctx[39](null);
    			if (detaching && div2_transition) div2_transition.end();
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div3);
    			if (detaching && div3_transition) div3_transition.end();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$1.name,
    		type: "if",
    		source: "(251:0) {#if _isMounted && isOpen}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$g(ctx) {
    	let if_block_anchor;
    	let current;
    	let if_block = /*_isMounted*/ ctx[10] && /*isOpen*/ ctx[2] && create_if_block$1(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (/*_isMounted*/ ctx[10] && /*isOpen*/ ctx[2]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty[0] & /*_isMounted, isOpen*/ 1028) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$1(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$g.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    let openCount = 0;
    const dialogBaseClass = 'modal-dialog';

    function instance$g($$self, $$props, $$invalidate) {
    	let classes;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('MDBModal', slots, ['external','default']);
    	const forwardEvents = forwardEventsBuilder(current_component);
    	let { class: className = '' } = $$props;
    	let { isOpen } = $$props;
    	let { autoFocus = true } = $$props;
    	let { centered = false } = $$props;
    	let { duration = 500 } = $$props;
    	let { backdropDuration = duration } = $$props;
    	let { scrollable = false } = $$props;
    	let { size = '' } = $$props;
    	let { toggle = undefined } = $$props;
    	let { labelledBy = '' } = $$props;
    	let { backdrop = true } = $$props;
    	let { onEnter = undefined } = $$props;
    	let { onExit = undefined } = $$props;

    	let { onOpened = () => {
    		
    	} } = $$props;

    	let { onClosed = () => {
    		
    	} } = $$props;

    	let { wrapClassName = '' } = $$props;
    	let { modalClassName = '' } = $$props;
    	let { backdropClassName = '' } = $$props;
    	let { contentClassName = '' } = $$props;
    	let { fade: fade$1 = true } = $$props;
    	let { zIndex = 1050 } = $$props;
    	let { unmountOnClose = true } = $$props;
    	let { returnFocusAfterClose = true } = $$props;
    	let { displacementX = 0 } = $$props;
    	let { displacementY = -300 } = $$props;
    	let { side } = $$props;
    	let { position = '' } = $$props;
    	let { fullHeight } = $$props;
    	let { frame } = $$props;

    	const props = clean$1($$props, [
    		"isOpen",
    		"autoFocus",
    		"centered",
    		"duration",
    		"backdropDuration",
    		"scrollable",
    		"size",
    		"toggle",
    		"labelledBy",
    		"toggle",
    		"onEnter",
    		"onExit",
    		"onOpened",
    		"onClosed",
    		"wrapClassName",
    		"modalClassName",
    		"backdropClassName",
    		"contentClassName",
    		"fade",
    		"zIndex",
    		"unmountOnClose",
    		"returnFocusAfterClose",
    		"side",
    		"position",
    		"frame",
    		"backdrop"
    	]);

    	let hasOpened = false;
    	let _isMounted = false;
    	let _triggeringElement;
    	let _originalBodyPadding;
    	let _lastIsOpen = isOpen;
    	let _lastHasOpened = hasOpened;
    	let _dialog;
    	let _mouseDownElement;
    	let _removeEscListener;
    	let modalClasses;

    	onMount(() => {
    		if (isOpen) {
    			init();
    			hasOpened = true;
    		}

    		if (typeof onEnter === 'function') {
    			onEnter();
    		}

    		if (hasOpened && autoFocus) {
    			setFocus();
    		}
    	});

    	onDestroy(() => {
    		if (typeof onExit === 'function') {
    			onExit();
    		}

    		destroy();

    		if (hasOpened) {
    			close();
    		}
    	});

    	afterUpdate(() => {
    		if (isOpen && !_lastIsOpen) {
    			init();
    			hasOpened = true;
    		}

    		if (autoFocus && hasOpened && !_lastHasOpened) {
    			setFocus();
    		}

    		_lastIsOpen = isOpen;
    		_lastHasOpened = hasOpened;
    	});

    	function setFocus() {
    		if (_dialog && _dialog.parentNode && typeof _dialog.parentNode.focus === 'function') {
    			_dialog.parentNode.focus();
    		}
    	}

    	function init() {
    		try {
    			_triggeringElement = document.activeElement;
    		} catch(err) {
    			_triggeringElement = null;
    		}

    		_originalBodyPadding = getOriginalBodyPadding();
    		conditionallyUpdateScrollbar();

    		if (openCount === 0) {
    			document.body.className = clsx(document.body.className, 'modal-open');
    		}

    		++openCount;
    		$$invalidate(10, _isMounted = true);
    	}

    	function manageFocusAfterClose() {
    		if (_triggeringElement) {
    			if (typeof _triggeringElement.focus === 'function' && returnFocusAfterClose) {
    				_triggeringElement.focus();
    			}

    			_triggeringElement = null;
    		}
    	}

    	function destroy() {
    		manageFocusAfterClose();
    	}

    	function close() {
    		if (openCount <= 1) {
    			const modalOpenClassName = 'modal-open';
    			const modalOpenClassNameRegex = new RegExp(`(^| )${modalOpenClassName}( |$)`);
    			document.body.className = document.body.className.replace(modalOpenClassNameRegex, ' ').trim();
    		}

    		manageFocusAfterClose();
    		openCount = Math.max(0, openCount - 1);
    		setScrollbarWidth(_originalBodyPadding);
    	}

    	function handleBackdropClick(e) {
    		if (e.target === _mouseDownElement) {
    			e.stopPropagation();

    			if (!isOpen || !backdrop) {
    				return;
    			}

    			const backdropElem = _dialog ? _dialog.parentNode : null;

    			if (backdropElem && e.target === backdropElem && toggle) {
    				toggle(e);
    			}
    		}
    	}

    	function onModalOpened() {
    		_removeEscListener = browserEvent(document, 'keydown', event => {
    			if (event.key && event.key === 'Escape') {
    				toggle(event);
    			}
    		});

    		onOpened();
    	}

    	function onModalClosed() {
    		onClosed();

    		if (_removeEscListener) {
    			_removeEscListener();
    		}

    		if (unmountOnClose) {
    			destroy();
    		}

    		close();

    		if (_isMounted) {
    			hasOpened = false;
    		}

    		$$invalidate(10, _isMounted = false);
    	}

    	function handleBackdropMouseDown(e) {
    		_mouseDownElement = e.target;
    	}

    	if (position.indexOf("right") !== -1) {
    		displacementX = 300;
    		if (fullHeight) displacementY = 0;
    	}

    	if (position.indexOf("left") !== -1) {
    		displacementX = -300;
    		if (fullHeight) displacementY = 0;
    	}

    	if (position.indexOf("top") !== -1) {
    		displacementY = -300;
    		if (fullHeight) displacementX = 0;
    	}

    	if (position.indexOf("bottom") !== -1) {
    		displacementY = 300;
    		if (fullHeight) displacementX = 0;
    	}

    	modalClasses = clsx('modal', 'show', modalClassName);

    	$$self.$$.on_mount.push(function () {
    		if (isOpen === undefined && !('isOpen' in $$props || $$self.$$.bound[$$self.$$.props['isOpen']])) {
    			console.warn("<MDBModal> was created without expected prop 'isOpen'");
    		}

    		if (side === undefined && !('side' in $$props || $$self.$$.bound[$$self.$$.props['side']])) {
    			console.warn("<MDBModal> was created without expected prop 'side'");
    		}

    		if (fullHeight === undefined && !('fullHeight' in $$props || $$self.$$.bound[$$self.$$.props['fullHeight']])) {
    			console.warn("<MDBModal> was created without expected prop 'fullHeight'");
    		}

    		if (frame === undefined && !('frame' in $$props || $$self.$$.bound[$$self.$$.props['frame']])) {
    			console.warn("<MDBModal> was created without expected prop 'frame'");
    		}
    	});

    	function div1_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			_dialog = $$value;
    			$$invalidate(11, _dialog);
    		});
    	}

    	$$self.$$set = $$new_props => {
    		$$invalidate(54, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ('class' in $$new_props) $$invalidate(18, className = $$new_props.class);
    		if ('isOpen' in $$new_props) $$invalidate(2, isOpen = $$new_props.isOpen);
    		if ('autoFocus' in $$new_props) $$invalidate(19, autoFocus = $$new_props.autoFocus);
    		if ('centered' in $$new_props) $$invalidate(20, centered = $$new_props.centered);
    		if ('duration' in $$new_props) $$invalidate(3, duration = $$new_props.duration);
    		if ('backdropDuration' in $$new_props) $$invalidate(4, backdropDuration = $$new_props.backdropDuration);
    		if ('scrollable' in $$new_props) $$invalidate(21, scrollable = $$new_props.scrollable);
    		if ('size' in $$new_props) $$invalidate(22, size = $$new_props.size);
    		if ('toggle' in $$new_props) $$invalidate(23, toggle = $$new_props.toggle);
    		if ('labelledBy' in $$new_props) $$invalidate(5, labelledBy = $$new_props.labelledBy);
    		if ('backdrop' in $$new_props) $$invalidate(6, backdrop = $$new_props.backdrop);
    		if ('onEnter' in $$new_props) $$invalidate(24, onEnter = $$new_props.onEnter);
    		if ('onExit' in $$new_props) $$invalidate(25, onExit = $$new_props.onExit);
    		if ('onOpened' in $$new_props) $$invalidate(26, onOpened = $$new_props.onOpened);
    		if ('onClosed' in $$new_props) $$invalidate(27, onClosed = $$new_props.onClosed);
    		if ('wrapClassName' in $$new_props) $$invalidate(28, wrapClassName = $$new_props.wrapClassName);
    		if ('modalClassName' in $$new_props) $$invalidate(29, modalClassName = $$new_props.modalClassName);
    		if ('backdropClassName' in $$new_props) $$invalidate(7, backdropClassName = $$new_props.backdropClassName);
    		if ('contentClassName' in $$new_props) $$invalidate(8, contentClassName = $$new_props.contentClassName);
    		if ('fade' in $$new_props) $$invalidate(9, fade$1 = $$new_props.fade);
    		if ('zIndex' in $$new_props) $$invalidate(30, zIndex = $$new_props.zIndex);
    		if ('unmountOnClose' in $$new_props) $$invalidate(31, unmountOnClose = $$new_props.unmountOnClose);
    		if ('returnFocusAfterClose' in $$new_props) $$invalidate(32, returnFocusAfterClose = $$new_props.returnFocusAfterClose);
    		if ('displacementX' in $$new_props) $$invalidate(0, displacementX = $$new_props.displacementX);
    		if ('displacementY' in $$new_props) $$invalidate(1, displacementY = $$new_props.displacementY);
    		if ('side' in $$new_props) $$invalidate(33, side = $$new_props.side);
    		if ('position' in $$new_props) $$invalidate(34, position = $$new_props.position);
    		if ('fullHeight' in $$new_props) $$invalidate(35, fullHeight = $$new_props.fullHeight);
    		if ('frame' in $$new_props) $$invalidate(36, frame = $$new_props.frame);
    		if ('$$scope' in $$new_props) $$invalidate(37, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		openCount,
    		onDestroy,
    		onMount,
    		afterUpdate,
    		fadeTransition: fade,
    		flyTransition: fly,
    		conditionallyUpdateScrollbar,
    		getOriginalBodyPadding,
    		setScrollbarWidth,
    		clean: clean$1,
    		browserEvent,
    		clsx,
    		forwardEventsBuilder,
    		current_component,
    		forwardEvents,
    		className,
    		isOpen,
    		autoFocus,
    		centered,
    		duration,
    		backdropDuration,
    		scrollable,
    		size,
    		toggle,
    		labelledBy,
    		backdrop,
    		onEnter,
    		onExit,
    		onOpened,
    		onClosed,
    		wrapClassName,
    		modalClassName,
    		backdropClassName,
    		contentClassName,
    		fade: fade$1,
    		zIndex,
    		unmountOnClose,
    		returnFocusAfterClose,
    		displacementX,
    		displacementY,
    		side,
    		position,
    		fullHeight,
    		frame,
    		props,
    		hasOpened,
    		_isMounted,
    		_triggeringElement,
    		_originalBodyPadding,
    		_lastIsOpen,
    		_lastHasOpened,
    		_dialog,
    		_mouseDownElement,
    		_removeEscListener,
    		modalClasses,
    		setFocus,
    		init,
    		manageFocusAfterClose,
    		destroy,
    		close,
    		handleBackdropClick,
    		onModalOpened,
    		onModalClosed,
    		handleBackdropMouseDown,
    		dialogBaseClass,
    		classes
    	});

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(54, $$props = assign(assign({}, $$props), $$new_props));
    		if ('className' in $$props) $$invalidate(18, className = $$new_props.className);
    		if ('isOpen' in $$props) $$invalidate(2, isOpen = $$new_props.isOpen);
    		if ('autoFocus' in $$props) $$invalidate(19, autoFocus = $$new_props.autoFocus);
    		if ('centered' in $$props) $$invalidate(20, centered = $$new_props.centered);
    		if ('duration' in $$props) $$invalidate(3, duration = $$new_props.duration);
    		if ('backdropDuration' in $$props) $$invalidate(4, backdropDuration = $$new_props.backdropDuration);
    		if ('scrollable' in $$props) $$invalidate(21, scrollable = $$new_props.scrollable);
    		if ('size' in $$props) $$invalidate(22, size = $$new_props.size);
    		if ('toggle' in $$props) $$invalidate(23, toggle = $$new_props.toggle);
    		if ('labelledBy' in $$props) $$invalidate(5, labelledBy = $$new_props.labelledBy);
    		if ('backdrop' in $$props) $$invalidate(6, backdrop = $$new_props.backdrop);
    		if ('onEnter' in $$props) $$invalidate(24, onEnter = $$new_props.onEnter);
    		if ('onExit' in $$props) $$invalidate(25, onExit = $$new_props.onExit);
    		if ('onOpened' in $$props) $$invalidate(26, onOpened = $$new_props.onOpened);
    		if ('onClosed' in $$props) $$invalidate(27, onClosed = $$new_props.onClosed);
    		if ('wrapClassName' in $$props) $$invalidate(28, wrapClassName = $$new_props.wrapClassName);
    		if ('modalClassName' in $$props) $$invalidate(29, modalClassName = $$new_props.modalClassName);
    		if ('backdropClassName' in $$props) $$invalidate(7, backdropClassName = $$new_props.backdropClassName);
    		if ('contentClassName' in $$props) $$invalidate(8, contentClassName = $$new_props.contentClassName);
    		if ('fade' in $$props) $$invalidate(9, fade$1 = $$new_props.fade);
    		if ('zIndex' in $$props) $$invalidate(30, zIndex = $$new_props.zIndex);
    		if ('unmountOnClose' in $$props) $$invalidate(31, unmountOnClose = $$new_props.unmountOnClose);
    		if ('returnFocusAfterClose' in $$props) $$invalidate(32, returnFocusAfterClose = $$new_props.returnFocusAfterClose);
    		if ('displacementX' in $$props) $$invalidate(0, displacementX = $$new_props.displacementX);
    		if ('displacementY' in $$props) $$invalidate(1, displacementY = $$new_props.displacementY);
    		if ('side' in $$props) $$invalidate(33, side = $$new_props.side);
    		if ('position' in $$props) $$invalidate(34, position = $$new_props.position);
    		if ('fullHeight' in $$props) $$invalidate(35, fullHeight = $$new_props.fullHeight);
    		if ('frame' in $$props) $$invalidate(36, frame = $$new_props.frame);
    		if ('hasOpened' in $$props) hasOpened = $$new_props.hasOpened;
    		if ('_isMounted' in $$props) $$invalidate(10, _isMounted = $$new_props._isMounted);
    		if ('_triggeringElement' in $$props) _triggeringElement = $$new_props._triggeringElement;
    		if ('_originalBodyPadding' in $$props) _originalBodyPadding = $$new_props._originalBodyPadding;
    		if ('_lastIsOpen' in $$props) _lastIsOpen = $$new_props._lastIsOpen;
    		if ('_lastHasOpened' in $$props) _lastHasOpened = $$new_props._lastHasOpened;
    		if ('_dialog' in $$props) $$invalidate(11, _dialog = $$new_props._dialog);
    		if ('_mouseDownElement' in $$props) _mouseDownElement = $$new_props._mouseDownElement;
    		if ('_removeEscListener' in $$props) _removeEscListener = $$new_props._removeEscListener;
    		if ('modalClasses' in $$props) $$invalidate(12, modalClasses = $$new_props.modalClasses);
    		if ('classes' in $$props) $$invalidate(13, classes = $$new_props.classes);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty[0] & /*className, size, centered, scrollable*/ 7602176 | $$self.$$.dirty[1] & /*side, fullHeight, frame, position*/ 60) {
    			$$invalidate(13, classes = clsx(dialogBaseClass, className, {
    				[`modal-${size}`]: size,
    				[`${dialogBaseClass}-centered`]: centered,
    				[`${dialogBaseClass}-scrollable`]: scrollable,
    				'modal-side': side,
    				'modal-full-height': fullHeight,
    				'modal-frame': frame,
    				[`modal-${position}`]: position
    			}));
    		}
    	};

    	$$props = exclude_internal_props($$props);

    	return [
    		displacementX,
    		displacementY,
    		isOpen,
    		duration,
    		backdropDuration,
    		labelledBy,
    		backdrop,
    		backdropClassName,
    		contentClassName,
    		fade$1,
    		_isMounted,
    		_dialog,
    		modalClasses,
    		classes,
    		handleBackdropClick,
    		onModalOpened,
    		onModalClosed,
    		handleBackdropMouseDown,
    		className,
    		autoFocus,
    		centered,
    		scrollable,
    		size,
    		toggle,
    		onEnter,
    		onExit,
    		onOpened,
    		onClosed,
    		wrapClassName,
    		modalClassName,
    		zIndex,
    		unmountOnClose,
    		returnFocusAfterClose,
    		side,
    		position,
    		fullHeight,
    		frame,
    		$$scope,
    		slots,
    		div1_binding
    	];
    }

    class MDBModal extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(
    			this,
    			options,
    			instance$g,
    			create_fragment$g,
    			safe_not_equal,
    			{
    				class: 18,
    				isOpen: 2,
    				autoFocus: 19,
    				centered: 20,
    				duration: 3,
    				backdropDuration: 4,
    				scrollable: 21,
    				size: 22,
    				toggle: 23,
    				labelledBy: 5,
    				backdrop: 6,
    				onEnter: 24,
    				onExit: 25,
    				onOpened: 26,
    				onClosed: 27,
    				wrapClassName: 28,
    				modalClassName: 29,
    				backdropClassName: 7,
    				contentClassName: 8,
    				fade: 9,
    				zIndex: 30,
    				unmountOnClose: 31,
    				returnFocusAfterClose: 32,
    				displacementX: 0,
    				displacementY: 1,
    				side: 33,
    				position: 34,
    				fullHeight: 35,
    				frame: 36
    			},
    			null,
    			[-1, -1]
    		);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "MDBModal",
    			options,
    			id: create_fragment$g.name
    		});
    	}

    	get class() {
    		throw new Error("<MDBModal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<MDBModal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get isOpen() {
    		throw new Error("<MDBModal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isOpen(value) {
    		throw new Error("<MDBModal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get autoFocus() {
    		throw new Error("<MDBModal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set autoFocus(value) {
    		throw new Error("<MDBModal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get centered() {
    		throw new Error("<MDBModal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set centered(value) {
    		throw new Error("<MDBModal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get duration() {
    		throw new Error("<MDBModal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set duration(value) {
    		throw new Error("<MDBModal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get backdropDuration() {
    		throw new Error("<MDBModal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set backdropDuration(value) {
    		throw new Error("<MDBModal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get scrollable() {
    		throw new Error("<MDBModal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set scrollable(value) {
    		throw new Error("<MDBModal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get size() {
    		throw new Error("<MDBModal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set size(value) {
    		throw new Error("<MDBModal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get toggle() {
    		throw new Error("<MDBModal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set toggle(value) {
    		throw new Error("<MDBModal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get labelledBy() {
    		throw new Error("<MDBModal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set labelledBy(value) {
    		throw new Error("<MDBModal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get backdrop() {
    		throw new Error("<MDBModal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set backdrop(value) {
    		throw new Error("<MDBModal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onEnter() {
    		throw new Error("<MDBModal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onEnter(value) {
    		throw new Error("<MDBModal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onExit() {
    		throw new Error("<MDBModal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onExit(value) {
    		throw new Error("<MDBModal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onOpened() {
    		throw new Error("<MDBModal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onOpened(value) {
    		throw new Error("<MDBModal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onClosed() {
    		throw new Error("<MDBModal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onClosed(value) {
    		throw new Error("<MDBModal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get wrapClassName() {
    		throw new Error("<MDBModal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set wrapClassName(value) {
    		throw new Error("<MDBModal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get modalClassName() {
    		throw new Error("<MDBModal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set modalClassName(value) {
    		throw new Error("<MDBModal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get backdropClassName() {
    		throw new Error("<MDBModal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set backdropClassName(value) {
    		throw new Error("<MDBModal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get contentClassName() {
    		throw new Error("<MDBModal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set contentClassName(value) {
    		throw new Error("<MDBModal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get fade() {
    		throw new Error("<MDBModal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set fade(value) {
    		throw new Error("<MDBModal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get zIndex() {
    		throw new Error("<MDBModal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set zIndex(value) {
    		throw new Error("<MDBModal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get unmountOnClose() {
    		throw new Error("<MDBModal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set unmountOnClose(value) {
    		throw new Error("<MDBModal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get returnFocusAfterClose() {
    		throw new Error("<MDBModal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set returnFocusAfterClose(value) {
    		throw new Error("<MDBModal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get displacementX() {
    		throw new Error("<MDBModal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set displacementX(value) {
    		throw new Error("<MDBModal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get displacementY() {
    		throw new Error("<MDBModal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set displacementY(value) {
    		throw new Error("<MDBModal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get side() {
    		throw new Error("<MDBModal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set side(value) {
    		throw new Error("<MDBModal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get position() {
    		throw new Error("<MDBModal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set position(value) {
    		throw new Error("<MDBModal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get fullHeight() {
    		throw new Error("<MDBModal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set fullHeight(value) {
    		throw new Error("<MDBModal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get frame() {
    		throw new Error("<MDBModal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set frame(value) {
    		throw new Error("<MDBModal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\mdbsvelte\src\MDBModalBody.svelte generated by Svelte v3.59.2 */
    const file$e = "node_modules\\mdbsvelte\\src\\MDBModalBody.svelte";

    function create_fragment$f(ctx) {
    	let div;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[5].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);
    	let div_levels = [/*props*/ ctx[2], { class: /*classes*/ ctx[0] }];
    	let div_data = {};

    	for (let i = 0; i < div_levels.length; i += 1) {
    		div_data = assign(div_data, div_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			set_attributes(div, div_data);
    			add_location(div, file$e, 13, 0, 335);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = action_destroyer(/*forwardEvents*/ ctx[1].call(null, div));
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 16)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[4],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[4])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[4], dirty, null),
    						null
    					);
    				}
    			}

    			set_attributes(div, div_data = get_spread_update(div_levels, [
    				/*props*/ ctx[2],
    				(!current || dirty & /*classes*/ 1) && { class: /*classes*/ ctx[0] }
    			]));
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$f.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$f($$self, $$props, $$invalidate) {
    	let classes;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('MDBModalBody', slots, ['default']);
    	const forwardEvents = forwardEventsBuilder(current_component);
    	let { class: className = '' } = $$props;
    	const props = clean$1($$props);

    	$$self.$$set = $$new_props => {
    		$$invalidate(6, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ('class' in $$new_props) $$invalidate(3, className = $$new_props.class);
    		if ('$$scope' in $$new_props) $$invalidate(4, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		clean: clean$1,
    		clsx,
    		forwardEventsBuilder,
    		current_component,
    		forwardEvents,
    		className,
    		props,
    		classes
    	});

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(6, $$props = assign(assign({}, $$props), $$new_props));
    		if ('className' in $$props) $$invalidate(3, className = $$new_props.className);
    		if ('classes' in $$props) $$invalidate(0, classes = $$new_props.classes);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*className*/ 8) {
    			$$invalidate(0, classes = clsx(className, 'modal-body'));
    		}
    	};

    	$$props = exclude_internal_props($$props);
    	return [classes, forwardEvents, props, className, $$scope, slots];
    }

    class MDBModalBody extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$f, create_fragment$f, safe_not_equal, { class: 3 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "MDBModalBody",
    			options,
    			id: create_fragment$f.name
    		});
    	}

    	get class() {
    		throw new Error("<MDBModalBody>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<MDBModalBody>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\mdbsvelte\src\MDBModalHeader.svelte generated by Svelte v3.59.2 */
    const file$d = "node_modules\\mdbsvelte\\src\\MDBModalHeader.svelte";
    const get_close_slot_changes = dirty => ({});
    const get_close_slot_context = ctx => ({});

    // (26:4) {:else}
    function create_else_block(ctx) {
    	let current;
    	const default_slot_template = /*#slots*/ ctx[10].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[9], null);

    	const block = {
    		c: function create() {
    			if (default_slot) default_slot.c();
    		},
    		m: function mount(target, anchor) {
    			if (default_slot) {
    				default_slot.m(target, anchor);
    			}

    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 512)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[9],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[9])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[9], dirty, null),
    						null
    					);
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (default_slot) default_slot.d(detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block.name,
    		type: "else",
    		source: "(26:4) {:else}",
    		ctx
    	});

    	return block;
    }

    // (24:4) {#if children}
    function create_if_block_1(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text(/*children*/ ctx[2]);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*children*/ 4) set_data_dev(t, /*children*/ ctx[2]);
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1.name,
    		type: "if",
    		source: "(24:4) {#if children}",
    		ctx
    	});

    	return block;
    }

    // (31:4) {#if typeof toggle === 'function'}
    function create_if_block(ctx) {
    	let button;
    	let span;
    	let t;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			span = element("span");
    			t = text(/*closeIcon*/ ctx[4]);
    			attr_dev(span, "aria-hidden", "true");
    			add_location(span, file$d, 36, 8, 915);
    			attr_dev(button, "type", "button");
    			attr_dev(button, "class", "close");
    			attr_dev(button, "aria-label", /*closeAriaLabel*/ ctx[1]);
    			add_location(button, file$d, 31, 6, 792);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, span);
    			append_dev(span, t);

    			if (!mounted) {
    				dispose = listen_dev(
    					button,
    					"click",
    					function () {
    						if (is_function(/*toggle*/ ctx[0])) /*toggle*/ ctx[0].apply(this, arguments);
    					},
    					false,
    					false,
    					false,
    					false
    				);

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty & /*closeIcon*/ 16) set_data_dev(t, /*closeIcon*/ ctx[4]);

    			if (dirty & /*closeAriaLabel*/ 2) {
    				attr_dev(button, "aria-label", /*closeAriaLabel*/ ctx[1]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block.name,
    		type: "if",
    		source: "(31:4) {#if typeof toggle === 'function'}",
    		ctx
    	});

    	return block;
    }

    // (30:21)      
    function fallback_block(ctx) {
    	let if_block_anchor;
    	let if_block = typeof /*toggle*/ ctx[0] === 'function' && create_if_block(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (typeof /*toggle*/ ctx[0] === 'function') {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: fallback_block.name,
    		type: "fallback",
    		source: "(30:21)      ",
    		ctx
    	});

    	return block;
    }

    function create_fragment$e(ctx) {
    	let div;
    	let h5;
    	let current_block_type_index;
    	let if_block;
    	let t;
    	let current;
    	let mounted;
    	let dispose;
    	const if_block_creators = [create_if_block_1, create_else_block];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*children*/ ctx[2]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	const close_slot_template = /*#slots*/ ctx[10].close;
    	const close_slot = create_slot(close_slot_template, ctx, /*$$scope*/ ctx[9], get_close_slot_context);
    	const close_slot_or_fallback = close_slot || fallback_block(ctx);
    	let div_levels = [/*props*/ ctx[6], { class: /*classes*/ ctx[3] }];
    	let div_data = {};

    	for (let i = 0; i < div_levels.length; i += 1) {
    		div_data = assign(div_data, div_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			h5 = element("h5");
    			if_block.c();
    			t = space();
    			if (close_slot_or_fallback) close_slot_or_fallback.c();
    			attr_dev(h5, "class", "modal-title");
    			add_location(h5, file$d, 22, 2, 620);
    			set_attributes(div, div_data);
    			add_location(div, file$d, 21, 0, 567);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, h5);
    			if_blocks[current_block_type_index].m(h5, null);
    			append_dev(div, t);

    			if (close_slot_or_fallback) {
    				close_slot_or_fallback.m(div, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = action_destroyer(/*forwardEvents*/ ctx[5].call(null, div));
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(h5, null);
    			}

    			if (close_slot) {
    				if (close_slot.p && (!current || dirty & /*$$scope*/ 512)) {
    					update_slot_base(
    						close_slot,
    						close_slot_template,
    						ctx,
    						/*$$scope*/ ctx[9],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[9])
    						: get_slot_changes(close_slot_template, /*$$scope*/ ctx[9], dirty, get_close_slot_changes),
    						get_close_slot_context
    					);
    				}
    			} else {
    				if (close_slot_or_fallback && close_slot_or_fallback.p && (!current || dirty & /*closeAriaLabel, toggle, closeIcon*/ 19)) {
    					close_slot_or_fallback.p(ctx, !current ? -1 : dirty);
    				}
    			}

    			set_attributes(div, div_data = get_spread_update(div_levels, [
    				/*props*/ ctx[6],
    				(!current || dirty & /*classes*/ 8) && { class: /*classes*/ ctx[3] }
    			]));
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			transition_in(close_slot_or_fallback, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			transition_out(close_slot_or_fallback, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if_blocks[current_block_type_index].d();
    			if (close_slot_or_fallback) close_slot_or_fallback.d(detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$e.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$e($$self, $$props, $$invalidate) {
    	let closeIcon;
    	let classes;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('MDBModalHeader', slots, ['default','close']);
    	const forwardEvents = forwardEventsBuilder(current_component);
    	let { class: className = '' } = $$props;
    	let { toggle = undefined } = $$props;
    	let { closeAriaLabel = 'Close' } = $$props;
    	let { charCode = 215 } = $$props;
    	let { children = undefined } = $$props;
    	const props = clean$1($$props);

    	$$self.$$set = $$new_props => {
    		$$invalidate(11, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ('class' in $$new_props) $$invalidate(7, className = $$new_props.class);
    		if ('toggle' in $$new_props) $$invalidate(0, toggle = $$new_props.toggle);
    		if ('closeAriaLabel' in $$new_props) $$invalidate(1, closeAriaLabel = $$new_props.closeAriaLabel);
    		if ('charCode' in $$new_props) $$invalidate(8, charCode = $$new_props.charCode);
    		if ('children' in $$new_props) $$invalidate(2, children = $$new_props.children);
    		if ('$$scope' in $$new_props) $$invalidate(9, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		clean: clean$1,
    		clsx,
    		forwardEventsBuilder,
    		current_component,
    		forwardEvents,
    		className,
    		toggle,
    		closeAriaLabel,
    		charCode,
    		children,
    		props,
    		classes,
    		closeIcon
    	});

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(11, $$props = assign(assign({}, $$props), $$new_props));
    		if ('className' in $$props) $$invalidate(7, className = $$new_props.className);
    		if ('toggle' in $$props) $$invalidate(0, toggle = $$new_props.toggle);
    		if ('closeAriaLabel' in $$props) $$invalidate(1, closeAriaLabel = $$new_props.closeAriaLabel);
    		if ('charCode' in $$props) $$invalidate(8, charCode = $$new_props.charCode);
    		if ('children' in $$props) $$invalidate(2, children = $$new_props.children);
    		if ('classes' in $$props) $$invalidate(3, classes = $$new_props.classes);
    		if ('closeIcon' in $$props) $$invalidate(4, closeIcon = $$new_props.closeIcon);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*charCode*/ 256) {
    			$$invalidate(4, closeIcon = typeof charCode === 'number'
    			? String.fromCharCode(charCode)
    			: charCode);
    		}

    		if ($$self.$$.dirty & /*className*/ 128) {
    			$$invalidate(3, classes = clsx(className, 'modal-header'));
    		}
    	};

    	$$props = exclude_internal_props($$props);

    	return [
    		toggle,
    		closeAriaLabel,
    		children,
    		classes,
    		closeIcon,
    		forwardEvents,
    		props,
    		className,
    		charCode,
    		$$scope,
    		slots
    	];
    }

    class MDBModalHeader extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$e, create_fragment$e, safe_not_equal, {
    			class: 7,
    			toggle: 0,
    			closeAriaLabel: 1,
    			charCode: 8,
    			children: 2
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "MDBModalHeader",
    			options,
    			id: create_fragment$e.name
    		});
    	}

    	get class() {
    		throw new Error("<MDBModalHeader>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<MDBModalHeader>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get toggle() {
    		throw new Error("<MDBModalHeader>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set toggle(value) {
    		throw new Error("<MDBModalHeader>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get closeAriaLabel() {
    		throw new Error("<MDBModalHeader>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set closeAriaLabel(value) {
    		throw new Error("<MDBModalHeader>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get charCode() {
    		throw new Error("<MDBModalHeader>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set charCode(value) {
    		throw new Error("<MDBModalHeader>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get children() {
    		throw new Error("<MDBModalHeader>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set children(value) {
    		throw new Error("<MDBModalHeader>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\components\pages\sections\ModalSection.svelte generated by Svelte v3.59.2 */
    const file$c = "src\\components\\pages\\sections\\ModalSection.svelte";

    // (35:2) <MDBCardHeader>
    function create_default_slot_77(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Modals");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_77.name,
    		type: "slot",
    		source: "(35:2) <MDBCardHeader>",
    		ctx
    	});

    	return block;
    }

    // (47:10) <MDBBtn color="primary" size="sm" on:click={()=>toggle(1)}>
    function create_default_slot_76(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Top");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_76.name,
    		type: "slot",
    		source: "(47:10) <MDBBtn color=\\\"primary\\\" size=\\\"sm\\\" on:click={()=>toggle(1)}>",
    		ctx
    	});

    	return block;
    }

    // (48:10) <MDBBtn color="primary" size="sm" on:click={()=>toggle(2)}>
    function create_default_slot_75(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Bottom");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_75.name,
    		type: "slot",
    		source: "(48:10) <MDBBtn color=\\\"primary\\\" size=\\\"sm\\\" on:click={()=>toggle(2)}>",
    		ctx
    	});

    	return block;
    }

    // (52:14) <MDBBtn color="secondary" on:click={()=>toggle(1)}>
    function create_default_slot_74(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Close");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_74.name,
    		type: "slot",
    		source: "(52:14) <MDBBtn color=\\\"secondary\\\" on:click={()=>toggle(1)}>",
    		ctx
    	});

    	return block;
    }

    // (53:14) <MDBBtn color="primary" on:click={()=>toggle(1)}>
    function create_default_slot_73(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Save changes");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_73.name,
    		type: "slot",
    		source: "(53:14) <MDBBtn color=\\\"primary\\\" on:click={()=>toggle(1)}>",
    		ctx
    	});

    	return block;
    }

    // (50:12) <MDBModalBody class="text-center">
    function create_default_slot_72(ctx) {
    	let span;
    	let t1;
    	let mdbbtn0;
    	let t2;
    	let mdbbtn1;
    	let current;

    	mdbbtn0 = new MDBBtn({
    			props: {
    				color: "secondary",
    				$$slots: { default: [create_default_slot_74] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbbtn0.$on("click", /*click_handler_2*/ ctx[4]);

    	mdbbtn1 = new MDBBtn({
    			props: {
    				color: "primary",
    				$$slots: { default: [create_default_slot_73] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbbtn1.$on("click", /*click_handler_3*/ ctx[5]);

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = "Lorem ipsum dolor sit amet, consectetur adipisicing elit. Impedit nisi quo provident fugiat reprehenderit nostrum quos...";
    			t1 = space();
    			create_component(mdbbtn0.$$.fragment);
    			t2 = space();
    			create_component(mdbbtn1.$$.fragment);
    			add_location(span, file$c, 50, 14, 1872);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(mdbbtn0, target, anchor);
    			insert_dev(target, t2, anchor);
    			mount_component(mdbbtn1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbbtn0_changes = {};

    			if (dirty[1] & /*$$scope*/ 32768) {
    				mdbbtn0_changes.$$scope = { dirty, ctx };
    			}

    			mdbbtn0.$set(mdbbtn0_changes);
    			const mdbbtn1_changes = {};

    			if (dirty[1] & /*$$scope*/ 32768) {
    				mdbbtn1_changes.$$scope = { dirty, ctx };
    			}

    			mdbbtn1.$set(mdbbtn1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbbtn0.$$.fragment, local);
    			transition_in(mdbbtn1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbbtn0.$$.fragment, local);
    			transition_out(mdbbtn1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    			if (detaching) detach_dev(t1);
    			destroy_component(mdbbtn0, detaching);
    			if (detaching) detach_dev(t2);
    			destroy_component(mdbbtn1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_72.name,
    		type: "slot",
    		source: "(50:12) <MDBModalBody class=\\\"text-center\\\">",
    		ctx
    	});

    	return block;
    }

    // (49:10) <MDBModal toggle={()=>toggle(1)} isOpen={state.modal1} position="top" frame>
    function create_default_slot_71(ctx) {
    	let mdbmodalbody;
    	let current;

    	mdbmodalbody = new MDBModalBody({
    			props: {
    				class: "text-center",
    				$$slots: { default: [create_default_slot_72] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbmodalbody.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbmodalbody, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbmodalbody_changes = {};

    			if (dirty[1] & /*$$scope*/ 32768) {
    				mdbmodalbody_changes.$$scope = { dirty, ctx };
    			}

    			mdbmodalbody.$set(mdbmodalbody_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbmodalbody.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbmodalbody.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbmodalbody, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_71.name,
    		type: "slot",
    		source: "(49:10) <MDBModal toggle={()=>toggle(1)} isOpen={state.modal1} position=\\\"top\\\" frame>",
    		ctx
    	});

    	return block;
    }

    // (59:14) <MDBBtn color="secondary" on:click={()=>toggle(2)}>
    function create_default_slot_70(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Close");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_70.name,
    		type: "slot",
    		source: "(59:14) <MDBBtn color=\\\"secondary\\\" on:click={()=>toggle(2)}>",
    		ctx
    	});

    	return block;
    }

    // (60:14) <MDBBtn color="primary" on:click={()=>toggle(2)}>
    function create_default_slot_69(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Save changes");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_69.name,
    		type: "slot",
    		source: "(60:14) <MDBBtn color=\\\"primary\\\" on:click={()=>toggle(2)}>",
    		ctx
    	});

    	return block;
    }

    // (57:12) <MDBModalBody class="text-center">
    function create_default_slot_68(ctx) {
    	let span;
    	let t1;
    	let mdbbtn0;
    	let t2;
    	let mdbbtn1;
    	let current;

    	mdbbtn0 = new MDBBtn({
    			props: {
    				color: "secondary",
    				$$slots: { default: [create_default_slot_70] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbbtn0.$on("click", /*click_handler_4*/ ctx[7]);

    	mdbbtn1 = new MDBBtn({
    			props: {
    				color: "primary",
    				$$slots: { default: [create_default_slot_69] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbbtn1.$on("click", /*click_handler_5*/ ctx[8]);

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = "Lorem ipsum dolor sit amet, consectetur adipisicing elit. Impedit nisi quo provident fugiat reprehenderit nostrum quos...";
    			t1 = space();
    			create_component(mdbbtn0.$$.fragment);
    			t2 = space();
    			create_component(mdbbtn1.$$.fragment);
    			add_location(span, file$c, 57, 14, 2380);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(mdbbtn0, target, anchor);
    			insert_dev(target, t2, anchor);
    			mount_component(mdbbtn1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbbtn0_changes = {};

    			if (dirty[1] & /*$$scope*/ 32768) {
    				mdbbtn0_changes.$$scope = { dirty, ctx };
    			}

    			mdbbtn0.$set(mdbbtn0_changes);
    			const mdbbtn1_changes = {};

    			if (dirty[1] & /*$$scope*/ 32768) {
    				mdbbtn1_changes.$$scope = { dirty, ctx };
    			}

    			mdbbtn1.$set(mdbbtn1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbbtn0.$$.fragment, local);
    			transition_in(mdbbtn1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbbtn0.$$.fragment, local);
    			transition_out(mdbbtn1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    			if (detaching) detach_dev(t1);
    			destroy_component(mdbbtn0, detaching);
    			if (detaching) detach_dev(t2);
    			destroy_component(mdbbtn1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_68.name,
    		type: "slot",
    		source: "(57:12) <MDBModalBody class=\\\"text-center\\\">",
    		ctx
    	});

    	return block;
    }

    // (56:10) <MDBModal toggle={()=>toggle(2)} isOpen={state.modal2} position="bottom" frame>
    function create_default_slot_67(ctx) {
    	let mdbmodalbody;
    	let current;

    	mdbmodalbody = new MDBModalBody({
    			props: {
    				class: "text-center",
    				$$slots: { default: [create_default_slot_68] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbmodalbody.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbmodalbody, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbmodalbody_changes = {};

    			if (dirty[1] & /*$$scope*/ 32768) {
    				mdbmodalbody_changes.$$scope = { dirty, ctx };
    			}

    			mdbmodalbody.$set(mdbmodalbody_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbmodalbody.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbmodalbody.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbmodalbody, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_67.name,
    		type: "slot",
    		source: "(56:10) <MDBModal toggle={()=>toggle(2)} isOpen={state.modal2} position=\\\"bottom\\\" frame>",
    		ctx
    	});

    	return block;
    }

    // (42:6) <MDBCol md="3" class="mb-3">
    function create_default_slot_66(ctx) {
    	let h50;
    	let t1;
    	let img;
    	let img_src_value;
    	let t2;
    	let div;
    	let h51;
    	let t4;
    	let mdbbtn0;
    	let t5;
    	let mdbbtn1;
    	let t6;
    	let mdbmodal0;
    	let t7;
    	let mdbmodal1;
    	let current;

    	mdbbtn0 = new MDBBtn({
    			props: {
    				color: "primary",
    				size: "sm",
    				$$slots: { default: [create_default_slot_76] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbbtn0.$on("click", /*click_handler*/ ctx[2]);

    	mdbbtn1 = new MDBBtn({
    			props: {
    				color: "primary",
    				size: "sm",
    				$$slots: { default: [create_default_slot_75] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbbtn1.$on("click", /*click_handler_1*/ ctx[3]);

    	mdbmodal0 = new MDBModal({
    			props: {
    				toggle: /*func*/ ctx[6],
    				isOpen: /*state*/ ctx[0].modal1,
    				position: "top",
    				frame: true,
    				$$slots: { default: [create_default_slot_71] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbmodal1 = new MDBModal({
    			props: {
    				toggle: /*func_1*/ ctx[9],
    				isOpen: /*state*/ ctx[0].modal2,
    				position: "bottom",
    				frame: true,
    				$$slots: { default: [create_default_slot_67] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			h50 = element("h5");
    			h50.textContent = "Frame modal";
    			t1 = space();
    			img = element("img");
    			t2 = space();
    			div = element("div");
    			h51 = element("h5");
    			h51.textContent = "Position";
    			t4 = space();
    			create_component(mdbbtn0.$$.fragment);
    			t5 = space();
    			create_component(mdbbtn1.$$.fragment);
    			t6 = space();
    			create_component(mdbmodal0.$$.fragment);
    			t7 = space();
    			create_component(mdbmodal1.$$.fragment);
    			attr_dev(h50, "class", "text-center mb-3");
    			add_location(h50, file$c, 42, 8, 1309);
    			attr_dev(img, "class", "img-fluid z-depth-1");
    			if (!src_url_equal(img.src, img_src_value = "https://mdbootstrap.com/img/brandflow/modal4.jpg")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "frame position");
    			add_location(img, file$c, 43, 8, 1364);
    			attr_dev(h51, "class", "my-3");
    			add_location(h51, file$c, 45, 10, 1521);
    			attr_dev(div, "class", "text-center");
    			add_location(div, file$c, 44, 8, 1484);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h50, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, img, anchor);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, div, anchor);
    			append_dev(div, h51);
    			append_dev(div, t4);
    			mount_component(mdbbtn0, div, null);
    			append_dev(div, t5);
    			mount_component(mdbbtn1, div, null);
    			append_dev(div, t6);
    			mount_component(mdbmodal0, div, null);
    			append_dev(div, t7);
    			mount_component(mdbmodal1, div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbbtn0_changes = {};

    			if (dirty[1] & /*$$scope*/ 32768) {
    				mdbbtn0_changes.$$scope = { dirty, ctx };
    			}

    			mdbbtn0.$set(mdbbtn0_changes);
    			const mdbbtn1_changes = {};

    			if (dirty[1] & /*$$scope*/ 32768) {
    				mdbbtn1_changes.$$scope = { dirty, ctx };
    			}

    			mdbbtn1.$set(mdbbtn1_changes);
    			const mdbmodal0_changes = {};
    			if (dirty[0] & /*state*/ 1) mdbmodal0_changes.isOpen = /*state*/ ctx[0].modal1;

    			if (dirty[1] & /*$$scope*/ 32768) {
    				mdbmodal0_changes.$$scope = { dirty, ctx };
    			}

    			mdbmodal0.$set(mdbmodal0_changes);
    			const mdbmodal1_changes = {};
    			if (dirty[0] & /*state*/ 1) mdbmodal1_changes.isOpen = /*state*/ ctx[0].modal2;

    			if (dirty[1] & /*$$scope*/ 32768) {
    				mdbmodal1_changes.$$scope = { dirty, ctx };
    			}

    			mdbmodal1.$set(mdbmodal1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbbtn0.$$.fragment, local);
    			transition_in(mdbbtn1.$$.fragment, local);
    			transition_in(mdbmodal0.$$.fragment, local);
    			transition_in(mdbmodal1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbbtn0.$$.fragment, local);
    			transition_out(mdbbtn1.$$.fragment, local);
    			transition_out(mdbmodal0.$$.fragment, local);
    			transition_out(mdbmodal1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h50);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(img);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(div);
    			destroy_component(mdbbtn0);
    			destroy_component(mdbbtn1);
    			destroy_component(mdbmodal0);
    			destroy_component(mdbmodal1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_66.name,
    		type: "slot",
    		source: "(42:6) <MDBCol md=\\\"3\\\" class=\\\"mb-3\\\">",
    		ctx
    	});

    	return block;
    }

    // (70:10) <MDBBtn color="primary" size="sm" on:click={()=>toggle(3)}>
    function create_default_slot_65(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Top Right");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_65.name,
    		type: "slot",
    		source: "(70:10) <MDBBtn color=\\\"primary\\\" size=\\\"sm\\\" on:click={()=>toggle(3)}>",
    		ctx
    	});

    	return block;
    }

    // (71:10) <MDBBtn color="primary" size="sm" on:click={()=>toggle(4)}>
    function create_default_slot_64(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Top Left");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_64.name,
    		type: "slot",
    		source: "(71:10) <MDBBtn color=\\\"primary\\\" size=\\\"sm\\\" on:click={()=>toggle(4)}>",
    		ctx
    	});

    	return block;
    }

    // (72:10) <MDBBtn color="primary" size="sm" on:click={()=>toggle(5)}>
    function create_default_slot_63(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Bottom Right");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_63.name,
    		type: "slot",
    		source: "(72:10) <MDBBtn color=\\\"primary\\\" size=\\\"sm\\\" on:click={()=>toggle(5)}>",
    		ctx
    	});

    	return block;
    }

    // (73:10) <MDBBtn color="primary" size="sm" on:click={()=>toggle(6)}>
    function create_default_slot_62(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Bottom Left");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_62.name,
    		type: "slot",
    		source: "(73:10) <MDBBtn color=\\\"primary\\\" size=\\\"sm\\\" on:click={()=>toggle(6)}>",
    		ctx
    	});

    	return block;
    }

    // (75:12) <MDBModalHeader>
    function create_default_slot_61(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Modal Title");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_61.name,
    		type: "slot",
    		source: "(75:12) <MDBModalHeader>",
    		ctx
    	});

    	return block;
    }

    // (78:14) <MDBBtn color="secondary" on:click={()=>toggle(3)}>
    function create_default_slot_60(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Close");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_60.name,
    		type: "slot",
    		source: "(78:14) <MDBBtn color=\\\"secondary\\\" on:click={()=>toggle(3)}>",
    		ctx
    	});

    	return block;
    }

    // (76:12) <MDBModalBody class="text-center">
    function create_default_slot_59(ctx) {
    	let span;
    	let t1;
    	let mdbbtn;
    	let current;

    	mdbbtn = new MDBBtn({
    			props: {
    				color: "secondary",
    				$$slots: { default: [create_default_slot_60] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbbtn.$on("click", /*click_handler_10*/ ctx[14]);

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = "Lorem ipsum dolor sit amet, consectetur adipisicing elit. Impedit nisi quo provident fugiat reprehenderit nostrum quos...";
    			t1 = space();
    			create_component(mdbbtn.$$.fragment);
    			add_location(span, file$c, 76, 14, 3628);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(mdbbtn, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbbtn_changes = {};

    			if (dirty[1] & /*$$scope*/ 32768) {
    				mdbbtn_changes.$$scope = { dirty, ctx };
    			}

    			mdbbtn.$set(mdbbtn_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbbtn.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbbtn.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    			if (detaching) detach_dev(t1);
    			destroy_component(mdbbtn, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_59.name,
    		type: "slot",
    		source: "(76:12) <MDBModalBody class=\\\"text-center\\\">",
    		ctx
    	});

    	return block;
    }

    // (74:10) <MDBModal toggle={()=>toggle(3)} isOpen={state.modal3} side position="top-right">
    function create_default_slot_58(ctx) {
    	let mdbmodalheader;
    	let t;
    	let mdbmodalbody;
    	let current;

    	mdbmodalheader = new MDBModalHeader({
    			props: {
    				$$slots: { default: [create_default_slot_61] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbmodalbody = new MDBModalBody({
    			props: {
    				class: "text-center",
    				$$slots: { default: [create_default_slot_59] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbmodalheader.$$.fragment);
    			t = space();
    			create_component(mdbmodalbody.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbmodalheader, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(mdbmodalbody, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbmodalheader_changes = {};

    			if (dirty[1] & /*$$scope*/ 32768) {
    				mdbmodalheader_changes.$$scope = { dirty, ctx };
    			}

    			mdbmodalheader.$set(mdbmodalheader_changes);
    			const mdbmodalbody_changes = {};

    			if (dirty[1] & /*$$scope*/ 32768) {
    				mdbmodalbody_changes.$$scope = { dirty, ctx };
    			}

    			mdbmodalbody.$set(mdbmodalbody_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbmodalheader.$$.fragment, local);
    			transition_in(mdbmodalbody.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbmodalheader.$$.fragment, local);
    			transition_out(mdbmodalbody.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbmodalheader, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(mdbmodalbody, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_58.name,
    		type: "slot",
    		source: "(74:10) <MDBModal toggle={()=>toggle(3)} isOpen={state.modal3} side position=\\\"top-right\\\">",
    		ctx
    	});

    	return block;
    }

    // (82:12) <MDBModalHeader>
    function create_default_slot_57(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Modal Title");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_57.name,
    		type: "slot",
    		source: "(82:12) <MDBModalHeader>",
    		ctx
    	});

    	return block;
    }

    // (85:14) <MDBBtn color="secondary" on:click={()=>toggle(4)}>
    function create_default_slot_56(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Close");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_56.name,
    		type: "slot",
    		source: "(85:14) <MDBBtn color=\\\"secondary\\\" on:click={()=>toggle(4)}>",
    		ctx
    	});

    	return block;
    }

    // (83:12) <MDBModalBody class="text-center">
    function create_default_slot_55(ctx) {
    	let span;
    	let t1;
    	let mdbbtn;
    	let current;

    	mdbbtn = new MDBBtn({
    			props: {
    				color: "secondary",
    				$$slots: { default: [create_default_slot_56] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbbtn.$on("click", /*click_handler_11*/ ctx[16]);

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = "Lorem ipsum dolor sit amet, consectetur adipisicing elit. Impedit nisi quo provident fugiat reprehenderit nostrum quos...";
    			t1 = space();
    			create_component(mdbbtn.$$.fragment);
    			add_location(span, file$c, 83, 14, 4109);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(mdbbtn, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbbtn_changes = {};

    			if (dirty[1] & /*$$scope*/ 32768) {
    				mdbbtn_changes.$$scope = { dirty, ctx };
    			}

    			mdbbtn.$set(mdbbtn_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbbtn.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbbtn.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    			if (detaching) detach_dev(t1);
    			destroy_component(mdbbtn, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_55.name,
    		type: "slot",
    		source: "(83:12) <MDBModalBody class=\\\"text-center\\\">",
    		ctx
    	});

    	return block;
    }

    // (81:10) <MDBModal toggle={()=>toggle(4)} isOpen={state.modal4} side position="top-left">
    function create_default_slot_54(ctx) {
    	let mdbmodalheader;
    	let t;
    	let mdbmodalbody;
    	let current;

    	mdbmodalheader = new MDBModalHeader({
    			props: {
    				$$slots: { default: [create_default_slot_57] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbmodalbody = new MDBModalBody({
    			props: {
    				class: "text-center",
    				$$slots: { default: [create_default_slot_55] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbmodalheader.$$.fragment);
    			t = space();
    			create_component(mdbmodalbody.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbmodalheader, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(mdbmodalbody, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbmodalheader_changes = {};

    			if (dirty[1] & /*$$scope*/ 32768) {
    				mdbmodalheader_changes.$$scope = { dirty, ctx };
    			}

    			mdbmodalheader.$set(mdbmodalheader_changes);
    			const mdbmodalbody_changes = {};

    			if (dirty[1] & /*$$scope*/ 32768) {
    				mdbmodalbody_changes.$$scope = { dirty, ctx };
    			}

    			mdbmodalbody.$set(mdbmodalbody_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbmodalheader.$$.fragment, local);
    			transition_in(mdbmodalbody.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbmodalheader.$$.fragment, local);
    			transition_out(mdbmodalbody.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbmodalheader, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(mdbmodalbody, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_54.name,
    		type: "slot",
    		source: "(81:10) <MDBModal toggle={()=>toggle(4)} isOpen={state.modal4} side position=\\\"top-left\\\">",
    		ctx
    	});

    	return block;
    }

    // (89:12) <MDBModalHeader>
    function create_default_slot_53(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Modal Title");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_53.name,
    		type: "slot",
    		source: "(89:12) <MDBModalHeader>",
    		ctx
    	});

    	return block;
    }

    // (92:14) <MDBBtn color="secondary" on:click={()=>toggle(5)}>
    function create_default_slot_52(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Close");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_52.name,
    		type: "slot",
    		source: "(92:14) <MDBBtn color=\\\"secondary\\\" on:click={()=>toggle(5)}>",
    		ctx
    	});

    	return block;
    }

    // (90:12) <MDBModalBody class="text-center">
    function create_default_slot_51(ctx) {
    	let span;
    	let t1;
    	let mdbbtn;
    	let current;

    	mdbbtn = new MDBBtn({
    			props: {
    				color: "secondary",
    				$$slots: { default: [create_default_slot_52] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbbtn.$on("click", /*click_handler_12*/ ctx[18]);

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = "Lorem ipsum dolor sit amet, consectetur adipisicing elit. Impedit nisi quo provident fugiat reprehenderit nostrum quos...";
    			t1 = space();
    			create_component(mdbbtn.$$.fragment);
    			add_location(span, file$c, 90, 14, 4594);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(mdbbtn, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbbtn_changes = {};

    			if (dirty[1] & /*$$scope*/ 32768) {
    				mdbbtn_changes.$$scope = { dirty, ctx };
    			}

    			mdbbtn.$set(mdbbtn_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbbtn.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbbtn.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    			if (detaching) detach_dev(t1);
    			destroy_component(mdbbtn, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_51.name,
    		type: "slot",
    		source: "(90:12) <MDBModalBody class=\\\"text-center\\\">",
    		ctx
    	});

    	return block;
    }

    // (88:10) <MDBModal toggle={()=>toggle(5)} isOpen={state.modal5} side position="bottom-right">
    function create_default_slot_50(ctx) {
    	let mdbmodalheader;
    	let t;
    	let mdbmodalbody;
    	let current;

    	mdbmodalheader = new MDBModalHeader({
    			props: {
    				$$slots: { default: [create_default_slot_53] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbmodalbody = new MDBModalBody({
    			props: {
    				class: "text-center",
    				$$slots: { default: [create_default_slot_51] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbmodalheader.$$.fragment);
    			t = space();
    			create_component(mdbmodalbody.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbmodalheader, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(mdbmodalbody, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbmodalheader_changes = {};

    			if (dirty[1] & /*$$scope*/ 32768) {
    				mdbmodalheader_changes.$$scope = { dirty, ctx };
    			}

    			mdbmodalheader.$set(mdbmodalheader_changes);
    			const mdbmodalbody_changes = {};

    			if (dirty[1] & /*$$scope*/ 32768) {
    				mdbmodalbody_changes.$$scope = { dirty, ctx };
    			}

    			mdbmodalbody.$set(mdbmodalbody_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbmodalheader.$$.fragment, local);
    			transition_in(mdbmodalbody.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbmodalheader.$$.fragment, local);
    			transition_out(mdbmodalbody.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbmodalheader, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(mdbmodalbody, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_50.name,
    		type: "slot",
    		source: "(88:10) <MDBModal toggle={()=>toggle(5)} isOpen={state.modal5} side position=\\\"bottom-right\\\">",
    		ctx
    	});

    	return block;
    }

    // (96:12) <MDBModalHeader>
    function create_default_slot_49(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Modal Title");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_49.name,
    		type: "slot",
    		source: "(96:12) <MDBModalHeader>",
    		ctx
    	});

    	return block;
    }

    // (99:14) <MDBBtn color="secondary" on:click={()=>toggle(6)}>
    function create_default_slot_48(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Close");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_48.name,
    		type: "slot",
    		source: "(99:14) <MDBBtn color=\\\"secondary\\\" on:click={()=>toggle(6)}>",
    		ctx
    	});

    	return block;
    }

    // (97:12) <MDBModalBody class="text-center">
    function create_default_slot_47(ctx) {
    	let span;
    	let t1;
    	let mdbbtn;
    	let current;

    	mdbbtn = new MDBBtn({
    			props: {
    				color: "secondary",
    				$$slots: { default: [create_default_slot_48] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbbtn.$on("click", /*click_handler_13*/ ctx[20]);

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = "Lorem ipsum dolor sit amet, consectetur adipisicing elit. Impedit nisi quo provident fugiat reprehenderit nostrum quos...";
    			t1 = space();
    			create_component(mdbbtn.$$.fragment);
    			add_location(span, file$c, 97, 14, 5078);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(mdbbtn, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbbtn_changes = {};

    			if (dirty[1] & /*$$scope*/ 32768) {
    				mdbbtn_changes.$$scope = { dirty, ctx };
    			}

    			mdbbtn.$set(mdbbtn_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbbtn.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbbtn.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    			if (detaching) detach_dev(t1);
    			destroy_component(mdbbtn, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_47.name,
    		type: "slot",
    		source: "(97:12) <MDBModalBody class=\\\"text-center\\\">",
    		ctx
    	});

    	return block;
    }

    // (95:10) <MDBModal toggle={()=>toggle(6)} isOpen={state.modal6} side position="bottom-left">
    function create_default_slot_46(ctx) {
    	let mdbmodalheader;
    	let t;
    	let mdbmodalbody;
    	let current;

    	mdbmodalheader = new MDBModalHeader({
    			props: {
    				$$slots: { default: [create_default_slot_49] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbmodalbody = new MDBModalBody({
    			props: {
    				class: "text-center",
    				$$slots: { default: [create_default_slot_47] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbmodalheader.$$.fragment);
    			t = space();
    			create_component(mdbmodalbody.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbmodalheader, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(mdbmodalbody, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbmodalheader_changes = {};

    			if (dirty[1] & /*$$scope*/ 32768) {
    				mdbmodalheader_changes.$$scope = { dirty, ctx };
    			}

    			mdbmodalheader.$set(mdbmodalheader_changes);
    			const mdbmodalbody_changes = {};

    			if (dirty[1] & /*$$scope*/ 32768) {
    				mdbmodalbody_changes.$$scope = { dirty, ctx };
    			}

    			mdbmodalbody.$set(mdbmodalbody_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbmodalheader.$$.fragment, local);
    			transition_in(mdbmodalbody.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbmodalheader.$$.fragment, local);
    			transition_out(mdbmodalbody.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbmodalheader, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(mdbmodalbody, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_46.name,
    		type: "slot",
    		source: "(95:10) <MDBModal toggle={()=>toggle(6)} isOpen={state.modal6} side position=\\\"bottom-left\\\">",
    		ctx
    	});

    	return block;
    }

    // (65:6) <MDBCol md="3" class="mb-3">
    function create_default_slot_45(ctx) {
    	let h50;
    	let t1;
    	let img;
    	let img_src_value;
    	let t2;
    	let div;
    	let h51;
    	let t4;
    	let mdbbtn0;
    	let t5;
    	let mdbbtn1;
    	let t6;
    	let mdbbtn2;
    	let t7;
    	let mdbbtn3;
    	let t8;
    	let mdbmodal0;
    	let t9;
    	let mdbmodal1;
    	let t10;
    	let mdbmodal2;
    	let t11;
    	let mdbmodal3;
    	let current;

    	mdbbtn0 = new MDBBtn({
    			props: {
    				color: "primary",
    				size: "sm",
    				$$slots: { default: [create_default_slot_65] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbbtn0.$on("click", /*click_handler_6*/ ctx[10]);

    	mdbbtn1 = new MDBBtn({
    			props: {
    				color: "primary",
    				size: "sm",
    				$$slots: { default: [create_default_slot_64] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbbtn1.$on("click", /*click_handler_7*/ ctx[11]);

    	mdbbtn2 = new MDBBtn({
    			props: {
    				color: "primary",
    				size: "sm",
    				$$slots: { default: [create_default_slot_63] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbbtn2.$on("click", /*click_handler_8*/ ctx[12]);

    	mdbbtn3 = new MDBBtn({
    			props: {
    				color: "primary",
    				size: "sm",
    				$$slots: { default: [create_default_slot_62] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbbtn3.$on("click", /*click_handler_9*/ ctx[13]);

    	mdbmodal0 = new MDBModal({
    			props: {
    				toggle: /*func_2*/ ctx[15],
    				isOpen: /*state*/ ctx[0].modal3,
    				side: true,
    				position: "top-right",
    				$$slots: { default: [create_default_slot_58] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbmodal1 = new MDBModal({
    			props: {
    				toggle: /*func_3*/ ctx[17],
    				isOpen: /*state*/ ctx[0].modal4,
    				side: true,
    				position: "top-left",
    				$$slots: { default: [create_default_slot_54] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbmodal2 = new MDBModal({
    			props: {
    				toggle: /*func_4*/ ctx[19],
    				isOpen: /*state*/ ctx[0].modal5,
    				side: true,
    				position: "bottom-right",
    				$$slots: { default: [create_default_slot_50] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbmodal3 = new MDBModal({
    			props: {
    				toggle: /*func_5*/ ctx[21],
    				isOpen: /*state*/ ctx[0].modal6,
    				side: true,
    				position: "bottom-left",
    				$$slots: { default: [create_default_slot_46] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			h50 = element("h5");
    			h50.textContent = "Side modal";
    			t1 = space();
    			img = element("img");
    			t2 = space();
    			div = element("div");
    			h51 = element("h5");
    			h51.textContent = "Position";
    			t4 = space();
    			create_component(mdbbtn0.$$.fragment);
    			t5 = space();
    			create_component(mdbbtn1.$$.fragment);
    			t6 = space();
    			create_component(mdbbtn2.$$.fragment);
    			t7 = space();
    			create_component(mdbbtn3.$$.fragment);
    			t8 = space();
    			create_component(mdbmodal0.$$.fragment);
    			t9 = space();
    			create_component(mdbmodal1.$$.fragment);
    			t10 = space();
    			create_component(mdbmodal2.$$.fragment);
    			t11 = space();
    			create_component(mdbmodal3.$$.fragment);
    			attr_dev(h50, "class", "text-center mb-3");
    			add_location(h50, file$c, 65, 8, 2812);
    			attr_dev(img, "class", "img-fluid z-depth-1");
    			if (!src_url_equal(img.src, img_src_value = "https://mdbootstrap.com/img/brandflow/modal3.jpg")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "frame position");
    			add_location(img, file$c, 66, 8, 2866);
    			attr_dev(h51, "class", "my-3");
    			add_location(h51, file$c, 68, 10, 3023);
    			attr_dev(div, "class", "text-center");
    			add_location(div, file$c, 67, 8, 2986);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h50, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, img, anchor);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, div, anchor);
    			append_dev(div, h51);
    			append_dev(div, t4);
    			mount_component(mdbbtn0, div, null);
    			append_dev(div, t5);
    			mount_component(mdbbtn1, div, null);
    			append_dev(div, t6);
    			mount_component(mdbbtn2, div, null);
    			append_dev(div, t7);
    			mount_component(mdbbtn3, div, null);
    			append_dev(div, t8);
    			mount_component(mdbmodal0, div, null);
    			append_dev(div, t9);
    			mount_component(mdbmodal1, div, null);
    			append_dev(div, t10);
    			mount_component(mdbmodal2, div, null);
    			append_dev(div, t11);
    			mount_component(mdbmodal3, div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbbtn0_changes = {};

    			if (dirty[1] & /*$$scope*/ 32768) {
    				mdbbtn0_changes.$$scope = { dirty, ctx };
    			}

    			mdbbtn0.$set(mdbbtn0_changes);
    			const mdbbtn1_changes = {};

    			if (dirty[1] & /*$$scope*/ 32768) {
    				mdbbtn1_changes.$$scope = { dirty, ctx };
    			}

    			mdbbtn1.$set(mdbbtn1_changes);
    			const mdbbtn2_changes = {};

    			if (dirty[1] & /*$$scope*/ 32768) {
    				mdbbtn2_changes.$$scope = { dirty, ctx };
    			}

    			mdbbtn2.$set(mdbbtn2_changes);
    			const mdbbtn3_changes = {};

    			if (dirty[1] & /*$$scope*/ 32768) {
    				mdbbtn3_changes.$$scope = { dirty, ctx };
    			}

    			mdbbtn3.$set(mdbbtn3_changes);
    			const mdbmodal0_changes = {};
    			if (dirty[0] & /*state*/ 1) mdbmodal0_changes.isOpen = /*state*/ ctx[0].modal3;

    			if (dirty[1] & /*$$scope*/ 32768) {
    				mdbmodal0_changes.$$scope = { dirty, ctx };
    			}

    			mdbmodal0.$set(mdbmodal0_changes);
    			const mdbmodal1_changes = {};
    			if (dirty[0] & /*state*/ 1) mdbmodal1_changes.isOpen = /*state*/ ctx[0].modal4;

    			if (dirty[1] & /*$$scope*/ 32768) {
    				mdbmodal1_changes.$$scope = { dirty, ctx };
    			}

    			mdbmodal1.$set(mdbmodal1_changes);
    			const mdbmodal2_changes = {};
    			if (dirty[0] & /*state*/ 1) mdbmodal2_changes.isOpen = /*state*/ ctx[0].modal5;

    			if (dirty[1] & /*$$scope*/ 32768) {
    				mdbmodal2_changes.$$scope = { dirty, ctx };
    			}

    			mdbmodal2.$set(mdbmodal2_changes);
    			const mdbmodal3_changes = {};
    			if (dirty[0] & /*state*/ 1) mdbmodal3_changes.isOpen = /*state*/ ctx[0].modal6;

    			if (dirty[1] & /*$$scope*/ 32768) {
    				mdbmodal3_changes.$$scope = { dirty, ctx };
    			}

    			mdbmodal3.$set(mdbmodal3_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbbtn0.$$.fragment, local);
    			transition_in(mdbbtn1.$$.fragment, local);
    			transition_in(mdbbtn2.$$.fragment, local);
    			transition_in(mdbbtn3.$$.fragment, local);
    			transition_in(mdbmodal0.$$.fragment, local);
    			transition_in(mdbmodal1.$$.fragment, local);
    			transition_in(mdbmodal2.$$.fragment, local);
    			transition_in(mdbmodal3.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbbtn0.$$.fragment, local);
    			transition_out(mdbbtn1.$$.fragment, local);
    			transition_out(mdbbtn2.$$.fragment, local);
    			transition_out(mdbbtn3.$$.fragment, local);
    			transition_out(mdbmodal0.$$.fragment, local);
    			transition_out(mdbmodal1.$$.fragment, local);
    			transition_out(mdbmodal2.$$.fragment, local);
    			transition_out(mdbmodal3.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h50);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(img);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(div);
    			destroy_component(mdbbtn0);
    			destroy_component(mdbbtn1);
    			destroy_component(mdbbtn2);
    			destroy_component(mdbbtn3);
    			destroy_component(mdbmodal0);
    			destroy_component(mdbmodal1);
    			destroy_component(mdbmodal2);
    			destroy_component(mdbmodal3);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_45.name,
    		type: "slot",
    		source: "(65:6) <MDBCol md=\\\"3\\\" class=\\\"mb-3\\\">",
    		ctx
    	});

    	return block;
    }

    // (109:10) <MDBBtn color="primary" size="sm" on:click={()=>toggle(7)}>
    function create_default_slot_44(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Small");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_44.name,
    		type: "slot",
    		source: "(109:10) <MDBBtn color=\\\"primary\\\" size=\\\"sm\\\" on:click={()=>toggle(7)}>",
    		ctx
    	});

    	return block;
    }

    // (110:10) <MDBBtn color="primary" size="sm" on:click={()=>toggle(8)}>
    function create_default_slot_43(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Medium");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_43.name,
    		type: "slot",
    		source: "(110:10) <MDBBtn color=\\\"primary\\\" size=\\\"sm\\\" on:click={()=>toggle(8)}>",
    		ctx
    	});

    	return block;
    }

    // (111:10) <MDBBtn color="primary" size="sm" on:click={()=>toggle(9)}>
    function create_default_slot_42(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Large");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_42.name,
    		type: "slot",
    		source: "(111:10) <MDBBtn color=\\\"primary\\\" size=\\\"sm\\\" on:click={()=>toggle(9)}>",
    		ctx
    	});

    	return block;
    }

    // (112:10) <MDBBtn color="primary" size="sm" on:click={()=>toggle(10)}>
    function create_default_slot_41(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Fluid");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_41.name,
    		type: "slot",
    		source: "(112:10) <MDBBtn color=\\\"primary\\\" size=\\\"sm\\\" on:click={()=>toggle(10)}>",
    		ctx
    	});

    	return block;
    }

    // (114:12) <MDBModalHeader>
    function create_default_slot_40(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Modal Title");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_40.name,
    		type: "slot",
    		source: "(114:12) <MDBModalHeader>",
    		ctx
    	});

    	return block;
    }

    // (117:14) <MDBBtn color="secondary" on:click={()=>toggle(7)}>
    function create_default_slot_39(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Close");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_39.name,
    		type: "slot",
    		source: "(117:14) <MDBBtn color=\\\"secondary\\\" on:click={()=>toggle(7)}>",
    		ctx
    	});

    	return block;
    }

    // (115:12) <MDBModalBody class="text-center">
    function create_default_slot_38(ctx) {
    	let span;
    	let t1;
    	let mdbbtn;
    	let current;

    	mdbbtn = new MDBBtn({
    			props: {
    				color: "secondary",
    				$$slots: { default: [create_default_slot_39] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbbtn.$on("click", /*click_handler_18*/ ctx[26]);

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = "Lorem ipsum dolor sit amet, consectetur adipisicing elit. Impedit nisi quo provident fugiat reprehenderit nostrum quos...";
    			t1 = space();
    			create_component(mdbbtn.$$.fragment);
    			add_location(span, file$c, 115, 14, 6205);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(mdbbtn, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbbtn_changes = {};

    			if (dirty[1] & /*$$scope*/ 32768) {
    				mdbbtn_changes.$$scope = { dirty, ctx };
    			}

    			mdbbtn.$set(mdbbtn_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbbtn.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbbtn.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    			if (detaching) detach_dev(t1);
    			destroy_component(mdbbtn, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_38.name,
    		type: "slot",
    		source: "(115:12) <MDBModalBody class=\\\"text-center\\\">",
    		ctx
    	});

    	return block;
    }

    // (113:10) <MDBModal toggle={()=>toggle(7)} isOpen={state.modal7} size="sm">
    function create_default_slot_37$1(ctx) {
    	let mdbmodalheader;
    	let t;
    	let mdbmodalbody;
    	let current;

    	mdbmodalheader = new MDBModalHeader({
    			props: {
    				$$slots: { default: [create_default_slot_40] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbmodalbody = new MDBModalBody({
    			props: {
    				class: "text-center",
    				$$slots: { default: [create_default_slot_38] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbmodalheader.$$.fragment);
    			t = space();
    			create_component(mdbmodalbody.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbmodalheader, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(mdbmodalbody, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbmodalheader_changes = {};

    			if (dirty[1] & /*$$scope*/ 32768) {
    				mdbmodalheader_changes.$$scope = { dirty, ctx };
    			}

    			mdbmodalheader.$set(mdbmodalheader_changes);
    			const mdbmodalbody_changes = {};

    			if (dirty[1] & /*$$scope*/ 32768) {
    				mdbmodalbody_changes.$$scope = { dirty, ctx };
    			}

    			mdbmodalbody.$set(mdbmodalbody_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbmodalheader.$$.fragment, local);
    			transition_in(mdbmodalbody.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbmodalheader.$$.fragment, local);
    			transition_out(mdbmodalbody.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbmodalheader, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(mdbmodalbody, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_37$1.name,
    		type: "slot",
    		source: "(113:10) <MDBModal toggle={()=>toggle(7)} isOpen={state.modal7} size=\\\"sm\\\">",
    		ctx
    	});

    	return block;
    }

    // (121:12) <MDBModalHeader>
    function create_default_slot_36$1(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Modal Title");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_36$1.name,
    		type: "slot",
    		source: "(121:12) <MDBModalHeader>",
    		ctx
    	});

    	return block;
    }

    // (124:14) <MDBBtn color="secondary" on:click={()=>toggle(8)}>
    function create_default_slot_35$1(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Close");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_35$1.name,
    		type: "slot",
    		source: "(124:14) <MDBBtn color=\\\"secondary\\\" on:click={()=>toggle(8)}>",
    		ctx
    	});

    	return block;
    }

    // (122:12) <MDBModalBody class="text-center">
    function create_default_slot_34$1(ctx) {
    	let span;
    	let t1;
    	let mdbbtn;
    	let current;

    	mdbbtn = new MDBBtn({
    			props: {
    				color: "secondary",
    				$$slots: { default: [create_default_slot_35$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbbtn.$on("click", /*click_handler_19*/ ctx[28]);

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = "Lorem ipsum dolor sit amet, consectetur adipisicing elit. Impedit nisi quo provident fugiat reprehenderit nostrum quos...";
    			t1 = space();
    			create_component(mdbbtn.$$.fragment);
    			add_location(span, file$c, 122, 14, 6662);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(mdbbtn, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbbtn_changes = {};

    			if (dirty[1] & /*$$scope*/ 32768) {
    				mdbbtn_changes.$$scope = { dirty, ctx };
    			}

    			mdbbtn.$set(mdbbtn_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbbtn.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbbtn.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    			if (detaching) detach_dev(t1);
    			destroy_component(mdbbtn, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_34$1.name,
    		type: "slot",
    		source: "(122:12) <MDBModalBody class=\\\"text-center\\\">",
    		ctx
    	});

    	return block;
    }

    // (120:10) <MDBModal toggle={()=>toggle(8)} isOpen={state.modal8} >
    function create_default_slot_33$1(ctx) {
    	let mdbmodalheader;
    	let t;
    	let mdbmodalbody;
    	let current;

    	mdbmodalheader = new MDBModalHeader({
    			props: {
    				$$slots: { default: [create_default_slot_36$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbmodalbody = new MDBModalBody({
    			props: {
    				class: "text-center",
    				$$slots: { default: [create_default_slot_34$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbmodalheader.$$.fragment);
    			t = space();
    			create_component(mdbmodalbody.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbmodalheader, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(mdbmodalbody, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbmodalheader_changes = {};

    			if (dirty[1] & /*$$scope*/ 32768) {
    				mdbmodalheader_changes.$$scope = { dirty, ctx };
    			}

    			mdbmodalheader.$set(mdbmodalheader_changes);
    			const mdbmodalbody_changes = {};

    			if (dirty[1] & /*$$scope*/ 32768) {
    				mdbmodalbody_changes.$$scope = { dirty, ctx };
    			}

    			mdbmodalbody.$set(mdbmodalbody_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbmodalheader.$$.fragment, local);
    			transition_in(mdbmodalbody.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbmodalheader.$$.fragment, local);
    			transition_out(mdbmodalbody.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbmodalheader, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(mdbmodalbody, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_33$1.name,
    		type: "slot",
    		source: "(120:10) <MDBModal toggle={()=>toggle(8)} isOpen={state.modal8} >",
    		ctx
    	});

    	return block;
    }

    // (128:12) <MDBModalHeader>
    function create_default_slot_32$1(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Modal Title");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_32$1.name,
    		type: "slot",
    		source: "(128:12) <MDBModalHeader>",
    		ctx
    	});

    	return block;
    }

    // (131:14) <MDBBtn color="secondary" on:click={()=>toggle(9)}>
    function create_default_slot_31$1(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Close");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_31$1.name,
    		type: "slot",
    		source: "(131:14) <MDBBtn color=\\\"secondary\\\" on:click={()=>toggle(9)}>",
    		ctx
    	});

    	return block;
    }

    // (129:12) <MDBModalBody class="text-center">
    function create_default_slot_30$1(ctx) {
    	let span;
    	let t1;
    	let mdbbtn;
    	let current;

    	mdbbtn = new MDBBtn({
    			props: {
    				color: "secondary",
    				$$slots: { default: [create_default_slot_31$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbbtn.$on("click", /*click_handler_20*/ ctx[30]);

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = "Lorem ipsum dolor sit amet, consectetur adipisicing elit. Impedit nisi quo provident fugiat reprehenderit nostrum quos...";
    			t1 = space();
    			create_component(mdbbtn.$$.fragment);
    			add_location(span, file$c, 129, 14, 7128);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(mdbbtn, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbbtn_changes = {};

    			if (dirty[1] & /*$$scope*/ 32768) {
    				mdbbtn_changes.$$scope = { dirty, ctx };
    			}

    			mdbbtn.$set(mdbbtn_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbbtn.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbbtn.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    			if (detaching) detach_dev(t1);
    			destroy_component(mdbbtn, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_30$1.name,
    		type: "slot",
    		source: "(129:12) <MDBModalBody class=\\\"text-center\\\">",
    		ctx
    	});

    	return block;
    }

    // (127:10) <MDBModal toggle={()=>toggle(9)} isOpen={state.modal9} size="lg">
    function create_default_slot_29$1(ctx) {
    	let mdbmodalheader;
    	let t;
    	let mdbmodalbody;
    	let current;

    	mdbmodalheader = new MDBModalHeader({
    			props: {
    				$$slots: { default: [create_default_slot_32$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbmodalbody = new MDBModalBody({
    			props: {
    				class: "text-center",
    				$$slots: { default: [create_default_slot_30$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbmodalheader.$$.fragment);
    			t = space();
    			create_component(mdbmodalbody.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbmodalheader, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(mdbmodalbody, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbmodalheader_changes = {};

    			if (dirty[1] & /*$$scope*/ 32768) {
    				mdbmodalheader_changes.$$scope = { dirty, ctx };
    			}

    			mdbmodalheader.$set(mdbmodalheader_changes);
    			const mdbmodalbody_changes = {};

    			if (dirty[1] & /*$$scope*/ 32768) {
    				mdbmodalbody_changes.$$scope = { dirty, ctx };
    			}

    			mdbmodalbody.$set(mdbmodalbody_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbmodalheader.$$.fragment, local);
    			transition_in(mdbmodalbody.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbmodalheader.$$.fragment, local);
    			transition_out(mdbmodalbody.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbmodalheader, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(mdbmodalbody, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_29$1.name,
    		type: "slot",
    		source: "(127:10) <MDBModal toggle={()=>toggle(9)} isOpen={state.modal9} size=\\\"lg\\\">",
    		ctx
    	});

    	return block;
    }

    // (135:12) <MDBModalHeader>
    function create_default_slot_28$1(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Modal Title");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_28$1.name,
    		type: "slot",
    		source: "(135:12) <MDBModalHeader>",
    		ctx
    	});

    	return block;
    }

    // (138:14) <MDBBtn color="secondary" on:click={()=>toggle(10)}>
    function create_default_slot_27$1(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Close");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_27$1.name,
    		type: "slot",
    		source: "(138:14) <MDBBtn color=\\\"secondary\\\" on:click={()=>toggle(10)}>",
    		ctx
    	});

    	return block;
    }

    // (136:12) <MDBModalBody class="text-center">
    function create_default_slot_26$1(ctx) {
    	let span;
    	let t1;
    	let mdbbtn;
    	let current;

    	mdbbtn = new MDBBtn({
    			props: {
    				color: "secondary",
    				$$slots: { default: [create_default_slot_27$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbbtn.$on("click", /*click_handler_21*/ ctx[32]);

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = "Lorem ipsum dolor sit amet, consectetur adipisicing elit. Impedit nisi quo provident fugiat reprehenderit nostrum quos...";
    			t1 = space();
    			create_component(mdbbtn.$$.fragment);
    			add_location(span, file$c, 136, 14, 7599);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(mdbbtn, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbbtn_changes = {};

    			if (dirty[1] & /*$$scope*/ 32768) {
    				mdbbtn_changes.$$scope = { dirty, ctx };
    			}

    			mdbbtn.$set(mdbbtn_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbbtn.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbbtn.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    			if (detaching) detach_dev(t1);
    			destroy_component(mdbbtn, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_26$1.name,
    		type: "slot",
    		source: "(136:12) <MDBModalBody class=\\\"text-center\\\">",
    		ctx
    	});

    	return block;
    }

    // (134:10) <MDBModal toggle={()=>toggle(10)} isOpen={state.modal10} size="fluid">
    function create_default_slot_25$1(ctx) {
    	let mdbmodalheader;
    	let t;
    	let mdbmodalbody;
    	let current;

    	mdbmodalheader = new MDBModalHeader({
    			props: {
    				$$slots: { default: [create_default_slot_28$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbmodalbody = new MDBModalBody({
    			props: {
    				class: "text-center",
    				$$slots: { default: [create_default_slot_26$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbmodalheader.$$.fragment);
    			t = space();
    			create_component(mdbmodalbody.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbmodalheader, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(mdbmodalbody, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbmodalheader_changes = {};

    			if (dirty[1] & /*$$scope*/ 32768) {
    				mdbmodalheader_changes.$$scope = { dirty, ctx };
    			}

    			mdbmodalheader.$set(mdbmodalheader_changes);
    			const mdbmodalbody_changes = {};

    			if (dirty[1] & /*$$scope*/ 32768) {
    				mdbmodalbody_changes.$$scope = { dirty, ctx };
    			}

    			mdbmodalbody.$set(mdbmodalbody_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbmodalheader.$$.fragment, local);
    			transition_in(mdbmodalbody.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbmodalheader.$$.fragment, local);
    			transition_out(mdbmodalbody.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbmodalheader, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(mdbmodalbody, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_25$1.name,
    		type: "slot",
    		source: "(134:10) <MDBModal toggle={()=>toggle(10)} isOpen={state.modal10} size=\\\"fluid\\\">",
    		ctx
    	});

    	return block;
    }

    // (104:6) <MDBCol md="3" class="mb-3">
    function create_default_slot_24$1(ctx) {
    	let h50;
    	let t1;
    	let img;
    	let img_src_value;
    	let t2;
    	let div;
    	let h51;
    	let t4;
    	let mdbbtn0;
    	let t5;
    	let mdbbtn1;
    	let t6;
    	let mdbbtn2;
    	let t7;
    	let mdbbtn3;
    	let t8;
    	let mdbmodal0;
    	let t9;
    	let mdbmodal1;
    	let t10;
    	let mdbmodal2;
    	let t11;
    	let mdbmodal3;
    	let current;

    	mdbbtn0 = new MDBBtn({
    			props: {
    				color: "primary",
    				size: "sm",
    				$$slots: { default: [create_default_slot_44] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbbtn0.$on("click", /*click_handler_14*/ ctx[22]);

    	mdbbtn1 = new MDBBtn({
    			props: {
    				color: "primary",
    				size: "sm",
    				$$slots: { default: [create_default_slot_43] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbbtn1.$on("click", /*click_handler_15*/ ctx[23]);

    	mdbbtn2 = new MDBBtn({
    			props: {
    				color: "primary",
    				size: "sm",
    				$$slots: { default: [create_default_slot_42] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbbtn2.$on("click", /*click_handler_16*/ ctx[24]);

    	mdbbtn3 = new MDBBtn({
    			props: {
    				color: "primary",
    				size: "sm",
    				$$slots: { default: [create_default_slot_41] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbbtn3.$on("click", /*click_handler_17*/ ctx[25]);

    	mdbmodal0 = new MDBModal({
    			props: {
    				toggle: /*func_6*/ ctx[27],
    				isOpen: /*state*/ ctx[0].modal7,
    				size: "sm",
    				$$slots: { default: [create_default_slot_37$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbmodal1 = new MDBModal({
    			props: {
    				toggle: /*func_7*/ ctx[29],
    				isOpen: /*state*/ ctx[0].modal8,
    				$$slots: { default: [create_default_slot_33$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbmodal2 = new MDBModal({
    			props: {
    				toggle: /*func_8*/ ctx[31],
    				isOpen: /*state*/ ctx[0].modal9,
    				size: "lg",
    				$$slots: { default: [create_default_slot_29$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbmodal3 = new MDBModal({
    			props: {
    				toggle: /*func_9*/ ctx[33],
    				isOpen: /*state*/ ctx[0].modal10,
    				size: "fluid",
    				$$slots: { default: [create_default_slot_25$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			h50 = element("h5");
    			h50.textContent = "Central modal";
    			t1 = space();
    			img = element("img");
    			t2 = space();
    			div = element("div");
    			h51 = element("h5");
    			h51.textContent = "Size";
    			t4 = space();
    			create_component(mdbbtn0.$$.fragment);
    			t5 = space();
    			create_component(mdbbtn1.$$.fragment);
    			t6 = space();
    			create_component(mdbbtn2.$$.fragment);
    			t7 = space();
    			create_component(mdbbtn3.$$.fragment);
    			t8 = space();
    			create_component(mdbmodal0.$$.fragment);
    			t9 = space();
    			create_component(mdbmodal1.$$.fragment);
    			t10 = space();
    			create_component(mdbmodal2.$$.fragment);
    			t11 = space();
    			create_component(mdbmodal3.$$.fragment);
    			attr_dev(h50, "class", "text-center mb-3");
    			add_location(h50, file$c, 104, 8, 5424);
    			attr_dev(img, "class", "img-fluid z-depth-1");
    			if (!src_url_equal(img.src, img_src_value = "https://mdbootstrap.com/img/brandflow/modal2.jpg")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "frame position");
    			add_location(img, file$c, 105, 8, 5481);
    			attr_dev(h51, "class", "my-3");
    			add_location(h51, file$c, 107, 10, 5638);
    			attr_dev(div, "class", "text-center");
    			add_location(div, file$c, 106, 8, 5601);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h50, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, img, anchor);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, div, anchor);
    			append_dev(div, h51);
    			append_dev(div, t4);
    			mount_component(mdbbtn0, div, null);
    			append_dev(div, t5);
    			mount_component(mdbbtn1, div, null);
    			append_dev(div, t6);
    			mount_component(mdbbtn2, div, null);
    			append_dev(div, t7);
    			mount_component(mdbbtn3, div, null);
    			append_dev(div, t8);
    			mount_component(mdbmodal0, div, null);
    			append_dev(div, t9);
    			mount_component(mdbmodal1, div, null);
    			append_dev(div, t10);
    			mount_component(mdbmodal2, div, null);
    			append_dev(div, t11);
    			mount_component(mdbmodal3, div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbbtn0_changes = {};

    			if (dirty[1] & /*$$scope*/ 32768) {
    				mdbbtn0_changes.$$scope = { dirty, ctx };
    			}

    			mdbbtn0.$set(mdbbtn0_changes);
    			const mdbbtn1_changes = {};

    			if (dirty[1] & /*$$scope*/ 32768) {
    				mdbbtn1_changes.$$scope = { dirty, ctx };
    			}

    			mdbbtn1.$set(mdbbtn1_changes);
    			const mdbbtn2_changes = {};

    			if (dirty[1] & /*$$scope*/ 32768) {
    				mdbbtn2_changes.$$scope = { dirty, ctx };
    			}

    			mdbbtn2.$set(mdbbtn2_changes);
    			const mdbbtn3_changes = {};

    			if (dirty[1] & /*$$scope*/ 32768) {
    				mdbbtn3_changes.$$scope = { dirty, ctx };
    			}

    			mdbbtn3.$set(mdbbtn3_changes);
    			const mdbmodal0_changes = {};
    			if (dirty[0] & /*state*/ 1) mdbmodal0_changes.isOpen = /*state*/ ctx[0].modal7;

    			if (dirty[1] & /*$$scope*/ 32768) {
    				mdbmodal0_changes.$$scope = { dirty, ctx };
    			}

    			mdbmodal0.$set(mdbmodal0_changes);
    			const mdbmodal1_changes = {};
    			if (dirty[0] & /*state*/ 1) mdbmodal1_changes.isOpen = /*state*/ ctx[0].modal8;

    			if (dirty[1] & /*$$scope*/ 32768) {
    				mdbmodal1_changes.$$scope = { dirty, ctx };
    			}

    			mdbmodal1.$set(mdbmodal1_changes);
    			const mdbmodal2_changes = {};
    			if (dirty[0] & /*state*/ 1) mdbmodal2_changes.isOpen = /*state*/ ctx[0].modal9;

    			if (dirty[1] & /*$$scope*/ 32768) {
    				mdbmodal2_changes.$$scope = { dirty, ctx };
    			}

    			mdbmodal2.$set(mdbmodal2_changes);
    			const mdbmodal3_changes = {};
    			if (dirty[0] & /*state*/ 1) mdbmodal3_changes.isOpen = /*state*/ ctx[0].modal10;

    			if (dirty[1] & /*$$scope*/ 32768) {
    				mdbmodal3_changes.$$scope = { dirty, ctx };
    			}

    			mdbmodal3.$set(mdbmodal3_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbbtn0.$$.fragment, local);
    			transition_in(mdbbtn1.$$.fragment, local);
    			transition_in(mdbbtn2.$$.fragment, local);
    			transition_in(mdbbtn3.$$.fragment, local);
    			transition_in(mdbmodal0.$$.fragment, local);
    			transition_in(mdbmodal1.$$.fragment, local);
    			transition_in(mdbmodal2.$$.fragment, local);
    			transition_in(mdbmodal3.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbbtn0.$$.fragment, local);
    			transition_out(mdbbtn1.$$.fragment, local);
    			transition_out(mdbbtn2.$$.fragment, local);
    			transition_out(mdbbtn3.$$.fragment, local);
    			transition_out(mdbmodal0.$$.fragment, local);
    			transition_out(mdbmodal1.$$.fragment, local);
    			transition_out(mdbmodal2.$$.fragment, local);
    			transition_out(mdbmodal3.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h50);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(img);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(div);
    			destroy_component(mdbbtn0);
    			destroy_component(mdbbtn1);
    			destroy_component(mdbbtn2);
    			destroy_component(mdbbtn3);
    			destroy_component(mdbmodal0);
    			destroy_component(mdbmodal1);
    			destroy_component(mdbmodal2);
    			destroy_component(mdbmodal3);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_24$1.name,
    		type: "slot",
    		source: "(104:6) <MDBCol md=\\\"3\\\" class=\\\"mb-3\\\">",
    		ctx
    	});

    	return block;
    }

    // (148:10) <MDBBtn color="primary" size="sm" on:click={()=>toggle(11)}>
    function create_default_slot_23$1(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Right");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_23$1.name,
    		type: "slot",
    		source: "(148:10) <MDBBtn color=\\\"primary\\\" size=\\\"sm\\\" on:click={()=>toggle(11)}>",
    		ctx
    	});

    	return block;
    }

    // (149:10) <MDBBtn color="primary" size="sm" on:click={()=>toggle(12)}>
    function create_default_slot_22$1(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Left");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_22$1.name,
    		type: "slot",
    		source: "(149:10) <MDBBtn color=\\\"primary\\\" size=\\\"sm\\\" on:click={()=>toggle(12)}>",
    		ctx
    	});

    	return block;
    }

    // (150:10) <MDBBtn color="primary" size="sm" on:click={()=>toggle(13)}>
    function create_default_slot_21$1(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Top");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_21$1.name,
    		type: "slot",
    		source: "(150:10) <MDBBtn color=\\\"primary\\\" size=\\\"sm\\\" on:click={()=>toggle(13)}>",
    		ctx
    	});

    	return block;
    }

    // (151:10) <MDBBtn color="primary" size="sm" on:click={()=>toggle(14)}>
    function create_default_slot_20$1(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Bottom");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_20$1.name,
    		type: "slot",
    		source: "(151:10) <MDBBtn color=\\\"primary\\\" size=\\\"sm\\\" on:click={()=>toggle(14)}>",
    		ctx
    	});

    	return block;
    }

    // (153:12) <MDBModalHeader>
    function create_default_slot_19$1(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Modal Title");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_19$1.name,
    		type: "slot",
    		source: "(153:12) <MDBModalHeader>",
    		ctx
    	});

    	return block;
    }

    // (156:14) <MDBBtn color="secondary" on:click={()=>toggle(11)}>
    function create_default_slot_18$1(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Close");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_18$1.name,
    		type: "slot",
    		source: "(156:14) <MDBBtn color=\\\"secondary\\\" on:click={()=>toggle(11)}>",
    		ctx
    	});

    	return block;
    }

    // (154:12) <MDBModalBody class="text-center">
    function create_default_slot_17$1(ctx) {
    	let span;
    	let t1;
    	let mdbbtn;
    	let current;

    	mdbbtn = new MDBBtn({
    			props: {
    				color: "secondary",
    				$$slots: { default: [create_default_slot_18$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbbtn.$on("click", /*click_handler_26*/ ctx[38]);

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = "Lorem ipsum dolor sit amet, consectetur adipisicing elit. Impedit nisi quo provident fugiat reprehenderit nostrum quos...";
    			t1 = space();
    			create_component(mdbbtn.$$.fragment);
    			add_location(span, file$c, 154, 14, 8749);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(mdbbtn, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbbtn_changes = {};

    			if (dirty[1] & /*$$scope*/ 32768) {
    				mdbbtn_changes.$$scope = { dirty, ctx };
    			}

    			mdbbtn.$set(mdbbtn_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbbtn.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbbtn.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    			if (detaching) detach_dev(t1);
    			destroy_component(mdbbtn, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_17$1.name,
    		type: "slot",
    		source: "(154:12) <MDBModalBody class=\\\"text-center\\\">",
    		ctx
    	});

    	return block;
    }

    // (152:10) <MDBModal toggle={()=>toggle(11)} isOpen={state.modal11} fullHeight position="right">
    function create_default_slot_16$2(ctx) {
    	let mdbmodalheader;
    	let t;
    	let mdbmodalbody;
    	let current;

    	mdbmodalheader = new MDBModalHeader({
    			props: {
    				$$slots: { default: [create_default_slot_19$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbmodalbody = new MDBModalBody({
    			props: {
    				class: "text-center",
    				$$slots: { default: [create_default_slot_17$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbmodalheader.$$.fragment);
    			t = space();
    			create_component(mdbmodalbody.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbmodalheader, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(mdbmodalbody, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbmodalheader_changes = {};

    			if (dirty[1] & /*$$scope*/ 32768) {
    				mdbmodalheader_changes.$$scope = { dirty, ctx };
    			}

    			mdbmodalheader.$set(mdbmodalheader_changes);
    			const mdbmodalbody_changes = {};

    			if (dirty[1] & /*$$scope*/ 32768) {
    				mdbmodalbody_changes.$$scope = { dirty, ctx };
    			}

    			mdbmodalbody.$set(mdbmodalbody_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbmodalheader.$$.fragment, local);
    			transition_in(mdbmodalbody.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbmodalheader.$$.fragment, local);
    			transition_out(mdbmodalbody.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbmodalheader, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(mdbmodalbody, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_16$2.name,
    		type: "slot",
    		source: "(152:10) <MDBModal toggle={()=>toggle(11)} isOpen={state.modal11} fullHeight position=\\\"right\\\">",
    		ctx
    	});

    	return block;
    }

    // (160:12) <MDBModalHeader>
    function create_default_slot_15$2(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Modal Title");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_15$2.name,
    		type: "slot",
    		source: "(160:12) <MDBModalHeader>",
    		ctx
    	});

    	return block;
    }

    // (163:14) <MDBBtn color="secondary" on:click={()=>toggle(12)}>
    function create_default_slot_14$2(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Close");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_14$2.name,
    		type: "slot",
    		source: "(163:14) <MDBBtn color=\\\"secondary\\\" on:click={()=>toggle(12)}>",
    		ctx
    	});

    	return block;
    }

    // (161:12) <MDBModalBody class="text-center">
    function create_default_slot_13$2(ctx) {
    	let span;
    	let t1;
    	let mdbbtn;
    	let current;

    	mdbbtn = new MDBBtn({
    			props: {
    				color: "secondary",
    				$$slots: { default: [create_default_slot_14$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbbtn.$on("click", /*click_handler_27*/ ctx[40]);

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = "Lorem ipsum dolor sit amet, consectetur adipisicing elit. Impedit nisi quo provident fugiat reprehenderit nostrum quos...";
    			t1 = space();
    			create_component(mdbbtn.$$.fragment);
    			add_location(span, file$c, 161, 14, 9235);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(mdbbtn, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbbtn_changes = {};

    			if (dirty[1] & /*$$scope*/ 32768) {
    				mdbbtn_changes.$$scope = { dirty, ctx };
    			}

    			mdbbtn.$set(mdbbtn_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbbtn.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbbtn.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    			if (detaching) detach_dev(t1);
    			destroy_component(mdbbtn, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_13$2.name,
    		type: "slot",
    		source: "(161:12) <MDBModalBody class=\\\"text-center\\\">",
    		ctx
    	});

    	return block;
    }

    // (159:10) <MDBModal toggle={()=>toggle(12)} isOpen={state.modal12} fullHeight position="left">
    function create_default_slot_12$2(ctx) {
    	let mdbmodalheader;
    	let t;
    	let mdbmodalbody;
    	let current;

    	mdbmodalheader = new MDBModalHeader({
    			props: {
    				$$slots: { default: [create_default_slot_15$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbmodalbody = new MDBModalBody({
    			props: {
    				class: "text-center",
    				$$slots: { default: [create_default_slot_13$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbmodalheader.$$.fragment);
    			t = space();
    			create_component(mdbmodalbody.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbmodalheader, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(mdbmodalbody, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbmodalheader_changes = {};

    			if (dirty[1] & /*$$scope*/ 32768) {
    				mdbmodalheader_changes.$$scope = { dirty, ctx };
    			}

    			mdbmodalheader.$set(mdbmodalheader_changes);
    			const mdbmodalbody_changes = {};

    			if (dirty[1] & /*$$scope*/ 32768) {
    				mdbmodalbody_changes.$$scope = { dirty, ctx };
    			}

    			mdbmodalbody.$set(mdbmodalbody_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbmodalheader.$$.fragment, local);
    			transition_in(mdbmodalbody.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbmodalheader.$$.fragment, local);
    			transition_out(mdbmodalbody.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbmodalheader, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(mdbmodalbody, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_12$2.name,
    		type: "slot",
    		source: "(159:10) <MDBModal toggle={()=>toggle(12)} isOpen={state.modal12} fullHeight position=\\\"left\\\">",
    		ctx
    	});

    	return block;
    }

    // (167:12) <MDBModalHeader>
    function create_default_slot_11$3(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Modal Title");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_11$3.name,
    		type: "slot",
    		source: "(167:12) <MDBModalHeader>",
    		ctx
    	});

    	return block;
    }

    // (170:14) <MDBBtn color="secondary" on:click={()=>toggle(13)}>
    function create_default_slot_10$3(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Close");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_10$3.name,
    		type: "slot",
    		source: "(170:14) <MDBBtn color=\\\"secondary\\\" on:click={()=>toggle(13)}>",
    		ctx
    	});

    	return block;
    }

    // (168:12) <MDBModalBody class="text-center">
    function create_default_slot_9$3(ctx) {
    	let span;
    	let t1;
    	let mdbbtn;
    	let current;

    	mdbbtn = new MDBBtn({
    			props: {
    				color: "secondary",
    				$$slots: { default: [create_default_slot_10$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbbtn.$on("click", /*click_handler_28*/ ctx[42]);

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = "Lorem ipsum dolor sit amet, consectetur adipisicing elit. Impedit nisi quo provident fugiat reprehenderit nostrum quos...";
    			t1 = space();
    			create_component(mdbbtn.$$.fragment);
    			add_location(span, file$c, 168, 14, 9720);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(mdbbtn, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbbtn_changes = {};

    			if (dirty[1] & /*$$scope*/ 32768) {
    				mdbbtn_changes.$$scope = { dirty, ctx };
    			}

    			mdbbtn.$set(mdbbtn_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbbtn.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbbtn.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    			if (detaching) detach_dev(t1);
    			destroy_component(mdbbtn, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_9$3.name,
    		type: "slot",
    		source: "(168:12) <MDBModalBody class=\\\"text-center\\\">",
    		ctx
    	});

    	return block;
    }

    // (166:10) <MDBModal toggle={()=>toggle(13)} isOpen={state.modal13} fullHeight position="top">
    function create_default_slot_8$3(ctx) {
    	let mdbmodalheader;
    	let t;
    	let mdbmodalbody;
    	let current;

    	mdbmodalheader = new MDBModalHeader({
    			props: {
    				$$slots: { default: [create_default_slot_11$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbmodalbody = new MDBModalBody({
    			props: {
    				class: "text-center",
    				$$slots: { default: [create_default_slot_9$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbmodalheader.$$.fragment);
    			t = space();
    			create_component(mdbmodalbody.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbmodalheader, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(mdbmodalbody, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbmodalheader_changes = {};

    			if (dirty[1] & /*$$scope*/ 32768) {
    				mdbmodalheader_changes.$$scope = { dirty, ctx };
    			}

    			mdbmodalheader.$set(mdbmodalheader_changes);
    			const mdbmodalbody_changes = {};

    			if (dirty[1] & /*$$scope*/ 32768) {
    				mdbmodalbody_changes.$$scope = { dirty, ctx };
    			}

    			mdbmodalbody.$set(mdbmodalbody_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbmodalheader.$$.fragment, local);
    			transition_in(mdbmodalbody.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbmodalheader.$$.fragment, local);
    			transition_out(mdbmodalbody.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbmodalheader, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(mdbmodalbody, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_8$3.name,
    		type: "slot",
    		source: "(166:10) <MDBModal toggle={()=>toggle(13)} isOpen={state.modal13} fullHeight position=\\\"top\\\">",
    		ctx
    	});

    	return block;
    }

    // (174:12) <MDBModalHeader>
    function create_default_slot_7$3(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Modal Title");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_7$3.name,
    		type: "slot",
    		source: "(174:12) <MDBModalHeader>",
    		ctx
    	});

    	return block;
    }

    // (177:14) <MDBBtn color="secondary" on:click={()=>toggle(14)}>
    function create_default_slot_6$3(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Close");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_6$3.name,
    		type: "slot",
    		source: "(177:14) <MDBBtn color=\\\"secondary\\\" on:click={()=>toggle(14)}>",
    		ctx
    	});

    	return block;
    }

    // (175:12) <MDBModalBody class="text-center">
    function create_default_slot_5$4(ctx) {
    	let span;
    	let t1;
    	let mdbbtn;
    	let current;

    	mdbbtn = new MDBBtn({
    			props: {
    				color: "secondary",
    				$$slots: { default: [create_default_slot_6$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbbtn.$on("click", /*click_handler_29*/ ctx[44]);

    	const block = {
    		c: function create() {
    			span = element("span");
    			span.textContent = "Lorem ipsum dolor sit amet, consectetur adipisicing elit. Impedit nisi quo provident fugiat reprehenderit nostrum quos...";
    			t1 = space();
    			create_component(mdbbtn.$$.fragment);
    			add_location(span, file$c, 175, 14, 10208);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(mdbbtn, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbbtn_changes = {};

    			if (dirty[1] & /*$$scope*/ 32768) {
    				mdbbtn_changes.$$scope = { dirty, ctx };
    			}

    			mdbbtn.$set(mdbbtn_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbbtn.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbbtn.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    			if (detaching) detach_dev(t1);
    			destroy_component(mdbbtn, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_5$4.name,
    		type: "slot",
    		source: "(175:12) <MDBModalBody class=\\\"text-center\\\">",
    		ctx
    	});

    	return block;
    }

    // (173:10) <MDBModal toggle={()=>toggle(14)} isOpen={state.modal14} fullHeight position="bottom">
    function create_default_slot_4$4(ctx) {
    	let mdbmodalheader;
    	let t;
    	let mdbmodalbody;
    	let current;

    	mdbmodalheader = new MDBModalHeader({
    			props: {
    				$$slots: { default: [create_default_slot_7$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbmodalbody = new MDBModalBody({
    			props: {
    				class: "text-center",
    				$$slots: { default: [create_default_slot_5$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbmodalheader.$$.fragment);
    			t = space();
    			create_component(mdbmodalbody.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbmodalheader, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(mdbmodalbody, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbmodalheader_changes = {};

    			if (dirty[1] & /*$$scope*/ 32768) {
    				mdbmodalheader_changes.$$scope = { dirty, ctx };
    			}

    			mdbmodalheader.$set(mdbmodalheader_changes);
    			const mdbmodalbody_changes = {};

    			if (dirty[1] & /*$$scope*/ 32768) {
    				mdbmodalbody_changes.$$scope = { dirty, ctx };
    			}

    			mdbmodalbody.$set(mdbmodalbody_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbmodalheader.$$.fragment, local);
    			transition_in(mdbmodalbody.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbmodalheader.$$.fragment, local);
    			transition_out(mdbmodalbody.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbmodalheader, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(mdbmodalbody, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4$4.name,
    		type: "slot",
    		source: "(173:10) <MDBModal toggle={()=>toggle(14)} isOpen={state.modal14} fullHeight position=\\\"bottom\\\">",
    		ctx
    	});

    	return block;
    }

    // (143:6) <MDBCol md="3" class="mb-3">
    function create_default_slot_3$4(ctx) {
    	let h50;
    	let t1;
    	let img;
    	let img_src_value;
    	let t2;
    	let div;
    	let h51;
    	let t4;
    	let mdbbtn0;
    	let t5;
    	let mdbbtn1;
    	let t6;
    	let mdbbtn2;
    	let t7;
    	let mdbbtn3;
    	let t8;
    	let mdbmodal0;
    	let t9;
    	let mdbmodal1;
    	let t10;
    	let mdbmodal2;
    	let t11;
    	let mdbmodal3;
    	let current;

    	mdbbtn0 = new MDBBtn({
    			props: {
    				color: "primary",
    				size: "sm",
    				$$slots: { default: [create_default_slot_23$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbbtn0.$on("click", /*click_handler_22*/ ctx[34]);

    	mdbbtn1 = new MDBBtn({
    			props: {
    				color: "primary",
    				size: "sm",
    				$$slots: { default: [create_default_slot_22$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbbtn1.$on("click", /*click_handler_23*/ ctx[35]);

    	mdbbtn2 = new MDBBtn({
    			props: {
    				color: "primary",
    				size: "sm",
    				$$slots: { default: [create_default_slot_21$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbbtn2.$on("click", /*click_handler_24*/ ctx[36]);

    	mdbbtn3 = new MDBBtn({
    			props: {
    				color: "primary",
    				size: "sm",
    				$$slots: { default: [create_default_slot_20$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbbtn3.$on("click", /*click_handler_25*/ ctx[37]);

    	mdbmodal0 = new MDBModal({
    			props: {
    				toggle: /*func_10*/ ctx[39],
    				isOpen: /*state*/ ctx[0].modal11,
    				fullHeight: true,
    				position: "right",
    				$$slots: { default: [create_default_slot_16$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbmodal1 = new MDBModal({
    			props: {
    				toggle: /*func_11*/ ctx[41],
    				isOpen: /*state*/ ctx[0].modal12,
    				fullHeight: true,
    				position: "left",
    				$$slots: { default: [create_default_slot_12$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbmodal2 = new MDBModal({
    			props: {
    				toggle: /*func_12*/ ctx[43],
    				isOpen: /*state*/ ctx[0].modal13,
    				fullHeight: true,
    				position: "top",
    				$$slots: { default: [create_default_slot_8$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbmodal3 = new MDBModal({
    			props: {
    				toggle: /*func_13*/ ctx[45],
    				isOpen: /*state*/ ctx[0].modal14,
    				fullHeight: true,
    				position: "bottom",
    				$$slots: { default: [create_default_slot_4$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			h50 = element("h5");
    			h50.textContent = "Fluid modal";
    			t1 = space();
    			img = element("img");
    			t2 = space();
    			div = element("div");
    			h51 = element("h5");
    			h51.textContent = "Position";
    			t4 = space();
    			create_component(mdbbtn0.$$.fragment);
    			t5 = space();
    			create_component(mdbbtn1.$$.fragment);
    			t6 = space();
    			create_component(mdbbtn2.$$.fragment);
    			t7 = space();
    			create_component(mdbbtn3.$$.fragment);
    			t8 = space();
    			create_component(mdbmodal0.$$.fragment);
    			t9 = space();
    			create_component(mdbmodal1.$$.fragment);
    			t10 = space();
    			create_component(mdbmodal2.$$.fragment);
    			t11 = space();
    			create_component(mdbmodal3.$$.fragment);
    			attr_dev(h50, "class", "text-center mb-3");
    			add_location(h50, file$c, 143, 8, 7946);
    			attr_dev(img, "class", "img-fluid z-depth-1");
    			if (!src_url_equal(img.src, img_src_value = "https://mdbootstrap.com/img/brandflow/modal1.jpg")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "frame position");
    			add_location(img, file$c, 144, 8, 8001);
    			attr_dev(h51, "class", "my-3");
    			add_location(h51, file$c, 146, 10, 8158);
    			attr_dev(div, "class", "text-center");
    			add_location(div, file$c, 145, 8, 8121);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h50, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, img, anchor);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, div, anchor);
    			append_dev(div, h51);
    			append_dev(div, t4);
    			mount_component(mdbbtn0, div, null);
    			append_dev(div, t5);
    			mount_component(mdbbtn1, div, null);
    			append_dev(div, t6);
    			mount_component(mdbbtn2, div, null);
    			append_dev(div, t7);
    			mount_component(mdbbtn3, div, null);
    			append_dev(div, t8);
    			mount_component(mdbmodal0, div, null);
    			append_dev(div, t9);
    			mount_component(mdbmodal1, div, null);
    			append_dev(div, t10);
    			mount_component(mdbmodal2, div, null);
    			append_dev(div, t11);
    			mount_component(mdbmodal3, div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbbtn0_changes = {};

    			if (dirty[1] & /*$$scope*/ 32768) {
    				mdbbtn0_changes.$$scope = { dirty, ctx };
    			}

    			mdbbtn0.$set(mdbbtn0_changes);
    			const mdbbtn1_changes = {};

    			if (dirty[1] & /*$$scope*/ 32768) {
    				mdbbtn1_changes.$$scope = { dirty, ctx };
    			}

    			mdbbtn1.$set(mdbbtn1_changes);
    			const mdbbtn2_changes = {};

    			if (dirty[1] & /*$$scope*/ 32768) {
    				mdbbtn2_changes.$$scope = { dirty, ctx };
    			}

    			mdbbtn2.$set(mdbbtn2_changes);
    			const mdbbtn3_changes = {};

    			if (dirty[1] & /*$$scope*/ 32768) {
    				mdbbtn3_changes.$$scope = { dirty, ctx };
    			}

    			mdbbtn3.$set(mdbbtn3_changes);
    			const mdbmodal0_changes = {};
    			if (dirty[0] & /*state*/ 1) mdbmodal0_changes.isOpen = /*state*/ ctx[0].modal11;

    			if (dirty[1] & /*$$scope*/ 32768) {
    				mdbmodal0_changes.$$scope = { dirty, ctx };
    			}

    			mdbmodal0.$set(mdbmodal0_changes);
    			const mdbmodal1_changes = {};
    			if (dirty[0] & /*state*/ 1) mdbmodal1_changes.isOpen = /*state*/ ctx[0].modal12;

    			if (dirty[1] & /*$$scope*/ 32768) {
    				mdbmodal1_changes.$$scope = { dirty, ctx };
    			}

    			mdbmodal1.$set(mdbmodal1_changes);
    			const mdbmodal2_changes = {};
    			if (dirty[0] & /*state*/ 1) mdbmodal2_changes.isOpen = /*state*/ ctx[0].modal13;

    			if (dirty[1] & /*$$scope*/ 32768) {
    				mdbmodal2_changes.$$scope = { dirty, ctx };
    			}

    			mdbmodal2.$set(mdbmodal2_changes);
    			const mdbmodal3_changes = {};
    			if (dirty[0] & /*state*/ 1) mdbmodal3_changes.isOpen = /*state*/ ctx[0].modal14;

    			if (dirty[1] & /*$$scope*/ 32768) {
    				mdbmodal3_changes.$$scope = { dirty, ctx };
    			}

    			mdbmodal3.$set(mdbmodal3_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbbtn0.$$.fragment, local);
    			transition_in(mdbbtn1.$$.fragment, local);
    			transition_in(mdbbtn2.$$.fragment, local);
    			transition_in(mdbbtn3.$$.fragment, local);
    			transition_in(mdbmodal0.$$.fragment, local);
    			transition_in(mdbmodal1.$$.fragment, local);
    			transition_in(mdbmodal2.$$.fragment, local);
    			transition_in(mdbmodal3.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbbtn0.$$.fragment, local);
    			transition_out(mdbbtn1.$$.fragment, local);
    			transition_out(mdbbtn2.$$.fragment, local);
    			transition_out(mdbbtn3.$$.fragment, local);
    			transition_out(mdbmodal0.$$.fragment, local);
    			transition_out(mdbmodal1.$$.fragment, local);
    			transition_out(mdbmodal2.$$.fragment, local);
    			transition_out(mdbmodal3.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h50);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(img);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(div);
    			destroy_component(mdbbtn0);
    			destroy_component(mdbbtn1);
    			destroy_component(mdbbtn2);
    			destroy_component(mdbbtn3);
    			destroy_component(mdbmodal0);
    			destroy_component(mdbmodal1);
    			destroy_component(mdbmodal2);
    			destroy_component(mdbmodal3);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$4.name,
    		type: "slot",
    		source: "(143:6) <MDBCol md=\\\"3\\\" class=\\\"mb-3\\\">",
    		ctx
    	});

    	return block;
    }

    // (41:4) <MDBRow>
    function create_default_slot_2$4(ctx) {
    	let mdbcol0;
    	let t0;
    	let mdbcol1;
    	let t1;
    	let mdbcol2;
    	let t2;
    	let mdbcol3;
    	let current;

    	mdbcol0 = new MDBCol({
    			props: {
    				md: "3",
    				class: "mb-3",
    				$$slots: { default: [create_default_slot_66] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbcol1 = new MDBCol({
    			props: {
    				md: "3",
    				class: "mb-3",
    				$$slots: { default: [create_default_slot_45] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbcol2 = new MDBCol({
    			props: {
    				md: "3",
    				class: "mb-3",
    				$$slots: { default: [create_default_slot_24$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbcol3 = new MDBCol({
    			props: {
    				md: "3",
    				class: "mb-3",
    				$$slots: { default: [create_default_slot_3$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbcol0.$$.fragment);
    			t0 = space();
    			create_component(mdbcol1.$$.fragment);
    			t1 = space();
    			create_component(mdbcol2.$$.fragment);
    			t2 = space();
    			create_component(mdbcol3.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbcol0, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(mdbcol1, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(mdbcol2, target, anchor);
    			insert_dev(target, t2, anchor);
    			mount_component(mdbcol3, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbcol0_changes = {};

    			if (dirty[0] & /*state*/ 1 | dirty[1] & /*$$scope*/ 32768) {
    				mdbcol0_changes.$$scope = { dirty, ctx };
    			}

    			mdbcol0.$set(mdbcol0_changes);
    			const mdbcol1_changes = {};

    			if (dirty[0] & /*state*/ 1 | dirty[1] & /*$$scope*/ 32768) {
    				mdbcol1_changes.$$scope = { dirty, ctx };
    			}

    			mdbcol1.$set(mdbcol1_changes);
    			const mdbcol2_changes = {};

    			if (dirty[0] & /*state*/ 1 | dirty[1] & /*$$scope*/ 32768) {
    				mdbcol2_changes.$$scope = { dirty, ctx };
    			}

    			mdbcol2.$set(mdbcol2_changes);
    			const mdbcol3_changes = {};

    			if (dirty[0] & /*state*/ 1 | dirty[1] & /*$$scope*/ 32768) {
    				mdbcol3_changes.$$scope = { dirty, ctx };
    			}

    			mdbcol3.$set(mdbcol3_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbcol0.$$.fragment, local);
    			transition_in(mdbcol1.$$.fragment, local);
    			transition_in(mdbcol2.$$.fragment, local);
    			transition_in(mdbcol3.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbcol0.$$.fragment, local);
    			transition_out(mdbcol1.$$.fragment, local);
    			transition_out(mdbcol2.$$.fragment, local);
    			transition_out(mdbcol3.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbcol0, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(mdbcol1, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(mdbcol2, detaching);
    			if (detaching) detach_dev(t2);
    			destroy_component(mdbcol3, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$4.name,
    		type: "slot",
    		source: "(41:4) <MDBRow>",
    		ctx
    	});

    	return block;
    }

    // (36:2) <MDBCardBody>
    function create_default_slot_1$4(ctx) {
    	let h4;
    	let strong;
    	let t1;
    	let div;
    	let p;
    	let t3;
    	let mdbrow;
    	let current;

    	mdbrow = new MDBRow({
    			props: {
    				$$slots: { default: [create_default_slot_2$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			h4 = element("h4");
    			strong = element("strong");
    			strong.textContent = "Position & Sizes";
    			t1 = space();
    			div = element("div");
    			p = element("p");
    			p.textContent = "Click buttons below to launch modals demo";
    			t3 = space();
    			create_component(mdbrow.$$.fragment);
    			add_location(strong, file$c, 36, 63, 1094);
    			attr_dev(h4, "class", "mb-5 mt-4 dark-grey-text text-center font-bold");
    			add_location(h4, file$c, 36, 4, 1035);
    			attr_dev(p, "class", "lead");
    			add_location(p, file$c, 38, 6, 1176);
    			attr_dev(div, "class", "text-center mb-5");
    			add_location(div, file$c, 37, 4, 1138);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h4, anchor);
    			append_dev(h4, strong);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div, anchor);
    			append_dev(div, p);
    			insert_dev(target, t3, anchor);
    			mount_component(mdbrow, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbrow_changes = {};

    			if (dirty[0] & /*state*/ 1 | dirty[1] & /*$$scope*/ 32768) {
    				mdbrow_changes.$$scope = { dirty, ctx };
    			}

    			mdbrow.$set(mdbrow_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbrow.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbrow.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h4);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div);
    			if (detaching) detach_dev(t3);
    			destroy_component(mdbrow, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$4.name,
    		type: "slot",
    		source: "(36:2) <MDBCardBody>",
    		ctx
    	});

    	return block;
    }

    // (34:0) <MDBCard class="mb-5">
    function create_default_slot$5(ctx) {
    	let mdbcardheader;
    	let t;
    	let mdbcardbody;
    	let current;

    	mdbcardheader = new MDBCardHeader({
    			props: {
    				$$slots: { default: [create_default_slot_77] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbcardbody = new MDBCardBody({
    			props: {
    				$$slots: { default: [create_default_slot_1$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbcardheader.$$.fragment);
    			t = space();
    			create_component(mdbcardbody.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbcardheader, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(mdbcardbody, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbcardheader_changes = {};

    			if (dirty[1] & /*$$scope*/ 32768) {
    				mdbcardheader_changes.$$scope = { dirty, ctx };
    			}

    			mdbcardheader.$set(mdbcardheader_changes);
    			const mdbcardbody_changes = {};

    			if (dirty[0] & /*state*/ 1 | dirty[1] & /*$$scope*/ 32768) {
    				mdbcardbody_changes.$$scope = { dirty, ctx };
    			}

    			mdbcardbody.$set(mdbcardbody_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbcardheader.$$.fragment, local);
    			transition_in(mdbcardbody.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbcardheader.$$.fragment, local);
    			transition_out(mdbcardbody.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbcardheader, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(mdbcardbody, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$5.name,
    		type: "slot",
    		source: "(34:0) <MDBCard class=\\\"mb-5\\\">",
    		ctx
    	});

    	return block;
    }

    function create_fragment$d(ctx) {
    	let mdbcard;
    	let current;

    	mdbcard = new MDBCard({
    			props: {
    				class: "mb-5",
    				$$slots: { default: [create_default_slot$5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbcard.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbcard, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbcard_changes = {};

    			if (dirty[0] & /*state*/ 1 | dirty[1] & /*$$scope*/ 32768) {
    				mdbcard_changes.$$scope = { dirty, ctx };
    			}

    			mdbcard.$set(mdbcard_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbcard.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbcard.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbcard, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$d.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$d($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ModalSection', slots, []);

    	let state = {
    		modal1: false,
    		modal2: false,
    		modal3: false,
    		modal4: false,
    		modal5: false,
    		modal6: false,
    		modal7: false,
    		modal8: false,
    		modal9: false,
    		modal10: false,
    		modal11: false,
    		modal12: false,
    		modal13: false
    	};

    	function toggle(nr) {
    		let modalName = 'modal' + nr;
    		$$invalidate(0, state[modalName] = !state[modalName], state);
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ModalSection> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => toggle(1);
    	const click_handler_1 = () => toggle(2);
    	const click_handler_2 = () => toggle(1);
    	const click_handler_3 = () => toggle(1);
    	const func = () => toggle(1);
    	const click_handler_4 = () => toggle(2);
    	const click_handler_5 = () => toggle(2);
    	const func_1 = () => toggle(2);
    	const click_handler_6 = () => toggle(3);
    	const click_handler_7 = () => toggle(4);
    	const click_handler_8 = () => toggle(5);
    	const click_handler_9 = () => toggle(6);
    	const click_handler_10 = () => toggle(3);
    	const func_2 = () => toggle(3);
    	const click_handler_11 = () => toggle(4);
    	const func_3 = () => toggle(4);
    	const click_handler_12 = () => toggle(5);
    	const func_4 = () => toggle(5);
    	const click_handler_13 = () => toggle(6);
    	const func_5 = () => toggle(6);
    	const click_handler_14 = () => toggle(7);
    	const click_handler_15 = () => toggle(8);
    	const click_handler_16 = () => toggle(9);
    	const click_handler_17 = () => toggle(10);
    	const click_handler_18 = () => toggle(7);
    	const func_6 = () => toggle(7);
    	const click_handler_19 = () => toggle(8);
    	const func_7 = () => toggle(8);
    	const click_handler_20 = () => toggle(9);
    	const func_8 = () => toggle(9);
    	const click_handler_21 = () => toggle(10);
    	const func_9 = () => toggle(10);
    	const click_handler_22 = () => toggle(11);
    	const click_handler_23 = () => toggle(12);
    	const click_handler_24 = () => toggle(13);
    	const click_handler_25 = () => toggle(14);
    	const click_handler_26 = () => toggle(11);
    	const func_10 = () => toggle(11);
    	const click_handler_27 = () => toggle(12);
    	const func_11 = () => toggle(12);
    	const click_handler_28 = () => toggle(13);
    	const func_12 = () => toggle(13);
    	const click_handler_29 = () => toggle(14);
    	const func_13 = () => toggle(14);

    	$$self.$capture_state = () => ({
    		MDBCard,
    		MDBCardHeader,
    		MDBCardBody,
    		MDBRow,
    		MDBCol,
    		MDBBtn,
    		MDBModal,
    		MDBModalBody,
    		MDBModalHeader,
    		state,
    		toggle
    	});

    	$$self.$inject_state = $$props => {
    		if ('state' in $$props) $$invalidate(0, state = $$props.state);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		state,
    		toggle,
    		click_handler,
    		click_handler_1,
    		click_handler_2,
    		click_handler_3,
    		func,
    		click_handler_4,
    		click_handler_5,
    		func_1,
    		click_handler_6,
    		click_handler_7,
    		click_handler_8,
    		click_handler_9,
    		click_handler_10,
    		func_2,
    		click_handler_11,
    		func_3,
    		click_handler_12,
    		func_4,
    		click_handler_13,
    		func_5,
    		click_handler_14,
    		click_handler_15,
    		click_handler_16,
    		click_handler_17,
    		click_handler_18,
    		func_6,
    		click_handler_19,
    		func_7,
    		click_handler_20,
    		func_8,
    		click_handler_21,
    		func_9,
    		click_handler_22,
    		click_handler_23,
    		click_handler_24,
    		click_handler_25,
    		click_handler_26,
    		func_10,
    		click_handler_27,
    		func_11,
    		click_handler_28,
    		func_12,
    		click_handler_29,
    		func_13
    	];
    }

    class ModalSection extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$d, create_fragment$d, safe_not_equal, {}, null, [-1, -1]);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ModalSection",
    			options,
    			id: create_fragment$d.name
    		});
    	}
    }

    /* node_modules\mdbsvelte\src\MDBContainer.svelte generated by Svelte v3.59.2 */
    const file$b = "node_modules\\mdbsvelte\\src\\MDBContainer.svelte";

    function create_fragment$c(ctx) {
    	let div;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[7].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[6], null);
    	let div_levels = [/*props*/ ctx[2], { class: /*classes*/ ctx[0] }];
    	let div_data = {};

    	for (let i = 0; i < div_levels.length; i += 1) {
    		div_data = assign(div_data, div_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			set_attributes(div, div_data);
    			add_location(div, file$b, 15, 0, 446);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = action_destroyer(/*forwardEvents*/ ctx[1].call(null, div));
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 64)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[6],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[6])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[6], dirty, null),
    						null
    					);
    				}
    			}

    			set_attributes(div, div_data = get_spread_update(div_levels, [
    				/*props*/ ctx[2],
    				(!current || dirty & /*classes*/ 1) && { class: /*classes*/ ctx[0] }
    			]));
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$c.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$c($$self, $$props, $$invalidate) {
    	let classes;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('MDBContainer', slots, ['default']);
    	const forwardEvents = forwardEventsBuilder(current_component);
    	let { class: className = '' } = $$props;
    	let { fluid = false } = $$props;
    	let { size } = $$props;
    	const props = clean$1($$props, ["size"]);

    	$$self.$$.on_mount.push(function () {
    		if (size === undefined && !('size' in $$props || $$self.$$.bound[$$self.$$.props['size']])) {
    			console.warn("<MDBContainer> was created without expected prop 'size'");
    		}
    	});

    	$$self.$$set = $$new_props => {
    		$$invalidate(8, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ('class' in $$new_props) $$invalidate(3, className = $$new_props.class);
    		if ('fluid' in $$new_props) $$invalidate(4, fluid = $$new_props.fluid);
    		if ('size' in $$new_props) $$invalidate(5, size = $$new_props.size);
    		if ('$$scope' in $$new_props) $$invalidate(6, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		clean: clean$1,
    		clsx,
    		forwardEventsBuilder,
    		current_component,
    		forwardEvents,
    		className,
    		fluid,
    		size,
    		props,
    		classes
    	});

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(8, $$props = assign(assign({}, $$props), $$new_props));
    		if ('className' in $$props) $$invalidate(3, className = $$new_props.className);
    		if ('fluid' in $$props) $$invalidate(4, fluid = $$new_props.fluid);
    		if ('size' in $$props) $$invalidate(5, size = $$new_props.size);
    		if ('classes' in $$props) $$invalidate(0, classes = $$new_props.classes);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*className, size, fluid*/ 56) {
    			$$invalidate(0, classes = clsx(className, size
    			? `container-${size}`
    			: fluid ? 'container-fluid' : 'container'));
    		}
    	};

    	$$props = exclude_internal_props($$props);
    	return [classes, forwardEvents, props, className, fluid, size, $$scope, slots];
    }

    class MDBContainer extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$c, create_fragment$c, safe_not_equal, { class: 3, fluid: 4, size: 5 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "MDBContainer",
    			options,
    			id: create_fragment$c.name
    		});
    	}

    	get class() {
    		throw new Error("<MDBContainer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<MDBContainer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get fluid() {
    		throw new Error("<MDBContainer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set fluid(value) {
    		throw new Error("<MDBContainer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get size() {
    		throw new Error("<MDBContainer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set size(value) {
    		throw new Error("<MDBContainer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\components\pages\dashboard.svelte generated by Svelte v3.59.2 */

    // (13:0) <MDBContainer fluid>
    function create_default_slot$4(ctx) {
    	let breadcrumbsection;
    	let t0;
    	let chartsection1;
    	let t1;
    	let tablesection1;
    	let t2;
    	let chartsection2;
    	let t3;
    	let tablesection2;
    	let current;
    	breadcrumbsection = new BreadcrumbSection({ $$inline: true });
    	chartsection1 = new ChartSection1({ $$inline: true });
    	tablesection1 = new TableSection1({ $$inline: true });
    	chartsection2 = new ChartSection2({ $$inline: true });
    	tablesection2 = new TableSection2({ $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(breadcrumbsection.$$.fragment);
    			t0 = space();
    			create_component(chartsection1.$$.fragment);
    			t1 = space();
    			create_component(tablesection1.$$.fragment);
    			t2 = space();
    			create_component(chartsection2.$$.fragment);
    			t3 = space();
    			create_component(tablesection2.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(breadcrumbsection, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(chartsection1, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(tablesection1, target, anchor);
    			insert_dev(target, t2, anchor);
    			mount_component(chartsection2, target, anchor);
    			insert_dev(target, t3, anchor);
    			mount_component(tablesection2, target, anchor);
    			current = true;
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(breadcrumbsection.$$.fragment, local);
    			transition_in(chartsection1.$$.fragment, local);
    			transition_in(tablesection1.$$.fragment, local);
    			transition_in(chartsection2.$$.fragment, local);
    			transition_in(tablesection2.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(breadcrumbsection.$$.fragment, local);
    			transition_out(chartsection1.$$.fragment, local);
    			transition_out(tablesection1.$$.fragment, local);
    			transition_out(chartsection2.$$.fragment, local);
    			transition_out(tablesection2.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(breadcrumbsection, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(chartsection1, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(tablesection1, detaching);
    			if (detaching) detach_dev(t2);
    			destroy_component(chartsection2, detaching);
    			if (detaching) detach_dev(t3);
    			destroy_component(tablesection2, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$4.name,
    		type: "slot",
    		source: "(13:0) <MDBContainer fluid>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$b(ctx) {
    	let mdbcontainer;
    	let current;

    	mdbcontainer = new MDBContainer({
    			props: {
    				fluid: true,
    				$$slots: { default: [create_default_slot$4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbcontainer.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbcontainer, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const mdbcontainer_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbcontainer_changes.$$scope = { dirty, ctx };
    			}

    			mdbcontainer.$set(mdbcontainer_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbcontainer.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbcontainer.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbcontainer, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$b.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$b($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Dashboard', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Dashboard> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		AdminCardSection1,
    		AdminCardSection2,
    		BreadcrumbSection,
    		ChartSection1,
    		ChartSection2,
    		TableSection1,
    		TableSection2,
    		ModalSection,
    		MDBContainer
    	});

    	return [];
    }

    class Dashboard extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$b, create_fragment$b, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Dashboard",
    			options,
    			id: create_fragment$b.name
    		});
    	}
    }

    /* src\components\pages\login.svelte generated by Svelte v3.59.2 */
    const file$a = "src\\components\\pages\\login.svelte";

    // (38:32) <MDBBtn color="primary">
    function create_default_slot_5$3(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Login");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_5$3.name,
    		type: "slot",
    		source: "(38:32) <MDBBtn color=\\\"primary\\\">",
    		ctx
    	});

    	return block;
    }

    // (38:12) <Navigate to="home">
    function create_default_slot_4$3(ctx) {
    	let mdbbtn;
    	let current;

    	mdbbtn = new MDBBtn({
    			props: {
    				color: "primary",
    				$$slots: { default: [create_default_slot_5$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbbtn.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbbtn, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbbtn_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbbtn_changes.$$scope = { dirty, ctx };
    			}

    			mdbbtn.$set(mdbbtn_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbbtn.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbbtn.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbbtn, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4$3.name,
    		type: "slot",
    		source: "(38:12) <Navigate to=\\\"home\\\">",
    		ctx
    	});

    	return block;
    }

    // (16:8) <MDBCard class="p-5">
    function create_default_slot_3$3(ctx) {
    	let p;
    	let t1;
    	let div0;
    	let mdbinput0;
    	let t2;
    	let mdbinput1;
    	let t3;
    	let div1;
    	let navigate;
    	let current;

    	mdbinput0 = new MDBInput({
    			props: {
    				label: "Your email",
    				icon: "envelope",
    				group: true,
    				type: "email",
    				validate: true,
    				error: "wrong",
    				success: "right"
    			},
    			$$inline: true
    		});

    	mdbinput1 = new MDBInput({
    			props: {
    				label: "Your password",
    				icon: "lock",
    				group: true,
    				type: "password",
    				validate: true
    			},
    			$$inline: true
    		});

    	navigate = new Navigate({
    			props: {
    				to: "home",
    				$$slots: { default: [create_default_slot_4$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			p = element("p");
    			p.textContent = "Login";
    			t1 = space();
    			div0 = element("div");
    			create_component(mdbinput0.$$.fragment);
    			t2 = space();
    			create_component(mdbinput1.$$.fragment);
    			t3 = space();
    			div1 = element("div");
    			create_component(navigate.$$.fragment);
    			attr_dev(p, "class", "h5 text-center mb-4");
    			add_location(p, file$a, 16, 10, 535);
    			attr_dev(div0, "class", "grey-text");
    			add_location(div0, file$a, 17, 10, 587);
    			attr_dev(div1, "class", "text-center");
    			add_location(div1, file$a, 36, 10, 1058);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div0, anchor);
    			mount_component(mdbinput0, div0, null);
    			append_dev(div0, t2);
    			mount_component(mdbinput1, div0, null);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, div1, anchor);
    			mount_component(navigate, div1, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const navigate_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				navigate_changes.$$scope = { dirty, ctx };
    			}

    			navigate.$set(navigate_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbinput0.$$.fragment, local);
    			transition_in(mdbinput1.$$.fragment, local);
    			transition_in(navigate.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbinput0.$$.fragment, local);
    			transition_out(mdbinput1.$$.fragment, local);
    			transition_out(navigate.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div0);
    			destroy_component(mdbinput0);
    			destroy_component(mdbinput1);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(div1);
    			destroy_component(navigate);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$3.name,
    		type: "slot",
    		source: "(16:8) <MDBCard class=\\\"p-5\\\">",
    		ctx
    	});

    	return block;
    }

    // (15:6) <MDBCol md="6">
    function create_default_slot_2$3(ctx) {
    	let mdbcard;
    	let current;

    	mdbcard = new MDBCard({
    			props: {
    				class: "p-5",
    				$$slots: { default: [create_default_slot_3$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbcard.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbcard, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbcard_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbcard_changes.$$scope = { dirty, ctx };
    			}

    			mdbcard.$set(mdbcard_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbcard.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbcard.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbcard, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$3.name,
    		type: "slot",
    		source: "(15:6) <MDBCol md=\\\"6\\\">",
    		ctx
    	});

    	return block;
    }

    // (13:2) <MDBRow>
    function create_default_slot_1$3(ctx) {
    	let div;
    	let mdbcol;
    	let current;

    	mdbcol = new MDBCol({
    			props: {
    				md: "6",
    				$$slots: { default: [create_default_slot_2$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(mdbcol.$$.fragment);
    			attr_dev(div, "class", "container svelte-1esiz5s");
    			add_location(div, file$a, 13, 4, 446);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(mdbcol, div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbcol_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbcol_changes.$$scope = { dirty, ctx };
    			}

    			mdbcol.$set(mdbcol_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbcol.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbcol.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(mdbcol);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$3.name,
    		type: "slot",
    		source: "(13:2) <MDBRow>",
    		ctx
    	});

    	return block;
    }

    // (12:0) <MDBContainer fluid>
    function create_default_slot$3(ctx) {
    	let mdbrow;
    	let current;

    	mdbrow = new MDBRow({
    			props: {
    				$$slots: { default: [create_default_slot_1$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbrow.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbrow, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbrow_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbrow_changes.$$scope = { dirty, ctx };
    			}

    			mdbrow.$set(mdbrow_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbrow.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbrow.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbrow, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$3.name,
    		type: "slot",
    		source: "(12:0) <MDBContainer fluid>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$a(ctx) {
    	let mdbcontainer;
    	let current;

    	mdbcontainer = new MDBContainer({
    			props: {
    				fluid: true,
    				$$slots: { default: [create_default_slot$3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbcontainer.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbcontainer, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const mdbcontainer_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbcontainer_changes.$$scope = { dirty, ctx };
    			}

    			mdbcontainer.$set(mdbcontainer_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbcontainer.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbcontainer.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbcontainer, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$a.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$a($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Login', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Login> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		MDBBtn,
    		MDBCard,
    		MDBCol,
    		MDBContainer,
    		MDBInput,
    		MDBRow,
    		Navigate
    	});

    	return [];
    }

    class Login extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$a, create_fragment$a, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Login",
    			options,
    			id: create_fragment$a.name
    		});
    	}
    }

    /* node_modules\mdbsvelte\src\MDBCardImage.svelte generated by Svelte v3.59.2 */
    const file$9 = "node_modules\\mdbsvelte\\src\\MDBCardImage.svelte";

    function create_fragment$9(ctx) {
    	let img;
    	let img_src_value;
    	let mounted;
    	let dispose;

    	let img_levels = [
    		/*props*/ ctx[4],
    		{ class: /*classes*/ ctx[2] },
    		{ src: img_src_value = /*src*/ ctx[0] },
    		{ alt: /*alt*/ ctx[1] }
    	];

    	let img_data = {};

    	for (let i = 0; i < img_levels.length; i += 1) {
    		img_data = assign(img_data, img_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			img = element("img");
    			set_attributes(img, img_data);
    			add_location(img, file$9, 27, 0, 653);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);

    			if (!mounted) {
    				dispose = action_destroyer(/*forwardEvents*/ ctx[3].call(null, img));
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			set_attributes(img, img_data = get_spread_update(img_levels, [
    				/*props*/ ctx[4],
    				dirty & /*classes*/ 4 && { class: /*classes*/ ctx[2] },
    				dirty & /*src*/ 1 && !src_url_equal(img.src, img_src_value = /*src*/ ctx[0]) && { src: img_src_value },
    				dirty & /*alt*/ 2 && { alt: /*alt*/ ctx[1] }
    			]));
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$9.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$9($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('MDBCardImage', slots, []);
    	const forwardEvents = forwardEventsBuilder(current_component);
    	let { class: className = '' } = $$props;
    	let { top = false } = $$props;
    	let { bottom = false } = $$props;
    	let { src } = $$props;
    	let { alt = '' } = $$props;
    	const props = clean$1($$props, ["alt", "top", "bottom"]);
    	let classes;

    	$$self.$$.on_mount.push(function () {
    		if (src === undefined && !('src' in $$props || $$self.$$.bound[$$self.$$.props['src']])) {
    			console.warn("<MDBCardImage> was created without expected prop 'src'");
    		}
    	});

    	$$self.$$set = $$new_props => {
    		$$invalidate(8, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ('class' in $$new_props) $$invalidate(5, className = $$new_props.class);
    		if ('top' in $$new_props) $$invalidate(6, top = $$new_props.top);
    		if ('bottom' in $$new_props) $$invalidate(7, bottom = $$new_props.bottom);
    		if ('src' in $$new_props) $$invalidate(0, src = $$new_props.src);
    		if ('alt' in $$new_props) $$invalidate(1, alt = $$new_props.alt);
    	};

    	$$self.$capture_state = () => ({
    		clean: clean$1,
    		clsx,
    		forwardEventsBuilder,
    		current_component,
    		forwardEvents,
    		className,
    		top,
    		bottom,
    		src,
    		alt,
    		props,
    		classes
    	});

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(8, $$props = assign(assign({}, $$props), $$new_props));
    		if ('className' in $$props) $$invalidate(5, className = $$new_props.className);
    		if ('top' in $$props) $$invalidate(6, top = $$new_props.top);
    		if ('bottom' in $$props) $$invalidate(7, bottom = $$new_props.bottom);
    		if ('src' in $$props) $$invalidate(0, src = $$new_props.src);
    		if ('alt' in $$props) $$invalidate(1, alt = $$new_props.alt);
    		if ('classes' in $$props) $$invalidate(2, classes = $$new_props.classes);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*top, bottom, className*/ 224) {
    			{
    				let cardImgClassName = 'card-img';

    				if (top) {
    					cardImgClassName = 'card-img-top';
    				}

    				if (bottom) {
    					cardImgClassName = 'card-img-bottom';
    				}

    				$$invalidate(2, classes = clsx(className, cardImgClassName));
    			}
    		}
    	};

    	$$props = exclude_internal_props($$props);
    	return [src, alt, classes, forwardEvents, props, className, top, bottom];
    }

    class MDBCardImage extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$9, create_fragment$9, safe_not_equal, {
    			class: 5,
    			top: 6,
    			bottom: 7,
    			src: 0,
    			alt: 1
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "MDBCardImage",
    			options,
    			id: create_fragment$9.name
    		});
    	}

    	get class() {
    		throw new Error("<MDBCardImage>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<MDBCardImage>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get top() {
    		throw new Error("<MDBCardImage>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set top(value) {
    		throw new Error("<MDBCardImage>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get bottom() {
    		throw new Error("<MDBCardImage>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set bottom(value) {
    		throw new Error("<MDBCardImage>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get src() {
    		throw new Error("<MDBCardImage>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set src(value) {
    		throw new Error("<MDBCardImage>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get alt() {
    		throw new Error("<MDBCardImage>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set alt(value) {
    		throw new Error("<MDBCardImage>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\mdbsvelte\src\MDBCardTitle.svelte generated by Svelte v3.59.2 */
    const file$8 = "node_modules\\mdbsvelte\\src\\MDBCardTitle.svelte";

    function create_fragment$8(ctx) {
    	let div;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[5].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);
    	let div_levels = [/*props*/ ctx[2], { class: /*classes*/ ctx[0] }];
    	let div_data = {};

    	for (let i = 0; i < div_levels.length; i += 1) {
    		div_data = assign(div_data, div_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			set_attributes(div, div_data);
    			add_location(div, file$8, 13, 0, 331);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = action_destroyer(/*forwardEvents*/ ctx[1].call(null, div));
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 16)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[4],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[4])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[4], dirty, null),
    						null
    					);
    				}
    			}

    			set_attributes(div, div_data = get_spread_update(div_levels, [
    				/*props*/ ctx[2],
    				(!current || dirty & /*classes*/ 1) && { class: /*classes*/ ctx[0] }
    			]));
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$8.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$8($$self, $$props, $$invalidate) {
    	let classes;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('MDBCardTitle', slots, ['default']);
    	const forwardEvents = forwardEventsBuilder(current_component);
    	let { class: className = '' } = $$props;
    	const props = clean$1($$props);

    	$$self.$$set = $$new_props => {
    		$$invalidate(6, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ('class' in $$new_props) $$invalidate(3, className = $$new_props.class);
    		if ('$$scope' in $$new_props) $$invalidate(4, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		clean: clean$1,
    		clsx,
    		forwardEventsBuilder,
    		current_component,
    		forwardEvents,
    		className,
    		props,
    		classes
    	});

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(6, $$props = assign(assign({}, $$props), $$new_props));
    		if ('className' in $$props) $$invalidate(3, className = $$new_props.className);
    		if ('classes' in $$props) $$invalidate(0, classes = $$new_props.classes);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*className*/ 8) {
    			$$invalidate(0, classes = clsx(className, 'card-title'));
    		}
    	};

    	$$props = exclude_internal_props($$props);
    	return [classes, forwardEvents, props, className, $$scope, slots];
    }

    class MDBCardTitle extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$8, create_fragment$8, safe_not_equal, { class: 3 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "MDBCardTitle",
    			options,
    			id: create_fragment$8.name
    		});
    	}

    	get class() {
    		throw new Error("<MDBCardTitle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<MDBCardTitle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\mdbsvelte\src\MDBCardFooter.svelte generated by Svelte v3.59.2 */
    const file$7 = "node_modules\\mdbsvelte\\src\\MDBCardFooter.svelte";

    function create_fragment$7(ctx) {
    	let div;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[5].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);
    	let div_levels = [/*props*/ ctx[2], { class: /*classes*/ ctx[0] }];
    	let div_data = {};

    	for (let i = 0; i < div_levels.length; i += 1) {
    		div_data = assign(div_data, div_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			set_attributes(div, div_data);
    			add_location(div, file$7, 13, 0, 332);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = action_destroyer(/*forwardEvents*/ ctx[1].call(null, div));
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 16)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[4],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[4])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[4], dirty, null),
    						null
    					);
    				}
    			}

    			set_attributes(div, div_data = get_spread_update(div_levels, [
    				/*props*/ ctx[2],
    				(!current || dirty & /*classes*/ 1) && { class: /*classes*/ ctx[0] }
    			]));
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$7.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$7($$self, $$props, $$invalidate) {
    	let classes;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('MDBCardFooter', slots, ['default']);
    	const forwardEvents = forwardEventsBuilder(current_component);
    	let { class: className = '' } = $$props;
    	const props = clean$1($$props);

    	$$self.$$set = $$new_props => {
    		$$invalidate(6, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ('class' in $$new_props) $$invalidate(3, className = $$new_props.class);
    		if ('$$scope' in $$new_props) $$invalidate(4, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		clean: clean$1,
    		clsx,
    		forwardEventsBuilder,
    		current_component,
    		forwardEvents,
    		className,
    		props,
    		classes
    	});

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(6, $$props = assign(assign({}, $$props), $$new_props));
    		if ('className' in $$props) $$invalidate(3, className = $$new_props.className);
    		if ('classes' in $$props) $$invalidate(0, classes = $$new_props.classes);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*className*/ 8) {
    			$$invalidate(0, classes = clsx(className, 'card-footer'));
    		}
    	};

    	$$props = exclude_internal_props($$props);
    	return [classes, forwardEvents, props, className, $$scope, slots];
    }

    class MDBCardFooter extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$7, create_fragment$7, safe_not_equal, { class: 3 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "MDBCardFooter",
    			options,
    			id: create_fragment$7.name
    		});
    	}

    	get class() {
    		throw new Error("<MDBCardFooter>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<MDBCardFooter>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\mdbsvelte\src\MDBMask.svelte generated by Svelte v3.59.2 */
    const file$6 = "node_modules\\mdbsvelte\\src\\MDBMask.svelte";

    function create_fragment$6(ctx) {
    	let div;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[7].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[6], null);
    	let div_levels = [/*props*/ ctx[2], { class: /*elementClasses*/ ctx[0] }];
    	let div_data = {};

    	for (let i = 0; i < div_levels.length; i += 1) {
    		div_data = assign(div_data, div_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			set_attributes(div, div_data);
    			add_location(div, file$6, 18, 0, 512);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = action_destroyer(/*forwardEvents*/ ctx[1].call(null, div));
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 64)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[6],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[6])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[6], dirty, null),
    						null
    					);
    				}
    			}

    			set_attributes(div, div_data = get_spread_update(div_levels, [
    				/*props*/ ctx[2],
    				(!current || dirty & /*elementClasses*/ 1) && { class: /*elementClasses*/ ctx[0] }
    			]));
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$6.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$6($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('MDBMask', slots, ['default']);
    	const forwardEvents = forwardEventsBuilder(current_component);
    	let { class: className = '' } = $$props;
    	let elementClasses;
    	let { pattern } = $$props;
    	let { overlay } = $$props;
    	const props = clean$1($$props, ["color", "overlay", "pattern"]);

    	$$self.$$.on_mount.push(function () {
    		if (pattern === undefined && !('pattern' in $$props || $$self.$$.bound[$$self.$$.props['pattern']])) {
    			console.warn("<MDBMask> was created without expected prop 'pattern'");
    		}

    		if (overlay === undefined && !('overlay' in $$props || $$self.$$.bound[$$self.$$.props['overlay']])) {
    			console.warn("<MDBMask> was created without expected prop 'overlay'");
    		}
    	});

    	$$self.$$set = $$new_props => {
    		$$invalidate(8, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ('class' in $$new_props) $$invalidate(3, className = $$new_props.class);
    		if ('pattern' in $$new_props) $$invalidate(4, pattern = $$new_props.pattern);
    		if ('overlay' in $$new_props) $$invalidate(5, overlay = $$new_props.overlay);
    		if ('$$scope' in $$new_props) $$invalidate(6, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		clean: clean$1,
    		clsx,
    		forwardEventsBuilder,
    		getColorClass,
    		current_component,
    		forwardEvents,
    		className,
    		elementClasses,
    		pattern,
    		overlay,
    		props
    	});

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(8, $$props = assign(assign({}, $$props), $$new_props));
    		if ('className' in $$props) $$invalidate(3, className = $$new_props.className);
    		if ('elementClasses' in $$props) $$invalidate(0, elementClasses = $$new_props.elementClasses);
    		if ('pattern' in $$props) $$invalidate(4, pattern = $$new_props.pattern);
    		if ('overlay' in $$props) $$invalidate(5, overlay = $$new_props.overlay);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*className, pattern, overlay*/ 56) {
    			$$invalidate(0, elementClasses = clsx(className, 'mask', pattern && `pattern-${pattern}`, overlay && `rgba-${overlay}`));
    		}
    	};

    	$$props = exclude_internal_props($$props);

    	return [
    		elementClasses,
    		forwardEvents,
    		props,
    		className,
    		pattern,
    		overlay,
    		$$scope,
    		slots
    	];
    }

    class MDBMask extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$6, create_fragment$6, safe_not_equal, { class: 3, pattern: 4, overlay: 5 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "MDBMask",
    			options,
    			id: create_fragment$6.name
    		});
    	}

    	get class() {
    		throw new Error("<MDBMask>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<MDBMask>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get pattern() {
    		throw new Error("<MDBMask>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set pattern(value) {
    		throw new Error("<MDBMask>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get overlay() {
    		throw new Error("<MDBMask>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set overlay(value) {
    		throw new Error("<MDBMask>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* node_modules\mdbsvelte\src\MDBView.svelte generated by Svelte v3.59.2 */
    const file$5 = "node_modules\\mdbsvelte\\src\\MDBView.svelte";

    function create_fragment$5(ctx) {
    	let div;
    	let current;
    	let mounted;
    	let dispose;
    	const default_slot_template = /*#slots*/ ctx[13].default;
    	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[12], null);

    	let div_levels = [
    		/*props*/ ctx[2],
    		{ class: /*elementClasses*/ ctx[0] },
    		{ style: /*elementStyle*/ ctx[3] }
    	];

    	let div_data = {};

    	for (let i = 0; i < div_levels.length; i += 1) {
    		div_data = assign(div_data, div_levels[i]);
    	}

    	const block = {
    		c: function create() {
    			div = element("div");
    			if (default_slot) default_slot.c();
    			set_attributes(div, div_data);
    			add_location(div, file$5, 41, 0, 998);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			if (default_slot) {
    				default_slot.m(div, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = action_destroyer(/*forwardEvents*/ ctx[1].call(null, div));
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (default_slot) {
    				if (default_slot.p && (!current || dirty & /*$$scope*/ 4096)) {
    					update_slot_base(
    						default_slot,
    						default_slot_template,
    						ctx,
    						/*$$scope*/ ctx[12],
    						!current
    						? get_all_dirty_from_scope(/*$$scope*/ ctx[12])
    						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[12], dirty, null),
    						null
    					);
    				}
    			}

    			set_attributes(div, div_data = get_spread_update(div_levels, [
    				/*props*/ ctx[2],
    				(!current || dirty & /*elementClasses*/ 1) && { class: /*elementClasses*/ ctx[0] },
    				{ style: /*elementStyle*/ ctx[3] }
    			]));
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(default_slot, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(default_slot, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (default_slot) default_slot.d(detaching);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$5.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$5($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('MDBView', slots, ['default']);
    	const forwardEvents = forwardEventsBuilder(current_component);
    	let { class: className = '' } = $$props;
    	let elementClasses;
    	let { zoom } = $$props;
    	let { cascade } = $$props;
    	let { hover } = $$props;
    	let { rounded } = $$props;
    	let { src } = $$props;
    	let { waves } = $$props;
    	let { fixed } = $$props;
    	const props = clean$1($$props, ["zoom", cascade, "hover", "rounded", "waves", "src", "fixed"]);
    	elementClasses = clsx('view', cascade && 'view-cascade', className, hover && 'overlay', rounded && 'rounded', waves ? 'Ripple-parent' : false, zoom && 'zoom');

    	let elementStyle = src
    	? {
    			backgroundAttachment: fixed ? 'fixed' : null,
    			backgroundImage: `url("${src}")`,
    			backgroundPosition: 'center center',
    			backgroundRepeat: 'no-repeat',
    			backgroundSize: 'cover',
    			height: '100vh'
    		}
    	: {};

    	$$self.$$.on_mount.push(function () {
    		if (zoom === undefined && !('zoom' in $$props || $$self.$$.bound[$$self.$$.props['zoom']])) {
    			console.warn("<MDBView> was created without expected prop 'zoom'");
    		}

    		if (cascade === undefined && !('cascade' in $$props || $$self.$$.bound[$$self.$$.props['cascade']])) {
    			console.warn("<MDBView> was created without expected prop 'cascade'");
    		}

    		if (hover === undefined && !('hover' in $$props || $$self.$$.bound[$$self.$$.props['hover']])) {
    			console.warn("<MDBView> was created without expected prop 'hover'");
    		}

    		if (rounded === undefined && !('rounded' in $$props || $$self.$$.bound[$$self.$$.props['rounded']])) {
    			console.warn("<MDBView> was created without expected prop 'rounded'");
    		}

    		if (src === undefined && !('src' in $$props || $$self.$$.bound[$$self.$$.props['src']])) {
    			console.warn("<MDBView> was created without expected prop 'src'");
    		}

    		if (waves === undefined && !('waves' in $$props || $$self.$$.bound[$$self.$$.props['waves']])) {
    			console.warn("<MDBView> was created without expected prop 'waves'");
    		}

    		if (fixed === undefined && !('fixed' in $$props || $$self.$$.bound[$$self.$$.props['fixed']])) {
    			console.warn("<MDBView> was created without expected prop 'fixed'");
    		}
    	});

    	$$self.$$set = $$new_props => {
    		$$invalidate(14, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    		if ('class' in $$new_props) $$invalidate(4, className = $$new_props.class);
    		if ('zoom' in $$new_props) $$invalidate(5, zoom = $$new_props.zoom);
    		if ('cascade' in $$new_props) $$invalidate(6, cascade = $$new_props.cascade);
    		if ('hover' in $$new_props) $$invalidate(7, hover = $$new_props.hover);
    		if ('rounded' in $$new_props) $$invalidate(8, rounded = $$new_props.rounded);
    		if ('src' in $$new_props) $$invalidate(9, src = $$new_props.src);
    		if ('waves' in $$new_props) $$invalidate(10, waves = $$new_props.waves);
    		if ('fixed' in $$new_props) $$invalidate(11, fixed = $$new_props.fixed);
    		if ('$$scope' in $$new_props) $$invalidate(12, $$scope = $$new_props.$$scope);
    	};

    	$$self.$capture_state = () => ({
    		clean: clean$1,
    		clsx,
    		forwardEventsBuilder,
    		getColorClass,
    		current_component,
    		forwardEvents,
    		className,
    		elementClasses,
    		zoom,
    		cascade,
    		hover,
    		rounded,
    		src,
    		waves,
    		fixed,
    		props,
    		elementStyle
    	});

    	$$self.$inject_state = $$new_props => {
    		$$invalidate(14, $$props = assign(assign({}, $$props), $$new_props));
    		if ('className' in $$props) $$invalidate(4, className = $$new_props.className);
    		if ('elementClasses' in $$props) $$invalidate(0, elementClasses = $$new_props.elementClasses);
    		if ('zoom' in $$props) $$invalidate(5, zoom = $$new_props.zoom);
    		if ('cascade' in $$props) $$invalidate(6, cascade = $$new_props.cascade);
    		if ('hover' in $$props) $$invalidate(7, hover = $$new_props.hover);
    		if ('rounded' in $$props) $$invalidate(8, rounded = $$new_props.rounded);
    		if ('src' in $$props) $$invalidate(9, src = $$new_props.src);
    		if ('waves' in $$props) $$invalidate(10, waves = $$new_props.waves);
    		if ('fixed' in $$props) $$invalidate(11, fixed = $$new_props.fixed);
    		if ('elementStyle' in $$props) $$invalidate(3, elementStyle = $$new_props.elementStyle);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$props = exclude_internal_props($$props);

    	return [
    		elementClasses,
    		forwardEvents,
    		props,
    		elementStyle,
    		className,
    		zoom,
    		cascade,
    		hover,
    		rounded,
    		src,
    		waves,
    		fixed,
    		$$scope,
    		slots
    	];
    }

    class MDBView extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$5, create_fragment$5, safe_not_equal, {
    			class: 4,
    			zoom: 5,
    			cascade: 6,
    			hover: 7,
    			rounded: 8,
    			src: 9,
    			waves: 10,
    			fixed: 11
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "MDBView",
    			options,
    			id: create_fragment$5.name
    		});
    	}

    	get class() {
    		throw new Error("<MDBView>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set class(value) {
    		throw new Error("<MDBView>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get zoom() {
    		throw new Error("<MDBView>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set zoom(value) {
    		throw new Error("<MDBView>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get cascade() {
    		throw new Error("<MDBView>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set cascade(value) {
    		throw new Error("<MDBView>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get hover() {
    		throw new Error("<MDBView>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set hover(value) {
    		throw new Error("<MDBView>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get rounded() {
    		throw new Error("<MDBView>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set rounded(value) {
    		throw new Error("<MDBView>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get src() {
    		throw new Error("<MDBView>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set src(value) {
    		throw new Error("<MDBView>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get waves() {
    		throw new Error("<MDBView>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set waves(value) {
    		throw new Error("<MDBView>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get fixed() {
    		throw new Error("<MDBView>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set fixed(value) {
    		throw new Error("<MDBView>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src\components\pages\profile.svelte generated by Svelte v3.59.2 */
    const file$4 = "src\\components\\pages\\profile.svelte";

    // (21:8) <MDBCardTitle class="text-center mb-2 font-bold"            >
    function create_default_slot_37(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Alice Mayer");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_37.name,
    		type: "slot",
    		source: "(21:8) <MDBCardTitle class=\\\"text-center mb-2 font-bold\\\"            >",
    		ctx
    	});

    	return block;
    }

    // (24:8) <MDBCardTitle sub class="text-center indigo-text mb-2 font-bold"            >
    function create_default_slot_36(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Photographer");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_36.name,
    		type: "slot",
    		source: "(24:8) <MDBCardTitle sub class=\\\"text-center indigo-text mb-2 font-bold\\\"            >",
    		ctx
    	});

    	return block;
    }

    // (27:8) <MDBCardText>
    function create_default_slot_35(ctx) {
    	let strong;
    	let t1;

    	const block = {
    		c: function create() {
    			strong = element("strong");
    			strong.textContent = "About:";
    			t1 = text("\r\n          Lorem ipsum dolor sit amet consectetur, adipisicing elit. Ratione perferendis\r\n          quod animi dignissimos consectetur quibusdam numquam laboriosam, minus,\r\n          provident...");
    			attr_dev(strong, "class", "mb-2");
    			add_location(strong, file$4, 27, 10, 1171);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, strong, anchor);
    			insert_dev(target, t1, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(strong);
    			if (detaching) detach_dev(t1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_35.name,
    		type: "slot",
    		source: "(27:8) <MDBCardText>",
    		ctx
    	});

    	return block;
    }

    // (34:10) <MDBBtn size="sm" outline color="primary">
    function create_default_slot_34(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("More...");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_34.name,
    		type: "slot",
    		source: "(34:10) <MDBBtn size=\\\"sm\\\" outline color=\\\"primary\\\">",
    		ctx
    	});

    	return block;
    }

    // (20:6) <MDBCardBody>
    function create_default_slot_33(ctx) {
    	let mdbcardtitle0;
    	let t0;
    	let mdbcardtitle1;
    	let t1;
    	let mdbcardtext;
    	let t2;
    	let div;
    	let mdbbtn;
    	let current;

    	mdbcardtitle0 = new MDBCardTitle({
    			props: {
    				class: "text-center mb-2 font-bold",
    				$$slots: { default: [create_default_slot_37] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbcardtitle1 = new MDBCardTitle({
    			props: {
    				sub: true,
    				class: "text-center indigo-text mb-2 font-bold",
    				$$slots: { default: [create_default_slot_36] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbcardtext = new MDBCardText({
    			props: {
    				$$slots: { default: [create_default_slot_35] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbbtn = new MDBBtn({
    			props: {
    				size: "sm",
    				outline: true,
    				color: "primary",
    				$$slots: { default: [create_default_slot_34] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbcardtitle0.$$.fragment);
    			t0 = space();
    			create_component(mdbcardtitle1.$$.fragment);
    			t1 = space();
    			create_component(mdbcardtext.$$.fragment);
    			t2 = space();
    			div = element("div");
    			create_component(mdbbtn.$$.fragment);
    			attr_dev(div, "class", "row justify-content-end pr-1");
    			add_location(div, file$4, 32, 8, 1437);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbcardtitle0, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(mdbcardtitle1, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(mdbcardtext, target, anchor);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, div, anchor);
    			mount_component(mdbbtn, div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbcardtitle0_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbcardtitle0_changes.$$scope = { dirty, ctx };
    			}

    			mdbcardtitle0.$set(mdbcardtitle0_changes);
    			const mdbcardtitle1_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbcardtitle1_changes.$$scope = { dirty, ctx };
    			}

    			mdbcardtitle1.$set(mdbcardtitle1_changes);
    			const mdbcardtext_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbcardtext_changes.$$scope = { dirty, ctx };
    			}

    			mdbcardtext.$set(mdbcardtext_changes);
    			const mdbbtn_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbbtn_changes.$$scope = { dirty, ctx };
    			}

    			mdbbtn.$set(mdbbtn_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbcardtitle0.$$.fragment, local);
    			transition_in(mdbcardtitle1.$$.fragment, local);
    			transition_in(mdbcardtext.$$.fragment, local);
    			transition_in(mdbbtn.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbcardtitle0.$$.fragment, local);
    			transition_out(mdbcardtitle1.$$.fragment, local);
    			transition_out(mdbcardtext.$$.fragment, local);
    			transition_out(mdbbtn.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbcardtitle0, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(mdbcardtitle1, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(mdbcardtext, detaching);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(div);
    			destroy_component(mdbbtn);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_33.name,
    		type: "slot",
    		source: "(20:6) <MDBCardBody>",
    		ctx
    	});

    	return block;
    }

    // (18:4) <MDBCard>
    function create_default_slot_32(ctx) {
    	let mdbcardimage;
    	let t;
    	let mdbcardbody;
    	let current;

    	mdbcardimage = new MDBCardImage({
    			props: { class: "img-fluid", src: "img-1.jpg" },
    			$$inline: true
    		});

    	mdbcardbody = new MDBCardBody({
    			props: {
    				$$slots: { default: [create_default_slot_33] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbcardimage.$$.fragment);
    			t = space();
    			create_component(mdbcardbody.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbcardimage, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(mdbcardbody, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbcardbody_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbcardbody_changes.$$scope = { dirty, ctx };
    			}

    			mdbcardbody.$set(mdbcardbody_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbcardimage.$$.fragment, local);
    			transition_in(mdbcardbody.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbcardimage.$$.fragment, local);
    			transition_out(mdbcardbody.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbcardimage, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(mdbcardbody, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_32.name,
    		type: "slot",
    		source: "(18:4) <MDBCard>",
    		ctx
    	});

    	return block;
    }

    // (17:2) <MDBCol sm="12" md="6" lg="3" class="mb-5">
    function create_default_slot_31(ctx) {
    	let mdbcard;
    	let current;

    	mdbcard = new MDBCard({
    			props: {
    				$$slots: { default: [create_default_slot_32] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbcard.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbcard, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbcard_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbcard_changes.$$scope = { dirty, ctx };
    			}

    			mdbcard.$set(mdbcard_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbcard.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbcard.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbcard, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_31.name,
    		type: "slot",
    		source: "(17:2) <MDBCol sm=\\\"12\\\" md=\\\"6\\\" lg=\\\"3\\\" class=\\\"mb-5\\\">",
    		ctx
    	});

    	return block;
    }

    // (44:12) <MDBView>
    function create_default_slot_30(ctx) {
    	let img;
    	let img_src_value;
    	let t;
    	let mdbmask;
    	let current;

    	mdbmask = new MDBMask({
    			props: { overlay: "white-slight" },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			img = element("img");
    			t = space();
    			create_component(mdbmask.$$.fragment);
    			if (!src_url_equal(img.src, img_src_value = "https://mdbootstrap.com/img/Mockups/Horizontal/6-col/pro-profile-page.jpg")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "Project");
    			attr_dev(img, "class", "img-fluid");
    			add_location(img, file$4, 44, 14, 1861);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(mdbmask, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbmask.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbmask.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    			if (detaching) detach_dev(t);
    			destroy_component(mdbmask, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_30.name,
    		type: "slot",
    		source: "(44:12) <MDBView>",
    		ctx
    	});

    	return block;
    }

    // (53:14) <MDBCardTitle class="font-bold mb-3">
    function create_default_slot_29(ctx) {
    	let strong;

    	const block = {
    		c: function create() {
    			strong = element("strong");
    			strong.textContent = "Project name";
    			add_location(strong, file$4, 53, 16, 2218);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, strong, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(strong);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_29.name,
    		type: "slot",
    		source: "(53:14) <MDBCardTitle class=\\\"font-bold mb-3\\\">",
    		ctx
    	});

    	return block;
    }

    // (56:14) <MDBCardText                  >
    function create_default_slot_28(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Some quick example text to build on the card title and make up\r\n                the bulk of the card's content.");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_28.name,
    		type: "slot",
    		source: "(56:14) <MDBCardText                  >",
    		ctx
    	});

    	return block;
    }

    // (52:12) <MDBCardBody>
    function create_default_slot_27(ctx) {
    	let mdbcardtitle;
    	let t;
    	let mdbcardtext;
    	let current;

    	mdbcardtitle = new MDBCardTitle({
    			props: {
    				class: "font-bold mb-3",
    				$$slots: { default: [create_default_slot_29] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbcardtext = new MDBCardText({
    			props: {
    				$$slots: { default: [create_default_slot_28] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbcardtitle.$$.fragment);
    			t = space();
    			create_component(mdbcardtext.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbcardtitle, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(mdbcardtext, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbcardtitle_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbcardtitle_changes.$$scope = { dirty, ctx };
    			}

    			mdbcardtitle.$set(mdbcardtitle_changes);
    			const mdbcardtext_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbcardtext_changes.$$scope = { dirty, ctx };
    			}

    			mdbcardtext.$set(mdbcardtext_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbcardtitle.$$.fragment, local);
    			transition_in(mdbcardtext.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbcardtitle.$$.fragment, local);
    			transition_out(mdbcardtext.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbcardtitle, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(mdbcardtext, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_27.name,
    		type: "slot",
    		source: "(52:12) <MDBCardBody>",
    		ctx
    	});

    	return block;
    }

    // (61:12) <MDBCardFooter class="links-light profile-card-footer">
    function create_default_slot_26(ctx) {
    	let span;
    	let a;
    	let t;
    	let mdbicon;
    	let current;

    	mdbicon = new MDBIcon({
    			props: { icon: "image", class: "ml-1" },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			span = element("span");
    			a = element("a");
    			t = text("Live Preview\r\n                  ");
    			create_component(mdbicon.$$.fragment);
    			attr_dev(a, "class", "p-2");
    			attr_dev(a, "href", "#profile");
    			add_location(a, file$4, 62, 16, 2617);
    			attr_dev(span, "class", "right");
    			add_location(span, file$4, 61, 14, 2579);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, a);
    			append_dev(a, t);
    			mount_component(mdbicon, a, null);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbicon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbicon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    			destroy_component(mdbicon);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_26.name,
    		type: "slot",
    		source: "(61:12) <MDBCardFooter class=\\\"links-light profile-card-footer\\\">",
    		ctx
    	});

    	return block;
    }

    // (43:10) <MDBCard class="d-flex mb-5">
    function create_default_slot_25(ctx) {
    	let mdbview;
    	let t0;
    	let mdbcardbody;
    	let t1;
    	let mdbcardfooter;
    	let current;

    	mdbview = new MDBView({
    			props: {
    				$$slots: { default: [create_default_slot_30] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbcardbody = new MDBCardBody({
    			props: {
    				$$slots: { default: [create_default_slot_27] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbcardfooter = new MDBCardFooter({
    			props: {
    				class: "links-light profile-card-footer",
    				$$slots: { default: [create_default_slot_26] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbview.$$.fragment);
    			t0 = space();
    			create_component(mdbcardbody.$$.fragment);
    			t1 = space();
    			create_component(mdbcardfooter.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbview, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(mdbcardbody, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(mdbcardfooter, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbview_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbview_changes.$$scope = { dirty, ctx };
    			}

    			mdbview.$set(mdbview_changes);
    			const mdbcardbody_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbcardbody_changes.$$scope = { dirty, ctx };
    			}

    			mdbcardbody.$set(mdbcardbody_changes);
    			const mdbcardfooter_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbcardfooter_changes.$$scope = { dirty, ctx };
    			}

    			mdbcardfooter.$set(mdbcardfooter_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbview.$$.fragment, local);
    			transition_in(mdbcardbody.$$.fragment, local);
    			transition_in(mdbcardfooter.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbview.$$.fragment, local);
    			transition_out(mdbcardbody.$$.fragment, local);
    			transition_out(mdbcardfooter.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbview, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(mdbcardbody, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(mdbcardfooter, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_25.name,
    		type: "slot",
    		source: "(43:10) <MDBCard class=\\\"d-flex mb-5\\\">",
    		ctx
    	});

    	return block;
    }

    // (42:8) <MDBCol lg="6" xl="5" class="mb-3">
    function create_default_slot_24(ctx) {
    	let mdbcard;
    	let current;

    	mdbcard = new MDBCard({
    			props: {
    				class: "d-flex mb-5",
    				$$slots: { default: [create_default_slot_25] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbcard.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbcard, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbcard_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbcard_changes.$$scope = { dirty, ctx };
    			}

    			mdbcard.$set(mdbcard_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbcard.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbcard.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbcard, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_24.name,
    		type: "slot",
    		source: "(42:8) <MDBCol lg=\\\"6\\\" xl=\\\"5\\\" class=\\\"mb-3\\\">",
    		ctx
    	});

    	return block;
    }

    // (73:12) <MDBView>
    function create_default_slot_23(ctx) {
    	let img;
    	let img_src_value;
    	let t;
    	let mdbmask;
    	let current;

    	mdbmask = new MDBMask({
    			props: { overlay: "white-slight" },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			img = element("img");
    			t = space();
    			create_component(mdbmask.$$.fragment);
    			if (!src_url_equal(img.src, img_src_value = "https://mdbootstrap.com/img/Mockups/Horizontal/6-col/pro-signup.jpg")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "Project");
    			attr_dev(img, "class", "img-fluid");
    			add_location(img, file$4, 73, 14, 2978);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(mdbmask, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbmask.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbmask.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    			if (detaching) detach_dev(t);
    			destroy_component(mdbmask, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_23.name,
    		type: "slot",
    		source: "(73:12) <MDBView>",
    		ctx
    	});

    	return block;
    }

    // (82:14) <MDBCardTitle class="font-bold mb-3">
    function create_default_slot_22(ctx) {
    	let strong;

    	const block = {
    		c: function create() {
    			strong = element("strong");
    			strong.textContent = "Project name";
    			add_location(strong, file$4, 82, 16, 3329);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, strong, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(strong);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_22.name,
    		type: "slot",
    		source: "(82:14) <MDBCardTitle class=\\\"font-bold mb-3\\\">",
    		ctx
    	});

    	return block;
    }

    // (85:14) <MDBCardText                  >
    function create_default_slot_21(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Some quick example text to build on the card title and make up\r\n                the bulk of the card's content.");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_21.name,
    		type: "slot",
    		source: "(85:14) <MDBCardText                  >",
    		ctx
    	});

    	return block;
    }

    // (81:12) <MDBCardBody>
    function create_default_slot_20(ctx) {
    	let mdbcardtitle;
    	let t;
    	let mdbcardtext;
    	let current;

    	mdbcardtitle = new MDBCardTitle({
    			props: {
    				class: "font-bold mb-3",
    				$$slots: { default: [create_default_slot_22] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbcardtext = new MDBCardText({
    			props: {
    				$$slots: { default: [create_default_slot_21] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbcardtitle.$$.fragment);
    			t = space();
    			create_component(mdbcardtext.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbcardtitle, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(mdbcardtext, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbcardtitle_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbcardtitle_changes.$$scope = { dirty, ctx };
    			}

    			mdbcardtitle.$set(mdbcardtitle_changes);
    			const mdbcardtext_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbcardtext_changes.$$scope = { dirty, ctx };
    			}

    			mdbcardtext.$set(mdbcardtext_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbcardtitle.$$.fragment, local);
    			transition_in(mdbcardtext.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbcardtitle.$$.fragment, local);
    			transition_out(mdbcardtext.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbcardtitle, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(mdbcardtext, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_20.name,
    		type: "slot",
    		source: "(81:12) <MDBCardBody>",
    		ctx
    	});

    	return block;
    }

    // (90:12) <MDBCardFooter class="links-light profile-card-footer">
    function create_default_slot_19(ctx) {
    	let span;
    	let a;
    	let t;
    	let mdbicon;
    	let current;

    	mdbicon = new MDBIcon({
    			props: { icon: "image", class: "ml-1" },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			span = element("span");
    			a = element("a");
    			t = text("Live Preview\r\n                  ");
    			create_component(mdbicon.$$.fragment);
    			attr_dev(a, "class", "p-2");
    			attr_dev(a, "href", "#profile");
    			add_location(a, file$4, 91, 16, 3728);
    			attr_dev(span, "class", "right");
    			add_location(span, file$4, 90, 14, 3690);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, a);
    			append_dev(a, t);
    			mount_component(mdbicon, a, null);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbicon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbicon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    			destroy_component(mdbicon);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_19.name,
    		type: "slot",
    		source: "(90:12) <MDBCardFooter class=\\\"links-light profile-card-footer\\\">",
    		ctx
    	});

    	return block;
    }

    // (72:10) <MDBCard class="d-flex mb-5">
    function create_default_slot_18(ctx) {
    	let mdbview;
    	let t0;
    	let mdbcardbody;
    	let t1;
    	let mdbcardfooter;
    	let current;

    	mdbview = new MDBView({
    			props: {
    				$$slots: { default: [create_default_slot_23] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbcardbody = new MDBCardBody({
    			props: {
    				$$slots: { default: [create_default_slot_20] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbcardfooter = new MDBCardFooter({
    			props: {
    				class: "links-light profile-card-footer",
    				$$slots: { default: [create_default_slot_19] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbview.$$.fragment);
    			t0 = space();
    			create_component(mdbcardbody.$$.fragment);
    			t1 = space();
    			create_component(mdbcardfooter.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbview, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(mdbcardbody, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(mdbcardfooter, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbview_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbview_changes.$$scope = { dirty, ctx };
    			}

    			mdbview.$set(mdbview_changes);
    			const mdbcardbody_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbcardbody_changes.$$scope = { dirty, ctx };
    			}

    			mdbcardbody.$set(mdbcardbody_changes);
    			const mdbcardfooter_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbcardfooter_changes.$$scope = { dirty, ctx };
    			}

    			mdbcardfooter.$set(mdbcardfooter_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbview.$$.fragment, local);
    			transition_in(mdbcardbody.$$.fragment, local);
    			transition_in(mdbcardfooter.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbview.$$.fragment, local);
    			transition_out(mdbcardbody.$$.fragment, local);
    			transition_out(mdbcardfooter.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbview, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(mdbcardbody, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(mdbcardfooter, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_18.name,
    		type: "slot",
    		source: "(72:10) <MDBCard class=\\\"d-flex mb-5\\\">",
    		ctx
    	});

    	return block;
    }

    // (71:8) <MDBCol lg="6" xl="5" class="mb-3">
    function create_default_slot_17(ctx) {
    	let mdbcard;
    	let current;

    	mdbcard = new MDBCard({
    			props: {
    				class: "d-flex mb-5",
    				$$slots: { default: [create_default_slot_18] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbcard.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbcard, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbcard_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbcard_changes.$$scope = { dirty, ctx };
    			}

    			mdbcard.$set(mdbcard_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbcard.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbcard.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbcard, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_17.name,
    		type: "slot",
    		source: "(71:8) <MDBCol lg=\\\"6\\\" xl=\\\"5\\\" class=\\\"mb-3\\\">",
    		ctx
    	});

    	return block;
    }

    // (41:6) <MDBRow class="d-flex justify-content-center">
    function create_default_slot_16$1(ctx) {
    	let mdbcol0;
    	let t;
    	let mdbcol1;
    	let current;

    	mdbcol0 = new MDBCol({
    			props: {
    				lg: "6",
    				xl: "5",
    				class: "mb-3",
    				$$slots: { default: [create_default_slot_24] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbcol1 = new MDBCol({
    			props: {
    				lg: "6",
    				xl: "5",
    				class: "mb-3",
    				$$slots: { default: [create_default_slot_17] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbcol0.$$.fragment);
    			t = space();
    			create_component(mdbcol1.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbcol0, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(mdbcol1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbcol0_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbcol0_changes.$$scope = { dirty, ctx };
    			}

    			mdbcol0.$set(mdbcol0_changes);
    			const mdbcol1_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbcol1_changes.$$scope = { dirty, ctx };
    			}

    			mdbcol1.$set(mdbcol1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbcol0.$$.fragment, local);
    			transition_in(mdbcol1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbcol0.$$.fragment, local);
    			transition_out(mdbcol1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbcol0, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(mdbcol1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_16$1.name,
    		type: "slot",
    		source: "(41:6) <MDBRow class=\\\"d-flex justify-content-center\\\">",
    		ctx
    	});

    	return block;
    }

    // (104:12) <MDBView>
    function create_default_slot_15$1(ctx) {
    	let img;
    	let img_src_value;
    	let t;
    	let mdbmask;
    	let current;

    	mdbmask = new MDBMask({
    			props: { overlay: "white-slight" },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			img = element("img");
    			t = space();
    			create_component(mdbmask.$$.fragment);
    			if (!src_url_equal(img.src, img_src_value = "https://mdbootstrap.com/img/Mockups/Horizontal/6-col/pro-profile-page.jpg")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "Project");
    			attr_dev(img, "class", "img-fluid");
    			add_location(img, file$4, 104, 14, 4160);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(mdbmask, target, anchor);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbmask.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbmask.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    			if (detaching) detach_dev(t);
    			destroy_component(mdbmask, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_15$1.name,
    		type: "slot",
    		source: "(104:12) <MDBView>",
    		ctx
    	});

    	return block;
    }

    // (113:14) <MDBCardTitle class="font-bold mb-3">
    function create_default_slot_14$1(ctx) {
    	let strong;

    	const block = {
    		c: function create() {
    			strong = element("strong");
    			strong.textContent = "Project name";
    			add_location(strong, file$4, 113, 16, 4517);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, strong, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(strong);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_14$1.name,
    		type: "slot",
    		source: "(113:14) <MDBCardTitle class=\\\"font-bold mb-3\\\">",
    		ctx
    	});

    	return block;
    }

    // (116:14) <MDBCardText                  >
    function create_default_slot_13$1(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Some quick example text to build on the card title and make up\r\n                the bulk of the card's content.");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_13$1.name,
    		type: "slot",
    		source: "(116:14) <MDBCardText                  >",
    		ctx
    	});

    	return block;
    }

    // (112:12) <MDBCardBody>
    function create_default_slot_12$1(ctx) {
    	let mdbcardtitle;
    	let t;
    	let mdbcardtext;
    	let current;

    	mdbcardtitle = new MDBCardTitle({
    			props: {
    				class: "font-bold mb-3",
    				$$slots: { default: [create_default_slot_14$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbcardtext = new MDBCardText({
    			props: {
    				$$slots: { default: [create_default_slot_13$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbcardtitle.$$.fragment);
    			t = space();
    			create_component(mdbcardtext.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbcardtitle, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(mdbcardtext, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbcardtitle_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbcardtitle_changes.$$scope = { dirty, ctx };
    			}

    			mdbcardtitle.$set(mdbcardtitle_changes);
    			const mdbcardtext_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbcardtext_changes.$$scope = { dirty, ctx };
    			}

    			mdbcardtext.$set(mdbcardtext_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbcardtitle.$$.fragment, local);
    			transition_in(mdbcardtext.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbcardtitle.$$.fragment, local);
    			transition_out(mdbcardtext.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbcardtitle, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(mdbcardtext, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_12$1.name,
    		type: "slot",
    		source: "(112:12) <MDBCardBody>",
    		ctx
    	});

    	return block;
    }

    // (121:12) <MDBCardFooter class="links-light profile-card-footer">
    function create_default_slot_11$2(ctx) {
    	let span;
    	let a;
    	let t;
    	let mdbicon;
    	let current;

    	mdbicon = new MDBIcon({
    			props: { icon: "image", class: "ml-1" },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			span = element("span");
    			a = element("a");
    			t = text("Live Preview\r\n                  ");
    			create_component(mdbicon.$$.fragment);
    			attr_dev(a, "class", "p-2");
    			attr_dev(a, "href", "#profile");
    			add_location(a, file$4, 122, 16, 4916);
    			attr_dev(span, "class", "right");
    			add_location(span, file$4, 121, 14, 4878);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, a);
    			append_dev(a, t);
    			mount_component(mdbicon, a, null);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbicon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbicon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    			destroy_component(mdbicon);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_11$2.name,
    		type: "slot",
    		source: "(121:12) <MDBCardFooter class=\\\"links-light profile-card-footer\\\">",
    		ctx
    	});

    	return block;
    }

    // (103:10) <MDBCard class="d-flex mb-5">
    function create_default_slot_10$2(ctx) {
    	let mdbview;
    	let t0;
    	let mdbcardbody;
    	let t1;
    	let mdbcardfooter;
    	let current;

    	mdbview = new MDBView({
    			props: {
    				$$slots: { default: [create_default_slot_15$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbcardbody = new MDBCardBody({
    			props: {
    				$$slots: { default: [create_default_slot_12$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbcardfooter = new MDBCardFooter({
    			props: {
    				class: "links-light profile-card-footer",
    				$$slots: { default: [create_default_slot_11$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbview.$$.fragment);
    			t0 = space();
    			create_component(mdbcardbody.$$.fragment);
    			t1 = space();
    			create_component(mdbcardfooter.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbview, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(mdbcardbody, target, anchor);
    			insert_dev(target, t1, anchor);
    			mount_component(mdbcardfooter, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbview_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbview_changes.$$scope = { dirty, ctx };
    			}

    			mdbview.$set(mdbview_changes);
    			const mdbcardbody_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbcardbody_changes.$$scope = { dirty, ctx };
    			}

    			mdbcardbody.$set(mdbcardbody_changes);
    			const mdbcardfooter_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbcardfooter_changes.$$scope = { dirty, ctx };
    			}

    			mdbcardfooter.$set(mdbcardfooter_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbview.$$.fragment, local);
    			transition_in(mdbcardbody.$$.fragment, local);
    			transition_in(mdbcardfooter.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbview.$$.fragment, local);
    			transition_out(mdbcardbody.$$.fragment, local);
    			transition_out(mdbcardfooter.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbview, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(mdbcardbody, detaching);
    			if (detaching) detach_dev(t1);
    			destroy_component(mdbcardfooter, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_10$2.name,
    		type: "slot",
    		source: "(103:10) <MDBCard class=\\\"d-flex mb-5\\\">",
    		ctx
    	});

    	return block;
    }

    // (102:8) <MDBCol lg="6" xl="5" class="mb-3">
    function create_default_slot_9$2(ctx) {
    	let mdbcard;
    	let current;

    	mdbcard = new MDBCard({
    			props: {
    				class: "d-flex mb-5",
    				$$slots: { default: [create_default_slot_10$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbcard.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbcard, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbcard_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbcard_changes.$$scope = { dirty, ctx };
    			}

    			mdbcard.$set(mdbcard_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbcard.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbcard.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbcard, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_9$2.name,
    		type: "slot",
    		source: "(102:8) <MDBCol lg=\\\"6\\\" xl=\\\"5\\\" class=\\\"mb-3\\\">",
    		ctx
    	});

    	return block;
    }

    // (142:14) <MDBCardTitle class="font-bold mb-3">
    function create_default_slot_8$2(ctx) {
    	let strong;

    	const block = {
    		c: function create() {
    			strong = element("strong");
    			strong.textContent = "Project name";
    			add_location(strong, file$4, 142, 16, 5638);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, strong, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(strong);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_8$2.name,
    		type: "slot",
    		source: "(142:14) <MDBCardTitle class=\\\"font-bold mb-3\\\">",
    		ctx
    	});

    	return block;
    }

    // (145:14) <MDBCardText                  >
    function create_default_slot_7$2(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Some quick example text to build on the card title and make up\r\n                the bulk of the card's content.");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_7$2.name,
    		type: "slot",
    		source: "(145:14) <MDBCardText                  >",
    		ctx
    	});

    	return block;
    }

    // (141:12) <MDBCardBody>
    function create_default_slot_6$2(ctx) {
    	let mdbcardtitle;
    	let t;
    	let mdbcardtext;
    	let current;

    	mdbcardtitle = new MDBCardTitle({
    			props: {
    				class: "font-bold mb-3",
    				$$slots: { default: [create_default_slot_8$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbcardtext = new MDBCardText({
    			props: {
    				$$slots: { default: [create_default_slot_7$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbcardtitle.$$.fragment);
    			t = space();
    			create_component(mdbcardtext.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbcardtitle, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(mdbcardtext, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbcardtitle_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbcardtitle_changes.$$scope = { dirty, ctx };
    			}

    			mdbcardtitle.$set(mdbcardtitle_changes);
    			const mdbcardtext_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbcardtext_changes.$$scope = { dirty, ctx };
    			}

    			mdbcardtext.$set(mdbcardtext_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbcardtitle.$$.fragment, local);
    			transition_in(mdbcardtext.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbcardtitle.$$.fragment, local);
    			transition_out(mdbcardtext.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbcardtitle, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(mdbcardtext, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_6$2.name,
    		type: "slot",
    		source: "(141:12) <MDBCardBody>",
    		ctx
    	});

    	return block;
    }

    // (150:12) <MDBCardFooter class="links-light profile-card-footer">
    function create_default_slot_5$2(ctx) {
    	let span;
    	let a;
    	let t;
    	let mdbicon;
    	let current;

    	mdbicon = new MDBIcon({
    			props: { icon: "image", class: "ml-1" },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			span = element("span");
    			a = element("a");
    			t = text("Live Preview\r\n                  ");
    			create_component(mdbicon.$$.fragment);
    			attr_dev(a, "class", "p-2");
    			attr_dev(a, "href", "#profile");
    			add_location(a, file$4, 151, 16, 6037);
    			attr_dev(span, "class", "right");
    			add_location(span, file$4, 150, 14, 5999);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, a);
    			append_dev(a, t);
    			mount_component(mdbicon, a, null);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbicon.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbicon.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    			destroy_component(mdbicon);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_5$2.name,
    		type: "slot",
    		source: "(150:12) <MDBCardFooter class=\\\"links-light profile-card-footer\\\">",
    		ctx
    	});

    	return block;
    }

    // (132:10) <MDBCard class="d-flex mb-5">
    function create_default_slot_4$2(ctx) {
    	let view_wrapper;
    	let img;
    	let img_src_value;
    	let t0;
    	let mdbmask;
    	let t1;
    	let mdbcardbody;
    	let t2;
    	let mdbcardfooter;
    	let current;

    	mdbmask = new MDBMask({
    			props: { overlay: "white-slight" },
    			$$inline: true
    		});

    	mdbcardbody = new MDBCardBody({
    			props: {
    				$$slots: { default: [create_default_slot_6$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbcardfooter = new MDBCardFooter({
    			props: {
    				class: "links-light profile-card-footer",
    				$$slots: { default: [create_default_slot_5$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			view_wrapper = element("view-wrapper");
    			img = element("img");
    			t0 = space();
    			create_component(mdbmask.$$.fragment);
    			t1 = space();
    			create_component(mdbcardbody.$$.fragment);
    			t2 = space();
    			create_component(mdbcardfooter.$$.fragment);
    			if (!src_url_equal(img.src, img_src_value = "https://mdbootstrap.com/img/Mockups/Horizontal/6-col/pro-signup.jpg")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "Project");
    			attr_dev(img, "class", "img-fluid");
    			add_location(img, file$4, 133, 14, 5282);
    			add_location(view_wrapper, file$4, 132, 12, 5252);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, view_wrapper, anchor);
    			append_dev(view_wrapper, img);
    			append_dev(view_wrapper, t0);
    			mount_component(mdbmask, view_wrapper, null);
    			insert_dev(target, t1, anchor);
    			mount_component(mdbcardbody, target, anchor);
    			insert_dev(target, t2, anchor);
    			mount_component(mdbcardfooter, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbcardbody_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbcardbody_changes.$$scope = { dirty, ctx };
    			}

    			mdbcardbody.$set(mdbcardbody_changes);
    			const mdbcardfooter_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbcardfooter_changes.$$scope = { dirty, ctx };
    			}

    			mdbcardfooter.$set(mdbcardfooter_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbmask.$$.fragment, local);
    			transition_in(mdbcardbody.$$.fragment, local);
    			transition_in(mdbcardfooter.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbmask.$$.fragment, local);
    			transition_out(mdbcardbody.$$.fragment, local);
    			transition_out(mdbcardfooter.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(view_wrapper);
    			destroy_component(mdbmask);
    			if (detaching) detach_dev(t1);
    			destroy_component(mdbcardbody, detaching);
    			if (detaching) detach_dev(t2);
    			destroy_component(mdbcardfooter, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4$2.name,
    		type: "slot",
    		source: "(132:10) <MDBCard class=\\\"d-flex mb-5\\\">",
    		ctx
    	});

    	return block;
    }

    // (131:8) <MDBCol lg="6" xl="5" class="mb-3">
    function create_default_slot_3$2(ctx) {
    	let mdbcard;
    	let current;

    	mdbcard = new MDBCard({
    			props: {
    				class: "d-flex mb-5",
    				$$slots: { default: [create_default_slot_4$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbcard.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbcard, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbcard_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbcard_changes.$$scope = { dirty, ctx };
    			}

    			mdbcard.$set(mdbcard_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbcard.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbcard.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbcard, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$2.name,
    		type: "slot",
    		source: "(131:8) <MDBCol lg=\\\"6\\\" xl=\\\"5\\\" class=\\\"mb-3\\\">",
    		ctx
    	});

    	return block;
    }

    // (101:6) <MDBRow class="d-flex justify-content-center">
    function create_default_slot_2$2(ctx) {
    	let mdbcol0;
    	let t;
    	let mdbcol1;
    	let current;

    	mdbcol0 = new MDBCol({
    			props: {
    				lg: "6",
    				xl: "5",
    				class: "mb-3",
    				$$slots: { default: [create_default_slot_9$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbcol1 = new MDBCol({
    			props: {
    				lg: "6",
    				xl: "5",
    				class: "mb-3",
    				$$slots: { default: [create_default_slot_3$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbcol0.$$.fragment);
    			t = space();
    			create_component(mdbcol1.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbcol0, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(mdbcol1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbcol0_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbcol0_changes.$$scope = { dirty, ctx };
    			}

    			mdbcol0.$set(mdbcol0_changes);
    			const mdbcol1_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbcol1_changes.$$scope = { dirty, ctx };
    			}

    			mdbcol1.$set(mdbcol1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbcol0.$$.fragment, local);
    			transition_in(mdbcol1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbcol0.$$.fragment, local);
    			transition_out(mdbcol1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbcol0, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(mdbcol1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$2.name,
    		type: "slot",
    		source: "(101:6) <MDBRow class=\\\"d-flex justify-content-center\\\">",
    		ctx
    	});

    	return block;
    }

    // (39:2) <MDBCol md="6" lg="9">
    function create_default_slot_1$2(ctx) {
    	let section;
    	let mdbrow0;
    	let t;
    	let mdbrow1;
    	let current;

    	mdbrow0 = new MDBRow({
    			props: {
    				class: "d-flex justify-content-center",
    				$$slots: { default: [create_default_slot_16$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbrow1 = new MDBRow({
    			props: {
    				class: "d-flex justify-content-center",
    				$$slots: { default: [create_default_slot_2$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			section = element("section");
    			create_component(mdbrow0.$$.fragment);
    			t = space();
    			create_component(mdbrow1.$$.fragment);
    			attr_dev(section, "class", "text-center pb-3");
    			add_location(section, file$4, 39, 4, 1648);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			mount_component(mdbrow0, section, null);
    			append_dev(section, t);
    			mount_component(mdbrow1, section, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbrow0_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbrow0_changes.$$scope = { dirty, ctx };
    			}

    			mdbrow0.$set(mdbrow0_changes);
    			const mdbrow1_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbrow1_changes.$$scope = { dirty, ctx };
    			}

    			mdbrow1.$set(mdbrow1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbrow0.$$.fragment, local);
    			transition_in(mdbrow1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbrow0.$$.fragment, local);
    			transition_out(mdbrow1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			destroy_component(mdbrow0);
    			destroy_component(mdbrow1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$2.name,
    		type: "slot",
    		source: "(39:2) <MDBCol md=\\\"6\\\" lg=\\\"9\\\">",
    		ctx
    	});

    	return block;
    }

    // (16:0) <MDBRow class="justify-content-center">
    function create_default_slot$2(ctx) {
    	let mdbcol0;
    	let t;
    	let mdbcol1;
    	let current;

    	mdbcol0 = new MDBCol({
    			props: {
    				sm: "12",
    				md: "6",
    				lg: "3",
    				class: "mb-5",
    				$$slots: { default: [create_default_slot_31] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbcol1 = new MDBCol({
    			props: {
    				md: "6",
    				lg: "9",
    				$$slots: { default: [create_default_slot_1$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbcol0.$$.fragment);
    			t = space();
    			create_component(mdbcol1.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbcol0, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(mdbcol1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbcol0_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbcol0_changes.$$scope = { dirty, ctx };
    			}

    			mdbcol0.$set(mdbcol0_changes);
    			const mdbcol1_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbcol1_changes.$$scope = { dirty, ctx };
    			}

    			mdbcol1.$set(mdbcol1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbcol0.$$.fragment, local);
    			transition_in(mdbcol1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbcol0.$$.fragment, local);
    			transition_out(mdbcol1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbcol0, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(mdbcol1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$2.name,
    		type: "slot",
    		source: "(16:0) <MDBRow class=\\\"justify-content-center\\\">",
    		ctx
    	});

    	return block;
    }

    function create_fragment$4(ctx) {
    	let mdbrow;
    	let current;

    	mdbrow = new MDBRow({
    			props: {
    				class: "justify-content-center",
    				$$slots: { default: [create_default_slot$2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbrow.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbrow, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const mdbrow_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbrow_changes.$$scope = { dirty, ctx };
    			}

    			mdbrow.$set(mdbrow_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbrow.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbrow.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbrow, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$4.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$4($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Profile', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Profile> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		MDBCard,
    		MDBCardBody,
    		MDBIcon,
    		MDBRow,
    		MDBCol,
    		MDBCardImage,
    		MDBCardTitle,
    		MDBCardText,
    		MDBBtn,
    		MDBCardFooter,
    		MDBMask,
    		MDBView
    	});

    	return [];
    }

    class Profile extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$4, create_fragment$4, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Profile",
    			options,
    			id: create_fragment$4.name
    		});
    	}
    }

    /* src\components\pages\tables.svelte generated by Svelte v3.59.2 */
    const file$3 = "src\\components\\pages\\tables.svelte";

    // (15:6) <MDBView class="gradient-card-header blue darken-2">
    function create_default_slot_16(ctx) {
    	let h4;

    	const block = {
    		c: function create() {
    			h4 = element("h4");
    			h4.textContent = "Basic tables";
    			attr_dev(h4, "class", "h4-responsive text-white");
    			add_location(h4, file$3, 15, 8, 615);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h4, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h4);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_16.name,
    		type: "slot",
    		source: "(15:6) <MDBView class=\\\"gradient-card-header blue darken-2\\\">",
    		ctx
    	});

    	return block;
    }

    // (26:10) <MDBTableHead>
    function create_default_slot_15(ctx) {
    	let tr;
    	let th0;
    	let t1;
    	let th1;
    	let t3;
    	let th2;
    	let t5;
    	let th3;

    	const block = {
    		c: function create() {
    			tr = element("tr");
    			th0 = element("th");
    			th0.textContent = "#";
    			t1 = space();
    			th1 = element("th");
    			th1.textContent = "First";
    			t3 = space();
    			th2 = element("th");
    			th2.textContent = "Last";
    			t5 = space();
    			th3 = element("th");
    			th3.textContent = "Handle";
    			add_location(th0, file$3, 27, 14, 1139);
    			add_location(th1, file$3, 28, 14, 1165);
    			add_location(th2, file$3, 29, 14, 1195);
    			add_location(th3, file$3, 30, 14, 1224);
    			add_location(tr, file$3, 26, 12, 1119);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, tr, anchor);
    			append_dev(tr, th0);
    			append_dev(tr, t1);
    			append_dev(tr, th1);
    			append_dev(tr, t3);
    			append_dev(tr, th2);
    			append_dev(tr, t5);
    			append_dev(tr, th3);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(tr);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_15.name,
    		type: "slot",
    		source: "(26:10) <MDBTableHead>",
    		ctx
    	});

    	return block;
    }

    // (34:10) <MDBTableBody>
    function create_default_slot_14(ctx) {
    	let tr0;
    	let td0;
    	let t1;
    	let td1;
    	let t3;
    	let td2;
    	let t5;
    	let td3;
    	let t7;
    	let tr1;
    	let td4;
    	let t9;
    	let td5;
    	let t11;
    	let td6;
    	let t13;
    	let td7;
    	let t15;
    	let tr2;
    	let td8;
    	let t17;
    	let td9;
    	let t19;
    	let td10;
    	let t21;
    	let td11;

    	const block = {
    		c: function create() {
    			tr0 = element("tr");
    			td0 = element("td");
    			td0.textContent = "1";
    			t1 = space();
    			td1 = element("td");
    			td1.textContent = "Mark";
    			t3 = space();
    			td2 = element("td");
    			td2.textContent = "Otto";
    			t5 = space();
    			td3 = element("td");
    			td3.textContent = "@mdo";
    			t7 = space();
    			tr1 = element("tr");
    			td4 = element("td");
    			td4.textContent = "2";
    			t9 = space();
    			td5 = element("td");
    			td5.textContent = "Jacob";
    			t11 = space();
    			td6 = element("td");
    			td6.textContent = "Thornton";
    			t13 = space();
    			td7 = element("td");
    			td7.textContent = "@fat";
    			t15 = space();
    			tr2 = element("tr");
    			td8 = element("td");
    			td8.textContent = "3";
    			t17 = space();
    			td9 = element("td");
    			td9.textContent = "Larry";
    			t19 = space();
    			td10 = element("td");
    			td10.textContent = "the Bird";
    			t21 = space();
    			td11 = element("td");
    			td11.textContent = "@twitter";
    			add_location(td0, file$3, 35, 14, 1345);
    			add_location(td1, file$3, 36, 14, 1371);
    			add_location(td2, file$3, 37, 14, 1400);
    			add_location(td3, file$3, 38, 14, 1429);
    			add_location(tr0, file$3, 34, 12, 1325);
    			add_location(td4, file$3, 41, 14, 1495);
    			add_location(td5, file$3, 42, 14, 1521);
    			add_location(td6, file$3, 43, 14, 1551);
    			add_location(td7, file$3, 44, 14, 1584);
    			add_location(tr1, file$3, 40, 12, 1475);
    			add_location(td8, file$3, 47, 14, 1650);
    			add_location(td9, file$3, 48, 14, 1676);
    			add_location(td10, file$3, 49, 14, 1706);
    			add_location(td11, file$3, 50, 14, 1739);
    			add_location(tr2, file$3, 46, 12, 1630);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, tr0, anchor);
    			append_dev(tr0, td0);
    			append_dev(tr0, t1);
    			append_dev(tr0, td1);
    			append_dev(tr0, t3);
    			append_dev(tr0, td2);
    			append_dev(tr0, t5);
    			append_dev(tr0, td3);
    			insert_dev(target, t7, anchor);
    			insert_dev(target, tr1, anchor);
    			append_dev(tr1, td4);
    			append_dev(tr1, t9);
    			append_dev(tr1, td5);
    			append_dev(tr1, t11);
    			append_dev(tr1, td6);
    			append_dev(tr1, t13);
    			append_dev(tr1, td7);
    			insert_dev(target, t15, anchor);
    			insert_dev(target, tr2, anchor);
    			append_dev(tr2, td8);
    			append_dev(tr2, t17);
    			append_dev(tr2, td9);
    			append_dev(tr2, t19);
    			append_dev(tr2, td10);
    			append_dev(tr2, t21);
    			append_dev(tr2, td11);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(tr0);
    			if (detaching) detach_dev(t7);
    			if (detaching) detach_dev(tr1);
    			if (detaching) detach_dev(t15);
    			if (detaching) detach_dev(tr2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_14.name,
    		type: "slot",
    		source: "(34:10) <MDBTableBody>",
    		ctx
    	});

    	return block;
    }

    // (25:8) <MDBTable responsive>
    function create_default_slot_13(ctx) {
    	let mdbtablehead;
    	let t;
    	let mdbtablebody;
    	let current;

    	mdbtablehead = new MDBTableHead({
    			props: {
    				$$slots: { default: [create_default_slot_15] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbtablebody = new MDBTableBody({
    			props: {
    				$$slots: { default: [create_default_slot_14] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbtablehead.$$.fragment);
    			t = space();
    			create_component(mdbtablebody.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbtablehead, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(mdbtablebody, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbtablehead_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbtablehead_changes.$$scope = { dirty, ctx };
    			}

    			mdbtablehead.$set(mdbtablehead_changes);
    			const mdbtablebody_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbtablebody_changes.$$scope = { dirty, ctx };
    			}

    			mdbtablebody.$set(mdbtablebody_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbtablehead.$$.fragment, local);
    			transition_in(mdbtablebody.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbtablehead.$$.fragment, local);
    			transition_out(mdbtablebody.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbtablehead, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(mdbtablebody, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_13.name,
    		type: "slot",
    		source: "(25:8) <MDBTable responsive>",
    		ctx
    	});

    	return block;
    }

    // (63:10) <MDBTableHead color="primary-color" textWhite>
    function create_default_slot_12(ctx) {
    	let tr;
    	let th0;
    	let t1;
    	let th1;
    	let t3;
    	let th2;
    	let t5;
    	let th3;

    	const block = {
    		c: function create() {
    			tr = element("tr");
    			th0 = element("th");
    			th0.textContent = "#";
    			t1 = space();
    			th1 = element("th");
    			th1.textContent = "First";
    			t3 = space();
    			th2 = element("th");
    			th2.textContent = "Last";
    			t5 = space();
    			th3 = element("th");
    			th3.textContent = "Handle";
    			add_location(th0, file$3, 64, 14, 2319);
    			add_location(th1, file$3, 65, 14, 2345);
    			add_location(th2, file$3, 66, 14, 2375);
    			add_location(th3, file$3, 67, 14, 2404);
    			add_location(tr, file$3, 63, 12, 2299);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, tr, anchor);
    			append_dev(tr, th0);
    			append_dev(tr, t1);
    			append_dev(tr, th1);
    			append_dev(tr, t3);
    			append_dev(tr, th2);
    			append_dev(tr, t5);
    			append_dev(tr, th3);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(tr);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_12.name,
    		type: "slot",
    		source: "(63:10) <MDBTableHead color=\\\"primary-color\\\" textWhite>",
    		ctx
    	});

    	return block;
    }

    // (71:10) <MDBTableBody>
    function create_default_slot_11$1(ctx) {
    	let tr0;
    	let td0;
    	let t1;
    	let td1;
    	let t3;
    	let td2;
    	let t5;
    	let td3;
    	let t7;
    	let tr1;
    	let td4;
    	let t9;
    	let td5;
    	let t11;
    	let td6;
    	let t13;
    	let td7;
    	let t15;
    	let tr2;
    	let td8;
    	let t17;
    	let td9;
    	let t19;
    	let td10;
    	let t21;
    	let td11;

    	const block = {
    		c: function create() {
    			tr0 = element("tr");
    			td0 = element("td");
    			td0.textContent = "1";
    			t1 = space();
    			td1 = element("td");
    			td1.textContent = "Mark";
    			t3 = space();
    			td2 = element("td");
    			td2.textContent = "Otto";
    			t5 = space();
    			td3 = element("td");
    			td3.textContent = "@mdo";
    			t7 = space();
    			tr1 = element("tr");
    			td4 = element("td");
    			td4.textContent = "2";
    			t9 = space();
    			td5 = element("td");
    			td5.textContent = "Jacob";
    			t11 = space();
    			td6 = element("td");
    			td6.textContent = "Thornton";
    			t13 = space();
    			td7 = element("td");
    			td7.textContent = "@fat";
    			t15 = space();
    			tr2 = element("tr");
    			td8 = element("td");
    			td8.textContent = "3";
    			t17 = space();
    			td9 = element("td");
    			td9.textContent = "Larry";
    			t19 = space();
    			td10 = element("td");
    			td10.textContent = "the Bird";
    			t21 = space();
    			td11 = element("td");
    			td11.textContent = "@twitter";
    			add_location(td0, file$3, 72, 14, 2525);
    			add_location(td1, file$3, 73, 14, 2551);
    			add_location(td2, file$3, 74, 14, 2580);
    			add_location(td3, file$3, 75, 14, 2609);
    			add_location(tr0, file$3, 71, 12, 2505);
    			add_location(td4, file$3, 78, 14, 2675);
    			add_location(td5, file$3, 79, 14, 2701);
    			add_location(td6, file$3, 80, 14, 2731);
    			add_location(td7, file$3, 81, 14, 2764);
    			add_location(tr1, file$3, 77, 12, 2655);
    			add_location(td8, file$3, 84, 14, 2830);
    			add_location(td9, file$3, 85, 14, 2856);
    			add_location(td10, file$3, 86, 14, 2886);
    			add_location(td11, file$3, 87, 14, 2919);
    			add_location(tr2, file$3, 83, 12, 2810);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, tr0, anchor);
    			append_dev(tr0, td0);
    			append_dev(tr0, t1);
    			append_dev(tr0, td1);
    			append_dev(tr0, t3);
    			append_dev(tr0, td2);
    			append_dev(tr0, t5);
    			append_dev(tr0, td3);
    			insert_dev(target, t7, anchor);
    			insert_dev(target, tr1, anchor);
    			append_dev(tr1, td4);
    			append_dev(tr1, t9);
    			append_dev(tr1, td5);
    			append_dev(tr1, t11);
    			append_dev(tr1, td6);
    			append_dev(tr1, t13);
    			append_dev(tr1, td7);
    			insert_dev(target, t15, anchor);
    			insert_dev(target, tr2, anchor);
    			append_dev(tr2, td8);
    			append_dev(tr2, t17);
    			append_dev(tr2, td9);
    			append_dev(tr2, t19);
    			append_dev(tr2, td10);
    			append_dev(tr2, t21);
    			append_dev(tr2, td11);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(tr0);
    			if (detaching) detach_dev(t7);
    			if (detaching) detach_dev(tr1);
    			if (detaching) detach_dev(t15);
    			if (detaching) detach_dev(tr2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_11$1.name,
    		type: "slot",
    		source: "(71:10) <MDBTableBody>",
    		ctx
    	});

    	return block;
    }

    // (62:8) <MDBTable responsive>
    function create_default_slot_10$1(ctx) {
    	let mdbtablehead;
    	let t;
    	let mdbtablebody;
    	let current;

    	mdbtablehead = new MDBTableHead({
    			props: {
    				color: "primary-color",
    				textWhite: true,
    				$$slots: { default: [create_default_slot_12] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbtablebody = new MDBTableBody({
    			props: {
    				$$slots: { default: [create_default_slot_11$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbtablehead.$$.fragment);
    			t = space();
    			create_component(mdbtablebody.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbtablehead, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(mdbtablebody, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbtablehead_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbtablehead_changes.$$scope = { dirty, ctx };
    			}

    			mdbtablehead.$set(mdbtablehead_changes);
    			const mdbtablebody_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbtablebody_changes.$$scope = { dirty, ctx };
    			}

    			mdbtablebody.$set(mdbtablebody_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbtablehead.$$.fragment, local);
    			transition_in(mdbtablebody.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbtablehead.$$.fragment, local);
    			transition_out(mdbtablebody.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbtablehead, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(mdbtablebody, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_10$1.name,
    		type: "slot",
    		source: "(62:8) <MDBTable responsive>",
    		ctx
    	});

    	return block;
    }

    // (93:10) <MDBTableHead color="pink">
    function create_default_slot_9$1(ctx) {
    	let tr;
    	let th0;
    	let t1;
    	let th1;
    	let t3;
    	let th2;
    	let t5;
    	let th3;

    	const block = {
    		c: function create() {
    			tr = element("tr");
    			th0 = element("th");
    			th0.textContent = "#";
    			t1 = space();
    			th1 = element("th");
    			th1.textContent = "First";
    			t3 = space();
    			th2 = element("th");
    			th2.textContent = "Last";
    			t5 = space();
    			th3 = element("th");
    			th3.textContent = "Handle";
    			add_location(th0, file$3, 94, 14, 3107);
    			add_location(th1, file$3, 95, 14, 3133);
    			add_location(th2, file$3, 96, 14, 3163);
    			add_location(th3, file$3, 97, 14, 3192);
    			add_location(tr, file$3, 93, 12, 3087);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, tr, anchor);
    			append_dev(tr, th0);
    			append_dev(tr, t1);
    			append_dev(tr, th1);
    			append_dev(tr, t3);
    			append_dev(tr, th2);
    			append_dev(tr, t5);
    			append_dev(tr, th3);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(tr);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_9$1.name,
    		type: "slot",
    		source: "(93:10) <MDBTableHead color=\\\"pink\\\">",
    		ctx
    	});

    	return block;
    }

    // (101:10) <MDBTableBody>
    function create_default_slot_8$1(ctx) {
    	let tr0;
    	let td0;
    	let t1;
    	let td1;
    	let t3;
    	let td2;
    	let t5;
    	let td3;
    	let t7;
    	let tr1;
    	let td4;
    	let t9;
    	let td5;
    	let t11;
    	let td6;
    	let t13;
    	let td7;
    	let t15;
    	let tr2;
    	let td8;
    	let t17;
    	let td9;
    	let t19;
    	let td10;
    	let t21;
    	let td11;

    	const block = {
    		c: function create() {
    			tr0 = element("tr");
    			td0 = element("td");
    			td0.textContent = "1";
    			t1 = space();
    			td1 = element("td");
    			td1.textContent = "Mark";
    			t3 = space();
    			td2 = element("td");
    			td2.textContent = "Otto";
    			t5 = space();
    			td3 = element("td");
    			td3.textContent = "@mdo";
    			t7 = space();
    			tr1 = element("tr");
    			td4 = element("td");
    			td4.textContent = "2";
    			t9 = space();
    			td5 = element("td");
    			td5.textContent = "Jacob";
    			t11 = space();
    			td6 = element("td");
    			td6.textContent = "Thornton";
    			t13 = space();
    			td7 = element("td");
    			td7.textContent = "@fat";
    			t15 = space();
    			tr2 = element("tr");
    			td8 = element("td");
    			td8.textContent = "3";
    			t17 = space();
    			td9 = element("td");
    			td9.textContent = "Larry";
    			t19 = space();
    			td10 = element("td");
    			td10.textContent = "the Bird";
    			t21 = space();
    			td11 = element("td");
    			td11.textContent = "@twitter";
    			add_location(td0, file$3, 102, 14, 3313);
    			add_location(td1, file$3, 103, 14, 3339);
    			add_location(td2, file$3, 104, 14, 3368);
    			add_location(td3, file$3, 105, 14, 3397);
    			add_location(tr0, file$3, 101, 12, 3293);
    			add_location(td4, file$3, 108, 14, 3463);
    			add_location(td5, file$3, 109, 14, 3489);
    			add_location(td6, file$3, 110, 14, 3519);
    			add_location(td7, file$3, 111, 14, 3552);
    			add_location(tr1, file$3, 107, 12, 3443);
    			add_location(td8, file$3, 114, 14, 3618);
    			add_location(td9, file$3, 115, 14, 3644);
    			add_location(td10, file$3, 116, 14, 3674);
    			add_location(td11, file$3, 117, 14, 3707);
    			add_location(tr2, file$3, 113, 12, 3598);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, tr0, anchor);
    			append_dev(tr0, td0);
    			append_dev(tr0, t1);
    			append_dev(tr0, td1);
    			append_dev(tr0, t3);
    			append_dev(tr0, td2);
    			append_dev(tr0, t5);
    			append_dev(tr0, td3);
    			insert_dev(target, t7, anchor);
    			insert_dev(target, tr1, anchor);
    			append_dev(tr1, td4);
    			append_dev(tr1, t9);
    			append_dev(tr1, td5);
    			append_dev(tr1, t11);
    			append_dev(tr1, td6);
    			append_dev(tr1, t13);
    			append_dev(tr1, td7);
    			insert_dev(target, t15, anchor);
    			insert_dev(target, tr2, anchor);
    			append_dev(tr2, td8);
    			append_dev(tr2, t17);
    			append_dev(tr2, td9);
    			append_dev(tr2, t19);
    			append_dev(tr2, td10);
    			append_dev(tr2, t21);
    			append_dev(tr2, td11);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(tr0);
    			if (detaching) detach_dev(t7);
    			if (detaching) detach_dev(tr1);
    			if (detaching) detach_dev(t15);
    			if (detaching) detach_dev(tr2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_8$1.name,
    		type: "slot",
    		source: "(101:10) <MDBTableBody>",
    		ctx
    	});

    	return block;
    }

    // (92:8) <MDBTable responsive>
    function create_default_slot_7$1(ctx) {
    	let mdbtablehead;
    	let t;
    	let mdbtablebody;
    	let current;

    	mdbtablehead = new MDBTableHead({
    			props: {
    				color: "pink",
    				$$slots: { default: [create_default_slot_9$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbtablebody = new MDBTableBody({
    			props: {
    				$$slots: { default: [create_default_slot_8$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbtablehead.$$.fragment);
    			t = space();
    			create_component(mdbtablebody.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbtablehead, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(mdbtablebody, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbtablehead_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbtablehead_changes.$$scope = { dirty, ctx };
    			}

    			mdbtablehead.$set(mdbtablehead_changes);
    			const mdbtablebody_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbtablebody_changes.$$scope = { dirty, ctx };
    			}

    			mdbtablebody.$set(mdbtablebody_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbtablehead.$$.fragment, local);
    			transition_in(mdbtablebody.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbtablehead.$$.fragment, local);
    			transition_out(mdbtablebody.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbtablehead, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(mdbtablebody, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_7$1.name,
    		type: "slot",
    		source: "(92:8) <MDBTable responsive>",
    		ctx
    	});

    	return block;
    }

    // (128:10) <MDBTableHead>
    function create_default_slot_6$1(ctx) {
    	let tr;
    	let th0;
    	let t1;
    	let th1;
    	let t3;
    	let th2;
    	let t5;
    	let th3;

    	const block = {
    		c: function create() {
    			tr = element("tr");
    			th0 = element("th");
    			th0.textContent = "#";
    			t1 = space();
    			th1 = element("th");
    			th1.textContent = "First";
    			t3 = space();
    			th2 = element("th");
    			th2.textContent = "Last";
    			t5 = space();
    			th3 = element("th");
    			th3.textContent = "Handle";
    			add_location(th0, file$3, 129, 14, 4089);
    			add_location(th1, file$3, 130, 14, 4115);
    			add_location(th2, file$3, 131, 14, 4145);
    			add_location(th3, file$3, 132, 14, 4174);
    			add_location(tr, file$3, 128, 12, 4069);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, tr, anchor);
    			append_dev(tr, th0);
    			append_dev(tr, t1);
    			append_dev(tr, th1);
    			append_dev(tr, t3);
    			append_dev(tr, th2);
    			append_dev(tr, t5);
    			append_dev(tr, th3);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(tr);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_6$1.name,
    		type: "slot",
    		source: "(128:10) <MDBTableHead>",
    		ctx
    	});

    	return block;
    }

    // (136:10) <MDBTableBody>
    function create_default_slot_5$1(ctx) {
    	let tr0;
    	let td0;
    	let t1;
    	let td1;
    	let t3;
    	let td2;
    	let t5;
    	let td3;
    	let t7;
    	let tr1;
    	let td4;
    	let t9;
    	let td5;
    	let t11;
    	let td6;
    	let t13;
    	let td7;
    	let t15;
    	let tr2;
    	let td8;
    	let t17;
    	let td9;
    	let t19;
    	let td10;
    	let t21;
    	let td11;

    	const block = {
    		c: function create() {
    			tr0 = element("tr");
    			td0 = element("td");
    			td0.textContent = "1";
    			t1 = space();
    			td1 = element("td");
    			td1.textContent = "Mark";
    			t3 = space();
    			td2 = element("td");
    			td2.textContent = "Otto";
    			t5 = space();
    			td3 = element("td");
    			td3.textContent = "@mdo";
    			t7 = space();
    			tr1 = element("tr");
    			td4 = element("td");
    			td4.textContent = "2";
    			t9 = space();
    			td5 = element("td");
    			td5.textContent = "Jacob";
    			t11 = space();
    			td6 = element("td");
    			td6.textContent = "Thornton";
    			t13 = space();
    			td7 = element("td");
    			td7.textContent = "@fat";
    			t15 = space();
    			tr2 = element("tr");
    			td8 = element("td");
    			td8.textContent = "3";
    			t17 = space();
    			td9 = element("td");
    			td9.textContent = "Larry";
    			t19 = space();
    			td10 = element("td");
    			td10.textContent = "the Bird";
    			t21 = space();
    			td11 = element("td");
    			td11.textContent = "@twitter";
    			add_location(td0, file$3, 137, 14, 4295);
    			add_location(td1, file$3, 138, 14, 4321);
    			add_location(td2, file$3, 139, 14, 4350);
    			add_location(td3, file$3, 140, 14, 4379);
    			add_location(tr0, file$3, 136, 12, 4275);
    			add_location(td4, file$3, 143, 14, 4445);
    			add_location(td5, file$3, 144, 14, 4471);
    			add_location(td6, file$3, 145, 14, 4501);
    			add_location(td7, file$3, 146, 14, 4534);
    			add_location(tr1, file$3, 142, 12, 4425);
    			add_location(td8, file$3, 149, 14, 4600);
    			add_location(td9, file$3, 150, 14, 4626);
    			add_location(td10, file$3, 151, 14, 4656);
    			add_location(td11, file$3, 152, 14, 4689);
    			add_location(tr2, file$3, 148, 12, 4580);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, tr0, anchor);
    			append_dev(tr0, td0);
    			append_dev(tr0, t1);
    			append_dev(tr0, td1);
    			append_dev(tr0, t3);
    			append_dev(tr0, td2);
    			append_dev(tr0, t5);
    			append_dev(tr0, td3);
    			insert_dev(target, t7, anchor);
    			insert_dev(target, tr1, anchor);
    			append_dev(tr1, td4);
    			append_dev(tr1, t9);
    			append_dev(tr1, td5);
    			append_dev(tr1, t11);
    			append_dev(tr1, td6);
    			append_dev(tr1, t13);
    			append_dev(tr1, td7);
    			insert_dev(target, t15, anchor);
    			insert_dev(target, tr2, anchor);
    			append_dev(tr2, td8);
    			append_dev(tr2, t17);
    			append_dev(tr2, td9);
    			append_dev(tr2, t19);
    			append_dev(tr2, td10);
    			append_dev(tr2, t21);
    			append_dev(tr2, td11);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(tr0);
    			if (detaching) detach_dev(t7);
    			if (detaching) detach_dev(tr1);
    			if (detaching) detach_dev(t15);
    			if (detaching) detach_dev(tr2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_5$1.name,
    		type: "slot",
    		source: "(136:10) <MDBTableBody>",
    		ctx
    	});

    	return block;
    }

    // (127:8) <MDBTable responsive striped>
    function create_default_slot_4$1(ctx) {
    	let mdbtablehead;
    	let t;
    	let mdbtablebody;
    	let current;

    	mdbtablehead = new MDBTableHead({
    			props: {
    				$$slots: { default: [create_default_slot_6$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbtablebody = new MDBTableBody({
    			props: {
    				$$slots: { default: [create_default_slot_5$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbtablehead.$$.fragment);
    			t = space();
    			create_component(mdbtablebody.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbtablehead, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(mdbtablebody, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbtablehead_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbtablehead_changes.$$scope = { dirty, ctx };
    			}

    			mdbtablehead.$set(mdbtablehead_changes);
    			const mdbtablebody_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbtablebody_changes.$$scope = { dirty, ctx };
    			}

    			mdbtablebody.$set(mdbtablebody_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbtablehead.$$.fragment, local);
    			transition_in(mdbtablebody.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbtablehead.$$.fragment, local);
    			transition_out(mdbtablebody.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbtablehead, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(mdbtablebody, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4$1.name,
    		type: "slot",
    		source: "(127:8) <MDBTable responsive striped>",
    		ctx
    	});

    	return block;
    }

    // (18:6) <MDBCardBody>
    function create_default_slot_3$1(ctx) {
    	let h30;
    	let strong0;
    	let t1;
    	let p0;
    	let t3;
    	let mdbtable0;
    	let t4;
    	let h31;
    	let strong1;
    	let t6;
    	let p1;
    	let t8;
    	let mdbtable1;
    	let t9;
    	let mdbtable2;
    	let t10;
    	let h32;
    	let strong2;
    	let t12;
    	let p2;
    	let t14;
    	let mdbtable3;
    	let current;

    	mdbtable0 = new MDBTable({
    			props: {
    				responsive: true,
    				$$slots: { default: [create_default_slot_13] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbtable1 = new MDBTable({
    			props: {
    				responsive: true,
    				$$slots: { default: [create_default_slot_10$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbtable2 = new MDBTable({
    			props: {
    				responsive: true,
    				$$slots: { default: [create_default_slot_7$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbtable3 = new MDBTable({
    			props: {
    				responsive: true,
    				striped: true,
    				$$slots: { default: [create_default_slot_4$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			h30 = element("h3");
    			strong0 = element("strong");
    			strong0.textContent = "Basic examples";
    			t1 = space();
    			p0 = element("p");
    			p0.textContent = "Using the most basic table markup, here’s how .table-based tables look\r\n          in Bootstrap. All table styles are inherited in Bootstrap 4, meaning\r\n          any nested tables will be styled in the same manner as the parent.";
    			t3 = space();
    			create_component(mdbtable0.$$.fragment);
    			t4 = space();
    			h31 = element("h3");
    			strong1 = element("strong");
    			strong1.textContent = "MDBTable head options";
    			t6 = space();
    			p1 = element("p");
    			p1.textContent = "To change a background-color of thead (or any other element) use our\r\n          color classes. If you are going to use a dark background you should\r\n          also consider white text (to provide a proper contrast) by adding\r\n          .text-white class.";
    			t8 = space();
    			create_component(mdbtable1.$$.fragment);
    			t9 = space();
    			create_component(mdbtable2.$$.fragment);
    			t10 = space();
    			h32 = element("h3");
    			strong2 = element("strong");
    			strong2.textContent = "Striped rows.";
    			t12 = space();
    			p2 = element("p");
    			p2.textContent = "Use prop striped to add zebra-striping to any table row within the\r\n          table body";
    			t14 = space();
    			create_component(mdbtable3.$$.fragment);
    			add_location(strong0, file$3, 18, 35, 745);
    			attr_dev(h30, "class", "mt-5 text-left");
    			add_location(h30, file$3, 18, 8, 718);
    			add_location(p0, file$3, 19, 8, 791);
    			add_location(strong1, file$3, 54, 35, 1860);
    			attr_dev(h31, "class", "mt-5 text-left");
    			add_location(h31, file$3, 54, 8, 1833);
    			add_location(p1, file$3, 55, 8, 1913);
    			add_location(strong2, file$3, 121, 35, 3828);
    			attr_dev(h32, "class", "mt-5 text-left");
    			add_location(h32, file$3, 121, 8, 3801);
    			add_location(p2, file$3, 122, 8, 3873);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h30, anchor);
    			append_dev(h30, strong0);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, p0, anchor);
    			insert_dev(target, t3, anchor);
    			mount_component(mdbtable0, target, anchor);
    			insert_dev(target, t4, anchor);
    			insert_dev(target, h31, anchor);
    			append_dev(h31, strong1);
    			insert_dev(target, t6, anchor);
    			insert_dev(target, p1, anchor);
    			insert_dev(target, t8, anchor);
    			mount_component(mdbtable1, target, anchor);
    			insert_dev(target, t9, anchor);
    			mount_component(mdbtable2, target, anchor);
    			insert_dev(target, t10, anchor);
    			insert_dev(target, h32, anchor);
    			append_dev(h32, strong2);
    			insert_dev(target, t12, anchor);
    			insert_dev(target, p2, anchor);
    			insert_dev(target, t14, anchor);
    			mount_component(mdbtable3, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbtable0_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbtable0_changes.$$scope = { dirty, ctx };
    			}

    			mdbtable0.$set(mdbtable0_changes);
    			const mdbtable1_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbtable1_changes.$$scope = { dirty, ctx };
    			}

    			mdbtable1.$set(mdbtable1_changes);
    			const mdbtable2_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbtable2_changes.$$scope = { dirty, ctx };
    			}

    			mdbtable2.$set(mdbtable2_changes);
    			const mdbtable3_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbtable3_changes.$$scope = { dirty, ctx };
    			}

    			mdbtable3.$set(mdbtable3_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbtable0.$$.fragment, local);
    			transition_in(mdbtable1.$$.fragment, local);
    			transition_in(mdbtable2.$$.fragment, local);
    			transition_in(mdbtable3.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbtable0.$$.fragment, local);
    			transition_out(mdbtable1.$$.fragment, local);
    			transition_out(mdbtable2.$$.fragment, local);
    			transition_out(mdbtable3.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h30);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(p0);
    			if (detaching) detach_dev(t3);
    			destroy_component(mdbtable0, detaching);
    			if (detaching) detach_dev(t4);
    			if (detaching) detach_dev(h31);
    			if (detaching) detach_dev(t6);
    			if (detaching) detach_dev(p1);
    			if (detaching) detach_dev(t8);
    			destroy_component(mdbtable1, detaching);
    			if (detaching) detach_dev(t9);
    			destroy_component(mdbtable2, detaching);
    			if (detaching) detach_dev(t10);
    			if (detaching) detach_dev(h32);
    			if (detaching) detach_dev(t12);
    			if (detaching) detach_dev(p2);
    			if (detaching) detach_dev(t14);
    			destroy_component(mdbtable3, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3$1.name,
    		type: "slot",
    		source: "(18:6) <MDBCardBody>",
    		ctx
    	});

    	return block;
    }

    // (14:4) <MDBCard class="mt-5">
    function create_default_slot_2$1(ctx) {
    	let mdbview;
    	let t;
    	let mdbcardbody;
    	let current;

    	mdbview = new MDBView({
    			props: {
    				class: "gradient-card-header blue darken-2",
    				$$slots: { default: [create_default_slot_16] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbcardbody = new MDBCardBody({
    			props: {
    				$$slots: { default: [create_default_slot_3$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbview.$$.fragment);
    			t = space();
    			create_component(mdbcardbody.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbview, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(mdbcardbody, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbview_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbview_changes.$$scope = { dirty, ctx };
    			}

    			mdbview.$set(mdbview_changes);
    			const mdbcardbody_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbcardbody_changes.$$scope = { dirty, ctx };
    			}

    			mdbcardbody.$set(mdbcardbody_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbview.$$.fragment, local);
    			transition_in(mdbcardbody.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbview.$$.fragment, local);
    			transition_out(mdbcardbody.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbview, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(mdbcardbody, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2$1.name,
    		type: "slot",
    		source: "(14:4) <MDBCard class=\\\"mt-5\\\">",
    		ctx
    	});

    	return block;
    }

    // (13:2) <MDBCol md="12">
    function create_default_slot_1$1(ctx) {
    	let mdbcard;
    	let current;

    	mdbcard = new MDBCard({
    			props: {
    				class: "mt-5",
    				$$slots: { default: [create_default_slot_2$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbcard.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbcard, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbcard_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbcard_changes.$$scope = { dirty, ctx };
    			}

    			mdbcard.$set(mdbcard_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbcard.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbcard.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbcard, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1$1.name,
    		type: "slot",
    		source: "(13:2) <MDBCol md=\\\"12\\\">",
    		ctx
    	});

    	return block;
    }

    // (12:0) <MDBRow>
    function create_default_slot$1(ctx) {
    	let mdbcol;
    	let current;

    	mdbcol = new MDBCol({
    			props: {
    				md: "12",
    				$$slots: { default: [create_default_slot_1$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbcol.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbcol, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbcol_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbcol_changes.$$scope = { dirty, ctx };
    			}

    			mdbcol.$set(mdbcol_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbcol.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbcol.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbcol, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot$1.name,
    		type: "slot",
    		source: "(12:0) <MDBRow>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$3(ctx) {
    	let mdbrow;
    	let current;

    	mdbrow = new MDBRow({
    			props: {
    				$$slots: { default: [create_default_slot$1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbrow.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbrow, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const mdbrow_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbrow_changes.$$scope = { dirty, ctx };
    			}

    			mdbrow.$set(mdbrow_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbrow.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbrow.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbrow, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$3.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$3($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Tables', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Tables> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		MDBCard,
    		MDBCardBody,
    		MDBRow,
    		MDBCol,
    		MDBTable,
    		MDBTableHead,
    		MDBTableBody,
    		MDBView
    	});

    	return [];
    }

    class Tables extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$3, create_fragment$3, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Tables",
    			options,
    			id: create_fragment$3.name
    		});
    	}
    }

    /* src\components\pages\forms.svelte generated by Svelte v3.59.2 */
    const file$2 = "src\\components\\pages\\forms.svelte";

    // (15:8) <MDBRow class="d-flex justify-content-center">
    function create_default_slot_11(ctx) {
    	let h3;

    	const block = {
    		c: function create() {
    			h3 = element("h3");
    			h3.textContent = "5C00 DASHBOARD";
    			attr_dev(h3, "class", "white-text mb-3 pt-3 font-weight-bold");
    			add_location(h3, file$2, 15, 10, 570);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, h3, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(h3);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_11.name,
    		type: "slot",
    		source: "(15:8) <MDBRow class=\\\"d-flex justify-content-center\\\">",
    		ctx
    	});

    	return block;
    }

    // (48:14) <MDBBtn color="grey" rounded type="button" class="z-depth-1a">
    function create_default_slot_10(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Log in");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_10.name,
    		type: "slot",
    		source: "(48:14) <MDBBtn color=\\\"grey\\\" rounded type=\\\"button\\\" class=\\\"z-depth-1a\\\">",
    		ctx
    	});

    	return block;
    }

    // (46:10) <MDBCol md="5" class="d-flex align-items-start">
    function create_default_slot_9(ctx) {
    	let div;
    	let mdbbtn;
    	let current;

    	mdbbtn = new MDBBtn({
    			props: {
    				color: "grey",
    				rounded: true,
    				type: "button",
    				class: "z-depth-1a",
    				$$slots: { default: [create_default_slot_10] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(mdbbtn.$$.fragment);
    			attr_dev(div, "class", "text-center");
    			add_location(div, file$2, 46, 12, 1799);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(mdbbtn, div, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbbtn_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbbtn_changes.$$scope = { dirty, ctx };
    			}

    			mdbbtn.$set(mdbbtn_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbbtn.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbbtn.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(mdbbtn);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_9.name,
    		type: "slot",
    		source: "(46:10) <MDBCol md=\\\"5\\\" class=\\\"d-flex align-items-start\\\">",
    		ctx
    	});

    	return block;
    }

    // (53:10) <MDBCol md="7" class="d-flex justify-content-end">
    function create_default_slot_8(ctx) {
    	let p;
    	let t0;
    	let a;

    	const block = {
    		c: function create() {
    			p = element("p");
    			t0 = text("Don't have an account?\r\n              ");
    			a = element("a");
    			a.textContent = "Sign up";
    			attr_dev(a, "href", "#!");
    			attr_dev(a, "class", "dark-grey-text ml-1 font-weight-bold");
    			add_location(a, file$2, 55, 14, 2159);
    			attr_dev(p, "class", "font-small grey-text mt-3");
    			add_location(p, file$2, 53, 12, 2068);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, t0);
    			append_dev(p, a);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_8.name,
    		type: "slot",
    		source: "(53:10) <MDBCol md=\\\"7\\\" class=\\\"d-flex justify-content-end\\\">",
    		ctx
    	});

    	return block;
    }

    // (45:8) <MDBRow class="d-flex align-items-center mb-4 mt-5">
    function create_default_slot_7(ctx) {
    	let mdbcol0;
    	let t;
    	let mdbcol1;
    	let current;

    	mdbcol0 = new MDBCol({
    			props: {
    				md: "5",
    				class: "d-flex align-items-start",
    				$$slots: { default: [create_default_slot_9] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbcol1 = new MDBCol({
    			props: {
    				md: "7",
    				class: "d-flex justify-content-end",
    				$$slots: { default: [create_default_slot_8] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbcol0.$$.fragment);
    			t = space();
    			create_component(mdbcol1.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbcol0, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(mdbcol1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbcol0_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbcol0_changes.$$scope = { dirty, ctx };
    			}

    			mdbcol0.$set(mdbcol0_changes);
    			const mdbcol1_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbcol1_changes.$$scope = { dirty, ctx };
    			}

    			mdbcol1.$set(mdbcol1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbcol0.$$.fragment, local);
    			transition_in(mdbcol1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbcol0.$$.fragment, local);
    			transition_out(mdbcol1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbcol0, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(mdbcol1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_7.name,
    		type: "slot",
    		source: "(45:8) <MDBRow class=\\\"d-flex align-items-center mb-4 mt-5\\\">",
    		ctx
    	});

    	return block;
    }

    // (30:6) <MDBCardBody class="mx-4 mt-4">
    function create_default_slot_6(ctx) {
    	let mdbinput0;
    	let t0;
    	let mdbinput1;
    	let t1;
    	let p;
    	let t2;
    	let a;
    	let t4;
    	let mdbrow;
    	let current;

    	mdbinput0 = new MDBInput({
    			props: {
    				label: "Your email",
    				group: true,
    				type: "text",
    				validate: true
    			},
    			$$inline: true
    		});

    	mdbinput1 = new MDBInput({
    			props: {
    				label: "Your password",
    				group: true,
    				type: "password",
    				validate: true,
    				containerClass: "mb-0"
    			},
    			$$inline: true
    		});

    	mdbrow = new MDBRow({
    			props: {
    				class: "d-flex align-items-center mb-4 mt-5",
    				$$slots: { default: [create_default_slot_7] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbinput0.$$.fragment);
    			t0 = space();
    			create_component(mdbinput1.$$.fragment);
    			t1 = space();
    			p = element("p");
    			t2 = text("Forgot\r\n          ");
    			a = element("a");
    			a.textContent = "Password?";
    			t4 = space();
    			create_component(mdbrow.$$.fragment);
    			attr_dev(a, "href", "#!");
    			attr_dev(a, "class", "dark-grey-text ml-1 font-weight-bold");
    			add_location(a, file$2, 40, 10, 1552);
    			attr_dev(p, "class", "font-small grey-text d-flex justify-content-end");
    			add_location(p, file$2, 38, 8, 1463);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbinput0, target, anchor);
    			insert_dev(target, t0, anchor);
    			mount_component(mdbinput1, target, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, p, anchor);
    			append_dev(p, t2);
    			append_dev(p, a);
    			insert_dev(target, t4, anchor);
    			mount_component(mdbrow, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbrow_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbrow_changes.$$scope = { dirty, ctx };
    			}

    			mdbrow.$set(mdbrow_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbinput0.$$.fragment, local);
    			transition_in(mdbinput1.$$.fragment, local);
    			transition_in(mdbrow.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbinput0.$$.fragment, local);
    			transition_out(mdbinput1.$$.fragment, local);
    			transition_out(mdbrow.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbinput0, detaching);
    			if (detaching) detach_dev(t0);
    			destroy_component(mdbinput1, detaching);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(p);
    			if (detaching) detach_dev(t4);
    			destroy_component(mdbrow, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_6.name,
    		type: "slot",
    		source: "(30:6) <MDBCardBody class=\\\"mx-4 mt-4\\\">",
    		ctx
    	});

    	return block;
    }

    // (13:4) <MDBCard>
    function create_default_slot_5(ctx) {
    	let div;
    	let mdbrow;
    	let t;
    	let mdbcardbody;
    	let current;

    	mdbrow = new MDBRow({
    			props: {
    				class: "d-flex justify-content-center",
    				$$slots: { default: [create_default_slot_11] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbcardbody = new MDBCardBody({
    			props: {
    				class: "mx-4 mt-4",
    				$$slots: { default: [create_default_slot_6] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(mdbrow.$$.fragment);
    			t = space();
    			create_component(mdbcardbody.$$.fragment);
    			attr_dev(div, "class", "header pt-3 peach-gradient");
    			add_location(div, file$2, 13, 6, 462);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(mdbrow, div, null);
    			insert_dev(target, t, anchor);
    			mount_component(mdbcardbody, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbrow_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbrow_changes.$$scope = { dirty, ctx };
    			}

    			mdbrow.$set(mdbrow_changes);
    			const mdbcardbody_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbcardbody_changes.$$scope = { dirty, ctx };
    			}

    			mdbcardbody.$set(mdbcardbody_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbrow.$$.fragment, local);
    			transition_in(mdbcardbody.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbrow.$$.fragment, local);
    			transition_out(mdbcardbody.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(mdbrow);
    			if (detaching) detach_dev(t);
    			destroy_component(mdbcardbody, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_5.name,
    		type: "slot",
    		source: "(13:4) <MDBCard>",
    		ctx
    	});

    	return block;
    }

    // (12:2) <MDBCol md="6">
    function create_default_slot_4(ctx) {
    	let mdbcard;
    	let current;

    	mdbcard = new MDBCard({
    			props: {
    				$$slots: { default: [create_default_slot_5] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbcard.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbcard, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbcard_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbcard_changes.$$scope = { dirty, ctx };
    			}

    			mdbcard.$set(mdbcard_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbcard.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbcard.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbcard, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_4.name,
    		type: "slot",
    		source: "(12:2) <MDBCol md=\\\"6\\\">",
    		ctx
    	});

    	return block;
    }

    // (105:8) <MDBBtn color="primary">
    function create_default_slot_3(ctx) {
    	let t;

    	const block = {
    		c: function create() {
    			t = text("Register");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_3.name,
    		type: "slot",
    		source: "(105:8) <MDBBtn color=\\\"primary\\\">",
    		ctx
    	});

    	return block;
    }

    // (66:4) <MDBCard class="p-5">
    function create_default_slot_2(ctx) {
    	let p;
    	let t1;
    	let div0;
    	let mdbinput0;
    	let t2;
    	let mdbinput1;
    	let t3;
    	let mdbinput2;
    	let t4;
    	let mdbinput3;
    	let t5;
    	let div1;
    	let mdbbtn;
    	let current;

    	mdbinput0 = new MDBInput({
    			props: {
    				label: "Your name",
    				icon: "user",
    				group: true,
    				type: "text",
    				validate: true,
    				error: "wrong",
    				success: "right"
    			},
    			$$inline: true
    		});

    	mdbinput1 = new MDBInput({
    			props: {
    				label: "Your email",
    				icon: "envelope",
    				group: true,
    				type: "email",
    				validate: true,
    				error: "wrong",
    				success: "right"
    			},
    			$$inline: true
    		});

    	mdbinput2 = new MDBInput({
    			props: {
    				label: "Confirm your email",
    				icon: "exclamation-triangle",
    				group: true,
    				type: "text",
    				validate: true,
    				error: "wrong",
    				success: "right"
    			},
    			$$inline: true
    		});

    	mdbinput3 = new MDBInput({
    			props: {
    				label: "Your password",
    				icon: "lock",
    				group: true,
    				type: "password",
    				validate: true
    			},
    			$$inline: true
    		});

    	mdbbtn = new MDBBtn({
    			props: {
    				color: "primary",
    				$$slots: { default: [create_default_slot_3] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			p = element("p");
    			p.textContent = "SIGN UP";
    			t1 = space();
    			div0 = element("div");
    			create_component(mdbinput0.$$.fragment);
    			t2 = space();
    			create_component(mdbinput1.$$.fragment);
    			t3 = space();
    			create_component(mdbinput2.$$.fragment);
    			t4 = space();
    			create_component(mdbinput3.$$.fragment);
    			t5 = space();
    			div1 = element("div");
    			create_component(mdbbtn.$$.fragment);
    			attr_dev(p, "class", "h1 text-center mb-4");
    			add_location(p, file$2, 66, 6, 2425);
    			attr_dev(div0, "class", "grey-text");
    			add_location(div0, file$2, 67, 6, 2475);
    			attr_dev(div1, "class", "text-center");
    			add_location(div1, file$2, 103, 6, 3287);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, div0, anchor);
    			mount_component(mdbinput0, div0, null);
    			append_dev(div0, t2);
    			mount_component(mdbinput1, div0, null);
    			append_dev(div0, t3);
    			mount_component(mdbinput2, div0, null);
    			append_dev(div0, t4);
    			mount_component(mdbinput3, div0, null);
    			insert_dev(target, t5, anchor);
    			insert_dev(target, div1, anchor);
    			mount_component(mdbbtn, div1, null);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbbtn_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbbtn_changes.$$scope = { dirty, ctx };
    			}

    			mdbbtn.$set(mdbbtn_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbinput0.$$.fragment, local);
    			transition_in(mdbinput1.$$.fragment, local);
    			transition_in(mdbinput2.$$.fragment, local);
    			transition_in(mdbinput3.$$.fragment, local);
    			transition_in(mdbbtn.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbinput0.$$.fragment, local);
    			transition_out(mdbinput1.$$.fragment, local);
    			transition_out(mdbinput2.$$.fragment, local);
    			transition_out(mdbinput3.$$.fragment, local);
    			transition_out(mdbbtn.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(div0);
    			destroy_component(mdbinput0);
    			destroy_component(mdbinput1);
    			destroy_component(mdbinput2);
    			destroy_component(mdbinput3);
    			if (detaching) detach_dev(t5);
    			if (detaching) detach_dev(div1);
    			destroy_component(mdbbtn);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_2.name,
    		type: "slot",
    		source: "(66:4) <MDBCard class=\\\"p-5\\\">",
    		ctx
    	});

    	return block;
    }

    // (65:2) <MDBCol md="6">
    function create_default_slot_1(ctx) {
    	let mdbcard;
    	let current;

    	mdbcard = new MDBCard({
    			props: {
    				class: "p-5",
    				$$slots: { default: [create_default_slot_2] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbcard.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbcard, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbcard_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbcard_changes.$$scope = { dirty, ctx };
    			}

    			mdbcard.$set(mdbcard_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbcard.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbcard.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbcard, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot_1.name,
    		type: "slot",
    		source: "(65:2) <MDBCol md=\\\"6\\\">",
    		ctx
    	});

    	return block;
    }

    // (11:0) <MDBRow>
    function create_default_slot(ctx) {
    	let mdbcol0;
    	let t;
    	let mdbcol1;
    	let current;

    	mdbcol0 = new MDBCol({
    			props: {
    				md: "6",
    				$$slots: { default: [create_default_slot_4] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	mdbcol1 = new MDBCol({
    			props: {
    				md: "6",
    				$$slots: { default: [create_default_slot_1] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbcol0.$$.fragment);
    			t = space();
    			create_component(mdbcol1.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbcol0, target, anchor);
    			insert_dev(target, t, anchor);
    			mount_component(mdbcol1, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const mdbcol0_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbcol0_changes.$$scope = { dirty, ctx };
    			}

    			mdbcol0.$set(mdbcol0_changes);
    			const mdbcol1_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbcol1_changes.$$scope = { dirty, ctx };
    			}

    			mdbcol1.$set(mdbcol1_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbcol0.$$.fragment, local);
    			transition_in(mdbcol1.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbcol0.$$.fragment, local);
    			transition_out(mdbcol1.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbcol0, detaching);
    			if (detaching) detach_dev(t);
    			destroy_component(mdbcol1, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_default_slot.name,
    		type: "slot",
    		source: "(11:0) <MDBRow>",
    		ctx
    	});

    	return block;
    }

    function create_fragment$2(ctx) {
    	let mdbrow;
    	let current;

    	mdbrow = new MDBRow({
    			props: {
    				$$slots: { default: [create_default_slot] },
    				$$scope: { ctx }
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(mdbrow.$$.fragment);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			mount_component(mdbrow, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const mdbrow_changes = {};

    			if (dirty & /*$$scope*/ 1) {
    				mdbrow_changes.$$scope = { dirty, ctx };
    			}

    			mdbrow.$set(mdbrow_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(mdbrow.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(mdbrow.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(mdbrow, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$2.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$2($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Forms', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Forms> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		MDBCard,
    		MDBCardBody,
    		MDBRow,
    		MDBCol,
    		MDBIcon,
    		MDBInput,
    		MDBBtn
    	});

    	return [];
    }

    class Forms extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$2, create_fragment$2, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Forms",
    			options,
    			id: create_fragment$2.name
    		});
    	}
    }

    /* src\components\pages\_404.svelte generated by Svelte v3.59.2 */

    const file$1 = "src\\components\\pages\\_404.svelte";

    function create_fragment$1(ctx) {
    	let div3;
    	let svg;
    	let g;
    	let path0;
    	let path1;
    	let path2;
    	let path3;
    	let path4;
    	let t0;
    	let div2;
    	let h1;
    	let t2;
    	let p;
    	let t4;
    	let div1;
    	let div0;
    	let a0;
    	let t6;
    	let a1;

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			svg = svg_element("svg");
    			g = svg_element("g");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			path2 = svg_element("path");
    			path3 = svg_element("path");
    			path4 = svg_element("path");
    			t0 = space();
    			div2 = element("div");
    			h1 = element("h1");
    			h1.textContent = "404";
    			t2 = space();
    			p = element("p");
    			p.textContent = "Page not found";
    			t4 = space();
    			div1 = element("div");
    			div0 = element("div");
    			a0 = element("a");
    			a0.textContent = "Go Back";
    			t6 = space();
    			a1 = element("a");
    			a1.textContent = "Go to Home Page";
    			attr_dev(path0, "d", "M353,9 L626.664028,170 L626.664028,487 L353,642 L79.3359724,487 L79.3359724,170 L353,9 Z");
    			attr_dev(path0, "id", "Polygon-1");
    			attr_dev(path0, "stroke", "#007FB2");
    			attr_dev(path0, "stroke-width", "6");
    			attr_dev(path0, "sketch:type", "MSShapeGroup");
    			attr_dev(path0, "class", "svelte-1hqcltr");
    			add_location(path0, file$1, 18, 6, 426);
    			attr_dev(path1, "d", "M78.5,529 L147,569.186414 L147,648.311216 L78.5,687 L10,648.311216 L10,569.186414 L78.5,529 Z");
    			attr_dev(path1, "id", "Polygon-2");
    			attr_dev(path1, "stroke", "#EF4A5B");
    			attr_dev(path1, "stroke-width", "6");
    			attr_dev(path1, "sketch:type", "MSShapeGroup");
    			attr_dev(path1, "class", "svelte-1hqcltr");
    			add_location(path1, file$1, 25, 6, 663);
    			attr_dev(path2, "d", "M773,186 L827,217.538705 L827,279.636651 L773,310 L719,279.636651 L719,217.538705 L773,186 Z");
    			attr_dev(path2, "id", "Polygon-3");
    			attr_dev(path2, "stroke", "#795D9C");
    			attr_dev(path2, "stroke-width", "6");
    			attr_dev(path2, "sketch:type", "MSShapeGroup");
    			attr_dev(path2, "class", "svelte-1hqcltr");
    			add_location(path2, file$1, 32, 6, 905);
    			attr_dev(path3, "d", "M639,529 L773,607.846761 L773,763.091627 L639,839 L505,763.091627 L505,607.846761 L639,529 Z");
    			attr_dev(path3, "id", "Polygon-4");
    			attr_dev(path3, "stroke", "#F2773F");
    			attr_dev(path3, "stroke-width", "6");
    			attr_dev(path3, "sketch:type", "MSShapeGroup");
    			attr_dev(path3, "class", "svelte-1hqcltr");
    			add_location(path3, file$1, 39, 6, 1146);
    			attr_dev(path4, "d", "M281,801 L383,861.025276 L383,979.21169 L281,1037 L179,979.21169 L179,861.025276 L281,801 Z");
    			attr_dev(path4, "id", "Polygon-5");
    			attr_dev(path4, "stroke", "#36B455");
    			attr_dev(path4, "stroke-width", "6");
    			attr_dev(path4, "sketch:type", "MSShapeGroup");
    			attr_dev(path4, "class", "svelte-1hqcltr");
    			add_location(path4, file$1, 46, 6, 1387);
    			attr_dev(g, "id", "Page-1");
    			attr_dev(g, "stroke", "none");
    			attr_dev(g, "stroke-width", "1");
    			attr_dev(g, "fill", "none");
    			attr_dev(g, "fill-rule", "evenodd");
    			attr_dev(g, "sketch:type", "MSPage");
    			add_location(g, file$1, 10, 4, 271);
    			attr_dev(svg, "width", "380px");
    			attr_dev(svg, "height", "500px");
    			attr_dev(svg, "viewBox", "0 0 837 1045");
    			attr_dev(svg, "version", "1.1");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "xmlns:xlink", "http://www.w3.org/1999/xlink");
    			attr_dev(svg, "xmlns:sketch", "http://www.bohemiancoding.com/sketch/ns");
    			attr_dev(svg, "class", "svelte-1hqcltr");
    			add_location(svg, file$1, 1, 2, 22);
    			attr_dev(h1, "class", "svelte-1hqcltr");
    			add_location(h1, file$1, 56, 4, 1674);
    			add_location(p, file$1, 57, 4, 1692);
    			attr_dev(a0, "href", "");
    			attr_dev(a0, "class", "link-button link-back-button svelte-1hqcltr");
    			add_location(a0, file$1, 60, 8, 1792);
    			attr_dev(a1, "href", "");
    			attr_dev(a1, "class", "link-button svelte-1hqcltr");
    			add_location(a1, file$1, 61, 8, 1858);
    			attr_dev(div0, "class", "action-link-wrap svelte-1hqcltr");
    			add_location(div0, file$1, 59, 6, 1752);
    			attr_dev(div1, "class", "buttons-con svelte-1hqcltr");
    			add_location(div1, file$1, 58, 4, 1719);
    			attr_dev(div2, "class", "message-box svelte-1hqcltr");
    			add_location(div2, file$1, 55, 2, 1643);
    			attr_dev(div3, "class", "body svelte-1hqcltr");
    			add_location(div3, file$1, 0, 0, 0);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			append_dev(div3, svg);
    			append_dev(svg, g);
    			append_dev(g, path0);
    			append_dev(g, path1);
    			append_dev(g, path2);
    			append_dev(g, path3);
    			append_dev(g, path4);
    			append_dev(div3, t0);
    			append_dev(div3, div2);
    			append_dev(div2, h1);
    			append_dev(div2, t2);
    			append_dev(div2, p);
    			append_dev(div2, t4);
    			append_dev(div2, div1);
    			append_dev(div1, div0);
    			append_dev(div0, a0);
    			append_dev(div0, t6);
    			append_dev(div0, a1);
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1($$self, $$props) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('_404', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<_404> was created with unknown prop '${key}'`);
    	});

    	return [];
    }

    class _404 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "_404",
    			options,
    			id: create_fragment$1.name
    		});
    	}
    }

    function userIsAdmin() {
      return true;
    }

    const routes = [
      {
        name: '/',
        component: Login
      },
      {
        name: 'home',
        component: Dashboard,
        layout: Layout,
        onlyIf: {
          guard: userIsAdmin,
          redirect: '/'
        }
      },
      {
        name: 'forms',
        component: Forms,
        layout: Layout
      },
      {
        name: 'table',
        component: Tables,
        layout: Layout
      },
      {
        name: 'profile',
        component: Profile,
        layout: Layout
      },
      {
        name: '404',
        path: '404',
        component: _404
      }
    ];

    /* src\App.svelte generated by Svelte v3.59.2 */
    const file = "src\\App.svelte";

    function create_fragment(ctx) {
    	let div;
    	let router;
    	let current;
    	router = new Router({ props: { routes }, $$inline: true });

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(router.$$.fragment);
    			attr_dev(div, "class", "flexible-content");
    			add_location(div, file, 5, 0, 104);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(router, div, null);
    			current = true;
    		},
    		p: noop,
    		i: function intro(local) {
    			if (current) return;
    			transition_in(router.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(router.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(router);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('App', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<App> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ Router, routes });
    	return [];
    }

    class App extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance, create_fragment, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "App",
    			options,
    			id: create_fragment.name
    		});
    	}
    }

    const app = new App({
      target: document.body
    });

    return app;

}());
//# sourceMappingURL=bundle.js.map
